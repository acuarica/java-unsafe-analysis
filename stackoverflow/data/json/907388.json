{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":907388,
    "title":"Initializing an object with references without accessing a non-default constructor",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":715433,
        "postId":907388,
        "creationDate":"2009-05-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":4725,
          "displayName":"Tom Hawtin - tackline",
          "reputation":89549
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I would start by having a think about whether that XML file really is what you want to do."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[907388-cu715433]-[494968881]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I would start by having a think about whether that XML file really is what you want to do."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "xml":1,
                      "file":1,
                      "start":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":715722,
        "postId":907388,
        "creationDate":"2009-05-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":60982,
          "displayName":"neo",
          "reputation":743
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Hm, somehow I need to find out what Controller-classes I have. But you could be right though, I tried to create a kind of module-system and I'm still a learning student, so could be not too presentable to the world :P"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[907388-cu715722]-[-2016653795]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Hm, somehow I need to find out what Controller-classes I have. But you could be right though, I tried to create a kind of module-system and I'm still a learning student, so could be not too presentable to the world :P"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "learn":1,
                      "student":1,
                      "system":1,
                      "world":1,
                      "present":1,
                      "modul":1,
                      "class":1,
                      "control":1,
                      "kind":1,
                      "creat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "interface",
      "constructor",
      "initialization"
    ],
    "creationDate":"2009-05-25",
    "lastActivityDate":"2009-05-25",
    "score":0,
    "viewCount":831,
    "owner":{
      "type":"StackOverflowUser",
      "id":60982,
      "displayName":"neo",
      "reputation":743
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Let's suppose I have an interface named &quot;Controller&quot;. Several classes implement this interface and I don't know these classes (e.g. the class names are located in an xml-file). Now for this Controller-implementing classes to work they have to get some references to other objects (maybe data objects). And this is my question, namely what is the best way to initialize such objects (the Controller ones)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[1895248078]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Let's suppose I have an interface named &quot;Controller&quot;. Several classes implement this interface and I don't know these classes (e.g. the class names are located in an xml-file). Now for this Controller-implementing classes to work they have to get some references to other objects (maybe data objects). And this is my question, namely what is the best way to initialize such objects (the Controller ones)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"names",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "name":2,
                  "data":1,
                  "work":1,
                  "object":3,
                  "xml":1,
                  "refer":1,
                  "implement":2,
                  "class":3,
                  "file":1,
                  "quot":2,
                  "control":3,
                  "initi":1,
                  "suppos":1,
                  "locat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I thought of several solutions but I'm not really sure what's the best approach here.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[192852994]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I thought of several solutions but I'm not really sure what's the best approach here.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "approach":1,
                  "thought":1,
                  "solut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>First</strong>: When instantiating the object from the class name I could search for the &quot;special&quot; constructor (via reflection) which has the object references that the Controller-object needs. But from what I read in other questions this is less likely a good solution because I would force a special constructor to exist in the class. And sometimes I read that reflection in general is evil and is better avoided.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[1310793245]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>First</strong>: When instantiating the object from the class name I could search for the &quot;special&quot; constructor (via reflection) which has the object references that the Controller-object needs. But from what I read in other questions this is less likely a good solution because I would force a special constructor to exist in the class. And sometimes I read that reflection in general is evil and is better avoided.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"name",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":2,
                  "question":1,
                  "instanti":1,
                  "exist":1,
                  "good":1,
                  "constructor":2,
                  "strong":2,
                  "avoid":1,
                  "object":3,
                  "general":1,
                  "refer":1,
                  "quot":2,
                  "control":1,
                  "special":2,
                  "forc":1,
                  "evil":1,
                  "reflect":2,
                  "solut":1,
                  "search":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Second</strong>: I add a special init(a,b,c)-method to the Controller-interface which would need to be called directly after the object was created. This would force a sequence of calls (first init(..), then rest) to the object to make it working which is likely bad too. Btw, are init()-methods generelly a bad thing in interfaces?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[228332054]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Second</strong>: I add a special init(a,b,c)-method to the Controller-interface which would need to be called directly after the object was created. This would force a sequence of calls (first init(..), then rest) to the object to make it working which is likely bad too. Btw, are init()-methods generelly a bad thing in interfaces?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "generelli":1,
                  "method":2,
                  "btw":1,
                  "rest":1,
                  "bad":2,
                  "thing":1,
                  "interfac":1,
                  "strong":2,
                  "work":1,
                  "object":2,
                  "direct":1,
                  "sequenc":1,
                  "make":1,
                  "control":1,
                  "special":1,
                  "forc":1,
                  "creat":1,
                  "call":2,
                  "add":1,
                  "init":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Third</strong>: After reading <a href=\"http://stackoverflow.com/questions/26903/how-can-you-require-a-constructor-with-no-parameters-for-types-implementing-an-in/26928#26928\">this</a> comment I thought about the following: Instead of having the class name of the class implementing the Controller-interface (in the xml file) I have the class name of a factory which belongs to the concrete Controller-class. And this factory would implement an interface with the method createController(a,b,c) and the factory then would know which class it would have to instantiate and also which constructor to call to carry over the other references (like data objects). Drawback of this would be the additional class just to instantiate the Controller-class and maybe a little overhead in general.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[537648765]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Third</strong>: After reading <a href=\"http://stackoverflow.com/questions/26903/how-can-you-require-a-constructor-with-no-parameters-for-types-implementing-an-in/26928#26928\">this</a> comment I thought about the following: Instead of having the class name of the class implementing the Controller-interface (in the xml file) I have the class name of a factory which belongs to the concrete Controller-class. And this factory would implement an interface with the method createController(a,b,c) and the factory then would know which class it would have to instantiate and also which constructor to call to carry over the other references (like data objects). Drawback of this would be the additional class just to instantiate the Controller-class and maybe a little overhead in general.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"name",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"implementing",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"name",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"createController",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"it",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"just",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"and",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "question":1,
                  "method":1,
                  "instanti":2,
                  "thought":1,
                  "addit":1,
                  "concret":1,
                  "carri":1,
                  "requir":1,
                  "data":1,
                  "constructor":2,
                  "strong":2,
                  "belong":1,
                  "factori":3,
                  "object":1,
                  "drawback":1,
                  "overhead":1,
                  "stackoverflow":1,
                  "paramet":1,
                  "general":1,
                  "xml":1,
                  "comment":1,
                  "refer":1,
                  "implement":3,
                  "file":1,
                  "control":4,
                  "type":1,
                  "href":1,
                  "http":1,
                  "creat":1,
                  "call":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What do you think is the best way of doing this? Or can you think of something else which might be better than these three ways?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[-325317222]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What do you think is the best way of doing this? Or can you think of something else which might be better than these three ways?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "way":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks!</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[907388]-[-230082161]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks!</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":907698,
      "questionId":907388,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":715707,
          "postId":907698,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":60982,
            "displayName":"neo",
            "reputation":743
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Hm seems a bit hacky, with that I would need to force certain field names or put these in the xml too."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907698-cu715707]-[1208694503]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Hm seems a bit hacky, with that I would need to force certain field names or put these in the xml too."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "name":1,
                        "bit":1,
                        "field":1,
                        "xml":1,
                        "put":1,
                        "hacki":1,
                        "forc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-05-25",
      "lastActivityDate":"2009-05-25",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Another option could be to use the Unsafe.allocateInstance(Class) to create an instances without calling a constructor. You can set the fields using reflections.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[907698]-[1403359611]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Another option could be to use the Unsafe.allocateInstance(Class) to create an instances without calling a constructor. You can set the fields using reflections.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "field":1,
                    "set":1,
                    "option":1,
                    "constructor":1,
                    "unsaf":1,
                    "creat":1,
                    "call":1,
                    "reflect":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This assumes that your constructors don't have any side effects.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[907698]-[1002960092]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This assumes that your constructors don't have any side effects.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "effect":1,
                    "side":1,
                    "constructor":1,
                    "assum":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":907415,
      "questionId":907388,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":715432,
          "postId":907415,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 one for Guice-type things. Second option is two phase construction. Did you meant the third option?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907415-cu715432]-[482187166]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 one for Guice-type things. Second option is two phase construction. Did you meant the third option?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "phase":1,
                        "option":2,
                        "thing":1,
                        "meant":1,
                        "guic":1,
                        "type":1,
                        "construct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":715691,
          "postId":907415,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":60982,
            "displayName":"neo",
            "reputation":743
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks! I already looked a bit into Guice some time ago but I haven't really realised until now that it is what I'm already doing - just manually. The problem is that this is for an already grown university project. I would love to use it but I think this would not be easily possible atm. I think I will stick to the factory solution."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907415-cu715691]-[-1139225127]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks! I already looked a bit into Guice some time ago but I haven't really realised until now that it is what I'm already doing - just manually. The problem is that this is for an already grown university project. I would love to use it but I think this would not be easily possible atm. I think I will stick to the factory solution."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bit":1,
                        "project":1,
                        "problem":1,
                        "stick":1,
                        "look":1,
                        "factori":1,
                        "univers":1,
                        "easili":1,
                        "realis":1,
                        "guic":1,
                        "love":1,
                        "ago":1,
                        "grown":1,
                        "time":1,
                        "manual":1,
                        "solut":1,
                        "atm":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":1459444,
          "postId":907415,
          "creationDate":"2009-10-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":60982,
            "displayName":"neo",
            "reputation":743
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Just a little note - I use Guice in a new project and I love it. So thanks for recommendation!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907415-cu1459444]-[1069314999]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Just a little note - I use Guice in a new project and I love it. So thanks for recommendation!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "recommend":1,
                        "project":1,
                        "guic":1,
                        "note":1,
                        "love":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":1463087,
          "postId":907415,
          "creationDate":"2009-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":95810,
            "displayName":"Alex Martelli",
            "reputation":375389
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@neo, you're welcome -- I'm no Java expert, but it does seem to me that my colleagues who developed Guice did a good job!-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907415-cu1463087]-[748255834]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@neo, you're welcome -- I'm no Java expert, but it does seem to me that my colleagues who developed Guice did a good job!-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "neo":1,
                        "good":1,
                        "job":1,
                        "expert":1,
                        "colleagu":1,
                        "guic":1,
                        "develop":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-05-25",
      "lastActivityDate":"2009-05-25",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":95810,
        "displayName":"Alex Martelli",
        "reputation":375389
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Of the approaches you mention, I'd pick the second (factory-based one). However, since what you're doing <em>is</em> a form of dependency injection, also consider Guice, <a href=\"http://code.google.com/p/google-guice/\"rel=\"nofollow\">http://code.google.com/p/google-guice/</a> -- it may enable you to automate much of this work.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[907415]-[1932674680]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Of the approaches you mention, I'd pick the second (factory-based one). However, since what you're doing <em>is</em> a form of dependency injection, also consider Guice, <a href=\"http://code.google.com/p/google-guice/\"rel=\"nofollow\">http://code.google.com/p/google-guice/</a> -- it may enable you to automate much of this work.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "autom":1,
                    "googl":4,
                    "depend":1,
                    "rel":1,
                    "work":1,
                    "factori":1,
                    "base":1,
                    "code":2,
                    "mention":1,
                    "guic":3,
                    "nofollow":1,
                    "pick":1,
                    "inject":1,
                    "enabl":1,
                    "approach":1,
                    "form":1,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":907477,
      "questionId":907388,
      "comments":[
        
      ],
      "creationDate":"2009-05-25",
      "lastActivityDate":"2009-05-25",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":14768,
        "displayName":"Joshua",
        "reputation":13902
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In something similar in another language, I've been known to use the init() solution.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[907477]-[-447217314]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In something similar in another language, I've been known to use the init() solution.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "init":1,
                    "similar":1,
                    "solut":1,
                    "languag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":907509,
      "questionId":907388,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":715363,
          "postId":907509,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":41619,
            "displayName":"Adam Paynter",
            "reputation":24125
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 for Spring. Some examples of Spring configurations: http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#beans-some-examples"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907509-cu715363]-[-1374503856]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 for Spring. Some examples of Spring configurations: http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#beans-some-examples"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "exampl":2,
                        "spring":3,
                        "configur":1,
                        "springframework":1,
                        "doc":1,
                        "bean":2,
                        "refer":1,
                        "org":1,
                        "html":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":715416,
          "postId":907509,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":82804,
            "displayName":"David Rabinowitz",
            "reputation":15764
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 For Spring. It seems you are trying to write a dependency injection of your own. There are many (Spring, Guice, Seam, just to name a few) so this is quite redundant."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907509-cu715416]-[-1138420513]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 For Spring. It seems you are trying to write a dependency injection of your own. There are many (Spring, Guice, Seam, just to name a few) so this is quite redundant."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "depend":1,
                        "redund":1,
                        "spring":2,
                        "guic":1,
                        "seam":1,
                        "inject":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":715704,
          "postId":907509,
          "creationDate":"2009-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":60982,
            "displayName":"neo",
            "reputation":743
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Looks also quite interesting, I will definitely use such a framework the next time, but for now it would be too much work to integrate one of these like I explained in the comment regarding Guice."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[907509-cu715704]-[1526049899]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Looks also quite interesting, I will definitely use such a framework the next time, but for now it would be too much work to integrate one of these like I explained in the comment regarding Guice."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explain":1,
                        "integr":1,
                        "framework":1,
                        "work":1,
                        "guic":1,
                        "interest":1,
                        "comment":1,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-05-25",
      "lastActivityDate":"2009-05-25",
      "lastEditDate":"2009-05-25",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":101672,
        "displayName":"svachon",
        "reputation":3026
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you are trying to do is very similar to what Spring does. In your xml file, your controller node would have child nodes to specify properties to be set. Your controller is instatiated by calling the default constructor. Then properties are set using reflection.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[907509]-[964803961]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you are trying to do is very similar to what Spring does. In your xml file, your controller node would have child nodes to specify properties to be set. Your controller is instatiated by calling the default constructor. Then properties are set using reflection.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":2,
                    "similar":1,
                    "set":2,
                    "spring":1,
                    "constructor":1,
                    "instati":1,
                    "child":1,
                    "xml":1,
                    "file":1,
                    "control":2,
                    "node":2,
                    "call":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}