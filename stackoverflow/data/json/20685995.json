{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20685995,
    "title":"Can we have an AtomicEnum in Java?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "multithreading",
      "enums",
      "synchronized",
      "volatile"
    ],
    "creationDate":"2013-12-19",
    "lastActivityDate":"2014-03-04",
    "score":3,
    "viewCount":1007,
    "owner":{
      "type":"StackOverflowUser",
      "id":1892555,
      "displayName":"Johnny",
      "reputation":531
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Today I saw this utility class for AtomicEnum but I wonder if it is possible to have an atomic enum why it is not included in Java standard libraries? In fact I have so much doubt if it can be really atomic and if this utility class works.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20685995]-[-1284956029]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Today I saw this utility class for AtomicEnum but I wonder if it is possible to have an atomic enum why it is not included in Java standard libraries? In fact I have so much doubt if it can be really atomic and if this utility class works.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicEnum",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"works",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "util":2,
                  "standard":1,
                  "librari":1,
                  "work":1,
                  "includ":1,
                  "fact":1,
                  "doubt":1,
                  "atom":3,
                  "today":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The AtomicEnum class is <a href=\"https://dev.stratosphere.eu/browser/nephele/nephele-common/src/main/java/eu/stratosphere/nephele/util/AtomicEnum.java?rev=2becebdb721bf27780a1930fa0b318cda338d79a\"rel=\"nofollow\">this</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20685995]-[433377854]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The AtomicEnum class is <a href=\"https://dev.stratosphere.eu/browser/nephele/nephele-common/src/main/java/eu/stratosphere/nephele/util/AtomicEnum.java?rev=2becebdb721bf27780a1930fa0b318cda338d79a\"rel=\"nofollow\">this</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicEnum",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"is",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "becebdb":1,
                  "util":1,
                  "browser":1,
                  "cda":1,
                  "rel":1,
                  "https":1,
                  "main":1,
                  "rev":1,
                  "nofollow":1,
                  "common":1,
                  "dev":1,
                  "nephel":3,
                  "src":1,
                  "atom":2,
                  "href":1,
                  "stratospher":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>How can I examine if it does the operations atomically? </li> \n <li>Is there a tool for seeing the compiled code and be sure that it does really all in only one machine instruction?</li> \n <li>Is it possible to discover it from the code?</li> \n <li>So if this Atomic enum works, I can have an attribute AtomicEnum and it will be possible to use it safely without volatile keyword and synchronized getters and setters?</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20685995]-[-1231653992]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>How can I examine if it does the operations atomically? </li> \n <li>Is there a tool for seeing the compiled code and be sure that it does really all in only one machine instruction?</li> \n <li>Is it possible to discover it from the code?</li> \n <li>So if this Atomic enum works, I can have an attribute AtomicEnum and it will be possible to use it safely without volatile keyword and synchronized getters and setters?</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicEnum",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "examin":1,
                  "tool":1,
                  "setter":1,
                  "safe":1,
                  "work":1,
                  "keyword":1,
                  "getter":1,
                  "code":2,
                  "attribut":1,
                  "oper":1,
                  "machin":1,
                  "discov":1,
                  "atom":3,
                  "compil":1,
                  "instruct":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":20686023,
      "questionId":20685995,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":30978257,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1892555,
            "displayName":"Johnny",
            "reputation":531
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks. So if I wrap any object with atomic reference it will be completely thread-safe, including all its attributes? Or is it possible only for an immutable object like enum? so I will be able to be sure that if I substitute an enum with an atomic enum no object will lock my class in this example? http://stackoverflow.com/questions/20685372"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978257]-[1704949326]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks. So if I wrap any object with atomic reference it will be completely thread-safe, including all its attributes? Or is it possible only for an immutable object like enum? so I will be able to be sure that if I substitute an enum with an atomic enum no object will lock my class in this example? http://stackoverflow.com/questions/20685372"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"in",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "substitut":1,
                        "immut":1,
                        "lock":1,
                        "safe":1,
                        "object":3,
                        "includ":1,
                        "attribut":1,
                        "stackoverflow":1,
                        "thread":1,
                        "wrap":1,
                        "refer":1,
                        "atom":2,
                        "complet":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978340,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3049628,
            "displayName":"Tim B",
            "reputation":22297
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"No. It only protects the reference. If you want to have a mutable object then you need to synchronize more heavily."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978340]-[1125016875]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"No. It only protects the reference. If you want to have a mutable object then you need to synchronize more heavily."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "object":1,
                        "refer":1,
                        "heavili":1,
                        "protect":1,
                        "synchron":1,
                        "mutabl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978362,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Enum's are by default thread-safe. The `AtomicReference` makes your _field_ atomic so multiple threads can test and change it to a different enum atomically @Johnny."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978362]-[82652935]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Enum's are by default thread-safe. The `AtomicReference` makes your _field_ atomic so multiple threads can test and change it to a different enum atomically @Johnny."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_field_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Johnny",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "test":1,
                        "field":1,
                        "safe":1,
                        "thread":2,
                        "refer":1,
                        "make":1,
                        "atom":3,
                        "johnni":1,
                        "multipl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978428,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gray: good mention: &quot;*by default*&quot;: by adding mutable fields to your enum you can &quot;break&quot; its thread-safety quite easily! Don't do that."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978428]-[-1646446533]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gray: good mention: &quot;*by default*&quot;: by adding mutable fields to your enum you can &quot;break&quot; its thread-safety quite easily! Don't do that."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "field":1,
                        "good":1,
                        "easili":1,
                        "thread":1,
                        "safeti":1,
                        "mention":1,
                        "gray":1,
                        "ad":1,
                        "quot":4,
                        "mutabl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978529,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1892555,
            "displayName":"Johnny",
            "reputation":531
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So if I have a very simple c-like enum I don't need even to use a synchronized getters and setters or anything such as AtomicReference?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978529]-[583074233]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So if I have a very simple c-like enum I don't need even to use a synchronized getters and setters or anything such as AtomicReference?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "simpl":1,
                        "setter":1,
                        "getter":1,
                        "refer":1,
                        "atom":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978637,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The reason why we use `volatile` is because of memory synchronization. If one thread changes a shared enum, other threads won't necessarily see the update. The reason why we use `AtomicReference` is so we can `compareAndSet(...)` atomically. If you don't need the atomic method (i.e. you just set or get it) then a `volatile enumField` is enough. But if you have multiple threads you need the `volatile` @Johnny."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978637]-[1164617822]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The reason why we use `volatile` is because of memory synchronization. If one thread changes a shared enum, other threads won't necessarily see the update. The reason why we use `AtomicReference` is so we can `compareAndSet(...)` atomically. If you don't need the atomic method (i.e. you just set or get it) then a `volatile enumField` is enough. But if you have multiple threads you need the `volatile` @Johnny."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"enumField",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Johnny",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "field":1,
                        "set":2,
                        "updat":1,
                        "reason":2,
                        "share":1,
                        "thread":3,
                        "compar":1,
                        "refer":1,
                        "necessarili":1,
                        "atom":3,
                        "johnni":1,
                        "multipl":1,
                        "won":1,
                        "synchron":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978853,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1892555,
            "displayName":"Johnny",
            "reputation":531
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So if only one thread writes and the others read I will not need synchronization? Or if all only read or all only write? @Gray"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978853]-[-278366617]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So if only one thread writes and the others read I will not need synchronization? Or if all only read or all only write? @Gray"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":2,
                        "thread":1,
                        "gray":1,
                        "write":2,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30978956,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`volatile` provides memory synchronization. What is doesn't do is block the threads. You don't need to get a `synchronized` lock to update or read an enum field, no @Johnny. Even if all threads are reading and writing you don't need it. Time to read some docs: http://docs.oracle.com/javase/tutorial/essential/concurrency/sync.html"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30978956]-[242068094]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`volatile` provides memory synchronization. What is doesn't do is block the threads. You don't need to get a `synchronized` lock to update or read an enum field, no @Johnny. Even if all threads are reading and writing you don't need it. Time to read some docs: http://docs.oracle.com/javase/tutorial/essential/concurrency/sync.html"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Johnny",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":3,
                        "concurr":1,
                        "field":1,
                        "updat":1,
                        "oracl":1,
                        "lock":1,
                        "doc":2,
                        "block":1,
                        "thread":2,
                        "sync":1,
                        "javas":1,
                        "johnni":1,
                        "time":1,
                        "html":1,
                        "http":1,
                        "tutori":1,
                        "essenti":1,
                        "write":1,
                        "synchron":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30979097,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1892555,
            "displayName":"Johnny",
            "reputation":531
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Sorry @Gray! I was under the effect of Java effective that says: &quot;synchronization has no effect unless both read and write operations are synchronized.&quot; It's example is with &quot;int&quot; and tells that &quot;private static volatile int nextSerialNumber = 0;&quot; needs synchronization for ++ operation! I thought that such a situation applies to Enum too! As it's not a primitive. Thanks a lot for your answer and the comments."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30979097]-[-1304610012]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Sorry @Gray! I was under the effect of Java effective that says: &quot;synchronization has no effect unless both read and write operations are synchronized.&quot; It's example is with &quot;int&quot; and tells that &quot;private static volatile int nextSerialNumber = 0;&quot; needs synchronization for ++ operation! I thought that such a situation applies to Enum too! As it's not a primitive. Thanks a lot for your answer and the comments."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"nextSerialNumber",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "read":1,
                        "number":1,
                        "thought":1,
                        "effect":3,
                        "oper":2,
                        "situat":1,
                        "gray":1,
                        "comment":1,
                        "lot":1,
                        "answer":1,
                        "quot":6,
                        "appli":1,
                        "primit":1,
                        "tell":1,
                        "write":1,
                        "synchron":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30979183,
          "postId":20686023,
          "creationDate":"2013-12-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The reason why `++` is special is that it is 3 operations: get, increment, set. That has to be done atomically. There is no such operation when setting an enum. Also, you can use `AtomicInteger` which can atomically increment _without_ a synchronized lock @Johnny."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686023-cu30979183]-[-748878558]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The reason why `++` is special is that it is 3 operations: get, increment, set. That has to be done atomically. There is no such operation when setting an enum. Also, you can use `AtomicInteger` which can atomically increment _without_ a synchronized lock @Johnny."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_without_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Johnny",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "set":2,
                        "lock":1,
                        "reason":1,
                        "oper":2,
                        "atom":3,
                        "johnni":1,
                        "special":1,
                        "increment":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicInteger",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-12-19",
      "lastActivityDate":"2013-12-19",
      "lastEditDate":"2013-12-19",
      "score":5,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":179850,
        "displayName":"Gray",
        "reputation":63324
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Today I saw this utility class for AtomicEnum but I wonder if it is possible to have an atomic enum why it is not included in Java standard libraries? </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[2044094012]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Today I saw this utility class for AtomicEnum but I wonder if it is possible to have an atomic enum why it is not included in Java standard libraries? </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "util":1,
                    "standard":1,
                    "librari":1,
                    "blockquot":2,
                    "includ":1,
                    "atom":2,
                    "today":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <code>AtomicEnum</code> class is just wrapping the <code>AtomicReference</code> class which gives concurrent access for any <code>Object</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[-648172824]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <code>AtomicEnum</code> class is just wrapping the <code>AtomicReference</code> class which gives concurrent access for any <code>Object</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"which",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":1,
                    "object":1,
                    "code":6,
                    "wrap":1,
                    "refer":1,
                    "atom":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Really a <code>volatile enumField</code> is all you need if you have multiple threads that are getting and setting it concurrently. The <code>volatile</code> keyword ensures that updates made by one thread are seen by other threads. You need the <code>AtomicReference</code> if you need to do a <code>compareAndSet(...)</code> type of method -- test if the field is a particular value and only then update it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[130292858]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Really a <code>volatile enumField</code> is all you need if you have multiple threads that are getting and setting it concurrently. The <code>volatile</code> keyword ensures that updates made by one thread are seen by other threads. You need the <code>AtomicReference</code> if you need to do a <code>compareAndSet(...)</code> type of method -- test if the field is a particular value and only then update it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"enumField",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"compareAndSet",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "test":1,
                    "concurr":1,
                    "field":2,
                    "set":2,
                    "updat":2,
                    "keyword":1,
                    "code":8,
                    "thread":3,
                    "compar":1,
                    "refer":1,
                    "atom":1,
                    "type":1,
                    "multipl":1,
                    "made":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>How can I examine if it does the operations atomically?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[-594428190]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>How can I examine if it does the operations atomically?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "atom":1,
                    "oper":1,
                    "examin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>AtomicReference</code> is part of the <code>java.util.concurrent</code> classes which are well tested.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[-148303359]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>AtomicReference</code> is part of the <code>java.util.concurrent</code> classes which are well tested.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "concurr":1,
                    "util":1,
                    "code":4,
                    "refer":1,
                    "class":1,
                    "atom":1,
                    "part":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is there a tool for seeing the compiled code and be sure that it does really all in only one machine instruction?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[743326661]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is there a tool for seeing the compiled code and be sure that it does really all in only one machine instruction?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tool":1,
                    "blockquot":2,
                    "code":1,
                    "machin":1,
                    "compil":1,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That shouldn't be necessary. You can take a look at the <code>AtomicReference</code> source if you care to see what it is doing. Unfortunately the real magic is in the <code>sun.misc.Unsafe</code> native code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[1781785396]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That shouldn't be necessary. You can take a look at the <code>AtomicReference</code> source if you care to see what it is doing. Unfortunately the real magic is in the <code>sun.misc.Unsafe</code> native code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "real":1,
                    "sun":1,
                    "care":1,
                    "code":5,
                    "refer":1,
                    "misc":1,
                    "atom":1,
                    "magic":1,
                    "unsaf":1,
                    "shouldn":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is it possible to discover it from the code?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[-1947880342]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is it possible to discover it from the code?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "discov":1,
                    "blockquot":2,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That shouldn't be necessary.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[-267354410]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That shouldn't be necessary.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shouldn":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>So if this Atomic enum works, I can have an attribute AtomicEnum and it will be possible to use it safely without volatile keyword and synchronized getters and setters?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[418632136]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>So if this Atomic enum works, I can have an attribute AtomicEnum and it will be possible to use it safely without volatile keyword and synchronized getters and setters?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "setter":1,
                    "safe":1,
                    "work":1,
                    "keyword":1,
                    "blockquot":2,
                    "getter":1,
                    "attribut":1,
                    "atom":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Yes, <code>AtomicReference</code> wraps a <code>volatile V value</code> so you don't have to do it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686023]-[777412165]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Yes, <code>AtomicReference</code> wraps a <code>volatile V value</code> so you don't have to do it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "refer":1,
                    "atom":1,
                    "code":4,
                    "wrap":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":20686039,
      "questionId":20685995,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":44699393,
          "postId":20686039,
          "creationDate":"2015-01-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":878126,
            "displayName":"android developer",
            "reputation":26018
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I see. Thank you."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686039-cu44699393]-[-123156301]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I see. Thank you."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":44692115,
          "postId":20686039,
          "creationDate":"2015-01-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":878126,
            "displayName":"android developer",
            "reputation":26018
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Since Enums have a unique integer identifier (&quot;ordinal&quot;), wouldn't it be a bit better to use AtomicInteger?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686039-cu44692115]-[1925447779]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Since Enums have a unique integer identifier (&quot;ordinal&quot;), wouldn't it be a bit better to use AtomicInteger?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "uniqu":1,
                        "bit":1,
                        "enum":1,
                        "wouldn":1,
                        "identifi":1,
                        "quot":2,
                        "atom":1,
                        "ordin":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicInteger",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":44694623,
          "postId":20686039,
          "creationDate":"2015-01-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@androiddeveloper: you could, but I don't really see the advantage. Storing the ordinal is less save (you could store something that's out of the range), requires more work to store/restore (mapping to/from the actual enum) and is the same storage space on most platforms (definitely on 32bit platforms and usually [even on 64bit platforms](https://wikis.oracle.com/display/HotSpotInternals/CompressedOops))."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20686039-cu44694623]-[1761152765]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@androiddeveloper: you could, but I don't really see the advantage. Storing the ordinal is less save (you could store something that's out of the range), requires more work to store/restore (mapping to/from the actual enum) and is the same storage space on most platforms (definitely on 32bit platforms and usually [even on 64bit platforms](https://wikis.oracle.com/display/HotSpotInternals/CompressedOops))."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpotInternals",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"CompressedOops",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "oop":1,
                        "bit":2,
                        "map":1,
                        "restor":1,
                        "rang":1,
                        "requir":1,
                        "oracl":1,
                        "store":3,
                        "https":1,
                        "work":1,
                        "advantag":1,
                        "androiddevelop":1,
                        "space":1,
                        "compress":1,
                        "spot":1,
                        "hot":1,
                        "wiki":1,
                        "ordin":1,
                        "platform":3,
                        "storag":1,
                        "actual":1,
                        "save":1,
                        "intern":1,
                        "display":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpotInternals",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"CompressedOops",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-12-19",
      "lastActivityDate":"2013-12-19",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":40342,
        "displayName":"Joachim Sauer",
        "reputation":145645
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This <code>AtomicEnum</code> is simply a thin wrapper around an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicReference.html\"rel=\"nofollow\"><code>AtomicReference</code></a>, which makes sense since a n <code>enum</code> value is simply an object (reference).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686039]-[192823405]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This <code>AtomicEnum</code> is simply a thin wrapper around an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicReference.html\"rel=\"nofollow\"><code>AtomicReference</code></a>, which makes sense since a n <code>enum</code> value is simply an object (reference).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "concurr":1,
                    "util":1,
                    "rel":1,
                    "oracl":1,
                    "doc":2,
                    "object":1,
                    "code":6,
                    "nofollow":1,
                    "simpli":2,
                    "wrapper":1,
                    "refer":3,
                    "javas":1,
                    "make":1,
                    "atom":4,
                    "api":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "thin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So <em>if</em> <code>AtomicReference</code> works correctly (and I think we can assume that), the <code>AtomicEnum</code> will work as well.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20686039]-[-222949478]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So <em>if</em> <code>AtomicReference</code> works correctly (and I think we can assume that), the <code>AtomicEnum</code> will work as well.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assum":1,
                    "correct":1,
                    "work":2,
                    "code":4,
                    "refer":1,
                    "atom":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":20687197,
      "questionId":20685995,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":30993711,
          "postId":20687197,
          "creationDate":"2013-12-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It's confusing if you're talking about just using the enum directly or if you're referring to the `AtomicReference\n<someenum>\n ` version. In the first case you are correct, but in the second case you're guaranteed to get the necessary visibility guarantees. To me it reads like you're talking about AtomicReference (or well AtomicEnum) in the second case too, you may just want to rephrase it.\n</someenum>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20687197-cu30993711]-[-1255518295]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It's confusing if you're talking about just using the enum directly or if you're referring to the `AtomicReference\n<someenum>\n ` version. In the first case you are correct, but in the second case you're guaranteed to get the necessary visibility guarantees. To me it reads like you're talking about AtomicReference (or well AtomicEnum) in the second case too, you may just want to rephrase it.\n</someenum>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicEnum",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "correct":1,
                        "talk":2,
                        "rephras":1,
                        "visibl":1,
                        "direct":1,
                        "guarante":2,
                        "version":1,
                        "someenum":2,
                        "refer":3,
                        "atom":3,
                        "confus":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicEnum",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30983302,
          "postId":20687197,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2327745,
            "displayName":"Tanmay Patil",
            "reputation":4696
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You are correct, but if you haven't used a volatile field or some heavier synchronization (as in the given case), &quot;a change in the actual enum object might not be visible&quot;. I just tried to keep use case simple and avoid rare cases for simplicity."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20687197-cu30983302]-[-1022879279]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You are correct, but if you haven't used a volatile field or some heavier synchronization (as in the given case), &quot;a change in the actual enum object might not be visible&quot;. I just tried to keep use case simple and avoid rare cases for simplicity."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "simpl":1,
                        "field":1,
                        "correct":1,
                        "simplic":1,
                        "visibl":1,
                        "avoid":1,
                        "object":1,
                        "rare":1,
                        "heavier":1,
                        "quot":2,
                        "case":1,
                        "actual":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30981434,
          "postId":20687197,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1892555,
            "displayName":"Johnny",
            "reputation":531
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You have pointed a good point I didn't know &quot;Atomic access does not mean execution in one machine instruction.&quot; thanks!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20687197-cu30981434]-[-1098104676]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You have pointed a good point I didn't know &quot;Atomic access does not mean execution in one machine instruction.&quot; thanks!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":2,
                        "good":1,
                        "machin":1,
                        "quot":2,
                        "atom":1,
                        "execut":1,
                        "access":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":31005954,
          "postId":20687197,
          "creationDate":"2013-12-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2327745,
            "displayName":"Tanmay Patil",
            "reputation":4696
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It is AtomicEnum in both cases. So first case is fine right? In second case, no change is being made to the reference itself. the object it is referring to is being changed. So there is no visibility guarantee. If two copies of the object are in L1 cache of two cores, we can't be sure that they'll be updated globally."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20687197-cu31005954]-[1213818694]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It is AtomicEnum in both cases. So first case is fine right? In second case, no change is being made to the reference itself. the object it is referring to is being changed. So there is no visibility guarantee. If two copies of the object are in L1 cache of two cores, we can't be sure that they'll be updated globally."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicEnum",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":2,
                        "cach":1,
                        "updat":1,
                        "visibl":1,
                        "object":2,
                        "guarante":1,
                        "global":1,
                        "refer":2,
                        "atom":1,
                        "fine":1,
                        "case":1,
                        "core":1,
                        "made":1,
                        "copi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicEnum",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30982987,
          "postId":20687197,
          "creationDate":"2013-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you have an AtomicEnum (or really any AtomicReference) the only way to access the actual object is through a volatile field or some heavier synchronization so case 2 isn't a problem either. I.e. &quot;a change in the actual enum object might not&quot; is wrong. But this is mixing up differences between atomic operations (a write to an int is atomic by definition though) and visibility guarantees. You can have atomic operations that don't give you any visibility guarantees although it's rare."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20687197-cu30982987]-[644746882]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you have an AtomicEnum (or really any AtomicReference) the only way to access the actual object is through a volatile field or some heavier synchronization so case 2 isn't a problem either. I.e. &quot;a change in the actual enum object might not&quot; is wrong. But this is mixing up differences between atomic operations (a write to an int is atomic by definition though) and visibility guarantees. You can have atomic operations that don't give you any visibility guarantees although it's rare."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicEnum",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "field":1,
                        "wrong":1,
                        "problem":1,
                        "differ":1,
                        "visibl":2,
                        "object":2,
                        "oper":2,
                        "guarante":2,
                        "mix":1,
                        "rare":1,
                        "definit":1,
                        "heavier":1,
                        "refer":1,
                        "isn":1,
                        "give":1,
                        "quot":2,
                        "atom":5,
                        "actual":2,
                        "write":1,
                        "access":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicEnum",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-12-19",
      "lastActivityDate":"2013-12-19",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2327745,
        "displayName":"Tanmay Patil",
        "reputation":4696
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The access to the reference is atomic, but the access to the object is not. So a change in value of reference will be properly propagated across all threads but a change in the actual enum object might not.<br /> Example...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[-1395315348]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The access to the reference is atomic, but the access to the object is not. So a change in value of reference will be properly propagated across all threads but a change in the actual enum object might not.<br /> Example...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":2,
                    "propag":1,
                    "proper":1,
                    "object":2,
                    "thread":1,
                    "refer":2,
                    "atom":1,
                    "actual":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"enum Weekdays { public int rank = 0; MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20687197]-[-421189939]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"enum Weekdays { public int "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"rank",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY; } "
                  }
                ]
              },
              "rawText":"enum Weekdays { public int rank = 0; MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tuesday":1,
                    "rank":1,
                    "wednesday":1,
                    "monday":1,
                    "weekday":1,
                    "friday":1,
                    "thursday":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Case 1:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[944346032]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Case 1:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"AtomicEnum&lt;Weekdays&gt; today = Weekdays.TUESDAY; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20687197]-[1112985486]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"today",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Weekdays",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"TUESDAY",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"AtomicEnum",
                                  "comments":[
                                    
                                  ]
                                },
                                "typeArguments":{
                                  "type":"TypeArgumentsNode",
                                  "types":[
                                    {
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Weekdays",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"AtomicEnum<Weekdays> today = Weekdays.TUESDAY; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tuesday":1,
                    "atom":1,
                    "today":1,
                    "weekday":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Weekdays",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Weekdays",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"today",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Weekdays",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"TUESDAY",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicEnum",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Weekdays",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Each thread sharing 'today' will have a reference of Weekdays.TUESDAY</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[-78810146]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Each thread sharing 'today' will have a reference of Weekdays.TUESDAY</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tuesday":1,
                    "share":1,
                    "thread":1,
                    "refer":1,
                    "weekday":1,
                    "today":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Case 2:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[972975183]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Case 2:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"today.rank = 3; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20687197]-[439851054]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"today",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"rank",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"3"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"today.rank = 3; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rank":1,
                    "today":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is no guarantee that each thread will have the updated rank. (rank is not volatile. Everyone maintains separate copy of the object in cache.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[1819873447]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is no guarantee that each thread will have the updated rank. (rank is not volatile. Everyone maintains separate copy of the object in cache.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cach":1,
                    "rank":2,
                    "updat":1,
                    "separ":1,
                    "object":1,
                    "guarante":1,
                    "thread":1,
                    "copi":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>So reference access is atomic but that to object is not.</strong><br /> Note:<br /> 1) Atomic access does not mean execution in one machine instruction. But logically it can be thought like this. Although it is indivisible, it can comprise of several instructions.<br /> 2) Even if such tool existed, it would be too difficult to test it since the update process is almost unpredictable. So false positive results are possible. <br /><br /> Hope this helps.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20687197]-[834133145]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>So reference access is atomic but that to object is not.</strong><br /> Note:<br /> 1) Atomic access does not mean execution in one machine instruction. But logically it can be thought like this. Although it is indivisible, it can comprise of several instructions.<br /> 2) Even if such tool existed, it would be too difficult to test it since the update process is almost unpredictable. So false positive results are possible. <br /><br /> Hope this helps.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "exist":1,
                    "thought":1,
                    "tool":1,
                    "process":1,
                    "unpredict":1,
                    "result":1,
                    "updat":1,
                    "indivis":1,
                    "strong":2,
                    "logic":1,
                    "object":1,
                    "help":1,
                    "difficult":1,
                    "compris":1,
                    "machin":1,
                    "hope":1,
                    "note":1,
                    "refer":1,
                    "posit":1,
                    "fals":1,
                    "atom":2,
                    "execut":1,
                    "access":2,
                    "instruct":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":22177143,
      "questionId":20685995,
      "comments":[
        
      ],
      "creationDate":"2014-03-04",
      "lastActivityDate":"2014-03-04",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1868455,
        "displayName":"Mak",
        "reputation":470
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think there is no point writing any such class. In fact if you are writing such class you need to rethink about the responsibility of the class. ENUMs are absolutely thread safe so I am not sure why someone need AtominEnum, or is it just some class which is Atomic and also using some enum but then naming it AtomicEnum is very confusing not good in design or naming convention.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22177143]-[1548584581]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think there is no point writing any such class. In fact if you are writing such class you need to rethink about the responsibility of the class. ENUMs are absolutely thread safe so I am not sure why someone need AtominEnum, or is it just some class which is Atomic and also using some enum but then naming it AtomicEnum is very confusing not good in design or naming convention.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"you",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtominEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"which",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicEnum",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "name":2,
                    "design":1,
                    "point":1,
                    "good":1,
                    "atomin":1,
                    "safe":1,
                    "fact":1,
                    "thread":1,
                    "enum":1,
                    "absolut":1,
                    "atom":2,
                    "confus":1,
                    "respons":1,
                    "rethink":1,
                    "write":2,
                    "convent":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtominEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicEnum",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}