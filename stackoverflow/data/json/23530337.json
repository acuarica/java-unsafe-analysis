{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23530337,
    "title":"Running Java Applet",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":36141537,
        "postId":23530337,
        "creationDate":"2014-05-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2491965,
          "displayName":"user2491965",
          "reputation":26
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Apparently, my instructor noted that the error was due to the wrong syntax for the method call for my images. I fixed it, and it worked. Thanks to everyone for the assistance. I appreciate."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23530337-cu36141537]-[-322737320]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Apparently, my instructor noted that the error was due to the wrong syntax for the method call for my images. I fixed it, and it worked. Thanks to everyone for the assistance. I appreciate."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "due":1,
                      "appar":1,
                      "wrong":1,
                      "fix":1,
                      "instructor":1,
                      "work":1,
                      "syntax":1,
                      "error":1,
                      "note":1,
                      "call":1,
                      "assist":1,
                      "imag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36101408,
        "postId":23530337,
        "creationDate":"2014-05-08",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1493379,
          "displayName":"blueygh2",
          "reputation":1186
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"`InvocationTargetException` is an exception wrapper. You can try to catch and unwrap it (`getTargetException()`) to get the *real* cause of the exception."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23530337-cu36101408]-[-2024361994]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"`InvocationTargetException` is an exception wrapper. You can try to catch and unwrap it (`getTargetException()`) to get the *real* cause of the exception."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"InvocationTargetException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"getTargetException",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "real":1,
                      "invoc":1,
                      "unwrap":1,
                      "wrapper":1,
                      "target":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"InvocationTargetException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36096367,
        "postId":23530337,
        "creationDate":"2014-05-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1522522,
          "displayName":"vandale",
          "reputation":2379
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"There is likely a problem with your code. Please show it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23530337-cu36096367]-[-2057017950]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"There is likely a problem with your code. Please show it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "code":1,
                      "show":1,
                      "problem":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36104629,
        "postId":23530337,
        "creationDate":"2014-05-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":418556,
          "displayName":"Andrew Thompson",
          "reputation":117299
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"1) It is likely that the class being embedded in HTML does not extend `Applet` or `JApplet`, but as @blueygh2 advised, post the entire stack trace. Generally for better help sooner, post an [MCVE](http://stackoverflow.com/help/mcve) (Minimal Complete and Verifiable Example). 2) Why code an applet? If it is due to spec. by teacher, please refer them to [Why CS teachers should stop teaching Java applets](http://programmers.blogoverflow.com/2013/05/why-cs-teachers-should-stop-teaching-java-applets/)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23530337-cu36104629]-[800754948]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"1) It is likely that the class being embedded in HTML does not extend `Applet` or `JApplet`, but as @blueygh2 advised, post the entire stack trace. Generally for better help sooner, post an [MCVE](http://stackoverflow.com/help/mcve) (Minimal Complete and Verifiable Example). 2) Why code an applet? If it is due to spec. by teacher, please refer them to [Why CS teachers should stop teaching Java applets](http://programmers.blogoverflow.com/2013/05/why-cs-teachers-should-stop-teaching-java-applets/)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"being",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "advis":1,
                      "post":2,
                      "due":1,
                      "japplet":1,
                      "minim":1,
                      "trace":1,
                      "teacher":3,
                      "applet":4,
                      "teach":2,
                      "blueygh":1,
                      "verifi":1,
                      "entir":1,
                      "embed":1,
                      "extend":1,
                      "stop":2,
                      "code":1,
                      "stackoverflow":1,
                      "general":1,
                      "programm":1,
                      "refer":1,
                      "stack":1,
                      "spec":1,
                      "blogoverflow":1,
                      "complet":1,
                      "html":1,
                      "http":2,
                      "sooner":1,
                      "mcve":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "applet",
      "invocationtargetexception"
    ],
    "creationDate":"2014-05-07",
    "lastActivityDate":"2014-05-08",
    "lastEditDate":"2014-05-08",
    "score":0,
    "viewCount":100,
    "owner":{
      "type":"StackOverflowUser",
      "id":2491965,
      "displayName":"user2491965",
      "reputation":26
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I wrote code for a Java applet and it compiled, and ran on Eclipse. However, after I have sent my files to the web server, and tried to run the applet using the html file I get an exception.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[1370126003]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I wrote code for a Java applet and it compiled, and ran on Eclipse. However, after I have sent my files to the web server, and tried to run the applet using the html file I get an exception.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "server":1,
                  "applet":2,
                  "ran":1,
                  "run":1,
                  "wrote":1,
                  "code":1,
                  "web":1,
                  "eclips":1,
                  "file":2,
                  "compil":1,
                  "html":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"java.lang.reflect.InvocationTargetException "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23530337]-[-715329289]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"lang",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"InvocationTargetException",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"java.lang.reflect.InvocationTargetException ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "target":1,
                  "reflect":1,
                  "lang":1,
                  "invoc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"reflect",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"InvocationTargetException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Earlier, I was having problems running Java application with my Firefox and I think I fixed it because I ran some online Java applications without any problem.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[-171455091]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Earlier, I was having problems running Java application with my Firefox and I think I fixed it because I ran some online Java applications without any problem.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "problem":2,
                  "ran":1,
                  "run":1,
                  "onlin":1,
                  "fix":1,
                  "earlier":1,
                  "applic":2,
                  "firefox":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Does anyone think that there is something wrong with my code?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[-1243296472]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Does anyone think that there is something wrong with my code?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "wrong":1,
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I think that the problem comes from the event handling for the list boxes and combo boxes.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[1230774137]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I think that the problem comes from the event handling for the list boxes and combo boxes.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "event":1,
                  "problem":1,
                  "box":2,
                  "combo":1,
                  "handl":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"//LIST BOXES variables //Create 3 arrays of Strings and 3 list boxes private String[] sandwiches = {&quot;Bacon and Turkey&quot;, &quot;Cheese steak Melt&quot;, &quot;Veggie Lite&quot;, &quot;The Works&quot;}; private String[] kids = {&quot;Stay Fit&quot;, &quot;Breakfast Sub&quot;, &quot;Roast Beef&quot;, &quot;Little Sub&quot;}; private String[] drinks = {&quot;Fountain Sodas&quot;, &quot;Vitamin Water&quot;, &quot;Iced Tea&quot;, &quot;Orange Juice&quot;}; private JList jlstsandwiches = new JList(sandwiches); private JList jlstkids = new JList(kids); private JList jlstdrinks = new JList(drinks); //Create 3 arrays of prices and 3 arrays of image icons private double[] sandwichPrices = {5.75, 6.25, 5.95}; private double[] kidsPrices = {3.50, 2.99, 3.29}; private double[] drinksPrices = {2.05, 1.25, 1.50}; //COMBO BOXES variables //Create 3 arrays of Strings and 3 combo boxes private String[] feelings = {&quot;Today I am...&quot;, &quot;Feeling Happy&quot;, &quot;Feeling Strong&quot;, &quot;Feeling Energetic&quot;}; private String[] specials = {&quot;Special Sandwiches&quot;, &quot;Big Lance&quot;, &quot;Pepe&quot;}; private String[] specialDrinks = {&quot;Special Drinks&quot;, &quot;Lance's Shake&quot;, &quot;Smooth It&quot;}; private JComboBox jcbofeelings = new JComboBox(feelings); private JComboBox jcbospecials = new JComboBox(specials); private JComboBox jcbodrinks = new JComboBox(specialDrinks); //Create 2 arrays of prices and 2 arrays of image icons private double[] specialSandwichPrices = {0.0, 6.75, 7.25}; private double[] specialDrinksPrices = {0.0, 2.50, 2.99}; //Additional Variables private ImageIcon usIcon = new ImageIcon(&quot;images/sub_sandwiches2.jpg&quot;); private JTextArea jtaNutritionNotes = new JTextArea(1, 20); public LanceSubs() { Font largeFont = new Font(&quot;Serif&quot;, Font.BOLD, 20); Font mediumFont = new Font(&quot;Serif&quot;, Font.BOLD, 16); Font smallFont = new Font(&quot;Serif&quot;, Font.PLAIN, 12); Border lineborder = new LineBorder(Color.BLACK, 1); // --------------------------------------------------------------------------------------- //REGISTER LISTENERS //EAST PANEL //Register listeners for radio buttons jrbcarryout.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double carryout = 0.00; jlblDelivery2.setText(String.format(&quot;%4.2f&quot;, carryout)); } }); jrbdelivery.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double delivery = 4.00; jlblDelivery2.setText(String.format(&quot;%4.2f&quot;, delivery)); } }); //Register listeners for clear and finalize buttons jbtClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double itemPriceClear = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryChargeClear = Double.parseDouble(jlblDelivery2.getText()); itemPriceClear = 0.00; itemSubtotal = 0.00; deliveryChargeClear = 0.00; jlblItemPrice2.setText(String.format(&quot;%4.2f&quot;, itemPriceClear)); jlblSubtotal2.setText(String.format(&quot;%4.2f&quot;, itemSubtotal)); jlblDelivery2.setText(String.format(&quot;%4.2f&quot;, deliveryChargeClear)); /***double itemPriceField = Double.parseDouble(jtfItemPrice.getText()); itemPriceField = 0.00; jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, itemPriceField));*/ } }); jbtFinalize.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double subtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryCharge = Double.parseDouble(jlblDelivery2.getText()); final double TAX = 0.01 * Double.parseDouble(jlblTax2.getText()); double finalPrice = subtotal + deliveryCharge + (TAX * (subtotal + deliveryCharge)); jtfResult.setText(String.format(&quot;%4.2f&quot;, finalPrice)); } }); //WEST PANEL //Register listeners for list boxes' menus jlstsandwiches.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i &lt; indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index &lt; sandwiches.length){ index = jlstsandwiches.getSelectedIndex(); jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, sandwichPrices[index])); } } }); jlstkids.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i &lt; indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index &lt; kids.length){ index = jlstkids.getSelectedIndex(); jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, kidsPrices[index])); } } }); jlstdrinks.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ int index = 0; if (index &lt; drinks.length){ index = jlstdrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, drinksPrices[index])); } } }); //NORTH PANEL //Register listeners for combo boxes jcbospecials.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index &lt; specials.length){ index = jcbospecials.getSelectedIndex(); jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, specialSandwichPrices[index])); } } }); jcbodrinks.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index &lt; specialDrinks.length){ index = jcbodrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(&quot;%4.2f&quot;, specialDrinksPrices[index])); } } }); //CENTER PANEL //Register listeners for cart and remove buttons jbtCart.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jtfItemPrice.getText()); itemSubtotal += itemPrice; jlblItemPrice2.setText(String.format(&quot;%4.2f&quot;, itemPrice)); jlblSubtotal2.setText(String.format(&quot;%4.2f&quot;, itemSubtotal)); } }); //Display itemPrice and itemSubtotal in Your Subtotal sub-menu jbtRemove.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); itemSubtotal -= itemPrice; jlblItemPrice2.setText(String.format(&quot;%4.2f&quot;, itemPrice)); jlblSubtotal2.setText(String.format(&quot;%4.2f&quot;, itemSubtotal)); } }); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23530337]-[-1945599467]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"//LIST BOXES variables //Create 3 arrays of Strings and 3 list boxes "
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sandwiches",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableArrayInitNode",
                            "arrayInit":{
                              "type":"ArrayInitializerNode",
                              "inits":{
                                "type":"VariableInitializersNode",
                                "initializers":[
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Bacon and Turkey\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Cheese steak Melt\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Veggie Lite\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"The Works\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ArrayTypeNode",
                          "typeNode":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "depth":[
                            {
                              "type":"ArrayDimensionNode",
                              "comments":[
                                
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"kids",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableArrayInitNode",
                            "arrayInit":{
                              "type":"ArrayInitializerNode",
                              "inits":{
                                "type":"VariableInitializersNode",
                                "initializers":[
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Stay Fit\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Breakfast Sub\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Roast Beef\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Little Sub\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ArrayTypeNode",
                          "typeNode":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "depth":[
                            {
                              "type":"ArrayDimensionNode",
                              "comments":[
                                
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"drinks",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableArrayInitNode",
                            "arrayInit":{
                              "type":"ArrayInitializerNode",
                              "inits":{
                                "type":"VariableInitializersNode",
                                "initializers":[
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Fountain Sodas\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Vitamin Water\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Iced Tea\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Orange Juice\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ArrayTypeNode",
                          "typeNode":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "depth":[
                            {
                              "type":"ArrayDimensionNode",
                              "comments":[
                                
                              ]
                            }
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"jlstsandwiches",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"JList",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"sandwiches",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JList",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"jlstkids",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"JList",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"kids",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JList",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"FieldDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "variables":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"jlstdrinks",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"JList",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"drinks",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JList",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    {
                      "text":"//Create 3 arrays of prices and 3 arrays of image icons private double[] sandwichPrices = {5.75, 6.25, 5.95}; private double[] kidsPrices = {3.50, 2.99, 3.29}; private double[] drinksPrices = {2.05, 1.25, 1.50}; //COMBO BOXES variables //Create 3 arrays of Strings and 3 combo boxes private String[] feelings = {\"Today I am...\", \"Feeling Happy\", \"Feeling Strong\", \"Feeling Energetic\"}; private String[] specials = {\"Special Sandwiches\", \"Big Lance\", \"Pepe\"}; private String[] specialDrinks = {\"Special Drinks\", \"Lance's Shake\", \"Smooth It\"}; private JComboBox jcbofeelings = new JComboBox(feelings); private JComboBox jcbospecials = new JComboBox(specials); private JComboBox jcbodrinks = new JComboBox(specialDrinks); //Create 2 arrays of prices and 2 arrays of image icons private double[] specialSandwichPrices = {0.0, 6.75, 7.25}; private double[] specialDrinksPrices = {0.0, 2.50, 2.99}; //Additional Variables private ImageIcon usIcon = new ImageIcon(\"images/sub_sandwiches2.jpg\"); private JTextArea jtaNutritionNotes = new JTextArea(1, 20); public LanceSubs() { Font largeFont = new Font(\"Serif\", Font.BOLD, 20); Font mediumFont = new Font(\"Serif\", Font.BOLD, 16); Font smallFont = new Font(\"Serif\", Font.PLAIN, 12); Border lineborder = new LineBorder(Color.BLACK, 1); // --------------------------------------------------------------------------------------- //REGISTER LISTENERS //EAST PANEL //Register listeners for radio buttons jrbcarryout.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double carryout = 0.00; jlblDelivery2.setText(String.format(\"%4.2f\", carryout)); } }); jrbdelivery.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double delivery = 4.00; jlblDelivery2.setText(String.format(\"%4.2f\", delivery)); } }); //Register listeners for clear and finalize buttons jbtClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double itemPriceClear = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryChargeClear = Double.parseDouble(jlblDelivery2.getText()); itemPriceClear = 0.00; itemSubtotal = 0.00; deliveryChargeClear = 0.00; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPriceClear)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); jlblDelivery2.setText(String.format(\"%4.2f\", deliveryChargeClear)); /***double itemPriceField = Double.parseDouble(jtfItemPrice.getText()); itemPriceField = 0.00; jtfItemPrice.setText(String.format(\"%4.2f\", itemPriceField));*/ } }); jbtFinalize.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double subtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryCharge = Double.parseDouble(jlblDelivery2.getText()); final double TAX = 0.01 * Double.parseDouble(jlblTax2.getText()); double finalPrice = subtotal + deliveryCharge + (TAX * (subtotal + deliveryCharge)); jtfResult.setText(String.format(\"%4.2f\", finalPrice)); } }); //WEST PANEL //Register listeners for list boxes' menus jlstsandwiches.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i < indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index < sandwiches.length){ index = jlstsandwiches.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", sandwichPrices[index])); } } }); jlstkids.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i < indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index < kids.length){ index = jlstkids.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", kidsPrices[index])); } } }); jlstdrinks.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ int index = 0; if (index < drinks.length){ index = jlstdrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", drinksPrices[index])); } } }); //NORTH PANEL //Register listeners for combo boxes jcbospecials.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index < specials.length){ index = jcbospecials.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", specialSandwichPrices[index])); } } }); jcbodrinks.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index < specialDrinks.length){ index = jcbodrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", specialDrinksPrices[index])); } } }); //CENTER PANEL //Register listeners for cart and remove buttons jbtCart.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jtfItemPrice.getText()); itemSubtotal += itemPrice; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPrice)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); } }); //Display itemPrice and itemSubtotal in Your Subtotal sub-menu jbtRemove.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); itemSubtotal -= itemPrice; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPrice)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); } }); \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"//LIST BOXES variables //Create 3 arrays of Strings and 3 list boxes private String[] sandwiches = {\"Bacon and Turkey\", \"Cheese steak Melt\", \"Veggie Lite\", \"The Works\"}; private String[] kids = {\"Stay Fit\", \"Breakfast Sub\", \"Roast Beef\", \"Little Sub\"}; private String[] drinks = {\"Fountain Sodas\", \"Vitamin Water\", \"Iced Tea\", \"Orange Juice\"}; private JList jlstsandwiches = new JList(sandwiches); private JList jlstkids = new JList(kids); private JList jlstdrinks = new JList(drinks); //Create 3 arrays of prices and 3 arrays of image icons private double[] sandwichPrices = {5.75, 6.25, 5.95}; private double[] kidsPrices = {3.50, 2.99, 3.29}; private double[] drinksPrices = {2.05, 1.25, 1.50}; //COMBO BOXES variables //Create 3 arrays of Strings and 3 combo boxes private String[] feelings = {\"Today I am...\", \"Feeling Happy\", \"Feeling Strong\", \"Feeling Energetic\"}; private String[] specials = {\"Special Sandwiches\", \"Big Lance\", \"Pepe\"}; private String[] specialDrinks = {\"Special Drinks\", \"Lance's Shake\", \"Smooth It\"}; private JComboBox jcbofeelings = new JComboBox(feelings); private JComboBox jcbospecials = new JComboBox(specials); private JComboBox jcbodrinks = new JComboBox(specialDrinks); //Create 2 arrays of prices and 2 arrays of image icons private double[] specialSandwichPrices = {0.0, 6.75, 7.25}; private double[] specialDrinksPrices = {0.0, 2.50, 2.99}; //Additional Variables private ImageIcon usIcon = new ImageIcon(\"images/sub_sandwiches2.jpg\"); private JTextArea jtaNutritionNotes = new JTextArea(1, 20); public LanceSubs() { Font largeFont = new Font(\"Serif\", Font.BOLD, 20); Font mediumFont = new Font(\"Serif\", Font.BOLD, 16); Font smallFont = new Font(\"Serif\", Font.PLAIN, 12); Border lineborder = new LineBorder(Color.BLACK, 1); // --------------------------------------------------------------------------------------- //REGISTER LISTENERS //EAST PANEL //Register listeners for radio buttons jrbcarryout.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double carryout = 0.00; jlblDelivery2.setText(String.format(\"%4.2f\", carryout)); } }); jrbdelivery.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double delivery = 4.00; jlblDelivery2.setText(String.format(\"%4.2f\", delivery)); } }); //Register listeners for clear and finalize buttons jbtClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double itemPriceClear = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryChargeClear = Double.parseDouble(jlblDelivery2.getText()); itemPriceClear = 0.00; itemSubtotal = 0.00; deliveryChargeClear = 0.00; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPriceClear)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); jlblDelivery2.setText(String.format(\"%4.2f\", deliveryChargeClear)); /***double itemPriceField = Double.parseDouble(jtfItemPrice.getText()); itemPriceField = 0.00; jtfItemPrice.setText(String.format(\"%4.2f\", itemPriceField));*/ } }); jbtFinalize.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ double subtotal = Double.parseDouble(jlblSubtotal2.getText()); double deliveryCharge = Double.parseDouble(jlblDelivery2.getText()); final double TAX = 0.01 * Double.parseDouble(jlblTax2.getText()); double finalPrice = subtotal + deliveryCharge + (TAX * (subtotal + deliveryCharge)); jtfResult.setText(String.format(\"%4.2f\", finalPrice)); } }); //WEST PANEL //Register listeners for list boxes' menus jlstsandwiches.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i < indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index < sandwiches.length){ index = jlstsandwiches.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", sandwichPrices[index])); } } }); jlstkids.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ /***int[] indices = jlstsandwiches.getSelectedIndices(); int i; for(i = 0; i < indices.length; i++){ jtfItemPrice.setText(sandwichPrices[indices[i]].toString()); }*/ int index = 0; if (index < kids.length){ index = jlstkids.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", kidsPrices[index])); } } }); jlstdrinks.addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e){ int index = 0; if (index < drinks.length){ index = jlstdrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", drinksPrices[index])); } } }); //NORTH PANEL //Register listeners for combo boxes jcbospecials.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index < specials.length){ index = jcbospecials.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", specialSandwichPrices[index])); } } }); jcbodrinks.addItemListener(new ItemListener(){ @Override public void itemStateChanged(ItemEvent e){ int index = 0; if (index < specialDrinks.length){ index = jcbodrinks.getSelectedIndex(); jtfItemPrice.setText(String.format(\"%4.2f\", specialDrinksPrices[index])); } } }); //CENTER PANEL //Register listeners for cart and remove buttons jbtCart.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jtfItemPrice.getText()); itemSubtotal += itemPrice; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPrice)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); } }); //Display itemPrice and itemSubtotal in Your Subtotal sub-menu jbtRemove.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e){ itemPrice = Double.parseDouble(jlblItemPrice2.getText()); itemSubtotal = Double.parseDouble(jlblSubtotal2.getText()); itemSubtotal -= itemPrice; jlblItemPrice2.setText(String.format(\"%4.2f\", itemPrice)); jlblSubtotal2.setText(String.format(\"%4.2f\", itemSubtotal)); } }); \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chees":1,
                  "panel":4,
                  "format":16,
                  "chang":5,
                  "jlstkid":3,
                  "feel":5,
                  "jpg":1,
                  "area":2,
                  "menu":1,
                  "deliveri":13,
                  "orang":1,
                  "remov":2,
                  "cart":2,
                  "energet":1,
                  "jlist":6,
                  "steak":1,
                  "field":3,
                  "smooth":1,
                  "border":2,
                  "state":2,
                  "shake":1,
                  "tea":1,
                  "addit":1,
                  "event":11,
                  "radio":1,
                  "line":1,
                  "tax":3,
                  "center":1,
                  "big":1,
                  "jcbospeci":3,
                  "clear":8,
                  "jlstsandwich":5,
                  "nutrit":1,
                  "jbt":4,
                  "lite":1,
                  "fit":1,
                  "icon":5,
                  "jcbofeel":1,
                  "jtext":2,
                  "price":44,
                  "result":1,
                  "set":18,
                  "bold":2,
                  "jlstdrink":3,
                  "linebord":1,
                  "overrid":11,
                  "regist":6,
                  "serif":3,
                  "text":28,
                  "fountain":1,
                  "string":2,
                  "strong":1,
                  "color":1,
                  "medium":1,
                  "west":1,
                  "work":1,
                  "drink":11,
                  "select":16,
                  "small":1,
                  "water":1,
                  "array":6,
                  "carryout":2,
                  "font":12,
                  "roast":1,
                  "button":3,
                  "pars":10,
                  "north":1,
                  "larg":1,
                  "listen":28,
                  "black":1,
                  "indic":8,
                  "beef":1,
                  "bacon":1,
                  "note":1,
                  "jcbodrink":3,
                  "jcombo":6,
                  "final":2,
                  "ice":1,
                  "perform":6,
                  "juic":1,
                  "soda":1,
                  "jrbdeliveri":1,
                  "plain":1,
                  "vitamin":1,
                  "melt":1,
                  "lanc":3,
                  "stay":1,
                  "sub":1,
                  "sandwich":11,
                  "length":7,
                  "charg":6,
                  "jta":1,
                  "box":12,
                  "veggi":1,
                  "combo":3,
                  "jlbl":17,
                  "happi":1,
                  "pepe":1,
                  "special":12,
                  "kid":5,
                  "jrbcarryout":1,
                  "variabl":3,
                  "jtf":11,
                  "creat":4,
                  "add":11,
                  "east":1,
                  "action":24,
                  "menus":1,
                  "imag":5,
                  "today":1,
                  "subtot":19,
                  "breakfast":1,
                  "list":12,
                  "index":25,
                  "turkey":1,
                  "display":1,
                  "item":45
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JList",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"jlstdrinks",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"JList",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"drinks",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JList",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"sandwiches",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableArrayInitNode",
                        "arrayInit":{
                          "type":"ArrayInitializerNode",
                          "inits":{
                            "type":"VariableInitializersNode",
                            "initializers":[
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Bacon and Turkey\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Cheese steak Melt\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Veggie Lite\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"The Works\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"jlstsandwiches",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"JList",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"sandwiches",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JList",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"kids",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableArrayInitNode",
                        "arrayInit":{
                          "type":"ArrayInitializerNode",
                          "inits":{
                            "type":"VariableInitializersNode",
                            "initializers":[
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Stay Fit\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Breakfast Sub\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Roast Beef\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Little Sub\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"jlstkids",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"JList",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"kids",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JList",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"drinks",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableArrayInitNode",
                        "arrayInit":{
                          "type":"ArrayInitializerNode",
                          "inits":{
                            "type":"VariableInitializersNode",
                            "initializers":[
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Fountain Sodas\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Vitamin Water\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Iced Tea\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              {
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"Orange Juice\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>} }</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[1504932561]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>} }</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can someone help?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23530337]-[-775939145]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can someone help?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}