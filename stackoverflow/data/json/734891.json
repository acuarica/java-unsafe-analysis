{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":734891,
    "title":"Aggregation versus Composition",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28337368,
        "postId":734891,
        "creationDate":"2013-10-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":661933,
          "displayName":"nawfal",
          "reputation":16867
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Also see [implementation-difference-between-aggregation-and-composition-in-java](http://stackoverflow.com/questions/11881552/)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[734891-cu28337368]-[1212258335]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Also see [implementation-difference-between-aggregation-and-composition-in-java](http://stackoverflow.com/questions/11881552/)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "differ":1,
                      "composit":1,
                      "aggreg":1,
                      "stackoverflow":1,
                      "implement":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":35972688,
        "postId":734891,
        "creationDate":"2014-05-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2457251,
          "displayName":"Almir Campos",
          "reputation":141
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Please, check a code-based example at: http://stackoverflow.com/questions/731802/what-is-the-difference-between-composition-and-association-relationship/23464244#23464244"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[734891-cu35972688]-[-935464251]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Please, check a code-based example at: http://stackoverflow.com/questions/731802/what-is-the-difference-between-composition-and-association-relationship/23464244#23464244"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "differ":1,
                      "composit":1,
                      "base":1,
                      "code":1,
                      "stackoverflow":1,
                      "relationship":1,
                      "check":1,
                      "http":1,
                      "associ":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "design",
      "oop",
      "uml"
    ],
    "creationDate":"2009-04-09",
    "lastActivityDate":"2015-01-27",
    "lastEditDate":"2012-03-13",
    "closedDate":"2015-01-29",
    "score":36,
    "viewCount":22339,
    "owner":{
      "type":"StackOverflowUser",
      "id":45507,
      "displayName":"Dopyiii",
      "reputation":1376
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I've had a hard time understanding the difference between composition and aggregation in UML. Can someone please offer me a good compare and contrast between them? I'd also love to learn to recognize the difference between them in code and/or to see a short software/code example.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[734891]-[2242793]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I've had a hard time understanding the difference between composition and aggregation in UML. Can someone please offer me a good compare and contrast between them? I'd also love to learn to recognize the difference between them in code and/or to see a short software/code example.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "learn":1,
                  "hard":1,
                  "good":1,
                  "differ":2,
                  "understand":1,
                  "composit":1,
                  "softwar":1,
                  "aggreg":1,
                  "code":2,
                  "recogn":1,
                  "uml":1,
                  "compar":1,
                  "love":1,
                  "offer":1,
                  "contrast":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Edit: Part of the reason why I ask is because of a reverse documentation activity that we're doing at work. We have written the code, but we need to go back and create class diagrams for the code. We'd just like to capture the associations properly.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[734891]-[303636760]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Edit: Part of the reason why I ask is because of a reverse documentation activity that we're doing at work. We have written the code, but we need to go back and create class diagrams for the code. We'd just like to capture the associations properly.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"diagrams",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "revers":1,
                  "diagram":1,
                  "proper":1,
                  "document":1,
                  "reason":1,
                  "work":1,
                  "code":2,
                  "edit":1,
                  "activ":1,
                  "captur":1,
                  "written":1,
                  "back":1,
                  "part":1,
                  "creat":1,
                  "associ":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":735095,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2009-04-09",
      "lastActivityDate":"2009-04-09",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":87097,
        "displayName":"Chris May",
        "reputation":594
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In code terms, composition usually suggests that the containing object is responsible for creating instances of the component*, and the containing object holds the only long-lived references to it. So if the parent object gets de-referenced and garbage-collected, so will the child.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735095]-[-1356626443]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In code terms, composition usually suggests that the containing object is responsible for creating instances of the component*, and the containing object holds the only long-lived references to it. So if the parent object gets de-referenced and garbage-collected, so will the child.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":1,
                    "suggest":1,
                    "composit":1,
                    "term":1,
                    "compon":1,
                    "object":3,
                    "code":1,
                    "child":1,
                    "hold":1,
                    "live":1,
                    "refer":1,
                    "collect":1,
                    "respons":1,
                    "creat":1,
                    "referenc":1,
                    "garbag":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>so this code...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735095]-[-2028154662]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>so this code...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Class Order private Collection&lt;LineItem&gt; items; ... void addOrderLine(Item sku, int quantity){ items.add(new LineItem(sku, quantity)); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[735095]-[-929054521]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"Class Order "
                  },
                  {
                    "type":"FieldDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"private",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "variables":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"items",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Collection",
                                  "comments":[
                                    
                                  ]
                                },
                                "typeArguments":{
                                  "type":"TypeArgumentsNode",
                                  "types":[
                                    {
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"LineItem",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"... "
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"addOrderLine",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Item",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sku",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "formalParameterDeclarator":{
                            "type":"FormalParameterDeclsNode",
                            "modifiers":[
                              
                            ],
                            "parameterType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "nextDeclarator":{
                              "type":"AdditionalFormalParameterDeclNode",
                              "variableDeclarator":{
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"quantity",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"items",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"add",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"ConstructorCreatorNode",
                                  "creatorType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"LineItem",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "expressionArgs":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"sku",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"quantity",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} "
                  }
                ]
              },
              "rawText":"Class Order private Collection<LineItem> items; ... void addOrderLine(Item sku, int quantity){ items.add(new LineItem(sku, quantity)); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sku":2,
                    "line":3,
                    "order":2,
                    "collect":1,
                    "add":2,
                    "quantiti":2,
                    "item":5
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Collection",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"LineItem",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"LineItem",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Item",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"items",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"add",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"LineItem",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"sku",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"quantity",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"items",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Collection",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"LineItem",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sku",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"quantity",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>suggests that LineItem is a component of Order - LineItems have no existence outside of their containing order. But the Item objects aren't constructed in the order - they're passed in as needed, and continue to exist, even if the shop has no orders. so they're associated, rather than components.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735095]-[227051187]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>suggests that LineItem is a component of Order - LineItems have no existence outside of their containing order. But the Item objects aren't constructed in the order - they're passed in as needed, and continue to exist, even if the shop has no orders. so they're associated, rather than components.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"LineItem",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"LineItems",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shop":1,
                    "exist":2,
                    "aren":1,
                    "line":2,
                    "suggest":1,
                    "compon":2,
                    "object":1,
                    "need":1,
                    "order":4,
                    "pass":1,
                    "construct":1,
                    "item":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"LineItem",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"LineItems",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>* n.b. the container is <em>responsible</em> for instanciating the component, but it might not actually call new...() itself - this being java, there's usually a factory or two to go through first!</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735095]-[657623834]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>* n.b. the container is <em>responsible</em> for instanciating the component, but it might not actually call new...() itself - this being java, there's usually a factory or two to go through first!</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "instanci":1,
                    "contain":1,
                    "factori":1,
                    "compon":1,
                    "respons":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":14717222,
      "questionId":734891,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":31852911,
          "postId":14717222,
          "creationDate":"2014-01-16",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":715269,
            "displayName":"Gangnus",
            "reputation":8723
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That depends on the way of destruction. The neutronium bomb will destroy city (=people) and trees, but not cars. Or an economical crisis or nearby techno catastroph can destroy the city, with the trees living on."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[14717222-cu31852911]-[69742935]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That depends on the way of destruction. The neutronium bomb will destroy city (=people) and trees, but not cars. Or an economical crisis or nearby techno catastroph can destroy the city, with the trees living on."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "crisi":1,
                        "depend":1,
                        "nearbi":1,
                        "techno":1,
                        "car":1,
                        "neutronium":1,
                        "catastroph":1,
                        "destroy":2,
                        "live":1,
                        "destruct":1,
                        "tree":2,
                        "citi":2,
                        "peopl":1,
                        "bomb":1,
                        "econom":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-02-05",
      "lastActivityDate":"2013-02-15",
      "lastEditDate":"2013-02-15",
      "score":16,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":619860,
        "displayName":"nxhoaf",
        "reputation":694
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a rule of thumb: <img src=\"http://i.stack.imgur.com/WC2eJ.png\"alt=\"enter image description here\"/></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14717222]-[985203540]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a rule of thumb: <img src=\"http://i.stack.imgur.com/WC2eJ.png\"alt=\"enter image description here\"/></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "imgur":1,
                    "descript":1,
                    "png":1,
                    "thumb":1,
                    "img":1,
                    "enter":1,
                    "rule":1,
                    "alt":1,
                    "src":1,
                    "stack":1,
                    "http":1,
                    "imag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Person { private Heart heart; private List&lt;Hand&gt; hands; } class City { private List&lt;Tree&gt; trees; private List&lt;Car&gt; cars } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[14717222]-[-1229218518]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Person",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"heart",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Heart",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"hands",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"List",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "typeArguments":{
                                            "type":"TypeArgumentsNode",
                                            "types":[
                                              {
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"Hand",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"City",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"trees",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"List",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "typeArguments":{
                                            "type":"TypeArgumentsNode",
                                            "types":[
                                              {
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"Tree",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"TextFragmentNode",
                              "text":"private List<Car> cars "
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class Person { private Heart heart; private List<Hand> hands; } class City { private List<Tree> trees; private List<Car> cars } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hand":2,
                    "car":2,
                    "person":1,
                    "tree":2,
                    "citi":1,
                    "heart":2,
                    "list":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Hand",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"List",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Tree",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Tree",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Heart",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"List",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Hand",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"heart",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Heart",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"hands",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"List",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Hand",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"trees",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"List",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Tree",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>In composition</strong> (Person, Heart, Hand), &quot;sub objects&quot; (Heart, Hand) will be destroyed as soon as Person is destroyed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14717222]-[-232574935]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>In composition</strong> (Person, Heart, Hand), &quot;sub objects&quot; (Heart, Hand) will be destroyed as soon as Person is destroyed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hand":2,
                    "composit":1,
                    "strong":2,
                    "object":1,
                    "destroy":2,
                    "person":2,
                    "quot":2,
                    "heart":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>In aggregation</strong> (City, Tree, Car) &quot;sub objects&quot; (Tree, Car) will NOT be destroyed when City is destroyed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14717222]-[-764802403]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>In aggregation</strong> (City, Tree, Car) &quot;sub objects&quot; (Tree, Car) will NOT be destroyed when City is destroyed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aggreg":1,
                    "car":2,
                    "strong":2,
                    "object":1,
                    "destroy":2,
                    "quot":2,
                    "tree":2,
                    "citi":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>The bottom line is, composition stresses on mutual existence, and in aggregation, this property is NOT required.</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14717222]-[1026779456]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>The bottom line is, composition stresses on mutual existence, and in aggregation, this property is NOT required.</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "exist":1,
                    "line":1,
                    "bottom":1,
                    "requir":1,
                    "composit":1,
                    "aggreg":1,
                    "strong":2,
                    "mutual":1,
                    "stress":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":735369,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2009-04-09",
      "lastActivityDate":"2009-04-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3474,
        "displayName":"erickson",
        "reputation":141001
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The conceptual illustrations provided in other answers are useful, but I'd like to share another point I've found helpful. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735369]-[-690486116]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The conceptual illustrations provided in other answers are useful, but I'd like to share another point I've found helpful. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "point":1,
                    "illustr":1,
                    "share":1,
                    "help":1,
                    "found":1,
                    "answer":1,
                    "conceptu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I've gotten some mileage out of UML for code generation, for source code or DDL for relational database. There, I have used composition to indicate that a table has a non-nullable foreign key (in the database), and a non-nullable &quot;parent&quot; (and often &quot;final&quot;) object, in my code. I use aggregation where I intend a record or object to be able to exist as an &quot;orphan&quot;, not attached to any parent object, or to be &quot;adopted&quot; by a different parent object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735369]-[-1315254878]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I've gotten some mileage out of UML for code generation, for source code or DDL for relational database. There, I have used composition to indicate that a table has a non-nullable foreign key (in the database), and a non-nullable &quot;parent&quot; (and often &quot;final&quot;) object, in my code. I use aggregation where I intend a record or object to be able to exist as an &quot;orphan&quot;, not attached to any parent object, or to be &quot;adopted&quot; by a different parent object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":3,
                    "exist":1,
                    "relat":1,
                    "orphan":1,
                    "composit":1,
                    "aggreg":1,
                    "ddl":1,
                    "nullabl":2,
                    "object":4,
                    "adopt":1,
                    "key":1,
                    "code":3,
                    "tabl":1,
                    "intend":1,
                    "attach":1,
                    "uml":1,
                    "foreign":1,
                    "generat":1,
                    "quot":8,
                    "databas":2,
                    "mileag":1,
                    "sourc":1,
                    "record":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In other words, I've used the composition notation as a shorthand to imply some extra constraints that might be needed when writing code for the model.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735369]-[-1502230058]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In other words, I've used the composition notation as a shorthand to imply some extra constraints that might be needed when writing code for the model.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "model":1,
                    "impli":1,
                    "composit":1,
                    "code":1,
                    "need":1,
                    "notat":1,
                    "extra":1,
                    "constraint":1,
                    "word":1,
                    "write":1,
                    "shorthand":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":735034,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2009-04-09",
      "lastActivityDate":"2009-04-09",
      "lastEditDate":"2009-04-09",
      "score":17,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":29734,
        "displayName":"Chris Kessel",
        "reputation":1985
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The example I learned was fingers to the hand. Your hand is composed of fingers. It owns them. If the hand dies, the fingers die. You can't &quot;aggregate&quot; fingers. You can't just go grab extra fingers and attach and detach them from your hand at will.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735034]-[-2017191046]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The example I learned was fingers to the hand. Your hand is composed of fingers. It owns them. If the hand dies, the fingers die. You can't &quot;aggregate&quot; fingers. You can't just go grab extra fingers and attach and detach them from your hand at will.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "finger":5,
                    "learn":1,
                    "compos":1,
                    "own":1,
                    "hand":4,
                    "aggreg":1,
                    "detach":1,
                    "die":2,
                    "attach":1,
                    "extra":1,
                    "grab":1,
                    "quot":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The value here, from a design viewpoint, is often related to object lifespan as another poster said. Say you have a Customer and they have an Account. That Account is a &quot;composed&quot; object of the customer (at least, in most contexts I can think of). If you delete the Customer, the Account has no value on it's own so it would be deleted as well. The reverse is often true on object creation. Since an Account only has meaning in the context of a Customer, you'd have Account creation occur as part of Customer creation (or, if you do it lazily, it'd be part of some Customer transaction).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735034]-[-1562626039]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The value here, from a design viewpoint, is often related to object lifespan as another poster said. Say you have a Customer and they have an Account. That Account is a &quot;composed&quot; object of the customer (at least, in most contexts I can think of). If you delete the Customer, the Account has no value on it's own so it would be deleted as well. The reverse is often true on object creation. Since an Account only has meaning in the context of a Customer, you'd have Account creation occur as part of Customer creation (or, if you do it lazily, it'd be part of some Customer transaction).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "design":1,
                    "delet":2,
                    "custom":6,
                    "revers":1,
                    "relat":1,
                    "compos":1,
                    "occur":1,
                    "context":2,
                    "lazili":1,
                    "mean":1,
                    "creation":3,
                    "object":3,
                    "poster":1,
                    "transact":1,
                    "viewpoint":1,
                    "true":1,
                    "lifespan":1,
                    "quot":2,
                    "account":5,
                    "part":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's useful in design to think about what objects own (compose) other objects vs. ones that just reference (aggregate) other objects. It can help determine where the responsibility lies for object creation/cleanup/updates. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735034]-[-1463485765]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's useful in design to think about what objects own (compose) other objects vs. ones that just reference (aggregate) other objects. It can help determine where the responsibility lies for object creation/cleanup/updates. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "design":1,
                    "determin":1,
                    "compos":1,
                    "updat":1,
                    "aggreg":1,
                    "creation":1,
                    "object":4,
                    "cleanup":1,
                    "refer":1,
                    "respons":1,
                    "lie":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As far as in the code, it's often hard to tell. Most everything in code is an object reference so it may not be obvious whether the referenced object is composed (owned) or aggregated. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[735034]-[-368254659]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As far as in the code, it's often hard to tell. Most everything in code is an object reference so it may not be obvious whether the referenced object is composed (owned) or aggregated. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hard":1,
                    "compos":1,
                    "own":1,
                    "obvious":1,
                    "aggreg":1,
                    "object":2,
                    "code":2,
                    "refer":1,
                    "referenc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":27889087,
      "questionId":734891,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":44333186,
          "postId":27889087,
          "creationDate":"2015-01-15",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":29734,
            "displayName":"Chris Kessel",
            "reputation":1985
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Composition isn't strictly related to lifecycle, but in most real world problems the lifecycle is a primary motivator of whether you'd compose or aggregate. I did hedge in my answer, saying lifecycle is &quot;often&quot; related rather than always related. It's good to note lifecycle isn't required, but stating that view is a &quot;main problem&quot; and wrong (in nice bold font) strikes me as unhelpful and detracts from pointing out the practical usage considerations."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[27889087-cu44333186]-[1176957573]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Composition isn't strictly related to lifecycle, but in most real world problems the lifecycle is a primary motivator of whether you'd compose or aggregate. I did hedge in my answer, saying lifecycle is &quot;often&quot; related rather than always related. It's good to note lifecycle isn't required, but stating that view is a &quot;main problem&quot; and wrong (in nice bold font) strikes me as unhelpful and detracts from pointing out the practical usage considerations."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "strict":1,
                        "motiv":1,
                        "point":1,
                        "consider":1,
                        "real":1,
                        "state":1,
                        "relat":3,
                        "wrong":1,
                        "compos":1,
                        "good":1,
                        "world":1,
                        "unhelp":1,
                        "problem":2,
                        "requir":1,
                        "strike":1,
                        "bold":1,
                        "composit":1,
                        "primari":1,
                        "aggreg":1,
                        "nice":1,
                        "main":1,
                        "lifecycl":4,
                        "hedg":1,
                        "font":1,
                        "note":1,
                        "isn":2,
                        "answer":1,
                        "detract":1,
                        "usag":1,
                        "quot":4,
                        "practic":1,
                        "view":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":44473277,
          "postId":27889087,
          "creationDate":"2015-01-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2795909,
            "displayName":"gwag",
            "reputation":1038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I strongly disagree. Lifecycle considerations cannot be a &quot;primary motivator of whether you'd compose or aggregate&quot;, since you have them in many cases of associations independently of the fact if they represent any kind of part-whole realtionship (aggregation or composition). Whenever an association has an end with a lower bound multiplicity greater than 0, corresponding to a mandatory reference property, you'll get a lifecycle dependency."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[27889087-cu44473277]-[213559401]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I strongly disagree. Lifecycle considerations cannot be a &quot;primary motivator of whether you'd compose or aggregate&quot;, since you have them in many cases of associations independently of the fact if they represent any kind of part-whole realtionship (aggregation or composition). Whenever an association has an end with a lower bound multiplicity greater than 0, corresponding to a mandatory reference property, you'll get a lifecycle dependency."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "properti":1,
                        "motiv":1,
                        "consider":1,
                        "depend":1,
                        "compos":1,
                        "mandatori":1,
                        "composit":1,
                        "primari":1,
                        "aggreg":2,
                        "lower":1,
                        "strong":1,
                        "lifecycl":2,
                        "realtionship":1,
                        "fact":1,
                        "bound":1,
                        "independ":1,
                        "refer":1,
                        "end":1,
                        "quot":2,
                        "part":1,
                        "kind":1,
                        "case":1,
                        "greater":1,
                        "multipl":1,
                        "disagre":1,
                        "repres":1,
                        "associ":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2015-01-11",
      "lastActivityDate":"2015-01-27",
      "lastEditDate":"2015-01-27",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2795909,
        "displayName":"gwag",
        "reputation":1038
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's amazing how much confusion has been created about the distinction between the UML <strong><em>part-whole</em></strong>-<em>relationship</em> concepts <em>aggregation</em> and <em>composition</em>. The main problem is the widespread misunderstanding (even among many expert software developers) that the concept of composition is defined by a life-cycle dependency between the whole and its parts such that the parts cannot exist without the whole. But this view is plain <strong>wrong</strong>, confusing the defining charcteristic with an optional charcteristic.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[1828454509]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's amazing how much confusion has been created about the distinction between the UML <strong><em>part-whole</em></strong>-<em>relationship</em> concepts <em>aggregation</em> and <em>composition</em>. The main problem is the widespread misunderstanding (even among many expert software developers) that the concept of composition is defined by a life-cycle dependency between the whole and its parts such that the parts cannot exist without the whole. But this view is plain <strong>wrong</strong>, confusing the defining charcteristic with an optional charcteristic.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "amaz":1,
                    "depend":1,
                    "misunderstand":1,
                    "exist":1,
                    "wrong":1,
                    "problem":1,
                    "widespread":1,
                    "option":1,
                    "composit":2,
                    "softwar":1,
                    "aggreg":1,
                    "strong":4,
                    "main":1,
                    "expert":1,
                    "relationship":1,
                    "uml":1,
                    "distinct":1,
                    "life":1,
                    "plain":1,
                    "concept":2,
                    "confus":2,
                    "part":3,
                    "defin":2,
                    "develop":1,
                    "cycl":1,
                    "creat":1,
                    "charcterist":2,
                    "view":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>1) Composition</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-277190617]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>1) Composition</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "composit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As <a href=\"http://martinfowler.com/bliki/AggregationAndComposition.html\"rel=\"nofollow\">Martin Fowler has explained</a>, the main issue for characterizing composition is that &quot;an object can only be the part of one composition relationship&quot;. This is also explained in the excellent blog post <a href=\"http://bellekens.com/2010/12/20/uml-composition-vs-aggregation-vs-association/\"rel=\"nofollow\">UML Composition vs Aggregation vs Association</a> by Geert Bellekens. In addition to this defining characteristic of a composition (to have <strong><em>exclusive</em></strong>, or <strong><em>non-shareable</em></strong>, parts), a composition may also come with a life-cycle dependency between the whole and its parts implying that when a whole is destroyed, all of its parts are destroyed with it. However, this only applies to some cases of composition, and not to others, and it is therefore not a defining characteristic. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-622575357]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As <a href=\"http://martinfowler.com/bliki/AggregationAndComposition.html\"rel=\"nofollow\">Martin Fowler has explained</a>, the main issue for characterizing composition is that &quot;an object can only be the part of one composition relationship&quot;. This is also explained in the excellent blog post <a href=\"http://bellekens.com/2010/12/20/uml-composition-vs-aggregation-vs-association/\"rel=\"nofollow\">UML Composition vs Aggregation vs Association</a> by Geert Bellekens. In addition to this defining characteristic of a composition (to have <strong><em>exclusive</em></strong>, or <strong><em>non-shareable</em></strong>, parts), a composition may also come with a life-cycle dependency between the whole and its parts implying that when a whole is destroyed, all of its parts are destroyed with it. However, this only applies to some cases of composition, and not to others, and it is therefore not a defining characteristic. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "post":1,
                    "martinfowl":1,
                    "exclus":1,
                    "martin":1,
                    "depend":1,
                    "explain":2,
                    "addit":1,
                    "characterist":2,
                    "impli":1,
                    "geert":1,
                    "composit":8,
                    "rel":2,
                    "belleken":2,
                    "aggreg":3,
                    "issu":1,
                    "strong":4,
                    "main":1,
                    "fowler":1,
                    "object":1,
                    "excel":1,
                    "relationship":1,
                    "blog":1,
                    "destroy":2,
                    "bliki":1,
                    "nofollow":2,
                    "uml":2,
                    "character":1,
                    "life":1,
                    "quot":2,
                    "part":4,
                    "case":1,
                    "appli":1,
                    "defin":2,
                    "html":1,
                    "href":2,
                    "cycl":1,
                    "http":2,
                    "shareabl":1,
                    "associ":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For instance, in the <code>Course</code>-<code>Lecture</code> composition shown in the following diagram, we have a lifecycle dependency between courses and lectures such that when a course is dropped (from a curriculum), all its lectures are dropped/deleted as well. This is implied by the <strong><em>exactly one</em></strong> multiplicity at the composite side of the composition line.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-347789582]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For instance, in the <code>Course</code>-<code>Lecture</code> composition shown in the following diagram, we have a lifecycle dependency between courses and lectures such that when a course is dropped (from a curriculum), all its lectures are dropped/deleted as well. This is implied by the <strong><em>exactly one</em></strong> multiplicity at the composite side of the composition line.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "delet":1,
                    "depend":1,
                    "diagram":1,
                    "line":1,
                    "impli":1,
                    "composit":3,
                    "strong":2,
                    "lifecycl":1,
                    "drop":2,
                    "code":4,
                    "lectur":3,
                    "shown":1,
                    "cours":1,
                    "multipl":1,
                    "curriculum":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><img src=\"http://i.stack.imgur.com/3xOiu.png\"alt=\"enter image description here\"/></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-877345101]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><img src=\"http://i.stack.imgur.com/3xOiu.png\"alt=\"enter image description here\"/></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "imgur":1,
                    "descript":1,
                    "png":1,
                    "img":1,
                    "enter":1,
                    "oiu":1,
                    "alt":1,
                    "src":1,
                    "stack":1,
                    "http":1,
                    "imag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The UML spec states: &quot;A part may be removed from a composite instance before the composite instance is deleted, and thus not be deleted as part of the composite instance.&quot; In the example of a <code>Car</code>-<code>Engine</code> composition, as shown in the following diagram, it's clearly the case that the engine can be detached from the car before the car is destroyed, in which case the engine is not destroyed and can be re-used. This is implied by the <strong><em>zero or one</em></strong> multiplicity at the composite side of the composition line.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[2077390319]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The UML spec states: &quot;A part may be removed from a composite instance before the composite instance is deleted, and thus not be deleted as part of the composite instance.&quot; In the example of a <code>Car</code>-<code>Engine</code> composition, as shown in the following diagram, it's clearly the case that the engine can be detached from the car before the car is destroyed, in which case the engine is not destroyed and can be re-used. This is implied by the <strong><em>zero or one</em></strong> multiplicity at the composite side of the composition line.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "remov":1,
                    "delet":2,
                    "diagram":1,
                    "state":1,
                    "line":1,
                    "impli":1,
                    "composit":6,
                    "car":3,
                    "strong":2,
                    "detach":1,
                    "code":4,
                    "destroy":2,
                    "shown":1,
                    "engin":3,
                    "uml":1,
                    "spec":1,
                    "quot":2,
                    "part":2,
                    "multipl":1,
                    "instanc":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><img src=\"http://i.stack.imgur.com/ns5sf.png\"alt=\"enter image description here\"/></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[1515048806]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><img src=\"http://i.stack.imgur.com/ns5sf.png\"alt=\"enter image description here\"/></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "imgur":1,
                    "descript":1,
                    "png":1,
                    "img":1,
                    "enter":1,
                    "alt":1,
                    "src":1,
                    "stack":1,
                    "http":1,
                    "imag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Tthe <strong><em>multiplicity</em></strong> of a composition's association end at the whole side is either 1 or 0..1, depending on the fact if parts are <strong><em>separable</em></strong>, that is, if they can be detached and exist on their own.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[136126255]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Tthe <strong><em>multiplicity</em></strong> of a composition's association end at the whole side is either 1 or 0..1, depending on the fact if parts are <strong><em>separable</em></strong>, that is, if they can be detached and exist on their own.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "depend":1,
                    "exist":1,
                    "composit":1,
                    "separ":1,
                    "tthe":1,
                    "strong":4,
                    "detach":1,
                    "fact":1,
                    "end":1,
                    "part":1,
                    "multipl":1,
                    "associ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>2) Aggregation</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-754667600]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>2) Aggregation</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aggreg":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>An aggregation is another special form of association with the intended meaning of a part-whole-relationship, where the parts of a whole can be shared with other wholes. For instance, we can model an aggregation between the classes <code>DegreeProgram</code> and <code>Course</code>, as shown in the following diagram, since a course is part of a degree program and a course can be shared among two or more degree programs (e.g. an engineering degree could share a C programmin course with a computer science degree). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-66317933]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>An aggregation is another special form of association with the intended meaning of a part-whole-relationship, where the parts of a whole can be shared with other wholes. For instance, we can model an aggregation between the classes <code>DegreeProgram</code> and <code>Course</code>, as shown in the following diagram, since a course is part of a degree program and a course can be shared among two or more degree programs (e.g. an engineering degree could share a C programmin course with a computer science degree). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DegreeProgram",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":3,
                    "scienc":1,
                    "programmin":1,
                    "diagram":1,
                    "model":1,
                    "mean":1,
                    "aggreg":2,
                    "degre":5,
                    "code":4,
                    "share":3,
                    "intend":1,
                    "relationship":1,
                    "comput":1,
                    "shown":1,
                    "engin":1,
                    "whole":1,
                    "class":1,
                    "part":3,
                    "special":1,
                    "form":1,
                    "associ":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DegreeProgram",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><img src=\"http://i.stack.imgur.com/dkm9P.png\"alt=\"enter image description here\"/></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[62985356]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><img src=\"http://i.stack.imgur.com/dkm9P.png\"alt=\"enter image description here\"/></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "imgur":1,
                    "descript":1,
                    "png":1,
                    "img":1,
                    "enter":1,
                    "alt":1,
                    "dkm":1,
                    "src":1,
                    "stack":1,
                    "http":1,
                    "imag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, this characteristic of <strong><em>shareable parts</em></strong> doesn't mean much, really, so the UML concept of an aggregation doesn't have much semantics (the UML spec says: &quot;Precise semantics of shared aggregation varies by application area and modeler&quot;). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[1359229170]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, this characteristic of <strong><em>shareable parts</em></strong> doesn't mean much, really, so the UML concept of an aggregation doesn't have much semantics (the UML spec says: &quot;Precise semantics of shared aggregation varies by application area and modeler&quot;). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "precis":1,
                    "area":1,
                    "model":1,
                    "characterist":1,
                    "aggreg":2,
                    "strong":2,
                    "share":1,
                    "uml":2,
                    "vari":1,
                    "applic":1,
                    "semant":2,
                    "spec":1,
                    "concept":1,
                    "quot":2,
                    "part":1,
                    "shareabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <strong><em>multiplicity</em></strong> of an aggregation's association end at the whole side may be any number (*) because a part may belong to, or <strong><em>shared</em></strong> among, any number of wholes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27889087]-[-1618517386]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <strong><em>multiplicity</em></strong> of an aggregation's association end at the whole side may be any number (*) because a part may belong to, or <strong><em>shared</em></strong> among, any number of wholes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "number":2,
                    "aggreg":1,
                    "strong":4,
                    "belong":1,
                    "share":1,
                    "end":1,
                    "whole":1,
                    "part":1,
                    "multipl":1,
                    "associ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":21161297,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2014-01-16",
      "lastActivityDate":"2014-01-22",
      "lastEditDate":"2014-01-22",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":715269,
        "displayName":"Gangnus",
        "reputation":8723
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Let's set the terms. The Aggregation is a metaterm in the UML standard, and means BOTH composition and shared aggregation, simply named <em>shared</em>. To often it is named incorrectly &quot;aggregation&quot;. It is BAD, for composition is an aggregation, too. As I understand, you mean &quot;shared&quot;.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[-1389825192]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Let's set the terms. The Aggregation is a metaterm in the UML standard, and means BOTH composition and shared aggregation, simply named <em>shared</em>. To often it is named incorrectly &quot;aggregation&quot;. It is BAD, for composition is an aggregation, too. As I understand, you mean &quot;shared&quot;.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "name":2,
                    "standard":1,
                    "set":1,
                    "understand":1,
                    "composit":2,
                    "term":1,
                    "mean":1,
                    "aggreg":4,
                    "bad":1,
                    "share":3,
                    "simpli":1,
                    "uml":1,
                    "incorrect":1,
                    "quot":4,
                    "metaterm":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Further from UML standard:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[-1436006174]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Further from UML standard:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "standard":1,
                    "uml":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>composite - Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[1611985476]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>composite - Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "exist":1,
                    "compos":1,
                    "composit":3,
                    "aggreg":1,
                    "blockquot":2,
                    "object":2,
                    "part":1,
                    "respons":1,
                    "storag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So, University to cathedras association is a composition, because cathedra doesn't exist out of University (IMHO)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[-695018147]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So, University to cathedras association is a composition, because cathedra doesn't exist out of University (IMHO)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exist":1,
                    "composit":1,
                    "univers":2,
                    "imho":1,
                    "cathedra":2,
                    "associ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Precise semantics of shared aggregation varies by application area and modeler.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[890217589]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Precise semantics of shared aggregation varies by application area and modeler.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "precis":1,
                    "area":1,
                    "model":1,
                    "aggreg":1,
                    "blockquot":2,
                    "share":1,
                    "vari":1,
                    "applic":1,
                    "semant":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I.e., all other associations can be drawn as shared aggregations, if you are only following to some principles of yours or of somebody else. Also look <a href=\"http://stackoverflow.com/a/21279410/715269\">here</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21161297]-[593177124]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I.e., all other associations can be drawn as shared aggregations, if you are only following to some principles of yours or of somebody else. Also look <a href=\"http://stackoverflow.com/a/21279410/715269\">here</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "drawn":1,
                    "aggreg":1,
                    "principl":1,
                    "share":1,
                    "stackoverflow":1,
                    "href":1,
                    "http":1,
                    "associ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19726109,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2013-11-01",
      "lastActivityDate":"2013-11-01",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2944808,
        "displayName":"read",
        "reputation":1
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's so difficult to do a difference between aggregate relation and composite relation, but I'm going to take some examples, We have a house and rooms, here we have a composite relation, room it's a part of the house , and room life started with house life's and Will finish when house life's finish, room it's a part of the house, we talk about composition, like country and capital, book and pages. For aggregate relation example, take team and players, player can exist without team, and team is a group of players, and player life can started before team life's, if we speak about programming, we can create players and after we Will create team, but for composition no, we create room s inside of house . Composition ----&gt; composite|composing. Aggregation -------&gt; group | element</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19726109]-[-131092718]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's so difficult to do a difference between aggregate relation and composite relation, but I'm going to take some examples, We have a house and rooms, here we have a composite relation, room it's a part of the house , and room life started with house life's and Will finish when house life's finish, room it's a part of the house, we talk about composition, like country and capital, book and pages. For aggregate relation example, take team and players, player can exist without team, and team is a group of players, and player life can started before team life's, if we speak about programming, we can create players and after we Will create team, but for composition no, we create room s inside of house . Composition ----&gt; composite|composing. Aggregation -------&gt; group | element</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "exist":1,
                    "relat":4,
                    "compos":1,
                    "countri":1,
                    "exampl":1,
                    "differ":1,
                    "book":1,
                    "page":1,
                    "composit":6,
                    "aggreg":3,
                    "talk":1,
                    "finish":2,
                    "capit":1,
                    "element":1,
                    "hous":6,
                    "difficult":1,
                    "player":5,
                    "insid":1,
                    "team":5,
                    "life":5,
                    "part":2,
                    "room":5,
                    "start":2,
                    "creat":3,
                    "group":2,
                    "speak":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":734911,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2009-04-09",
      "lastActivityDate":"2009-04-09",
      "score":28,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":83109,
        "displayName":"David M",
        "reputation":47902
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Composition implies that the child objects share a lifespan with the parent. Aggregation doesn't. For example, a chess board is composed of chess squares - the chess squares don't really exist without the board. However, a car is an aggregation of parts - a car exhaust is still a car exhaust if it's not part of a car at the time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734911]-[-2133658636]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Composition implies that the child objects share a lifespan with the parent. Aggregation doesn't. For example, a chess board is composed of chess squares - the chess squares don't really exist without the board. However, a car is an aggregation of parts - a car exhaust is still a car exhaust if it's not part of a car at the time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":1,
                    "chess":3,
                    "exist":1,
                    "compos":1,
                    "impli":1,
                    "composit":1,
                    "aggreg":2,
                    "car":4,
                    "exhaust":2,
                    "object":1,
                    "child":1,
                    "share":1,
                    "board":2,
                    "lifespan":1,
                    "time":1,
                    "part":2,
                    "squar":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":27344078,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2014-12-07",
      "lastActivityDate":"2014-12-07",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":233932,
        "displayName":"Azfar Niaz",
        "reputation":513
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Consider human body parts like kidney, liver, brain. If we try to map concept of composition and aggregation here, it would be like:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27344078]-[828603409]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Consider human body parts like kidney, liver, brain. If we try to map concept of composition and aggregation here, it would be like:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "map":1,
                    "human":1,
                    "composit":1,
                    "aggreg":1,
                    "brain":1,
                    "kidney":1,
                    "liver":1,
                    "concept":1,
                    "bodi":1,
                    "part":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Before the advent of body parts transplantation like that of kidney's and liver's, these two body parts were in composition with human body and cannot exist isolation with human body. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27344078]-[-1526469942]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Before the advent of body parts transplantation like that of kidney's and liver's, these two body parts were in composition with human body and cannot exist isolation with human body. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "advent":1,
                    "exist":1,
                    "human":2,
                    "composit":1,
                    "transplant":1,
                    "isol":1,
                    "kidney":1,
                    "liver":1,
                    "bodi":4,
                    "part":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But after the advent of body part transplantation, they can be transplanted in another human body, so these parts are in aggregation with human body as their existence in isolation with human body is possible now.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27344078]-[-287729235]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But after the advent of body part transplantation, they can be transplanted in another human body, so these parts are in aggregation with human body as their existence in isolation with human body is possible now.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "advent":1,
                    "exist":1,
                    "human":3,
                    "aggreg":1,
                    "transplant":2,
                    "isol":1,
                    "bodi":4,
                    "part":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Similarly in OOP, an object tends to change its orientation towards other objects relative to time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27344078]-[-588795135]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Similarly in OOP, an object tends to change its orientation towards other objects relative to time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "oop":1,
                    "relat":1,
                    "similar":1,
                    "object":2,
                    "orient":1,
                    "time":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":734997,
      "questionId":734891,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":557793,
          "postId":734997,
          "creationDate":"2009-04-14",
          "score":7,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":18364,
            "displayName":"chimp",
            "reputation":1391
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, you shouldn't waste too much time on this issue: UML is an OOA/OOD language; Aggregation/Composition is usually a decision best deferred until OOP. If you try to put too much detail into your UML models, you risk analysis paralysis."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu557793]-[390820112]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, you shouldn't waste too much time on this issue: UML is an OOA/OOD language; Aggregation/Composition is usually a decision best deferred until OOP. If you try to put too much detail into your UML models, you risk analysis paralysis."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"language",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "varType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"OOD",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "defer":1,
                        "languag":1,
                        "oop":1,
                        "wast":1,
                        "ood":1,
                        "model":1,
                        "paralysi":1,
                        "composit":1,
                        "aggreg":1,
                        "issu":1,
                        "risk":1,
                        "decis":1,
                        "uml":2,
                        "put":1,
                        "detail":1,
                        "time":1,
                        "analysi":1,
                        "shouldn":1,
                        "ooa":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"OOD",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"language",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"OOD",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":546358,
          "postId":734997,
          "creationDate":"2009-04-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":83109,
            "displayName":"David M",
            "reputation":47902
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I said chess square rather than chess piece, but all valid points."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu546358]-[-1094182407]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I said chess square rather than chess piece, but all valid points."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "chess":2,
                        "valid":1,
                        "piec":1,
                        "squar":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":546370,
          "postId":734997,
          "creationDate":"2009-04-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":45507,
            "displayName":"Dopyiii",
            "reputation":1376
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Hexagon, you've identified issues that make me go back and forth between agg vs. comp. I'll try to keep the &quot;it depends&quot; in mind."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu546370]-[1109791544]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Hexagon, you've identified issues that make me go back and forth between agg vs. comp. I'll try to keep the &quot;it depends&quot; in mind."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "agg":1,
                        "comp":1,
                        "depend":1,
                        "issu":1,
                        "mind":1,
                        "hexagon":1,
                        "back":1,
                        "identifi":1,
                        "make":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":546504,
          "postId":734997,
          "creationDate":"2009-04-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":29734,
            "displayName":"Chris Kessel",
            "reputation":1985
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I definitely take issue with the &quot;It isn't worth it&quot; mindset. If you don't think through who &quot;owns&quot; an object and is responsible for it's lifespan, you'll get very crappy code related to object CRUD, particularly cleanup, with Null pointers flying around as object hierarchies are left in bad states."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu546504]-[186187522]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I definitely take issue with the &quot;It isn't worth it&quot; mindset. If you don't think through who &quot;owns&quot; an object and is responsible for it's lifespan, you'll get very crappy code related to object CRUD, particularly cleanup, with Null pointers flying around as object hierarchies are left in bad states."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pointer":1,
                        "state":1,
                        "relat":1,
                        "own":1,
                        "crud":1,
                        "left":1,
                        "bad":1,
                        "issu":1,
                        "object":3,
                        "code":1,
                        "crappi":1,
                        "worth":1,
                        "mindset":1,
                        "cleanup":1,
                        "hierarchi":1,
                        "fli":1,
                        "isn":1,
                        "lifespan":1,
                        "quot":4,
                        "respons":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":547471,
          "postId":734997,
          "creationDate":"2009-04-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":88451,
            "displayName":"Hexagon",
            "reputation":3133
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Object ownership is important, but I'm not certain it has much to do with aggregation/composition. Even if something is composed within something else, a pointer/reference to it may still be passed to others. And when the composing object dies, something still has to be done."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu547471]-[-233406774]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Object ownership is important, but I'm not certain it has much to do with aggregation/composition. Even if something is composed within something else, a pointer/reference to it may still be passed to others. And when the composing object dies, something still has to be done."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pointer":1,
                        "compos":2,
                        "composit":1,
                        "aggreg":1,
                        "object":2,
                        "die":1,
                        "import":1,
                        "ownership":1,
                        "refer":1,
                        "pass":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":547480,
          "postId":734997,
          "creationDate":"2009-04-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":88451,
            "displayName":"Hexagon",
            "reputation":3133
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Chess pieces / chess squares - point taken. I can still come up with an example where a chess *square* isn't a composition, but this is harder..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu547480]-[-51116159]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Chess pieces / chess squares - point taken. I can still come up with an example where a chess *square* isn't a composition, but this is harder..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "chess":3,
                        "composit":1,
                        "isn":1,
                        "piec":1,
                        "harder":1,
                        "squar":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13818696,
          "postId":734997,
          "creationDate":"2012-05-18",
          "score":7,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":44169,
            "displayName":"Ronnie",
            "reputation":543
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 for &quot;don't waste too much time on this&quot;. That's what I needed to hear!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu13818696]-[373937077]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 for &quot;don't waste too much time on this&quot;. That's what I needed to hear!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wast":1,
                        "hear":1,
                        "need":1,
                        "quot":2,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15254944,
          "postId":734997,
          "creationDate":"2012-07-18",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":508214,
            "displayName":"gTito",
            "reputation":560
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;don't waste too much time on this&quot; Why don't interviewers understand this?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu15254944]-[38600271]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;don't waste too much time on this&quot; Why don't interviewers understand this?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wast":1,
                        "interview":1,
                        "understand":1,
                        "quot":2,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":25543344,
          "postId":734997,
          "creationDate":"2013-07-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1168342,
            "displayName":"Fuhrmanator",
            "reputation":1597
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@gTito It makes them feel feel smarter than you? http://www.huffingtonpost.com/2013/06/20/google-brainteasers_n_3472406.html"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu25543344]-[733970180]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@gTito It makes them feel feel smarter than you? http://www.huffingtonpost.com/2013/06/20/google-brainteasers_n_3472406.html"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"gTito",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"brainteasers_n_3472406",
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "feel":2,
                        "googl":1,
                        "smarter":1,
                        "huffingtonpost":1,
                        "tito":1,
                        "make":1,
                        "html":1,
                        "http":1,
                        "brainteas":1,
                        "www":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":38198046,
          "postId":734997,
          "creationDate":"2014-07-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":903998,
            "displayName":"Victor",
            "reputation":849
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The best answer ever stated... excelente!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[734997-cu38198046]-[1768933858]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The best answer ever stated... excelente!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "state":1,
                        "answer":1,
                        "excelent":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-04-09",
      "lastActivityDate":"2009-04-09",
      "lastEditDate":"2009-04-09",
      "score":59,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":88451,
        "displayName":"Hexagon",
        "reputation":3133
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The distinction between aggregation and composition depends on context.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734997]-[-264303322]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The distinction between aggregation and composition depends on context.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "depend":1,
                    "context":1,
                    "composit":1,
                    "aggreg":1,
                    "distinct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Take the car example mentioned in another answer - yes, it is true that a car exhaust can stand &quot;on its own&quot; so may not be in composition with a car - but it depends on the application. If you build an application that actually has to deal with stand alone car exhausts (a car shop management application?), aggregation would be your choice. But if this is a simple racing game and the car exhaust only serves as part of a car - well, composition would be quite fine.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734997]-[-1082244792]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Take the car example mentioned in another answer - yes, it is true that a car exhaust can stand &quot;on its own&quot; so may not be in composition with a car - but it depends on the application. If you build an application that actually has to deal with stand alone car exhausts (a car shop management application?), aggregation would be your choice. But if this is a simple racing game and the car exhaust only serves as part of a car - well, composition would be quite fine.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shop":1,
                    "simpl":1,
                    "depend":1,
                    "serv":1,
                    "composit":2,
                    "aggreg":1,
                    "build":1,
                    "car":7,
                    "exhaust":3,
                    "stand":2,
                    "mention":1,
                    "race":1,
                    "applic":3,
                    "choic":1,
                    "true":1,
                    "answer":1,
                    "quot":2,
                    "fine":1,
                    "part":1,
                    "manag":1,
                    "game":1,
                    "deal":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Chess board? Same problem. A chess piece doesn't exist without a chess board only in certain applications. In others (like that of a toy manufacturer), a chess piece can surely not be composed into a chess board.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734997]-[744296590]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Chess board? Same problem. A chess piece doesn't exist without a chess board only in certain applications. In others (like that of a toy manufacturer), a chess piece can surely not be composed into a chess board.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chess":5,
                    "exist":1,
                    "sure":1,
                    "compos":1,
                    "problem":1,
                    "board":3,
                    "applic":1,
                    "piec":2,
                    "manufactur":1,
                    "toy":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Things get even worse when trying to map composition/aggregation to your favorite programming language. In some languages, the difference can be easier to notice (&quot;by reference&quot; vs. &quot;by value&quot;, when things are simple) but in others may not exist at all.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734997]-[19435198]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Things get even worse when trying to map composition/aggregation to your favorite programming language. In some languages, the difference can be easier to notice (&quot;by reference&quot; vs. &quot;by value&quot;, when things are simple) but in others may not exist at all.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "languag":2,
                    "simpl":1,
                    "exist":1,
                    "map":1,
                    "differ":1,
                    "composit":1,
                    "wors":1,
                    "aggreg":1,
                    "thing":2,
                    "easier":1,
                    "favorit":1,
                    "refer":1,
                    "quot":4,
                    "notic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And one last word of advice? Don't waste too much time on this issue. It isn't worth it. The distinction is hardly useful in practice (even if you have a completely clear &quot;composition&quot;, you may still want to implement it as an aggregation due to technical reasons - for example, caching).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[734997]-[-767726119]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And one last word of advice? Don't waste too much time on this issue. It isn't worth it. The distinction is hardly useful in practice (even if you have a completely clear &quot;composition&quot;, you may still want to implement it as an aggregation due to technical reasons - for example, caching).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "due":1,
                    "wast":1,
                    "cach":1,
                    "advic":1,
                    "clear":1,
                    "composit":1,
                    "aggreg":1,
                    "issu":1,
                    "reason":1,
                    "worth":1,
                    "distinct":1,
                    "isn":1,
                    "implement":1,
                    "quot":2,
                    "technic":1,
                    "complet":1,
                    "time":1,
                    "practic":1,
                    "word":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":1468285,
      "questionId":734891,
      "comments":[
        
      ],
      "creationDate":"2009-09-23",
      "lastActivityDate":"2013-10-23",
      "lastEditDate":"2013-10-23",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":156522,
        "displayName":"vsingh",
        "reputation":1272
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Composition and Aggregation are types of associations. They are very closely related and in terms of programming there does not appear much difference. I will try to explain the difference between these two by java code examples</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[-2145280866]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Composition and Aggregation are types of associations. They are very closely related and in terms of programming there does not appear much difference. I will try to explain the difference between these two by java code examples</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "explain":1,
                    "relat":1,
                    "exampl":1,
                    "differ":2,
                    "composit":1,
                    "term":1,
                    "aggreg":1,
                    "code":1,
                    "type":1,
                    "close":1,
                    "associ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Aggregation: the object exists outside the other, is created outside, so it is passed as an argument (for example) to the construtor. Ex: People \u2013 car. The car is create in a different context and than becomes a person property.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[-2002736569]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Aggregation: the object exists outside the other, is created outside, so it is passed as an argument (for example) to the construtor. Ex: People \u2013 car. The car is create in a different context and than becomes a person property.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "exist":1,
                    "context":1,
                    "aggreg":1,
                    "car":2,
                    "object":1,
                    "person":1,
                    "pass":1,
                    "construtor":1,
                    "peopl":1,
                    "creat":2,
                    "argument":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Composition: the object only exists, or only makes sense inside the other, as a part of the other. Ex: People \u2013 heart. You don\u2019t create a heart and than passes it to a person. // WebServer is aggregated of a HttpListener and a RequestProcessor</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[14019173]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Composition: the object only exists, or only makes sense inside the other, as a part of the other. Ex: People \u2013 heart. You don\u2019t create a heart and than passes it to a person. // WebServer is aggregated of a HttpListener and a RequestProcessor</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WebServer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HttpListener",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"RequestProcessor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "request":1,
                    "server":1,
                    "exist":1,
                    "composit":1,
                    "aggreg":1,
                    "object":1,
                    "web":1,
                    "listen":1,
                    "insid":1,
                    "processor":1,
                    "person":1,
                    "pass":1,
                    "make":1,
                    "part":1,
                    "heart":2,
                    "peopl":1,
                    "http":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"WebServer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HttpListener",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RequestProcessor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public class WebServer { private HttpListener listener; private RequestProcessor processor; public WebServer(HttpListener listener, RequestProcessor processor) { this.listener = listener; this.processor = processor; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[1468285]-[1676658483]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WebServer",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"listener",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"HttpListener",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"processor",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"RequestProcessor",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"WebServer",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"HttpListener",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"listener",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "formalParameterDeclarator":{
                                      "type":"FormalParameterDeclsNode",
                                      "modifiers":[
                                        
                                      ],
                                      "parameterType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"RequestProcessor",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "nextDeclarator":{
                                        "type":"AdditionalFormalParameterDeclNode",
                                        "variableDeclarator":{
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"processor",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"listener",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"listener",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"processor",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"processor",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"public class WebServer { private HttpListener listener; private RequestProcessor processor; public WebServer(HttpListener listener, RequestProcessor processor) { this.listener = listener; this.processor = processor; } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":2,
                    "server":2,
                    "web":2,
                    "listen":6,
                    "processor":6,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HttpListener",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RequestProcessor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"listener",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HttpListener",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"processor",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"RequestProcessor",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"listener",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"processor",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Code example for composition</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[1022145429]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Code example for composition</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "composit":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>// WebServer is an composition of HttpListener and RequestProcessor and controls their lifecycle</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[-1408084213]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>// WebServer is an composition of HttpListener and RequestProcessor and controls their lifecycle</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WebServer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HttpListener",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"RequestProcessor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":1,
                    "server":1,
                    "composit":1,
                    "lifecycl":1,
                    "web":1,
                    "listen":1,
                    "processor":1,
                    "control":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"WebServer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HttpListener",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RequestProcessor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public class WebServer { private HttpListener listener; private RequestProcessor processor; public WebServer() { this.listener = new HttpListener(80); this.processor = new RequestProcessor(\u201c/www/root\u201d); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[1468285]-[1159365579]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WebServer",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"listener",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"HttpListener",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"processor",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"RequestProcessor",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"WebServer",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"listener",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"ConstructorCreatorNode",
                                        "creatorType":{
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"HttpListener",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "expressionArgs":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            {
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"IntegerLiteralNode",
                                                "valueRep":"80"
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"this"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"."
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"processor"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":" "
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"="
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":" "
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"new"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":" "
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"RequestProcessor"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"("
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"\u201c"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"/"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"www"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"/"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"root"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":"\u201d"
                                  },
                                  {
                                    "type":"TextFragmentNode",
                                    "text":")"
                                  },
                                  {
                                    "type":"EmptyStatementNode",
                                    "comma":{
                                      "type":"SeparatorNode",
                                      "symbol":";",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"public class WebServer { private HttpListener listener; private RequestProcessor processor; public WebServer() { this.listener = new HttpListener(80); this.processor = new RequestProcessor(\u201c/www/root\u201d); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":2,
                    "server":2,
                    "root":1,
                    "web":2,
                    "listen":4,
                    "processor":4,
                    "http":2,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HttpListener",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RequestProcessor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"listener",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HttpListener",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"processor",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"RequestProcessor",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Explained here with an example <a href=\"http://www.skill-guru.com/blog/2009/08/26/difference-between-aggregation-and-composition/\"rel=\"nofollow\">Difference between Aggregation and Composition</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1468285]-[1428593881]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Explained here with an example <a href=\"http://www.skill-guru.com/blog/2009/08/26/difference-between-aggregation-and-composition/\"rel=\"nofollow\">Difference between Aggregation and Composition</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "explain":1,
                    "differ":2,
                    "composit":2,
                    "rel":1,
                    "aggreg":2,
                    "guru":1,
                    "blog":1,
                    "nofollow":1,
                    "skill":1,
                    "href":1,
                    "http":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":800622,
      "questionId":734891,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":27904999,
          "postId":800622,
          "creationDate":"2013-09-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":317716,
            "displayName":"Asif Shahzad",
            "reputation":462
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But part-of and has terms confuses sometime. For example, a Person class &quot;has&quot; name, so shows as Person has aggregation relation with name. In fact, it is composition relation. Why? When Person object destroys, so should the name. And the term &quot;name is a part-of person&quot;, does not sounds natural."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[800622-cu27904999]-[-1542695961]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But part-of and has terms confuses sometime. For example, a Person class &quot;has&quot; name, so shows as Person has aggregation relation with name. In fact, it is composition relation. Why? When Person object destroys, so should the name. And the term &quot;name is a part-of person&quot;, does not sounds natural."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "natur":1,
                        "show":1,
                        "relat":2,
                        "composit":1,
                        "term":2,
                        "aggreg":1,
                        "object":1,
                        "fact":1,
                        "destroy":1,
                        "sound":1,
                        "person":4,
                        "quot":4,
                        "confus":1,
                        "part":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-04-29",
      "lastActivityDate":"2009-04-29",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":44815,
        "displayName":"Raj Rao",
        "reputation":3797
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The example that I like: <strong>Composition:</strong> Water is a <strong>part-of</strong> a Pond. (Pond is a composition of water.) <strong>Aggregation:</strong> Pond <strong>has</strong> ducks and fish (Pond aggregates ducks and fish)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[800622]-[-63740300]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The example that I like: <strong>Composition:</strong> Water is a <strong>part-of</strong> a Pond. (Pond is a composition of water.) <strong>Aggregation:</strong> Pond <strong>has</strong> ducks and fish (Pond aggregates ducks and fish)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pond":4,
                    "composit":2,
                    "aggreg":2,
                    "strong":8,
                    "duck":2,
                    "water":2,
                    "fish":2,
                    "part":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As you can see I have bolded &quot;part-of&quot; and &quot;has&quot;, as these 2 phrases can typically point to what kind of a connection exists between the classes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[800622]-[-238109682]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As you can see I have bolded &quot;part-of&quot; and &quot;has&quot;, as these 2 phrases can typically point to what kind of a connection exists between the classes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "exist":1,
                    "connect":1,
                    "bold":1,
                    "phrase":1,
                    "typic":1,
                    "class":1,
                    "quot":4,
                    "part":1,
                    "kind":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But as pointed out by others, many times whether the connection is a composition or an aggregation depends on the application.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[800622]-[1466677788]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But as pointed out by others, many times whether the connection is a composition or an aggregation depends on the application.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "depend":1,
                    "connect":1,
                    "composit":1,
                    "aggreg":1,
                    "applic":1,
                    "time":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}