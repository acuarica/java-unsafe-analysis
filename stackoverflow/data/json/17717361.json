{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":17717361,
    "title":"How do I put Serializable Objects in a JSON body? In what format should I store in my database?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "json",
      "osgi",
      "serializable"
    ],
    "creationDate":"2013-07-18",
    "lastActivityDate":"2013-07-18",
    "lastEditDate":"2013-07-18",
    "score":0,
    "viewCount":93,
    "owner":{
      "type":"StackOverflowUser",
      "id":2182237,
      "displayName":"Don",
      "reputation":420
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am building a logging/journal service for an osgi framework, with the intention of using my journal entries for restoring the system from a backup after a systemfailure. But I came across a problem: to make sure I have enough data, necessary to be able to restore the system correctly, I need to pass used functioncalls and their arguments.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17717361]-[880875646]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am building a logging/journal service for an osgi framework, with the intention of using my journal entries for restoring the system from a backup after a systemfailure. But I came across a problem: to make sure I have enough data, necessary to be able to restore the system correctly, I need to pass used functioncalls and their arguments.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "backup":1,
                  "system":2,
                  "intent":1,
                  "problem":1,
                  "restor":2,
                  "journal":2,
                  "correct":1,
                  "data":1,
                  "systemfailur":1,
                  "build":1,
                  "framework":1,
                  "functioncal":1,
                  "entri":1,
                  "pass":1,
                  "make":1,
                  "argument":1,
                  "servic":1,
                  "log":1,
                  "osgi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I pass the functionName as a String to my journalService and the arguments as an array of Serializable Objects. I demand the arguments to be Serializable because I need to persist them to an external database. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17717361]-[-1827791478]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I pass the functionName as a String to my journalService and the arguments as an array of Serializable Objects. I demand the arguments to be Serializable because I need to persist them to an external database. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"functionName",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"journalService",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "journal":1,
                  "serializ":2,
                  "object":1,
                  "array":1,
                  "persist":1,
                  "function":1,
                  "extern":1,
                  "pass":1,
                  "databas":1,
                  "demand":1,
                  "argument":2,
                  "servic":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I contact my database via a REST/JSON framework, so I just want to post my journal entries to my database. My problem however is this: how can I put the Serializable Objects (the args) into my JSON body? And in what format do I need to store them in my database?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17717361]-[-1331929467]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I contact my database via a REST/JSON framework, so I just want to post my journal entries to my database. My problem however is this: how can I put the Serializable Objects (the args) into my JSON body? And in what format do I need to store them in my database?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "format":1,
                  "post":1,
                  "json":2,
                  "problem":1,
                  "rest":1,
                  "journal":1,
                  "serializ":1,
                  "store":1,
                  "contact":1,
                  "framework":1,
                  "object":1,
                  "entri":1,
                  "put":1,
                  "databas":3,
                  "bodi":1,
                  "arg":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":17717451,
      "questionId":17717361,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":25827485,
          "postId":17717451,
          "creationDate":"2013-07-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2182237,
            "displayName":"Don",
            "reputation":420
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I found a java package: org.quickconnect.json wich provides JSONOutputStreams and methods to convert a Serializable to exactly that. (perfect for my case) But can i store outputstream objects directly in a database?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[17717451-cu25827485]-[197221972]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I found a java package: org.quickconnect.json wich provides JSONOutputStreams and methods to convert a Serializable to exactly that. (perfect for my case) But can i store outputstream objects directly in a database?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JSONOutputStreams",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "jsonoutput":1,
                        "json":1,
                        "serializ":1,
                        "quickconnect":1,
                        "store":1,
                        "perfect":1,
                        "object":1,
                        "direct":1,
                        "found":1,
                        "stream":1,
                        "databas":1,
                        "outputstream":1,
                        "org":1,
                        "convert":1,
                        "wich":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JSONOutputStreams",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":25827716,
          "postId":17717451,
          "creationDate":"2013-07-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":571407,
            "displayName":"JB Nizet",
            "reputation":287730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"An OutputStream doesn't contain data. It's an object used to send bytes somewhere (for example, to a byte array (ByteArrayOutputStream) or to a file (FileOutputStream)). You can write your JSON to a byte array, and store this byte array as a BLOB in the database."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[17717451-cu25827716]-[161264440]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"An OutputStream doesn't contain data. It's an object used to send bytes somewhere (for example, to a byte array (ByteArrayOutputStream) or to a file (FileOutputStream)). You can write your JSON to a byte array, and store this byte array as a BLOB in the database."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"OutputStream",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ByteArrayOutputStream",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"FileOutputStream",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "json":1,
                        "data":1,
                        "store":1,
                        "object":1,
                        "array":4,
                        "stream":3,
                        "file":2,
                        "databas":1,
                        "output":3,
                        "byte":1,
                        "blob":1,
                        "write":1,
                        "send":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"OutputStream",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ByteArrayOutputStream",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"FileOutputStream",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-07-18",
      "lastActivityDate":"2013-07-18",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":571407,
        "displayName":"JB Nizet",
        "reputation":287730
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I would serialize the objects to a byte array/stream, and base64-encode the array/stream to get a printable String.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17717451]-[1174881784]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I would serialize the objects to a byte array/stream, and base64-encode the array/stream to get a printable String.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "object":1,
                    "base":1,
                    "array":2,
                    "encod":1,
                    "stream":2,
                    "printabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>At the database level, you can store the base64 string as a CLOB, or decode it to a byte array and store it as a BLOB.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17717451]-[174997266]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>At the database level, you can store the base64 string as a CLOB, or decode it to a byte array and store it as a BLOB.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "store":2,
                    "base":1,
                    "array":1,
                    "decod":1,
                    "clob":1,
                    "databas":1,
                    "blob":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}