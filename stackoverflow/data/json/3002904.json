{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":3002904,
    "title":"What is the security risk of object reflection?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":3068115,
        "postId":3002904,
        "creationDate":"2010-06-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":203907,
          "displayName":"Bozho",
          "reputation":301603
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"is it disabled, or there is a security manager?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3002904-cu3068115]-[-1403653369]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"is it disabled, or there is a security manager?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "manag":1,
                      "secur":1,
                      "disabl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":3068873,
        "postId":3002904,
        "creationDate":"2010-06-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":183528,
          "displayName":"Rook",
          "reputation":36161
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"+1 killer question. Don't close this just yet i am not satisfied with the answer."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3002904-cu3068873]-[-1720266582]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"+1 killer question. Don't close this just yet i am not satisfied with the answer."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "satisfi":1,
                      "killer":1,
                      "answer":1,
                      "close":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21786373,
        "postId":3002904,
        "creationDate":"2010-06-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":181412,
          "displayName":"dbyrne",
          "reputation":20413
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Check out [this question](http://stackoverflow.com/questions/1160924/what-risk-does-reflection-pose-medium-trust)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3002904-cu21786373]-[1896471596]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Check out [this question](http://stackoverflow.com/questions/1160924/what-risk-does-reflection-pose-medium-trust)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":2,
                      "trust":1,
                      "risk":1,
                      "medium":1,
                      "stackoverflow":1,
                      "check":1,
                      "pose":1,
                      "http":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21786374,
        "postId":3002904,
        "creationDate":"2010-06-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":217862,
          "displayName":"ewernli",
          "reputation":24499
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The article is about .net. Are .net and java comparable w.r.t. reflection and security?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3002904-cu21786374]-[-934835153]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The article is about .net. Are .net and java comparable w.r.t. reflection and security?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "secur":1,
                      "articl":1,
                      "net":2,
                      "compar":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21786375,
        "postId":3002904,
        "creationDate":"2010-06-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":183528,
          "displayName":"Rook",
          "reputation":36161
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't think thats an answer."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3002904-cu21786375]-[-568653178]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't think thats an answer."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "answer":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "security",
      "reflection",
      "code-access-security"
    ],
    "creationDate":"2010-06-09",
    "lastActivityDate":"2010-06-10",
    "lastEditDate":"2010-06-09",
    "score":15,
    "viewCount":3063,
    "owner":{
      "type":"StackOverflowUser",
      "id":184046,
      "displayName":"Legend",
      "reputation":32788
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So after a few hours of workaround the limitation of Reflection being currently disabled on the Google App Engine, I was wondering if someone could help me understand why object reflection can be a threat. Is it because I can inspect the private variables of a class or are there any other deeper reasons?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3002904]-[-1610759773]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So after a few hours of workaround the limitation of Reflection being currently disabled on the Google App Engine, I was wondering if someone could help me understand why object reflection can be a threat. Is it because I can inspect the private variables of a class or are there any other deeper reasons?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"or",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "disabl":1,
                  "googl":1,
                  "understand":1,
                  "reason":1,
                  "hour":1,
                  "object":1,
                  "deeper":1,
                  "inspect":1,
                  "engin":1,
                  "workaround":1,
                  "wonder":1,
                  "app":1,
                  "threat":1,
                  "variabl":1,
                  "limit":1,
                  "reflect":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":3003505,
      "questionId":3002904,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":3078891,
          "postId":3003505,
          "creationDate":"2010-06-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":217862,
            "displayName":"ewernli",
            "reputation":24499
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Legend Apparently GSON try to use `AccessibleObject.setAccessible` when it's disallowed. I'm not familiar with GSON, and why it needs to change the access modifier. I guess you should look at GSON's code if you want to understand that. Maybe you could make your own version of GSON that uses reflection but doesn't use `AccessibleObject.setAccessible` and make sure that you pass objects for serialization where all fields/methods are public."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3003505-cu3078891]-[1864193784]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Legend Apparently GSON try to use `AccessibleObject.setAccessible` when it's disallowed. I'm not familiar with GSON, and why it needs to change the access modifier. I guess you should look at GSON's code if you want to understand that. Maybe you could make your own version of GSON that uses reflection but doesn't use `AccessibleObject.setAccessible` and make sure that you pass objects for serialization where all fields/methods are public."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Legend",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"AccessibleObject",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"setAccessible",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"AccessibleObject",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"setAccessible",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "chang":1,
                        "method":1,
                        "familiar":1,
                        "appar":1,
                        "field":1,
                        "set":2,
                        "understand":1,
                        "legend":1,
                        "gson":4,
                        "object":3,
                        "code":1,
                        "version":1,
                        "modifi":1,
                        "pass":1,
                        "make":2,
                        "guess":1,
                        "reflect":1,
                        "disallow":1,
                        "access":5
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3068967,
          "postId":3003505,
          "creationDate":"2010-06-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":183528,
            "displayName":"Rook",
            "reputation":36161
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 for providing an excellent link. I respectfully disagree with your attack scenario although I admit all we have is speculation."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3003505-cu3068967]-[-638004354]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 for providing an excellent link. I respectfully disagree with your attack scenario although I admit all we have is speculation."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "scenario":1,
                        "provid":1,
                        "specul":1,
                        "excel":1,
                        "link":1,
                        "admit":1,
                        "attack":1,
                        "respect":1,
                        "disagre":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3076875,
          "postId":3003505,
          "creationDate":"2010-06-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":184046,
            "displayName":"Legend",
            "reputation":32788
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for the detailed explanation. This question in fact stems from my other question: http://stackoverflow.com/questions/3002714/gson-on-google-app-engine-throws-a-security-exception . The answer provided says otherwise but I still don't understand why GSON does things the way it is doing. I ended up writing my own little toJSON method but this approach is simply not acceptable for large objects. That gets me to my final question: If not reflection, is there any other way I can do what I was trying to do? Any thoughts?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3003505-cu3076875]-[-870349951]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for the detailed explanation. This question in fact stems from my other question: http://stackoverflow.com/questions/3002714/gson-on-google-app-engine-throws-a-security-exception . The answer provided says otherwise but I still don't understand why GSON does things the way it is doing. I ended up writing my own little toJSON method but this approach is simply not acceptable for large objects. That gets me to my final question: If not reflection, is there any other way I can do what I was trying to do? Any thoughts?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"toJSON",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "question":4,
                        "method":1,
                        "accept":1,
                        "stem":1,
                        "googl":1,
                        "thought":1,
                        "json":1,
                        "understand":1,
                        "thing":1,
                        "secur":1,
                        "gson":2,
                        "object":1,
                        "fact":1,
                        "stackoverflow":1,
                        "explan":1,
                        "larg":1,
                        "simpli":1,
                        "engin":1,
                        "answer":1,
                        "approach":1,
                        "app":1,
                        "end":1,
                        "detail":1,
                        "http":1,
                        "reflect":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-06-09",
      "lastActivityDate":"2010-06-10",
      "lastEditDate":"2010-06-10",
      "score":9,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":217862,
        "displayName":"ewernli",
        "reputation":24499
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>1 - Reflection (as a concept) is indeed orthogonal to safety/security.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[436665382]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>1 - Reflection (as a concept) is indeed orthogonal to safety/security.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "orthogon":1,
                    "secur":1,
                    "safeti":1,
                    "concept":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There was a big emphasis in the design of java to make it a safe platform, with <strong>static typing</strong>, <strong>security manager</strong>, disciplined usage of <strong>class loader</strong>, and no way to screw pointers/<strong>memory</strong>. You can read the interview of James Gosling in <a href=\"http://rads.stackoverflow.com/amzn/click/0596515170\">Masterming of programming</a>, which is interesting about that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[1753653874]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There was a big emphasis in the design of java to make it a safe platform, with <strong>static typing</strong>, <strong>security manager</strong>, disciplined usage of <strong>class loader</strong>, and no way to screw pointers/<strong>memory</strong>. You can read the interview of James Gosling in <a href=\"http://rads.stackoverflow.com/amzn/click/0596515170\">Masterming of programming</a>, which is interesting about that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loader",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "program":1,
                    "design":1,
                    "rad":1,
                    "interview":1,
                    "pointer":1,
                    "big":1,
                    "loader":1,
                    "disciplin":1,
                    "masterm":1,
                    "amzn":1,
                    "secur":1,
                    "strong":8,
                    "safe":1,
                    "jame":1,
                    "stackoverflow":1,
                    "click":1,
                    "interest":1,
                    "emphasi":1,
                    "gosl":1,
                    "make":1,
                    "usag":1,
                    "type":1,
                    "href":1,
                    "manag":1,
                    "platform":1,
                    "http":1,
                    "screw":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But the more <strong>reflective</strong> power you have the harder it is to ensure things are safe as they should. Reflection defeat notably static typing and can lead to run-time errors. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[630232140]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But the more <strong>reflective</strong> power you have the harder it is to ensure things are safe as they should. Reflection defeat notably static typing and can lead to run-time errors. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "lead":1,
                    "run":1,
                    "thing":1,
                    "strong":2,
                    "safe":1,
                    "error":1,
                    "defeat":1,
                    "time":1,
                    "power":1,
                    "type":1,
                    "notabl":1,
                    "reflect":2,
                    "harder":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But more subtle things can happen as well. For instance class loaders -- which can be considered as <em>reflective</em> hook in the system -- were not designed properly in the early version of Java leading to potential type replacement. The article <a href=\"http://bracha.org/classloaders.ps\">Dynamic class loading in the JVM,</a> by Gilad Bracha, is insightful on such issues. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[758095555]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But more subtle things can happen as well. For instance class loaders -- which can be considered as <em>reflective</em> hook in the system -- were not designed properly in the early version of Java leading to potential type replacement. The article <a href=\"http://bracha.org/classloaders.ps\">Dynamic class loading in the JVM,</a> by Gilad Bracha, is insightful on such issues. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loaders",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loading",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "lead":1,
                    "insight":1,
                    "design":1,
                    "system":1,
                    "proper":1,
                    "subtl":1,
                    "happen":1,
                    "loader":1,
                    "potenti":1,
                    "dynam":1,
                    "gilad":1,
                    "thing":1,
                    "load":1,
                    "issu":1,
                    "articl":1,
                    "earli":1,
                    "version":1,
                    "replac":1,
                    "consid":1,
                    "hook":1,
                    "bracha":2,
                    "classload":1,
                    "type":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "reflect":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Reflection can not be turned off altogether; it's always possible to reflect on its own public fields/methods. Reflection on private structures with <code>AccessibleObject.setAccessible</code> can however be disabled, because it breaks <strong>encapsulation</strong>. With access to private fields, etc. inspection and modification of internal data is possible. It can lead to various <strong>malicious exploits</strong>, e.g. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[678937977]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Reflection can not be turned off altogether; it's always possible to reflect on its own public fields/methods. Reflection on private structures with <code>AccessibleObject.setAccessible</code> can however be disabled, because it breaks <strong>encapsulation</strong>. With access to private fields, etc. inspection and modification of internal data is possible. It can lead to various <strong>malicious exploits</strong>, e.g. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"AccessibleObject",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exploit":1,
                    "method":1,
                    "disabl":1,
                    "lead":1,
                    "break":1,
                    "field":2,
                    "data":1,
                    "set":1,
                    "altogeth":1,
                    "modif":1,
                    "strong":4,
                    "structur":1,
                    "object":1,
                    "code":2,
                    "inspect":1,
                    "malici":1,
                    "turn":1,
                    "reflect":3,
                    "encapsul":1,
                    "intern":1,
                    "access":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><code>strings</code> are not immutable anymore and can be changed (see this <a href=\"http://stackoverflow.com/questions/2481862/how-to-limit-setaccessible-to-only-legitimate-uses\">question</a>) </li> \n <li>you can reveal sensible information of objects you don't own</li> \n <li>... other exploits ...</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[-13321774]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><code>strings</code> are not immutable anymore and can be changed (see this <a href=\"http://stackoverflow.com/questions/2481862/how-to-limit-setaccessible-to-only-legitimate-uses\">question</a>) </li> \n <li>you can reveal sensible information of objects you don't own</li> \n <li>... other exploits ...</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exploit":1,
                    "chang":1,
                    "question":2,
                    "setaccess":1,
                    "reveal":1,
                    "immut":1,
                    "string":1,
                    "legitim":1,
                    "object":1,
                    "code":2,
                    "anymor":1,
                    "stackoverflow":1,
                    "inform":1,
                    "href":1,
                    "http":1,
                    "limit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Finally there are other mechanism that put security in jeopardy, notably <code>sun.misc.Unsafe</code> which gives direct access to the memory -- pointers are back. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[-1303937472]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Finally there are other mechanism that put security in jeopardy, notably <code>sun.misc.Unsafe</code> which gives direct access to the memory -- pointers are back. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "jeopardi":1,
                    "sun":1,
                    "secur":1,
                    "direct":1,
                    "code":2,
                    "back":1,
                    "mechan":1,
                    "misc":1,
                    "put":1,
                    "unsaf":1,
                    "notabl":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2 - Now, the question is whether reflection (in practice) leads to that many risks.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[813840554]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2 - Now, the question is whether reflection (in practice) leads to that many risks.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "lead":1,
                    "risk":1,
                    "practic":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I've read the link pointed by <a href=\"http://stackoverflow.com/questions/3002904/what-is-the-security-risk-of-object-reflection/3002913#3002913\">@dbyrne</a> but it's mostly about .net. Also I don't know exactly what is disabled for Google App. Is it the <a href=\"http://java.sun.com/j2se/1.4.2/docs/guide/security/permissions.html#ReflectPermission\"><code>ReflectPermission</code></a> only, or other permission of the security manager? One danger is clearly to get access to the file system and mess around. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[-327307185]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I've read the link pointed by <a href=\"http://stackoverflow.com/questions/3002904/what-is-the-security-risk-of-object-reflection/3002913#3002913\">@dbyrne</a> but it's mostly about .net. Also I don't know exactly what is disabled for Google App. Is it the <a href=\"http://java.sun.com/j2se/1.4.2/docs/guide/security/permissions.html#ReflectPermission\"><code>ReflectPermission</code></a> only, or other permission of the security manager? One danger is clearly to get access to the file system and mess around. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ReflectPermission",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "question":1,
                    "disabl":1,
                    "permiss":4,
                    "point":1,
                    "googl":1,
                    "system":1,
                    "guid":1,
                    "sun":1,
                    "risk":1,
                    "secur":3,
                    "dbyrn":1,
                    "doc":1,
                    "net":1,
                    "object":1,
                    "code":2,
                    "mess":1,
                    "stackoverflow":1,
                    "link":1,
                    "app":1,
                    "file":1,
                    "html":1,
                    "href":2,
                    "manag":1,
                    "http":2,
                    "reflect":3,
                    "danger":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ReflectPermission",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The problem of access to private data and breaking encapsulation can be argued in practice. Writing secure code is indeed extremely hard, and even without changing the access modifier you can subclass classes in an inappropriate way -- unless they are <code>final</code>, or even better, sealed -- and pass them around. This is for instance what <a href=\"http://slightlyrandombrokenthoughts.blogspot.com/2009/12/defensive-copying-how-not-to-do-it.html\"><strong>defensive copying</strong></a> try to protect against. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[-1914963170]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The problem of access to private data and breaking encapsulation can be argued in practice. Writing secure code is indeed extremely hard, and even without changing the access modifier you can subclass classes in an inappropriate way -- unless they are <code>final</code>, or even better, sealed -- and pass them around. This is for instance what <a href=\"http://slightlyrandombrokenthoughts.blogspot.com/2009/12/defensive-copying-how-not-to-do-it.html\"><strong>defensive copying</strong></a> try to protect against. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "subclass":1,
                    "hard":1,
                    "break":1,
                    "defens":2,
                    "problem":1,
                    "inappropri":1,
                    "data":1,
                    "secur":1,
                    "strong":2,
                    "blogspot":1,
                    "argu":1,
                    "seal":1,
                    "code":3,
                    "extrem":1,
                    "modifi":1,
                    "pass":1,
                    "class":1,
                    "protect":1,
                    "html":1,
                    "practic":1,
                    "href":1,
                    "http":1,
                    "encapsul":1,
                    "write":1,
                    "copi":2,
                    "instanc":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Type-safety is also anyway threatened by run-time error because of downcast, so this point can also be argued.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[2125549972]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Type-safety is also anyway threatened by run-time error because of downcast, so this point can also be argued.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "run":1,
                    "argu":1,
                    "safeti":1,
                    "error":1,
                    "time":1,
                    "type":1,
                    "downcast":1,
                    "threaten":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In a shared/hosted environment, the <strong>security is relative</strong>. At the language level, you can for instance not prevent a module form consuming 100% of CPU or consuming all memory up to a <code>OutOfMemoryException</code>. Such concerns need to be addressed by other means, typically at the OS level, with virtualization and quotas.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[1062868935]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In a shared/hosted environment, the <strong>security is relative</strong>. At the language level, you can for instance not prevent a module form consuming 100% of CPU or consuming all memory up to a <code>OutOfMemoryException</code>. Such concerns need to be addressed by other means, typically at the OS level, with virtualization and quotas.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "consum":2,
                    "languag":1,
                    "relat":1,
                    "quota":1,
                    "prevent":1,
                    "host":1,
                    "mean":1,
                    "secur":1,
                    "strong":2,
                    "virtual":1,
                    "concern":1,
                    "code":2,
                    "share":1,
                    "typic":1,
                    "modul":1,
                    "cpu":1,
                    "address":1,
                    "form":1,
                    "environ":1,
                    "instanc":1,
                    "level":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So my personal answer, would be: <em>reflection is a security risk, but not that big in practice if compared to other potential attack vectors.</em> </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003505]-[-221871947]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So my personal answer, would be: <em>reflection is a security risk, but not that big in practice if compared to other potential attack vectors.</em> </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "big":1,
                    "potenti":1,
                    "vector":1,
                    "risk":1,
                    "secur":1,
                    "compar":1,
                    "person":1,
                    "answer":1,
                    "attack":1,
                    "practic":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3004476,
      "questionId":3002904,
      "comments":[
        
      ],
      "creationDate":"2010-06-09",
      "lastActivityDate":"2010-06-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":242940,
        "displayName":"Sripathi Krishnan",
        "reputation":16926
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>GAE is a shared hosting environment, and hosts WAR files from multiple users. It is highly likely that multiple WAR files are hosted in the same JVM, because spawning a process per WAR is just ridiculous. So, the only way to sandbox each war file is via a custom classloader for each WAR file.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3004476]-[1099231677]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>GAE is a shared hosting environment, and hosts WAR files from multiple users. It is highly likely that multiple WAR files are hosted in the same JVM, because spawning a process per WAR is just ridiculous. So, the only way to sandbox each war file is via a custom classloader for each WAR file.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "custom":1,
                    "spawn":1,
                    "process":1,
                    "war":5,
                    "host":3,
                    "share":1,
                    "ridicul":1,
                    "sandbox":1,
                    "file":4,
                    "classload":1,
                    "gae":1,
                    "environ":1,
                    "multipl":2,
                    "user":1,
                    "high":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now, assume that reflection was allowed. You <a href=\"http://accu.org/index.php/journals/285#d0e178\"rel=\"nofollow\">could then walk the classloader hierarchy</a> and enumerate classes/methods from WAR files belonging to different users. Obviously, that is a big concern.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3004476]-[406869580]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now, assume that reflection was allowed. You <a href=\"http://accu.org/index.php/journals/285#d0e178\"rel=\"nofollow\">could then walk the classloader hierarchy</a> and enumerate classes/methods from WAR files belonging to different users. Obviously, that is a big concern.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "assum":1,
                    "enumer":1,
                    "big":1,
                    "war":1,
                    "journal":1,
                    "rel":1,
                    "walk":1,
                    "belong":1,
                    "accu":1,
                    "concern":1,
                    "nofollow":1,
                    "allow":1,
                    "hierarchi":1,
                    "php":1,
                    "class":1,
                    "file":1,
                    "classload":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "reflect":1,
                    "user":1,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3004098,
      "questionId":3002904,
      "comments":[
        
      ],
      "creationDate":"2010-06-09",
      "lastActivityDate":"2010-06-09",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":301832,
        "displayName":"Donal Fellows",
        "reputation":63053
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>First off, if you've not installed a <code>SecurityManager</code> then you're not secure anyway.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3004098]-[-643909749]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>First off, if you've not installed a <code>SecurityManager</code> then you're not secure anyway.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SecurityManager",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "instal":1,
                    "manag":1,
                    "secur":2,
                    "code":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SecurityManager",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Secondly, reflection doesn't open up significant holes unless the <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible%28boolean%29\"rel=\"nofollow\"title=\"java.lang.reflect.AccessibleObject.setAccessible(boolean)\"><code>setAccessible()</code></a> is enabled, and that itself is subject to a security check (governed by the <code>setAccessChecks</code> <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/reflect/ReflectPermission.html\"rel=\"nofollow\"title=\"java.lang.reflect.ReflectPermission\">reflection permission</a>). Without that, while you might be able to know that the private field or method exists (though that itself requires the <code>accessDeclaredMembers</code> <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/RuntimePermission.html\"rel=\"nofollow\"title=\"java.lang.RuntimePermission\">runtime permission</a>) you can't do anything much with that knowledge. Your best bet to attack might be to work with serialized objects, but that's a whole 'nother ball of wax.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3004098]-[-1052971332]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Secondly, reflection doesn't open up significant holes unless the <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible%28boolean%29\"rel=\"nofollow\"title=\"java.lang.reflect.AccessibleObject.setAccessible(boolean)\"><code>setAccessible()</code></a> is enabled, and that itself is subject to a security check (governed by the <code>setAccessChecks</code> <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/reflect/ReflectPermission.html\"rel=\"nofollow\"title=\"java.lang.reflect.ReflectPermission\">reflection permission</a>). Without that, while you might be able to know that the private field or method exists (though that itself requires the <code>accessDeclaredMembers</code> <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/RuntimePermission.html\"rel=\"nofollow\"title=\"java.lang.RuntimePermission\">runtime permission</a>) you can't do anything much with that knowledge. Your best bet to attack might be to work with serialized objects, but that's a whole 'nother ball of wax.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setAccessChecks",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"accessDeclaredMembers",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "method":1,
                    "permiss":6,
                    "runtim":3,
                    "subject":1,
                    "knowledg":1,
                    "field":1,
                    "exist":1,
                    "wax":1,
                    "bet":1,
                    "requir":1,
                    "set":4,
                    "sun":3,
                    "rel":3,
                    "govern":1,
                    "titl":3,
                    "secur":1,
                    "open":1,
                    "doc":3,
                    "work":1,
                    "declar":1,
                    "object":3,
                    "code":6,
                    "nofollow":3,
                    "check":2,
                    "member":1,
                    "ball":1,
                    "signific":1,
                    "javas":3,
                    "nother":1,
                    "enabl":1,
                    "attack":1,
                    "api":3,
                    "lang":6,
                    "html":3,
                    "href":3,
                    "hole":1,
                    "http":3,
                    "reflect":8,
                    "access":7
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Note also that writing a secure security manager and class loader is non-trivial. Best to leave those to others if you're not aspiring to mega-guru-dom (or, more likely, embarrassing levels of failure).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3004098]-[-73585441]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Note also that writing a secure security manager and class loader is non-trivial. Best to leave those to others if you're not aspiring to mega-guru-dom (or, more likely, embarrassing levels of failure).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loader",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "failur":1,
                    "loader":1,
                    "dom":1,
                    "secur":2,
                    "guru":1,
                    "embarrass":1,
                    "leav":1,
                    "note":1,
                    "aspir":1,
                    "manag":1,
                    "trivial":1,
                    "write":1,
                    "mega":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3003012,
      "questionId":3002904,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":3068783,
          "postId":3003012,
          "creationDate":"2010-06-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":183528,
            "displayName":"Rook",
            "reputation":36161
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Interesting, could you provide more details? Perhaps a link."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3003012-cu3068783]-[713535787]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Interesting, could you provide more details? Perhaps a link."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "interest":1,
                        "link":1,
                        "provid":1,
                        "detail":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-06-09",
      "lastActivityDate":"2010-06-09",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>An application can use the Java reflection APIs to access and update fields, and execute methods that are forbidden by normal Java access / visibility rules. With a bit of ingenuity, this is sufficient to:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003012]-[-1582503154]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>An application can use the Java reflection APIs to access and update fields, and execute methods that are forbidden by normal Java access / visibility rules. With a bit of ingenuity, this is sufficient to:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "bit":1,
                    "field":1,
                    "normal":1,
                    "updat":1,
                    "rule":1,
                    "visibl":1,
                    "suffici":1,
                    "forbidden":1,
                    "applic":1,
                    "api":1,
                    "reflect":1,
                    "execut":1,
                    "ingenu":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>access information that is supposed to be hidden,</li> \n <li>subvert the Java security sandbox so that you can interfere with other things running in the JVM, access files on the local machine, and so on.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003012]-[-899530236]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>access information that is supposed to be hidden,</li> \n <li>subvert the Java security sandbox so that you can interfere with other things running in the JVM, access files on the local machine, and so on.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "run":1,
                    "hidden":1,
                    "local":1,
                    "thing":1,
                    "secur":1,
                    "interfer":1,
                    "inform":1,
                    "machin":1,
                    "sandbox":1,
                    "file":1,
                    "suppos":1,
                    "subvert":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Under certain circumstances, it might even allow the injection of malicious native code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003012]-[1732693085]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Under certain circumstances, it might even allow the injection of malicious native code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "inject":1,
                    "code":1,
                    "malici":1,
                    "circumst":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3003924,
      "questionId":3002904,
      "comments":[
        
      ],
      "creationDate":"2010-06-09",
      "lastActivityDate":"2010-06-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":183528,
        "displayName":"Rook",
        "reputation":36161
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A theory of mine is that Google is trying to hide something. By disabling <a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_science%29\"rel=\"nofollow\">Reflection</a> Google could hide Variable names, function calls and an even a full API. If Google is hiding something like an API, then they certainty aren't going to tell you about it. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003924]-[859148816]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A theory of mine is that Google is trying to hide something. By disabling <a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_science%29\"rel=\"nofollow\">Reflection</a> Google could hide Variable names, function calls and an even a full API. If Google is hiding something like an API, then they certainty aren't going to tell you about it. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "scienc":1,
                    "disabl":1,
                    "name":1,
                    "googl":3,
                    "aren":1,
                    "mine":1,
                    "certainti":1,
                    "full":1,
                    "rel":1,
                    "theori":1,
                    "wikipedia":1,
                    "comput":1,
                    "nofollow":1,
                    "hide":3,
                    "function":1,
                    "wiki":1,
                    "api":2,
                    "org":1,
                    "variabl":1,
                    "href":1,
                    "http":1,
                    "call":1,
                    "reflect":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I know for a fact that Reflection plays a very important role in security testing. For instance you can automatically generate Fuzz tests using reflection. <a href=\"http://digitaloffense.net/tools/axman/\"rel=\"nofollow\">AxMan</a> uses TypeLib to identify all of the classes and their method calls that make up a COM object. Using this information AxMan will then instantiate each class and call every method with permutations of long strings and large numbers. Similar testing is conducted by <a href=\"http://www.darknet.org.uk/tag/soap-fuzzer/\"rel=\"nofollow\">SOAP Fuzzers</a> using the WSDL file for reflection.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3003924]-[-1018962653]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I know for a fact that Reflection plays a very important role in security testing. For instance you can automatically generate Fuzz tests using reflection. <a href=\"http://digitaloffense.net/tools/axman/\"rel=\"nofollow\">AxMan</a> uses TypeLib to identify all of the classes and their method calls that make up a COM object. Using this information AxMan will then instantiate each class and call every method with permutations of long strings and large numbers. Similar testing is conducted by <a href=\"http://www.darknet.org.uk/tag/soap-fuzzer/\"rel=\"nofollow\">SOAP Fuzzers</a> using the WSDL file for reflection.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AxMan",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"TypeLib",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AxMan",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"and",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "method":2,
                    "test":3,
                    "wsdl":1,
                    "instanti":1,
                    "role":1,
                    "similar":1,
                    "tool":1,
                    "tag":1,
                    "play":1,
                    "rel":2,
                    "fuzzer":2,
                    "man":2,
                    "secur":1,
                    "string":1,
                    "net":1,
                    "object":1,
                    "fact":1,
                    "automat":1,
                    "import":1,
                    "larg":1,
                    "lib":1,
                    "nofollow":2,
                    "axman":1,
                    "inform":1,
                    "soap":2,
                    "conduct":1,
                    "fuzz":1,
                    "darknet":1,
                    "identifi":1,
                    "generat":1,
                    "make":1,
                    "class":1,
                    "file":1,
                    "permut":1,
                    "type":1,
                    "org":1,
                    "href":2,
                    "http":2,
                    "call":2,
                    "reflect":3,
                    "digitaloffens":1,
                    "instanc":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AxMan",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"TypeLib",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}