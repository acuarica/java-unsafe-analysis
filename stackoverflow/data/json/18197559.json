{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18197559,
    "title":"Can we implement a C++ style list in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":26668995,
        "postId":18197559,
        "creationDate":"2013-08-12",
        "score":5,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":392046,
          "displayName":"Jesus Ramos",
          "reputation":16226
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What benefits would this get you? CPU cache locality at best?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18197559-cu26668995]-[486559630]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What benefits would this get you? CPU cache locality at best?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cpu":1,
                      "benefit":1,
                      "cach":1,
                      "local":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26669231,
        "postId":18197559,
        "creationDate":"2013-08-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2647523,
          "displayName":"karakalos10",
          "reputation":52
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yes CPU locality and probably something else that i don't know. This is why I am asking."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18197559-cu26669231]-[-1813174504]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yes CPU locality and probably something else that i don't know. This is why I am asking."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cpu":1,
                      "local":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26669333,
        "postId":18197559,
        "creationDate":"2013-08-12",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":392046,
          "displayName":"Jesus Ramos",
          "reputation":16226
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You could always just JNI a C++ list to Java. This might be better than your approach but if your application is mostly Java the benefit would be almost invisible."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18197559-cu26669333]-[-1414972505]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You could always just JNI a C++ list to Java. This might be better than your approach but if your application is mostly Java the benefit would be almost invisible."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jni":1,
                      "invis":1,
                      "applic":1,
                      "approach":1,
                      "benefit":1,
                      "list":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26669611,
        "postId":18197559,
        "creationDate":"2013-08-12",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":829571,
          "displayName":"assylias",
          "reputation":118960
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This might be of interest: http://vanillajava.blogspot.co.uk/2012/11/when-using-direct-memory-can-be-faster.html"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18197559-cu26669611]-[-1108405885]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This might be of interest: http://vanillajava.blogspot.co.uk/2012/11/when-using-direct-memory-can-be-faster.html"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "faster":1,
                      "blogspot":1,
                      "direct":1,
                      "interest":1,
                      "vanillajava":1,
                      "html":1,
                      "http":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "collections",
      "unsafe",
      "memory-layout"
    ],
    "creationDate":"2013-08-12",
    "lastActivityDate":"2013-08-12",
    "score":2,
    "viewCount":96,
    "owner":{
      "type":"StackOverflowUser",
      "id":2647523,
      "displayName":"karakalos10",
      "reputation":52
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>An arrayList in Java &quot;holds&quot; references to the Objects and not the actual Object data. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18197559]-[-722520454]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>An arrayList in Java &quot;holds&quot; references to the Objects and not the actual Object data. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"arrayList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "data":1,
                  "object":2,
                  "array":1,
                  "hold":1,
                  "refer":1,
                  "quot":2,
                  "actual":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I was wondering if we can implement an arrayList in Java that can contain the Object data directly instead of references. Can Java Unsafe Class be used for this implementation? If yes, what would be the performance of this list in comparison to the existing Java arrayList?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18197559]-[1786834128]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I was wondering if we can implement an arrayList in Java that can contain the Object data directly instead of references. Can Java Unsafe Class be used for this implementation? If yes, what would be the performance of this list in comparison to the existing Java arrayList?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"arrayList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"arrayList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "exist":1,
                  "comparison":1,
                  "data":1,
                  "object":1,
                  "direct":1,
                  "array":2,
                  "wonder":1,
                  "perform":1,
                  "refer":1,
                  "implement":2,
                  "unsaf":1,
                  "list":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18197630,
      "questionId":18197559,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26705744,
          "postId":18197630,
          "creationDate":"2013-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1489700,
            "displayName":"Mitch Connor",
            "reputation":568
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think it comes down to the fact that the JVM is much better at handling memory than you are. The JVM has been developed for many years to exactly this. There are many white papers on the subject."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26705744]-[-1430196162]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think it comes down to the fact that the JVM is much better at handling memory than you are. The JVM has been developed for many years to exactly this. There are many white papers on the subject."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "subject":1,
                        "year":1,
                        "fact":1,
                        "paper":1,
                        "develop":1,
                        "white":1,
                        "handl":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669192,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2647523,
            "displayName":"karakalos10",
            "reputation":52
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can have low-level control on memory allocation in Java by using java Unsafe class."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669192]-[-1224427407]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can have low-level control on memory allocation in Java by using java Unsafe class."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alloc":1,
                        "low":1,
                        "control":1,
                        "unsaf":1,
                        "level":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669194,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":548027,
            "displayName":"Adam R. Nelson",
            "reputation":188
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Brian: You are correct, and I was going to say something similar. But, then I looked up sun.misc.Unsafe: http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/ This is what's used to implement low-level things like NIO buffers. _In theory_, it _might_ be possible to make a C++-style list with this, but it would most likely be a slow and extremely convoluted hack. And, as Jesus Ramos said, there's really no use case for it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669194]-[-1565184416]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Brian: You are correct, and I was going to say something similar. But, then I looked up sun.misc.Unsafe: http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/ This is what's used to implement low-level things like NIO buffers. _In theory_, it _might_ be possible to make a C++-style list with this, but it would most likely be a slow and extremely convoluted hack. And, as Jesus Ramos said, there's really no use case for it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Brian",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"theory_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_might_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "dot":2,
                        "github":1,
                        "convolut":1,
                        "slow":1,
                        "similar":1,
                        "style":1,
                        "correct":1,
                        "look":1,
                        "brian":1,
                        "sun":2,
                        "thing":1,
                        "nio":1,
                        "buffer":1,
                        "theori":1,
                        "blog":1,
                        "low":1,
                        "ramo":1,
                        "extrem":1,
                        "implement":1,
                        "misc":2,
                        "make":1,
                        "hack":1,
                        "jesus":1,
                        "magic":1,
                        "unsaf":2,
                        "part":1,
                        "http":1,
                        "mishadoff":1,
                        "list":1,
                        "level":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669260,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2647523,
            "displayName":"karakalos10",
            "reputation":52
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But why do you think this would be slow? Low memory operations in Java are converted immediately into assembly code as JVM handles them as internal operations."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669260]-[282710449]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But why do you think this would be slow? Low memory operations in Java are converted immediately into assembly code as JVM handles them as internal operations."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "assembl":1,
                        "slow":1,
                        "code":1,
                        "oper":2,
                        "low":1,
                        "immedi":1,
                        "intern":1,
                        "handl":1,
                        "convert":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669414,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":392046,
            "displayName":"Jesus Ramos",
            "reputation":16226
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@karakalos10 Just for a second though think, what would this get you? potentially unsafe memory access around some arbitrary wrapper be it Unsafe class or JNI. Why not use C++ in the first place if you planned on doing this or this was required?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669414]-[299704298]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@karakalos10 Just for a second though think, what would this get you? potentially unsafe memory access around some arbitrary wrapper be it Unsafe class or JNI. Why not use C++ in the first place if you planned on doing this or this was required?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"or",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "arbitrari":1,
                        "karakalo":1,
                        "requir":1,
                        "potenti":1,
                        "jni":1,
                        "wrapper":1,
                        "place":1,
                        "unsaf":2,
                        "plan":1,
                        "access":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669547,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2647523,
            "displayName":"karakalos10",
            "reputation":52
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I am working on my thesis about improving java collections performance. I heard about Java Unsafe class and that it provides low level operations and this is why I am asking specifically about Java. Thank you very much for your help."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669547]-[2053047614]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I am working on my thesis about improving java collections performance. I heard about Java Unsafe class and that it provides low level operations and this is why I am asking specifically about Java. Thank you very much for your help."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"and",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "heard":1,
                        "work":1,
                        "improv":1,
                        "oper":1,
                        "thesi":1,
                        "low":1,
                        "specif":1,
                        "perform":1,
                        "unsaf":1,
                        "collect":1,
                        "level":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26669588,
          "postId":18197630,
          "creationDate":"2013-08-12",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1247781,
            "displayName":"Vulcan",
            "reputation":15018
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@karakalos10 In that case, your best bet is probably to code up your own implementation of the list using Unsafe."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18197630-cu26669588]-[981213431]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@karakalos10 In that case, your best bet is probably to code up your own implementation of the list using Unsafe."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "karakalo":1,
                        "bet":1,
                        "code":1,
                        "implement":1,
                        "unsaf":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-12",
      "lastActivityDate":"2013-08-12",
      "lastEditDate":"2013-08-12",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":12960,
        "displayName":"Brian Agnew",
        "reputation":154342
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Briefly, no.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18197630]-[-256018403]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Briefly, no.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "briefli":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java only works with references for objects. What you're describing relies on the low-level control on memory allocation/usage permitting you to allocate a block of memory for 'n' entries. Java simply doesn't work like that - you never have control of the memory and the JVM is at liberty to move the objects within memory. You only <em>ever</em> deal with references. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18197630]-[771670541]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java only works with references for objects. What you're describing relies on the low-level control on memory allocation/usage permitting you to allocate a block of memory for 'n' entries. Java simply doesn't work like that - you never have control of the memory and the JVM is at liberty to move the objects within memory. You only <em>ever</em> deal with references. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "move":1,
                    "alloc":2,
                    "liberti":1,
                    "work":2,
                    "object":2,
                    "block":1,
                    "entri":1,
                    "low":1,
                    "simpli":1,
                    "permit":1,
                    "refer":2,
                    "usag":1,
                    "control":2,
                    "reli":1,
                    "describ":1,
                    "deal":1,
                    "level":1,
                    "memori":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Note also that objects containing references will refer to further distinct memory blocks, and so the concept of an object being contained within one contiguous memory block doesn't really exist here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18197630]-[905210567]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Note also that objects containing references will refer to further distinct memory blocks, and so the concept of an object being contained within one contiguous memory block doesn't really exist here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exist":1,
                    "contigu":1,
                    "contain":1,
                    "object":2,
                    "block":2,
                    "note":1,
                    "distinct":1,
                    "refer":2,
                    "concept":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you really want a byte array backed by memory, the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html\"rel=\"nofollow\">DirectByteBuffer</a> may be of use. It's a <code>java.nio</code> class built using the <code>sun.misc.Unsafe</code> class. Perhaps you could serialise/deserialise objects to it (calculating carefully the size in order to determine the indexing properly). But the serialisation cost would swamp any other saving, I would suspect.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18197630]-[1008513697]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you really want a byte array backed by memory, the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html\"rel=\"nofollow\">DirectByteBuffer</a> may be of use. It's a <code>java.nio</code> class built using the <code>sun.misc.Unsafe</code> class. Perhaps you could serialise/deserialise objects to it (calculating carefully the size in order to determine the indexing properly). But the serialisation cost would swamp any other saving, I would suspect.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DirectByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"built",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serialis":2,
                    "determin":1,
                    "built":1,
                    "size":1,
                    "proper":1,
                    "swamp":1,
                    "sun":1,
                    "rel":1,
                    "oracl":1,
                    "nio":2,
                    "buffer":2,
                    "calcul":1,
                    "care":1,
                    "doc":2,
                    "object":1,
                    "direct":1,
                    "code":4,
                    "array":1,
                    "nofollow":1,
                    "cost":1,
                    "order":1,
                    "back":1,
                    "deserialis":1,
                    "suspect":1,
                    "misc":1,
                    "javas":1,
                    "api":1,
                    "unsaf":1,
                    "html":1,
                    "href":1,
                    "save":1,
                    "http":1,
                    "index":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DirectByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}