{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":13272543,"title":"Hack the JVM to avoid unnecessary bounds checks and casts","comments":[{"type":"StackOverflowComment","id":18122509,"postId":13272543,"creationDate":"2012-11-08","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":315734,"displayName":"taotree","reputation":2529},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Not sure, but it's the general principle: because I have proved certain things about the code, I want the JVM's limitations to get out of the way since they're unnecessary in this case."},"units":[{"type":"TextUnit","id":"[13272543-cu18122509]-[-112357545]","astNode":{"type":"TextFragmentNode","text":"Not sure, but it's the general principle: because I have proved certain things about the code, I want the JVM's limitations to get out of the way since they're unnecessary in this case."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"prove":1,"thing":1,"principl":1,"code":1,"general":1,"limit":1,"unnecessari":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":55.145000000000024,"fleshKincaidGradeLevel":14.511111111111116,"automatedReadingIndex":16.064166666666672,"gunningFogIndex":16.622222222222224,"smogIndex":10.745966692414834,"colemanLiauIndex":7.744722222222219}]}]}]},{"type":"StackOverflowComment","id":18109773,"postId":13272543,"creationDate":"2012-11-08","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":949300,"displayName":"user949300","reputation":8806},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"I agree that bounds checks could be time consuming. How often are you casting? (and/or give some more details) That seems unlikely to be a significant performance hit in most code."},"units":[{"type":"TextUnit","id":"[13272543-cu18109773]-[952212260]","astNode":{"type":"TextFragmentNode","text":"I agree that bounds checks could be time consuming. How often are you casting? (and/or give some more details) That seems unlikely to be a significant performance hit in most code."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"consum":1,"hit":1,"code":1,"bound":1,"cast":1,"check":1,"signific":1,"perform":1,"give":1,"agre":1,"detail":1,"time":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":70.81118279569893,"fleshKincaidGradeLevel":5.949677419354842,"automatedReadingIndex":5.767311827956991,"gunningFogIndex":5.423655913978495,"smogIndex":6.16227766016838,"colemanLiauIndex":8.846774193548384}]}]}]},{"type":"StackOverflowComment","id":31327192,"postId":13272543,"creationDate":"2014-01-02","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":610966,"displayName":"Philip","reputation":757},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Have you looked into sun.misc.Unsafe? http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe You can access memory directly, without bounds checking, provided your application has the correct settings. I wouldn't be surprised if it directly or indirectly provided some type-casting functionality as well."},"units":[{"type":"TextUnit","id":"[13272543-cu31327192]-[-793143309]","astNode":{"type":"TextFragmentNode","text":"Have you looked into sun.misc.Unsafe? http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe You can access memory directly, without bounds checking, provided your application has the correct settings. I wouldn't be surprised if it directly or indirectly provided some type-casting functionality as well."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"provid":2,"question":1,"indirect":1,"correct":1,"look":1,"set":1,"sun":2,"surpris":1,"direct":2,"stackoverflow":1,"bound":1,"cast":1,"check":1,"interest":1,"function":1,"wouldn":1,"applic":1,"misc":2,"unsaf":2,"type":1,"http":1,"access":1,"memori":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"sun","comments":[]},{"type":"IdentifierNode","name":"misc","comments":[]},{"type":"IdentifierNode","name":"Unsafe","comments":[]}]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":-11.467117117117084,"fleshKincaidGradeLevel":17.922702702702704,"automatedReadingIndex":21.398288288288285,"gunningFogIndex":10.33873873873874,"smogIndex":10.071067811865476,"colemanLiauIndex":27.614054054054048}]}]}]}],"tags":["performance","jvm"],"creationDate":"2012-11-07","lastActivityDate":"2012-11-27","lastEditDate":"2012-11-08","score":9,"viewCount":513,"owner":{"type":"StackOverflowUser","id":315734,"displayName":"taotree","reputation":2529},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>There are some languages that support a sufficiently powerful type system that they can prove at compile time that the code does not address an array outside its bounds. My question is that if we were to compile such a language to the JVM, is there some way we could take advantage of that for performance and remove the array bounds checks that occur on every array access?</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[-1574931177]","astNode":{"type":"TextFragmentNode","text":"<p>There are some languages that support a sufficiently powerful type system that they can prove at compile time that the code does not address an array outside its bounds. My question is that if we were to compile such a language to the JVM, is there some way we could take advantage of that for performance and remove the array bounds checks that occur on every array access?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"support":1,"question":1,"prove":1,"languag":2,"remov":1,"system":1,"occur":1,"code":1,"array":3,"bound":2,"advantag":1,"check":1,"suffici":1,"perform":1,"address":1,"compil":2,"time":1,"power":1,"type":1,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>1) I know that recent JDK supports some array bound check elimination, but since I know at compile time that certain calls are safe, I could remove a lot more safely.</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[605901460]","astNode":{"type":"TextFragmentNode","text":"<p>1) I know that recent JDK supports some array bound check elimination, but since I know at compile time that certain calls are safe, I could remove a lot more safely.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"support":1,"remov":1,"recent":1,"safe":2,"array":1,"bound":1,"check":1,"lot":1,"elimin":1,"compil":1,"time":1,"call":1,"jdk":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>2) Some might think this doesn't affect performance much but it most certainly does, especially in array/computation heavy applications such as scientific computing.</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[1470270237]","astNode":{"type":"TextFragmentNode","text":"<p>2) Some might think this doesn't affect performance much but it most certainly does, especially in array/computation heavy applications such as scientific computing.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"scientif":1,"affect":1,"array":1,"comput":2,"perform":1,"applic":1,"heavi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>The same question regarding casting. I know something is a certain type, but Java doesn't because its limited type system. Is there some way to just tell the JVM to \"trust me\" and skip any checks?</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[552050137]","astNode":{"type":"TextFragmentNode","text":"<p>The same question regarding casting. I know something is a certain type, but Java doesn't because its limited type system. Is there some way to just tell the JVM to \"trust me\" and skip any checks?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"question":1,"system":1,"trust":1,"skip":1,"cast":1,"check":1,"type":2,"limit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I realize there is probably no way to do this as the JVM is generally distributed, could it be reasonable to modify a JVM with this feature? Is this something that has been done?</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[2080102592]","astNode":{"type":"TextFragmentNode","text":"<p>I realize there is probably no way to do this as the JVM is generally distributed, could it be reasonable to modify a JVM with this feature? Is this something that has been done?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":2,"reason":1,"general":1,"modifi":1,"featur":1,"distribut":1,"realiz":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>It's one of the frustrations in compiling a more powerfully typed language to the JVM, it still is hampered by Java's limitations.</p>"},"units":[{"type":"TextUnit","id":"[13272543]-[-1129460838]","astNode":{"type":"TextFragmentNode","text":"<p>It's one of the frustrations in compiling a more powerfully typed language to the JVM, it still is hampered by Java's limitations.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"languag":1,"hamper":1,"frustrat":1,"compil":1,"power":1,"type":1,"limit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},"answers":[{"type":"StackOverflowAnswer","id":13589841,"questionId":13272543,"comments":[],"creationDate":"2012-11-27","lastActivityDate":"2012-11-27","score":2,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1250976,"displayName":"SecurityMatt","reputation":3705},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>One of the key features of Java is that it does not need to \"trust\" the developer to do bounds checking. This eliminates the \"buffer overflow\" security vulnerabilities which can lead to attackers being able to execute arbitrary code within your application.</p>"},"units":[{"type":"TextUnit","id":"[13589841]-[835255965]","astNode":{"type":"TextFragmentNode","text":"<p>One of the key features of Java is that it does not need to \"trust\" the developer to do bounds checking. This eliminates the \"buffer overflow\" security vulnerabilities which can lead to attackers being able to execute arbitrary code within your application.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"lead":1,"arbitrari":1,"overflow":1,"trust":1,"buffer":1,"secur":1,"vulner":1,"key":1,"code":1,"bound":1,"check":1,"applic":1,"elimin":1,"attack":1,"featur":1,"develop":1,"execut":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>By allowing developers the ability to turn off bounds checking, Java would lose one of its key features - that no matter how wrong the Java developer is, there is not going to be any exploitable buffer overflows within his/her code.</p>"},"units":[{"type":"TextUnit","id":"[13589841]-[993125965]","astNode":{"type":"TextFragmentNode","text":"<p>By allowing developers the ability to turn off bounds checking, Java would lose one of its key features - that no matter how wrong the Java developer is, there is not going to be any exploitable buffer overflows within his/her code.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"exploit":1,"overflow":1,"wrong":1,"buffer":1,"key":1,"code":1,"bound":1,"check":1,"allow":1,"turn":1,"abil":1,"matter":1,"featur":1,"develop":2,"lose":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>If you would like to use a language where the programmer is trusted to manage their own bounds checking, might I suggest C++. This gives you the ability to allocate arrays with no automatic bounds checking (new int[]) and to allocate arrays with inbuilt bounds checking (std::vector).</p>"},"units":[{"type":"TextUnit","id":"[13589841]-[1585362394]","astNode":{"type":"TextFragmentNode","text":"<p>If you would like to use a language where the programmer is trusted to manage their own bounds checking, might I suggest C++. This gives you the ability to allocate arrays with no automatic bounds checking (new int[]) and to allocate arrays with inbuilt bounds checking (std::vector).</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"languag":1,"alloc":2,"trust":1,"inbuilt":1,"suggest":1,"vector":1,"std":1,"array":2,"automat":1,"bound":3,"check":3,"programm":1,"abil":1,"manag":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Additionally, I strongly suggest that before blaming bounds checking for the speed loss in your application, you perform some <em>BENCHMARKING</em> to determine whether there is somewhere else in your code that might be causing the bottleneck.</p>"},"units":[{"type":"TextUnit","id":"[13589841]-[993489204]","astNode":{"type":"TextFragmentNode","text":"<p>Additionally, I strongly suggest that before blaming bounds checking for the speed loss in your application, you perform some <em>BENCHMARKING</em> to determine whether there is somewhere else in your code that might be causing the bottleneck.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"determin":1,"addit":1,"suggest":1,"strong":1,"code":1,"bound":1,"check":1,"perform":1,"applic":1,"caus":1,"bottleneck":1,"loss":1,"blame":1,"speed":1,"benchmark":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>You may find that for a compiler target that a bytecode language such as MSIL is more suited to your needs than Java bytecode. MSIL is strongly typed and does not suffer from a number of the inefficiencies that you have found in Java.</p>"},"units":[{"type":"TextUnit","id":"[13589841]-[227131102]","astNode":{"type":"TextFragmentNode","text":"<p>You may find that for a compiler target that a bytecode language such as MSIL is more suited to your needs than Java bytecode. MSIL is strongly typed and does not suffer from a number of the inefficiencies that you have found in Java.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":1,"find":1,"languag":1,"bytecod":2,"strong":1,"suit":1,"found":1,"msil":2,"ineffici":1,"target":1,"compil":1,"type":1,"suffer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":13591730,"questionId":13272543,"comments":[{"type":"StackOverflowComment","id":18632191,"postId":13591730,"creationDate":"2012-11-27","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":315734,"displayName":"taotree","reputation":2529},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Great information! It seems another solution might be a trusted code mechanism. Some searching shows there are some people working on PCC with Java. Maybe we'll get some someday."},"units":[{"type":"TextUnit","id":"[13591730-cu18632191]-[-1594339422]","astNode":{"type":"TextFragmentNode","text":"Great information! It seems another solution might be a trusted code mechanism. Some searching shows there are some people working on PCC with Java. Maybe we'll get some someday."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"show":1,"trust":1,"work":1,"code":1,"inform":1,"mechan":1,"someday":1,"peopl":1,"great":1,"solut":1,"pcc":1,"search":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":72.3225,"fleshKincaidGradeLevel":5.035000000000004,"automatedReadingIndex":5.241999999999997,"gunningFogIndex":4.333333333333334,"smogIndex":5.738612787525831,"colemanLiauIndex":8.864666666666665}]}]}]}],"creationDate":"2012-11-27","lastActivityDate":"2012-11-27","score":2,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":787643,"displayName":"Saintali","reputation":1886},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>In principle this cannot be done in a safe fashion without a <a href=\"http://en.wikipedia.org/wiki/Proof-carrying_code\" rel=\"nofollow\">proof-carrying code</a> (PCC) infrastructure. PCC would allow you to embed your reasoning of safety in the <code>class</code> file. Your embedded proof is checked at class-loading time. The class is not loaded if there is a flaw in the proof.</p>"},"units":[{"type":"TextUnit","id":"[13591730]-[1081994038]","astNode":{"type":"TextFragmentNode","text":"<p>In principle this cannot be done in a safe fashion without a <a href=\"http://en.wikipedia.org/wiki/Proof-carrying_code\" rel=\"nofollow\">proof-carrying code</a> (PCC) infrastructure. PCC would allow you to embed your reasoning of safety in the <code>class</code> file. Your embedded proof is checked at class-loading time. The class is not loaded if there is a flaw in the proof.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"file","comments":[]},"labels":[],"comments":[]},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"is","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"fashion":1,"carri":2,"rel":1,"load":2,"principl":1,"embed":1,"safe":1,"reason":1,"flaw":1,"infrastructur":1,"code":4,"safeti":1,"wikipedia":1,"nofollow":1,"check":1,"proof":4,"file":1,"wiki":1,"time":1,"org":1,"href":1,"http":1,"emb":1,"pcc":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"file","comments":[]},{"type":"IdentifierNode","name":"is","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>If the JVM ever allowed you to drop runtime checks without requiring a formal proof, then, as SecurityMatt put it, it would defeat the original philosophy of Java as a safe platform.</p>"},"units":[{"type":"TextUnit","id":"[13591730]-[-3500515]","astNode":{"type":"TextFragmentNode","text":"<p>If the JVM ever allowed you to drop runtime checks without requiring a formal proof, then, as SecurityMatt put it, it would defeat the original philosophy of Java as a safe platform.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"SecurityMatt","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"philosophi":1,"runtim":1,"requir":1,"matt":1,"secur":1,"safe":1,"drop":1,"check":1,"allow":1,"origin":1,"defeat":1,"proof":1,"put":1,"platform":1,"formal":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"SecurityMatt","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"SecurityMatt","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>The JVM uses a special form of PCC for type-checking local variables in a method. All local variable typing info is used by the class-loading mechanism to check its correctness, but discarded after that. But that's the only instance of PCC concepts used in the JVM. As far as I know there is no general PCC infrastructure for the JVM.</p>"},"units":[{"type":"TextUnit","id":"[13591730]-[1973384912]","astNode":{"type":"TextFragmentNode","text":"<p>The JVM uses a special form of PCC for type-checking local variables in a method. All local variable typing info is used by the class-loading mechanism to check its correctness, but discarded after that. But that's the only instance of PCC concepts used in the JVM. As far as I know there is no general PCC infrastructure for the JVM.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":3,"method":1,"correct":1,"local":2,"discard":1,"load":1,"info":1,"infrastructur":1,"general":1,"check":2,"mechan":1,"concept":1,"special":1,"type":2,"form":1,"variabl":2,"pcc":3,"instanc":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I once heard one existed for the JavaCard platform which supports a small subset of Java. I am not sure if that can be helpful in your problem though.</p>"},"units":[{"type":"TextUnit","id":"[13591730]-[1850556902]","astNode":{"type":"TextFragmentNode","text":"<p>I once heard one existed for the JavaCard platform which supports a small subset of Java. I am not sure if that can be helpful in your problem though.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"JavaCard","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"support":1,"heard":1,"exist":1,"problem":1,"small":1,"help":1,"subset":1,"platform":1,"card":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"JavaCard","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"JavaCard","comments":[]}]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]}]}