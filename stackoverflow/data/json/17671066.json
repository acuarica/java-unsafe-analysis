{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":17671066,
    "title":"Java direct memory: using sun.misc.Cleaner in custom classes",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":25746160,
        "postId":17671066,
        "creationDate":"2013-07-16",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1671431,
          "displayName":"Antoine CHAMBILLE",
          "reputation":874
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I know, and also I should not smoke ;) It is a good thing that the writers of high performance libraries based on sun.misc.Unsafe bypassed that rule though."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[17671066-cu25746160]-[568002374]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I know, and also I should not smoke ;) It is a good thing that the writers of high performance libraries based on sun.misc.Unsafe bypassed that rule though."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "smoke":1,
                      "writer":1,
                      "good":1,
                      "sun":1,
                      "thing":1,
                      "rule":1,
                      "librari":1,
                      "base":1,
                      "perform":1,
                      "misc":1,
                      "bypass":1,
                      "unsaf":1,
                      "high":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":25741503,
        "postId":17671066,
        "creationDate":"2013-07-16",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You shouldn't use anything in sun.misc.* for anything whatsoever, and the JDK documentation already says so."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[17671066-cu25741503]-[-327697695]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You shouldn't use anything in sun.misc.* for anything whatsoever, and the JDK documentation already says so."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "document":1,
                      "sun":1,
                      "misc":1,
                      "whatsoev":1,
                      "shouldn":1,
                      "jdk":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2013-07-16",
    "lastActivityDate":"2013-07-17",
    "score":8,
    "viewCount":1308,
    "owner":{
      "type":"StackOverflowUser",
      "id":1671431,
      "displayName":"Antoine CHAMBILLE",
      "reputation":874
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In Java the memory allocated by nio direct buffers is freed with sun.misc.Cleaner instances, some special phantom references that are more efficient than object finalization.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17671066]-[1940397913]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In Java the memory allocated by nio direct buffers is freed with sun.misc.Cleaner instances, some special phantom references that are more efficient than object finalization.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Cleaner",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "alloc":1,
                  "cleaner":1,
                  "sun":1,
                  "effici":1,
                  "nio":1,
                  "buffer":1,
                  "object":1,
                  "direct":1,
                  "final":1,
                  "freed":1,
                  "refer":1,
                  "misc":1,
                  "special":1,
                  "instanc":1,
                  "phantom":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Cleaner",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is this cleaner mechanism hardcoded in the JVM only for the direct buffer subclasses, or is it possible to also use cleaners in custom components (writing a custom direct byte buffer for instance)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17671066]-[-340774724]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is this cleaner mechanism hardcoded in the JVM only for the direct buffer subclasses, or is it possible to also use cleaners in custom components (writing a custom direct byte buffer for instance)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "jvm":1,
                  "subclass":1,
                  "custom":2,
                  "cleaner":2,
                  "buffer":2,
                  "compon":1,
                  "direct":2,
                  "mechan":1,
                  "hardcod":1,
                  "write":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here I am not talking about retrieving the cleaner field of an existing nio direct buffer. I am not talking either about manually freeing the memory. This is about writing a new class that allocates direct memory and has it cleaned efficiently and automatically by the garbage collector mechanism.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[17671066]-[-172151001]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here I am not talking about retrieving the cleaner field of an existing nio direct buffer. I am not talking either about manually freeing the memory. This is about writing a new class that allocates direct memory and has it cleaned efficiently and automatically by the garbage collector mechanism.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"that",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "collector":1,
                  "alloc":1,
                  "cleaner":1,
                  "field":1,
                  "exist":1,
                  "retriev":1,
                  "clean":1,
                  "effici":1,
                  "talk":2,
                  "nio":1,
                  "buffer":1,
                  "direct":2,
                  "automat":1,
                  "mechan":1,
                  "manual":1,
                  "write":1,
                  "garbag":1,
                  "free":1,
                  "memori":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":17699245,
      "questionId":17671066,
      "comments":[
        
      ],
      "creationDate":"2013-07-17",
      "lastActivityDate":"2013-07-17",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1671431,
        "displayName":"Antoine CHAMBILLE",
        "reputation":874
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>After spending more time reading the API doc ( <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html\">http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html</a> ) I think I have a more detailed answer:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[775771572]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>After spending more time reading the API doc ( <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html\">http://docs.oracle.com/javase/7/docs/api/java/lang/ref/package-summary.html</a> ) I think I have a more detailed answer:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "spend":1,
                    "summari":2,
                    "oracl":2,
                    "ref":2,
                    "doc":5,
                    "javas":2,
                    "answer":1,
                    "detail":1,
                    "api":3,
                    "time":1,
                    "lang":2,
                    "html":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>1) it is possible to reuse sun.misc.Cleaner to perform the efficient cleanup of your own custom classes. You declare the cleaner by calling the provided factory method:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[1882140319]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>1) it is possible to reuse sun.misc.Cleaner to perform the efficient cleanup of your own custom classes. You declare the cleaner by calling the provided factory method:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Cleaner",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "method":1,
                    "custom":1,
                    "cleaner":2,
                    "sun":1,
                    "effici":1,
                    "factori":1,
                    "declar":1,
                    "cleanup":1,
                    "perform":1,
                    "misc":1,
                    "class":1,
                    "call":1,
                    "reus":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Cleaner",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"sun.misc.Cleaner.create(Object ob, Runnable cleanup); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[17699245]-[-1968626471]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"sun.misc.Cleaner.create(Object ob, Runnable cleanup); "
                  }
                ]
              },
              "rawText":"sun.misc.Cleaner.create(Object ob, Runnable cleanup); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cleaner":1,
                    "sun":1,
                    "object":1,
                    "cleanup":1,
                    "runnabl":1,
                    "misc":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For some time I could not get it to work properly, that's because I was moronic enough to define the runnable cleanup code of my cleaner as an anonymous class, that kept a (strong) reference to my referent object, preventing it from ever being &quot;phantom reachable&quot;...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[-1197868236]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For some time I could not get it to work properly, that's because I was moronic enough to define the runnable cleanup code of my cleaner as an anonymous class, that kept a (strong) reference to my referent object, preventing it from ever being &quot;phantom reachable&quot;...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cleaner":1,
                    "proper":1,
                    "prevent":1,
                    "anonym":1,
                    "reachabl":1,
                    "strong":1,
                    "work":1,
                    "object":1,
                    "code":1,
                    "cleanup":1,
                    "refer":2,
                    "runnabl":1,
                    "moron":1,
                    "quot":2,
                    "time":1,
                    "defin":1,
                    "phantom":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2) There is no other way to implement such efficient cleanup (not even with the help of phantom references)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[-932173820]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2) There is no other way to implement such efficient cleanup (not even with the help of phantom references)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "effici":1,
                    "cleanup":1,
                    "refer":1,
                    "implement":1,
                    "phantom":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Indeed the reference handler thread handles instances of sun.misc.Cleaner in a special way:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[-590958006]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Indeed the reference handler thread handles instances of sun.misc.Cleaner in a special way:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Cleaner",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cleaner":1,
                    "sun":1,
                    "thread":1,
                    "refer":1,
                    "misc":1,
                    "special":1,
                    "handler":1,
                    "handl":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Cleaner",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"// Fast path for cleaners if (r instanceof Cleaner) { ((Cleaner)r).clean(); continue; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[17699245]-[248859520]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"// Fast path for cleaners "
                  },
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"instanceof",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"r",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"ReferenceTypeBoxedExpression",
                        "referenceType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Cleaner",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Cleaner",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"r",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"clean",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ContinueStatementNode",
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"// Fast path for cleaners if (r instanceof Cleaner) { ((Cleaner)r).clean(); continue; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cleaner":3,
                    "fast":1,
                    "clean":1,
                    "path":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Cleaner",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"clean",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That means that the cleanup code is called directly from the reference handler thread, while in standard usage, the references must be enqueued by the reference handler thread and then dequeued and processed by another application thread.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17699245]-[-1142051423]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That means that the cleanup code is called directly from the reference handler thread, while in standard usage, the references must be enqueued by the reference handler thread and then dequeued and processed by another application thread.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dequeu":1,
                    "standard":1,
                    "process":1,
                    "mean":1,
                    "direct":1,
                    "code":1,
                    "thread":3,
                    "cleanup":1,
                    "refer":3,
                    "applic":1,
                    "usag":1,
                    "call":1,
                    "handler":2,
                    "enqueu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":17679483,
      "questionId":17671066,
      "comments":[
        
      ],
      "creationDate":"2013-07-16",
      "lastActivityDate":"2013-07-16",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2584629,
        "displayName":"parsifal",
        "reputation":201
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you rely on anything in a <code>sun.misc</code> package, you run the risk of it disappearing and breaking your code. Some pieces are more stable than others, but it's often a bad idea (devil's advocate: a lot of the methods in <code>sun.misc.Unsafe</code> are actually implemented by JVM intrinsics, making them faster than user-written JNI code).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17679483]-[-1089269785]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you rely on anything in a <code>sun.misc</code> package, you run the risk of it disappearing and breaking your code. Some pieces are more stable than others, but it's often a bad idea (devil's advocate: a lot of the methods in <code>sun.misc.Unsafe</code> are actually implemented by JVM intrinsics, making them faster than user-written JNI code).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "method":1,
                    "faster":1,
                    "break":1,
                    "disappear":1,
                    "advoc":1,
                    "run":1,
                    "idea":1,
                    "sun":2,
                    "stabl":1,
                    "bad":1,
                    "risk":1,
                    "devil":1,
                    "code":6,
                    "jni":1,
                    "written":1,
                    "implement":1,
                    "misc":2,
                    "lot":1,
                    "piec":1,
                    "make":1,
                    "intrins":1,
                    "unsaf":1,
                    "reli":1,
                    "user":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In this case, I think it's a bad idea: <code>Cleaner</code> is one possible implementation of cleanup via <code>PhantomReference</code>. There are others; Google for examples. For that matter, you could look at the <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/misc/Cleaner.java\"rel=\"nofollow\">source code</a> of <code>Cleaner</code> itself as an example of how to use phantom references.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17679483]-[1271857897]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In this case, I think it's a bad idea: <code>Cleaner</code> is one possible implementation of cleanup via <code>PhantomReference</code>. There are others; Google for examples. For that matter, you could look at the <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/misc/Cleaner.java\"rel=\"nofollow\">source code</a> of <code>Cleaner</code> itself as an example of how to use phantom references.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":1,
                    "googl":1,
                    "cleaner":3,
                    "root":1,
                    "exampl":1,
                    "idea":1,
                    "sun":1,
                    "rel":1,
                    "bad":1,
                    "repositori":1,
                    "grepcod":2,
                    "code":7,
                    "nofollow":1,
                    "cleanup":1,
                    "refer":2,
                    "implement":1,
                    "misc":1,
                    "file":1,
                    "matter":1,
                    "href":1,
                    "http":1,
                    "sourc":1,
                    "jdk":1,
                    "phantom":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You <em>will</em> need some sort of cleanup handler if you're going to have on-heap objects that refer to off-heap objects. Otherwise you'll create a true memory leak when those on-heap objects get collected.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17679483]-[784145242]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You <em>will</em> need some sort of cleanup handler if you're going to have on-heap objects that refer to off-heap objects. Otherwise you'll create a true memory leak when those on-heap objects get collected.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "leak":1,
                    "object":3,
                    "cleanup":1,
                    "refer":1,
                    "true":1,
                    "collect":1,
                    "heap":3,
                    "sort":1,
                    "creat":1,
                    "handler":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}