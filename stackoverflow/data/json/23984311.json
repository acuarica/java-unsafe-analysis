{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23984311,
    "title":"How to convert int values into bytes in java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":36957516,
        "postId":23984311,
        "creationDate":"2014-06-01",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":129570,
          "displayName":"Oliver Charlesworth",
          "reputation":157510
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What result are you expecting?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23984311-cu36957516]-[1529252106]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What result are you expecting?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "result":1,
                      "expect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36957529,
        "postId":23984311,
        "creationDate":"2014-06-01",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3297111,
          "displayName":"user432",
          "reputation":2373
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It overflows at 32767, because that is the maximum value for `short` in Java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23984311-cu36957529]-[-910709187]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It overflows at 32767, because that is the maximum value for `short` in Java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "overflow":1,
                      "maximum":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2014-06-01",
    "lastActivityDate":"2014-06-01",
    "lastEditDate":"2014-06-01",
    "score":-1,
    "viewCount":127,
    "owner":{
      "type":"StackOverflowUser",
      "id":3509750,
      "displayName":"Saurabh Pathak",
      "reputation":3
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Hi friends. I am new in java and I was trying to print the value of</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23984311]-[-729268678]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Hi friends. I am new in java and I was trying to print the value of</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "friend":1,
                  "print":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"int z=123456; System.out.println((short)z); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23984311]-[-379110067]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"int "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"z",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"123456"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"out",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"println",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"CastExpressionNode",
                        "aType":{
                          "type":"PrimitiveTypeNode",
                          "name":"short",
                          "comments":[
                            
                          ]
                        },
                        "argument":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"z",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"int z=123456; Systemoutprintln((short)z); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "systemoutprintln":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"short",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"PrimitiveTypeNode",
                            "name":"short",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"z",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>and the o/p is coming : -7616</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23984311]-[-1308091439]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>and the o/p is coming : -7616</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "come":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can anybody explain to me why it is happening? Thanks in advance;</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23984311]-[-1713148946]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can anybody explain to me why it is happening? Thanks in advance;</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "advanc":1,
                  "happen":1,
                  "explain":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":23984344,
      "questionId":23984311,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":36957662,
          "postId":23984344,
          "creationDate":"2014-06-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3509750,
            "displayName":"Saurabh Pathak",
            "reputation":3
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you explain me how this value is comming i am not getting..?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23984344-cu36957662]-[-898545992]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you explain me how this value is comming i am not getting..?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "com":1,
                        "explain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":36957686,
          "postId":23984344,
          "creationDate":"2014-06-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":391161,
            "displayName":"merlin2011",
            "reputation":23363
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@SaurabhPathak, I just updated the answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23984344-cu36957686]-[-968074946]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@SaurabhPathak, I just updated the answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SaurabhPathak",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "updat":1,
                        "pathak":1,
                        "answer":1,
                        "saurabh":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-06-01",
      "lastActivityDate":"2014-06-01",
      "lastEditDate":"2014-06-01",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":391161,
        "displayName":"merlin2011",
        "reputation":23363
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The maximum value for a signed 16-bit integer is <code>32767</code>, so if you try to convert a larger number, it will overflow and turn negative, unless you wrap around a second time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984344]-[-1905281124]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The maximum value for a signed 16-bit integer is <code>32767</code>, so if you try to convert a larger number, it will overflow and turn negative, unless you wrap around a second time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "negat":1,
                    "bit":1,
                    "overflow":1,
                    "code":2,
                    "maximum":1,
                    "sign":1,
                    "larger":1,
                    "wrap":1,
                    "turn":1,
                    "time":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Let is consider the number <code>123456</code>. If we compute <code>123456 % (2^16)</code>, we will get <code>57920</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984344]-[-293996700]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Let is consider the number <code>123456</code>. If we compute <code>123456 % (2^16)</code>, we will get <code>57920</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "comput":1,
                    "code":6
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The byte representation is <code>0b1110001001000000</code>, which is equal to <code>-7616</code> in 2's complement.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984344]-[-212482438]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The byte representation is <code>0b1110001001000000</code>, which is equal to <code>-7616</code> in 2's complement.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "complement":1,
                    "represent":1,
                    "code":4,
                    "equal":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To make it more obvious, we can compute the 2's complement as follows.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984344]-[-412747313]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To make it more obvious, we can compute the 2's complement as follows.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "complement":1,
                    "comput":1,
                    "obvious":1,
                    "make":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(0b0110001001000000 - 2^15) = -7616 "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23984344]-[-2088220846]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(0b0110001001000000 - 2^15) = -7616 "
                  }
                ]
              },
              "rawText":"(0b0110001001000000 - 2^15) = -7616 ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":23984405,
      "questionId":23984311,
      "comments":[
        
      ],
      "creationDate":"2014-06-01",
      "lastActivityDate":"2014-06-01",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3307716,
        "displayName":"Dhaval Kapil",
        "reputation":401
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Range of <code>int</code> : -2,147,483,648 to 2,147,483,647</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984405]-[1298711138]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Range of <code>int</code> : -2,147,483,648 to 2,147,483,647</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rang":1,
                    "code":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Range of <code>short</code> : -32,768 to 32,767</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984405]-[61182871]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Range of <code>short</code> : -32,768 to 32,767</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rang":1,
                    "code":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now when you take a short variable with value 32767 and add 1, the output will be -32768. That is, when the result of some calculation exceeds the range then it continues from the other extreme end. This can be explained using binary representation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984405]-[344764058]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now when you take a short variable with value 32767 and add 1, the output will be -32768. That is, when the result of some calculation exceeds the range then it continues from the other extreme end. This can be explained using binary representation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "represent":1,
                    "explain":1,
                    "continu":1,
                    "exceed":1,
                    "rang":1,
                    "result":1,
                    "binari":1,
                    "calcul":1,
                    "extrem":1,
                    "end":1,
                    "output":1,
                    "variabl":1,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"eg. consider a number of 3 bits. Range will be -4 to 3. i.e. (100, 101, 110, 111, 000, 001, 010, 011) respectively. So if you add 1 to 3 you would be doing: 001 + 011 = 100 which is nothing but -4. Note: Also remember that while calculating, any extra bit(extra carry) is to be ignored. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23984405]-[709129476]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"eg. consider a number of 3 bits. Range will be -4 to 3. i.e. (100, 101, 110, 111, 000, 001, 010, 011) respectively. So if you add 1 to 3 you would be doing: 001 + 011 = 100 which is nothing but -4. Note: Also remember that while calculating, any extra bit(extra carry) is to be ignored. "
                  }
                ]
              },
              "rawText":"eg. consider a number of 3 bits. Range will be -4 to 3. i.e. (100, 101, 110, 111, 000, 001, 010, 011) respectively. So if you add 1 to 3 you would be doing: 001 + 011 = 100 which is nothing but -4. Note: Also remember that while calculating, any extra bit(extra carry) is to be ignored. ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "bit":2,
                    "carri":1,
                    "rang":1,
                    "calcul":1,
                    "rememb":1,
                    "note":1,
                    "extra":2,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So when you converted 123456 to <code>short</code>, the output will be the one produced assuming that after 32767 the counting will start from -32768</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984405]-[2007934919]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So when you converted 123456 to <code>short</code>, the output will be the one produced assuming that after 32767 the counting will start from -32768</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assum":1,
                    "count":1,
                    "produc":1,
                    "code":2,
                    "output":1,
                    "start":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":23984424,
      "questionId":23984311,
      "comments":[
        
      ],
      "creationDate":"2014-06-01",
      "lastActivityDate":"2014-06-01",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":874596,
        "displayName":"Bela Vizer",
        "reputation":1699
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>the reason is that you are narrowing primitives, more about that: <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.3\"rel=\"nofollow\">http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.3</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984424]-[-1673050061]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>the reason is that you are narrowing primitives, more about that: <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.3\"rel=\"nofollow\">http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.3</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":2,
                    "rel":1,
                    "oracl":2,
                    "reason":1,
                    "doc":2,
                    "nofollow":1,
                    "convers":2,
                    "spec":2,
                    "javas":2,
                    "html":4,
                    "href":1,
                    "primit":1,
                    "narrow":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>in this specific case 123456 in base2 32 bit (integer (primitive!) in Java is 32bit) 2nd complement (that is how Java stores primitives): 00000000000000011110001001000000</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984424]-[-1702551812]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>in this specific case 123456 in base2 32 bit (integer (primitive!) in Java is 32bit) 2nd complement (that is how Java stores primitives): 00000000000000011110001001000000</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bit":2,
                    "store":1,
                    "base":1,
                    "specif":1,
                    "complement":1,
                    "primit":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>if you narrow (in this case to short which is 16 bit) the 2nd complement binary representation is gonna be: 1110001001000000 which is -7616</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23984424]-[1915491522]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>if you narrow (in this case to short which is 16 bit) the 2nd complement binary representation is gonna be: 1110001001000000 which is -7616</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "represent":1,
                    "bit":1,
                    "binari":1,
                    "gonna":1,
                    "complement":1,
                    "narrow":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}