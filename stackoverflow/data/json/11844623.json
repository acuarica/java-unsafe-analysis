{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11844623,
    "title":"Hibernate (best)most common structure",
    "comments":[
      
    ],
    "tags":[
      "java",
      "hibernate"
    ],
    "creationDate":"2012-08-07",
    "lastActivityDate":"2012-08-31",
    "lastEditDate":"2012-08-07",
    "score":1,
    "viewCount":105,
    "owner":{
      "type":"StackOverflowUser",
      "id":625189,
      "displayName":"Jaanus",
      "reputation":3306
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a POJO class with hibernate annotations for each table in database. Also have one HibernateUtility for my database, which creates SessionFactory.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11844623]-[176852684]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a POJO class with hibernate annotations for each table in database. Also have one HibernateUtility for my database, which creates SessionFactory.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"with",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"HibernateUtility",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"SessionFactory",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "util":1,
                  "pojo":1,
                  "hibern":2,
                  "factori":1,
                  "tabl":1,
                  "annot":1,
                  "session":1,
                  "databas":2,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HibernateUtility",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SessionFactory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Should I create a manager per DB table or manager per DB?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11844623]-[-445137660]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Should I create a manager per DB table or manager per DB?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "tabl":1,
                  "manag":2,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Under manager I mean a class, which does all the transactions, CRUD.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11844623]-[-452941212]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Under manager I mean a class, which does all the transactions, CRUD.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "manag":1,
                  "crud":1,
                  "transact":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Which gives me the best performance?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11844623]-[1909315776]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Which gives me the best performance?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "perform":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11845949,
      "questionId":11844623,
      "comments":[
        
      ],
      "creationDate":"2012-08-07",
      "lastActivityDate":"2012-08-07",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":608820,
        "displayName":"Augusto",
        "reputation":15207
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's usually helpful to have a DAO per table. You don't need to write a lot of code, as you can use a <a href=\"https://www.google.com/search?q=hibernate%20generic%20dao\"rel=\"nofollow\">generic dao</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845949]-[18014421]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's usually helpful to have a DAO per table. You don't need to write a lot of code, as you can use a <a href=\"https://www.google.com/search?q=hibernate%20generic%20dao\"rel=\"nofollow\">generic dao</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "googl":1,
                    "dao":3,
                    "hibern":1,
                    "rel":1,
                    "https":1,
                    "generic":2,
                    "code":1,
                    "tabl":1,
                    "help":1,
                    "nofollow":1,
                    "lot":1,
                    "href":1,
                    "write":1,
                    "www":1,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Performance wise: remember that you're using hibernate, which down't have performance as one of its pillars, but hibernate usually brings down development time. If you need performance try using myBatis or just plain jdbc.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845949]-[486710759]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Performance wise: remember that you're using hibernate, which down't have performance as one of its pillars, but hibernate usually brings down development time. If you need performance try using myBatis or just plain jdbc.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"myBatis",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wise":1,
                    "hibern":2,
                    "jdbc":1,
                    "pillar":1,
                    "rememb":1,
                    "perform":3,
                    "plain":1,
                    "bring":1,
                    "time":1,
                    "develop":1,
                    "bati":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11845960,
      "questionId":11844623,
      "comments":[
        
      ],
      "creationDate":"2012-08-07",
      "lastActivityDate":"2012-08-31",
      "lastEditDate":"2012-08-31",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1041691,
        "displayName":"fommil",
        "reputation":1079
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I prefer to have a DAO class for each table in the DB. I actually have an abstract DAO object which does all the usual CRUD operations and then I'll override or add additional query methods as they are needed. I wouldn't be able to re-use my CRUD logic if it was all in one DAO.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845960]-[9371633]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I prefer to have a DAO class for each table in the DB. I actually have an abstract DAO object which does all the usual CRUD operations and then I'll override or add additional query methods as they are needed. I wouldn't be able to re-use my CRUD logic if it was all in one DAO.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "dao":3,
                    "addit":1,
                    "crud":2,
                    "overrid":1,
                    "logic":1,
                    "object":1,
                    "oper":1,
                    "tabl":1,
                    "need":1,
                    "queri":1,
                    "usual":1,
                    "wouldn":1,
                    "add":1,
                    "prefer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Actually, I'm surprised there is not a standard abstract CRUD implementation out there that everybody uses - it's trivial to write (maybe there is a well maintained one?). My generic DAO also has convenience methods for obtaining the <code>EntityManagerFactory</code> - useful in a Java SE environment where these sorts of things are not injected.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845960]-[-2063843392]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Actually, I'm surprised there is not a standard abstract CRUD implementation out there that everybody uses - it's trivial to write (maybe there is a well maintained one?). My generic DAO also has convenience methods for obtaining the <code>EntityManagerFactory</code> - useful in a Java SE environment where these sorts of things are not injected.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"EntityManagerFactory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "dao":1,
                    "standard":1,
                    "crud":1,
                    "thing":1,
                    "factori":1,
                    "surpris":1,
                    "generic":1,
                    "code":2,
                    "conveni":1,
                    "implement":1,
                    "inject":1,
                    "entiti":1,
                    "sort":1,
                    "manag":1,
                    "environ":1,
                    "trivial":1,
                    "write":1,
                    "obtain":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"EntityManagerFactory",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11845966,
      "questionId":11844623,
      "comments":[
        
      ],
      "creationDate":"2012-08-07",
      "lastActivityDate":"2012-08-07",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":571407,
        "displayName":"JB Nizet",
        "reputation":287730
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Performance has nothing to do with the number of classes you have. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845966]-[1066798510]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Performance has nothing to do with the number of classes you have. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "class":1,
                    "perform":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A manager per DB table is too many: business use-cases typically involve more than one table. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845966]-[-531559460]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A manager per DB table is too many: business use-cases typically involve more than one table. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "involv":1,
                    "tabl":2,
                    "busi":1,
                    "typic":1,
                    "case":1,
                    "manag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A manager for the whole database is too few: having all the business logic of an application in one class is not maintainable. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845966]-[1609088423]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A manager for the whole database is too few: having all the business logic of an application in one class is not maintainable. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "logic":1,
                    "busi":1,
                    "applic":1,
                    "databas":1,
                    "manag":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>An application typically has groups of use-cases: user management, notifications management, etc. I would use these as a way to split the logic into classes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845966]-[-1608093948]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>An application typically has groups of use-cases: user management, notifications management, etc. I would use these as a way to split the logic into classes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "notif":1,
                    "logic":1,
                    "typic":1,
                    "split":1,
                    "applic":1,
                    "class":1,
                    "case":1,
                    "manag":2,
                    "group":1,
                    "user":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Also, note that business logic (which is what I assumed would be in your manager classes) should be separated from data access logic (DAOs, repositories). The CRUD is typically the responsibility of the DAO, whild the business logic and transaction demarcation is done in the service (manager) layer.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11845966]-[-363569934]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Also, note that business logic (which is what I assumed would be in your manager classes) should be separated from data access logic (DAOs, repositories). The CRUD is typically the responsibility of the DAO, whild the business logic and transaction demarcation is done in the service (manager) layer.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assum":1,
                    "whild":1,
                    "dao":2,
                    "demarc":1,
                    "data":1,
                    "crud":1,
                    "separ":1,
                    "repositori":1,
                    "logic":3,
                    "layer":1,
                    "transact":1,
                    "busi":2,
                    "typic":1,
                    "note":1,
                    "class":1,
                    "respons":1,
                    "manag":2,
                    "servic":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}