{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7677794,
    "title":"Write/read memory using Unsafe in java",
    "comments":[
      
    ],
    "tags":[
      "java",
      "memory-management",
      "unsafe-pointers"
    ],
    "creationDate":"2011-10-06",
    "lastActivityDate":"2011-10-07",
    "score":1,
    "viewCount":419,
    "owner":{
      "type":"StackOverflowUser",
      "id":253924,
      "displayName":"Leonardo",
      "reputation":3527
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know it is possible to write and read directly to memory by using Unsafe class within the jvm.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7677794]-[600567046]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know it is possible to write and read directly to memory by using Unsafe class within the jvm.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"within",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "jvm":1,
                  "direct":1,
                  "unsaf":1,
                  "write":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Apart from this being really unsafe and somehow counterproductive, I was instead wondering who/what is taking charge of checking the boundaries of the allowed memory location. And also if there's some mechanism that safeguard the already allocated memory to be overwritten. Related to this latest question, what possible damage can one does by overwriting what he shouldn't ? Well, this could be best reformed as: what type of memory is the one that can be written, or what kind of information are already stored in there ?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7677794]-[-626465368]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Apart from this being really unsafe and somehow counterproductive, I was instead wondering who/what is taking charge of checking the boundaries of the allowed memory location. And also if there's some mechanism that safeguard the already allocated memory to be overwritten. Related to this latest question, what possible damage can one does by overwriting what he shouldn't ? Well, this could be best reformed as: what type of memory is the one that can be written, or what kind of information are already stored in there ?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "reform":1,
                  "alloc":1,
                  "relat":1,
                  "store":1,
                  "boundari":1,
                  "check":1,
                  "inform":1,
                  "take":1,
                  "allow":1,
                  "damag":1,
                  "written":1,
                  "wonder":1,
                  "mechan":1,
                  "charg":1,
                  "counterproduct":1,
                  "unsaf":1,
                  "overwritten":1,
                  "latest":1,
                  "kind":1,
                  "type":1,
                  "shouldn":1,
                  "overwrit":1,
                  "locat":1,
                  "safeguard":1,
                  "memori":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7677794]-[-1946290828]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7677864,
      "questionId":7677794,
      "comments":[
        
      ],
      "creationDate":"2011-10-06",
      "lastActivityDate":"2011-10-07",
      "lastEditDate":"2011-10-07",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":369310,
        "displayName":"Janick Bernet",
        "reputation":7576
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The underlying operating system will ensure that you do not write outside of the memory allocated to your application (which it can do easily, due to <a href=\"http://en.wikipedia.org/wiki/Virtual_memory\"rel=\"nofollow\">Virtual Memory</a>). If you do, you will get a segmentation fault or similar error In addition to that, the JVM might do its own bound checking. You'll definitely not be allowed to write in any sensible (i.e. other applications) memory, and I doubt the JVM will allow you to overwrite internal structures, but I might be wrong there. So to summarize the answer to your question: The possible damage to overwriting where you shouldn't is in the best case your application malfunctioning and in the worst case the JVM crashing.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677864]-[1973179372]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The underlying operating system will ensure that you do not write outside of the memory allocated to your application (which it can do easily, due to <a href=\"http://en.wikipedia.org/wiki/Virtual_memory\"rel=\"nofollow\">Virtual Memory</a>). If you do, you will get a segmentation fault or similar error In addition to that, the JVM might do its own bound checking. You'll definitely not be allowed to write in any sensible (i.e. other applications) memory, and I doubt the JVM will allow you to overwrite internal structures, but I might be wrong there. So to summarize the answer to your question: The possible damage to overwriting where you shouldn't is in the best case your application malfunctioning and in the worst case the JVM crashing.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":3,
                    "question":1,
                    "due":1,
                    "alloc":1,
                    "system":1,
                    "worst":1,
                    "wrong":1,
                    "addit":1,
                    "similar":1,
                    "crash":1,
                    "summar":1,
                    "rel":1,
                    "segment":1,
                    "virtual":2,
                    "structur":1,
                    "easili":1,
                    "oper":1,
                    "malfunct":1,
                    "bound":1,
                    "wikipedia":1,
                    "nofollow":1,
                    "check":1,
                    "error":1,
                    "allow":1,
                    "damag":1,
                    "doubt":1,
                    "applic":3,
                    "answer":1,
                    "under":1,
                    "wiki":1,
                    "fault":1,
                    "org":1,
                    "href":1,
                    "shouldn":1,
                    "http":1,
                    "intern":1,
                    "overwrit":2,
                    "write":2,
                    "ensur":1,
                    "memori":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In regards to safeguards, not using Unsafe would be a pretty good one... Other than that, you can of course write your own memory allocator inside the memory allocated by Unsafe and flag some areas so your application code does not write into areas it shouldn't.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677864]-[1659313931]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In regards to safeguards, not using Unsafe would be a pretty good one... Other than that, you can of course write your own memory allocator inside the memory allocated by Unsafe and flag some areas so your application code does not write into areas it shouldn't.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "area":2,
                    "alloc":2,
                    "good":1,
                    "pretti":1,
                    "code":1,
                    "insid":1,
                    "applic":1,
                    "flag":1,
                    "unsaf":2,
                    "shouldn":1,
                    "write":2,
                    "safeguard":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So the answer to your last question would be that if the JVM allows you to access memory outside of the allocated unsafe regions, then the information and type of memory you can access is any of your objects as well as any internal JVM structure. Obviously changing those would wreak havoc, so it's likely that attempting to do so would result in a crash.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677864]-[-316823287]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So the answer to your last question would be that if the JVM allows you to access memory outside of the allocated unsafe regions, then the information and type of memory you can access is any of your objects as well as any internal JVM structure. Obviously changing those would wreak havoc, so it's likely that attempting to do so would result in a crash.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "jvm":2,
                    "question":1,
                    "alloc":1,
                    "crash":1,
                    "result":1,
                    "wreak":1,
                    "structur":1,
                    "object":1,
                    "inform":1,
                    "havoc":1,
                    "region":1,
                    "answer":1,
                    "unsaf":1,
                    "attempt":1,
                    "type":1,
                    "intern":1,
                    "access":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7677901,
      "questionId":7677794,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":9332395,
          "postId":7677901,
          "creationDate":"2011-10-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":253924,
            "displayName":"Leonardo",
            "reputation":3527
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So, I can write to any area and crash an entire OS ?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7677901-cu9332395]-[241449267]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So, I can write to any area and crash an entire OS ?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "crash":1,
                        "write":1,
                        "area":1,
                        "entir":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9332587,
          "postId":7677901,
          "creationDate":"2011-10-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Leonardo: No, as per my answer you can corrupt **your process's memory**. A half-decent OS will prevent you from affecting other processes."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7677901-cu9332587]-[802008194]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Leonardo: No, as per my answer you can corrupt **your process's memory**. A half-decent OS will prevent you from affecting other processes."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Leonardo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "process":2,
                        "prevent":1,
                        "leonardo":1,
                        "affect":1,
                        "half":1,
                        "decent":1,
                        "answer":1,
                        "corrupt":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-10-06",
      "lastActivityDate":"2011-10-06",
      "lastEditDate":"2011-10-06",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":367273,
        "displayName":"NPE",
        "reputation":198024
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>By using the <code>Unsafe</code> class, <strong>you</strong> are taking charge of checking the boundaries of the allowed memory locations.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677901]-[-1761245099]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>By using the <code>Unsafe</code> class, <strong>you</strong> are taking charge of checking the boundaries of the allowed memory locations.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "code":2,
                    "boundari":1,
                    "check":1,
                    "take":1,
                    "allow":1,
                    "charg":1,
                    "unsaf":1,
                    "locat":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You shouldn't assume that there'll be some mechanism that will prevent you from corrupting parts of your process's memory that you're not supposed to touch.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677901]-[460603179]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You shouldn't assume that there'll be some mechanism that will prevent you from corrupting parts of your process's memory that you're not supposed to touch.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assum":1,
                    "touch":1,
                    "process":1,
                    "prevent":1,
                    "mechan":1,
                    "part":1,
                    "suppos":1,
                    "shouldn":1,
                    "corrupt":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <a href=\"http://www.docjar.com/html/api/sun/misc/Unsafe.java.html\"rel=\"nofollow\">comment</a> that accompanies <code>Unsafe.getUnsafe()</code> is pretty clear:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677901]-[-1249013189]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <a href=\"http://www.docjar.com/html/api/sun/misc/Unsafe.java.html\"rel=\"nofollow\">comment</a> that accompanies <code>Unsafe.getUnsafe()</code> is pretty clear:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getUnsafe",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "docjar":1,
                    "clear":1,
                    "sun":1,
                    "rel":1,
                    "accompani":1,
                    "pretti":1,
                    "code":2,
                    "nofollow":1,
                    "comment":1,
                    "misc":1,
                    "api":1,
                    "unsaf":3,
                    "html":2,
                    "href":1,
                    "http":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>[the <code>Unsafe</code> instance] can be used to read and write data at arbitrary memory addresses.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7677901]-[1645341192]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>[the <code>Unsafe</code> instance] can be used to read and write data at arbitrary memory addresses.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "arbitrari":1,
                    "data":1,
                    "blockquot":2,
                    "code":2,
                    "address":1,
                    "unsaf":1,
                    "write":1,
                    "instanc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}