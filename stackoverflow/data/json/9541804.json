{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9541804,
    "title":"Brainstorm help needed: Java's Object References",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":12090892,
        "postId":9541804,
        "creationDate":"2012-03-02",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Why can't you reorganize your code so you don't have to do this evil, smelly hack? What are you actually trying to do?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12090892]-[1364577883]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Why can't you reorganize your code so you don't have to do this evil, smelly hack? What are you actually trying to do?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "smelli":1,
                      "code":1,
                      "hack":1,
                      "reorgan":1,
                      "evil":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12090913,
        "postId":9541804,
        "creationDate":"2012-03-02",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1161714,
          "displayName":"user1161714",
          "reputation":9
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Hehe. That's why it's a challenge. Code with bad style and unsafe solutions are welcome. If you must know, it's a programming challenge that I could algorithmically solve, but would be so much more fun to just bypass."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12090913]-[-275385002]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Hehe. That's why it's a challenge. Code with bad style and unsafe solutions are welcome. If you must know, it's a programming challenge that I could algorithmically solve, but would be so much more fun to just bypass."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "program":1,
                      "style":1,
                      "bad":1,
                      "code":1,
                      "challeng":2,
                      "algorithm":1,
                      "fun":1,
                      "bypass":1,
                      "hehe":1,
                      "unsaf":1,
                      "solut":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091325,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":699224,
          "displayName":"DNA",
          "reputation":19349
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"See also [Uses of sun.misc.Unsafe](http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091325]-[-2482397]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"See also [Uses of sun.misc.Unsafe](http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "sun":2,
                      "stackoverflow":1,
                      "interest":1,
                      "misc":2,
                      "unsaf":2,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091346,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1161714,
          "displayName":"user1161714",
          "reputation":9
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yes. That was the first place I looked. Are you seeing something I'm not? Hint please?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091346]-[1896458187]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yes. That was the first place I looked. Are you seeing something I'm not? Hint please?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "look":1,
                      "hint":1,
                      "place":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091635,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":707608,
          "displayName":"ya_pulser",
          "reputation":790
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"&quot;I create in another class ...&quot; ... You create objects within a method invocation. As far as I remember - local scope objects are allocated in heap and pointers to them dropped to the stack frame of the method - I am doubt you could spot them from outside without copying of the references to some buffer from inside of the method."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091635]-[-200625136]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"&quot;I create in another class ...&quot; ... You create objects within a method invocation. As far as I remember - local scope objects are allocated in heap and pointers to them dropped to the stack frame of the method - I am doubt you could spot them from outside without copying of the references to some buffer from inside of the method."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":3,
                      "alloc":1,
                      "pointer":1,
                      "invoc":1,
                      "scope":1,
                      "local":1,
                      "buffer":1,
                      "frame":1,
                      "object":2,
                      "drop":1,
                      "rememb":1,
                      "insid":1,
                      "doubt":1,
                      "refer":1,
                      "stack":1,
                      "spot":1,
                      "quot":2,
                      "heap":1,
                      "creat":2,
                      "copi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091688,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1161714,
          "displayName":"user1161714",
          "reputation":9
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"So I should actually look for it in the stack?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091688]-[-402954031]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"So I should actually look for it in the stack?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "stack":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091703,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":707608,
          "displayName":"ya_pulser",
          "reputation":790
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Could you reverse engineer some memory profilers (Eclipse?)? They track somehow the allocations of objects - somewhere in low-level internals of the JNI part of the Object class ... or might be JDK sources could help you."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091703]-[-583845416]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Could you reverse engineer some memory profilers (Eclipse?)? They track somehow the allocations of objects - somewhere in low-level internals of the JNI part of the Object class ... or might be JDK sources could help you."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "profil":1,
                      "alloc":1,
                      "revers":1,
                      "track":1,
                      "object":2,
                      "jni":1,
                      "eclips":1,
                      "low":1,
                      "engin":1,
                      "part":1,
                      "sourc":1,
                      "intern":1,
                      "jdk":1,
                      "level":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091746,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":707608,
          "displayName":"ya_pulser",
          "reputation":790
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Try to read out results of Google for &quot;java object allocation on stack&quot; starting from http://www.ibm.com/developerworks/java/library/j-jtp09275/index.html ... ps: wonderful question leading to &quot;what you want to achieve???&quot; :)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091746]-[940886581]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Try to read out results of Google for &quot;java object allocation on stack&quot; starting from http://www.ibm.com/developerworks/java/library/j-jtp09275/index.html ... ps: wonderful question leading to &quot;what you want to achieve???&quot; :)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "developerwork":1,
                      "question":1,
                      "lead":1,
                      "alloc":1,
                      "googl":1,
                      "result":1,
                      "librari":1,
                      "object":1,
                      "achiev":1,
                      "jtp":1,
                      "wonder":1,
                      "stack":1,
                      "quot":4,
                      "ibm":1,
                      "html":1,
                      "start":1,
                      "http":1,
                      "index":1,
                      "www":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12091820,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1161714,
          "displayName":"user1161714",
          "reputation":9
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yea. Eclipse tracks objects with the Memory Manage thingy it has... It has to be do-able..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12091820]-[-1285008294]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yea. Eclipse tracks objects with the Memory Manage thingy it has... It has to be do-able..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "track":1,
                      "object":1,
                      "eclips":1,
                      "yea":1,
                      "manag":1,
                      "thingi":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12092200,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":18157,
          "displayName":"Jim Garrison",
          "reputation":43106
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If any of this ever ends up in production code anywhere, those who come behind you will curse your name in perpetuity, and petition Satan to create a special circle of Hell for you :-)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12092200]-[-2117563694]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If any of this ever ends up in production code anywhere, those who come behind you will curse your name in perpetuity, and petition Satan to create a special circle of Hell for you :-)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "circl":1,
                      "hell":1,
                      "curs":1,
                      "code":1,
                      "end":1,
                      "petit":1,
                      "special":1,
                      "perpetu":1,
                      "creat":1,
                      "satan":1,
                      "product":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12092290,
        "postId":9541804,
        "creationDate":"2012-03-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1161714,
          "displayName":"user1161714",
          "reputation":9
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yeah. It's part of my scheme to ruin the concept of scope and encapsulation by allowing direct access to whatever you want. Don't worry, the final product will come with an &quot;as is&quot; clause in the warranty."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9541804-cu12092290]-[-875306941]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yeah. It's part of my scheme to ruin the concept of scope and encapsulation by allowing direct access to whatever you want. Don't worry, the final product will come with an &quot;as is&quot; clause in the warranty."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "warranti":1,
                      "claus":1,
                      "scope":1,
                      "ruin":1,
                      "direct":1,
                      "yeah":1,
                      "allow":1,
                      "scheme":1,
                      "concept":1,
                      "quot":2,
                      "part":1,
                      "worri":1,
                      "encapsul":1,
                      "product":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "object",
      "reference",
      "unsafe"
    ],
    "creationDate":"2012-03-02",
    "lastActivityDate":"2012-03-02",
    "score":1,
    "viewCount":220,
    "owner":{
      "type":"StackOverflowUser",
      "id":1161714,
      "displayName":"user1161714",
      "reputation":9
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Say I have a bunch of objects that I created in another class. I don't have a reference of them or an address.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[-321309909]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Say I have a bunch of objects that I created in another class. I don't have a reference of them or an address.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bunch":1,
                  "object":1,
                  "refer":1,
                  "address":1,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Alright, before you assume, I have quite a bit of experience in Java. This is a problem I've been working for a few days on. I need some help brainstorming a solution.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[-1017226644]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Alright, before you assume, I have quite a bit of experience in Java. This is a problem I've been working for a few days on. I need some help brainstorming a solution.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "assum":1,
                  "bit":1,
                  "problem":1,
                  "experi":1,
                  "work":1,
                  "alright":1,
                  "day":1,
                  "solut":1,
                  "brainstorm":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is there a way to get an object without having its reference? Conventional wisdom says no, and that's probably the answer I'd give for beginners in Java. However, I'm certain there's a way to do this because I've seen it in action before. Very hack-y and low-level.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[65033980]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is there a way to get an object without having its reference? Conventional wisdom says no, and that's probably the answer I'd give for beginners in Java. However, I'm certain there's a way to do this because I've seen it in action before. Very hack-y and low-level.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "wisdom":1,
                  "beginn":1,
                  "object":1,
                  "low":1,
                  "refer":1,
                  "give":1,
                  "answer":1,
                  "hack":1,
                  "action":1,
                  "convent":1,
                  "level":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Earlier today I was searching for direct memory access in Java. Here's what I have regarding direct memory management:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[232944185]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Earlier today I was searching for direct memory access in Java. Here's what I have regarding direct memory management:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "earlier":1,
                  "direct":2,
                  "manag":1,
                  "today":1,
                  "access":1,
                  "search":1,
                  "memori":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"long newSize = Long.parseLong(System.getProperty(&quot;sun.arch.data.model&quot;)); // 32 bit or 64 bit? long diffMemory = getUnsafe().allocateMemory(newSize); getUnsafe().copyMemory(ch, 0, null, diffMemory, newSize); // Copy old memory from old location Pointers p = new Pointers(); long offset = 0; try { offset = getUnsafe().objectFieldOffset(Pointers.class.getDeclaredField(&quot;pointer&quot;)); } catch (Exception ex) { ex.printStackTrace(); } getUnsafe().putLong(p, offset, diffMemory); // put memory into a new Object that happens to be there System.out.println(((Point)p.pointer)); // ch.toString will equal this. public class Pointers { Object pointer; } public Unsafe getUnsafe() { // This is the sun.misc.Unsafe class. Unsafe unsafe = null; try { Field f = sun.misc.Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); f.setAccessible(true); unsafe = (Unsafe) f.get(null); } catch (Exception ex) { ex.printStackTrace(); } return unsafe; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[9541804]-[1737006816]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"long "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"newSize",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Long",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"parseLong",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"System",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getProperty",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"sun.arch.data.model\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// 32 bit or 64 bit? long diffMemory = getUnsafe().allocateMemory(newSize); getUnsafe().copyMemory(ch, 0, null, diffMemory, newSize); // Copy old memory from old location Pointers p = new Pointers(); long offset = 0; try { offset = getUnsafe().objectFieldOffset(Pointers.class.getDeclaredField(\"pointer\")); } catch (Exception ex) { ex.printStackTrace(); } getUnsafe().putLong(p, offset, diffMemory); // put memory into a new Object that happens to be there System.out.println(((Point)p.pointer)); // ch.toString will equal this. public class Pointers { Object pointer; } public Unsafe getUnsafe() { // This is the sun.misc.Unsafe class. Unsafe unsafe = null; try { Field f = sun.misc.Unsafe.class.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); unsafe = (Unsafe) f.get(null); } catch (Exception ex) { ex.printStackTrace(); } return unsafe; } \n"
                      }
                    ]
                  },
                  "labels":[
                    
                  ]
                }
              ]
            },
            "rawText":"long newSize = Long.parseLong(System.getProperty(\"sun.arch.data.model\")); // 32 bit or 64 bit? long diffMemory = getUnsafe().allocateMemory(newSize); getUnsafe().copyMemory(ch, 0, null, diffMemory, newSize); // Copy old memory from old location Pointers p = new Pointers(); long offset = 0; try { offset = getUnsafe().objectFieldOffset(Pointers.class.getDeclaredField(\"pointer\")); } catch (Exception ex) { ex.printStackTrace(); } getUnsafe().putLong(p, offset, diffMemory); // put memory into a new Object that happens to be there System.out.println(((Point)p.pointer)); // ch.toString will equal this. public class Pointers { Object pointer; } public Unsafe getUnsafe() { // This is the sun.misc.Unsafe class. Unsafe unsafe = null; try { Field f = sun.misc.Unsafe.class.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); unsafe = (Unsafe) f.get(null); } catch (Exception ex) { ex.printStackTrace(); } return unsafe; } \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "properti":1,
                  "point":1,
                  "bit":2,
                  "trace":2,
                  "alloc":1,
                  "size":3,
                  "system":2,
                  "pointer":7,
                  "field":4,
                  "model":1,
                  "print":2,
                  "data":1,
                  "set":1,
                  "sun":3,
                  "println":1,
                  "declar":2,
                  "object":3,
                  "pars":1,
                  "offset":4,
                  "equal":1,
                  "diff":3,
                  "stack":2,
                  "arch":1,
                  "misc":2,
                  "true":1,
                  "put":2,
                  "unsaf":14,
                  "copi":2,
                  "locat":1,
                  "access":1,
                  "memori":7
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Long",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"parseLong",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getProperty",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"sun.arch.data.model\""
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getProperty",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"sun.arch.data.model\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What this does is copy data from old memory into a new memory location. To use it, I would do something like so:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[-62535597]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What this does is copy data from old memory into a new memory location. To use it, I would do something like so:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "locat":1,
                  "data":1,
                  "memori":2,
                  "copi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Point ch = new Point(3,4); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[9541804]-[-52034055]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ch",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Point",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"3"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"4"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Point",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"Point ch = new Point(3,4); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "point":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Point",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"ch",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Point",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"3"
                                },
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"4"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Point",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What this does is I create a Point object, get its address, copy it into a Pointers object for safekeeping, where I can then access its values.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[-2055894395]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What this does is I create a Point object, get its address, copy it into a Pointers object for safekeeping, where I can then access its values.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "point":1,
                  "pointer":1,
                  "object":2,
                  "valu":1,
                  "address":1,
                  "safekeep":1,
                  "creat":1,
                  "copi":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Now, I imagine that getting an object without a reference would be similar. Maybe something to do with monitoring the memory to see what's accessing it and then directly getting that data and see if it makes sense? Searching through the heap/stack?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9541804]-[-1535388750]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Now, I imagine that getting an object without a reference would be similar. Maybe something to do with monitoring the memory to see what's accessing it and then directly getting that data and see if it makes sense? Searching through the heap/stack?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sens":1,
                  "monitor":1,
                  "similar":1,
                  "data":1,
                  "object":1,
                  "direct":1,
                  "refer":1,
                  "stack":1,
                  "make":1,
                  "imagin":1,
                  "heap":1,
                  "access":1,
                  "search":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}