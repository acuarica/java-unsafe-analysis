{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9088600,
    "title":"Is there a library that can give me all instances of a class which occur in another class?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":11413068,
        "postId":9088600,
        "creationDate":"2012-01-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"For reference, &quot;quickly&quot; and &quot;with reflection&quot; are...conflicting objectives, unless you're referring to &quot;quickly&quot; in the sense of &quot;I will not have to write much code.&quot;"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9088600-cu11413068]-[1654597081]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"For reference, &quot;quickly&quot; and &quot;with reflection&quot; are...conflicting objectives, unless you're referring to &quot;quickly&quot; in the sense of &quot;I will not have to write much code.&quot;"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "conflict":1,
                      "object":1,
                      "code":1,
                      "refer":2,
                      "quot":8,
                      "quick":2,
                      "reflect":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11413145,
        "postId":9088600,
        "creationDate":"2012-01-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":228371,
          "displayName":"Freiheit",
          "reputation":2878
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@LouisWasserman - Fair point. I mean the latter. I've made the decision to use reflection which is a performance penalty. If a general purpose library exists, I can at least save some maintenance and testing time by using that instead of writing and testing my own code."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9088600-cu11413145]-[-471456825]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@LouisWasserman - Fair point. I mean the latter. I've made the decision to use reflection which is a performance penalty. If a general purpose library exists, I can at least save some maintenance and testing time by using that instead of writing and testing my own code."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"LouisWasserman",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "mainten":1,
                      "test":2,
                      "fair":1,
                      "point":1,
                      "exist":1,
                      "loui":1,
                      "librari":1,
                      "penalti":1,
                      "decis":1,
                      "code":1,
                      "wasserman":1,
                      "general":1,
                      "perform":1,
                      "time":1,
                      "save":1,
                      "made":1,
                      "reflect":1,
                      "purpos":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "reflection"
    ],
    "creationDate":"2012-01-31",
    "lastActivityDate":"2012-02-01",
    "score":2,
    "viewCount":54,
    "owner":{
      "type":"StackOverflowUser",
      "id":228371,
      "displayName":"Freiheit",
      "reputation":2878
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a class which has several fields which are a subclass of another class. I want to quickly find all instances of that subclass within the top level class.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9088600]-[974557854]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a class which has several fields which are a subclass of another class. I want to quickly find all instances of that subclass within the top level class.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"which",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "subclass":2,
                  "field":1,
                  "quick":1,
                  "top":1,
                  "instanc":1,
                  "level":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For example </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9088600]-[-1121048936]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For example </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public class TopClass { private ClassIWant1 myVar1; private ClassIWant2 myVar2; private OtherJunk myVar3; private Nested myVar4; } public class Nested { private ClassIWant3 myVar11; } public class SuperClass { } public ClassIWant1 extends SuperClass {} public ClassIWant2 extends SuperClass {} public ClassIWant3 extends ClassIWant1 {} "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[9088600]-[-353770056]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"TopClass",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myVar1",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"ClassIWant1",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myVar2",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"ClassIWant2",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myVar3",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"OtherJunk",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myVar4",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"Nested",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Nested",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myVar11",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"ClassIWant3",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"SuperClass",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"public "
                },
                {
                  "type":"ClassRelationshipNode",
                  "typeName":{
                    "type":"IdentifierNode",
                    "name":"ClassIWant1",
                    "comments":[
                      
                    ]
                  },
                  "superTypeName":{
                    "type":"IdentifierNode",
                    "name":"SuperClass",
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"JsonObjectNode",
                  "members":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"public "
                },
                {
                  "type":"ClassRelationshipNode",
                  "typeName":{
                    "type":"IdentifierNode",
                    "name":"ClassIWant2",
                    "comments":[
                      
                    ]
                  },
                  "superTypeName":{
                    "type":"IdentifierNode",
                    "name":"SuperClass",
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"JsonObjectNode",
                  "members":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"public "
                },
                {
                  "type":"ClassRelationshipNode",
                  "typeName":{
                    "type":"IdentifierNode",
                    "name":"ClassIWant3",
                    "comments":[
                      
                    ]
                  },
                  "superTypeName":{
                    "type":"IdentifierNode",
                    "name":"ClassIWant1",
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"JsonObjectNode",
                  "members":[
                    
                  ]
                }
              ]
            },
            "rawText":"public class TopClass { private ClassIWant1 myVar1; private ClassIWant2 myVar2; private OtherJunk myVar3; private Nested myVar4; } public class Nested { private ClassIWant3 myVar11; } public class SuperClass { } public ClassIWant1extends SuperClass {} public ClassIWant2extends SuperClass {} public ClassIWant3extends ClassIWant1 {} ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "nest":2,
                  "iwant":7,
                  "junk":1,
                  "top":1,
                  "var":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ClassIWant3",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ClassIWant2",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ClassIWant1",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"OtherJunk",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Nested",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myVar1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ClassIWant1",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myVar2",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ClassIWant2",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myVar11",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ClassIWant3",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myVar3",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"OtherJunk",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myVar4",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Nested",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If I were to run that example through with an instance of <code>TopClass</code> I would expect to get a List containing the values for myVar1, myVar2, and myVar11.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9088600]-[-1269958001]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If I were to run that example through with an instance of <code>TopClass</code> I would expect to get a List containing the values for myVar1, myVar2, and myVar11.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"TopClass",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"myVar1",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"myVar2",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"myVar11",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "run":1,
                  "code":2,
                  "expect":1,
                  "valu":1,
                  "top":1,
                  "var":3,
                  "list":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"TopClass",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a general idea of how to use reflection to do this manually, but I'm hoping that I don't have to reinvent the wheel. Is there a library that can do this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9088600]-[1057090757]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a general idea of how to use reflection to do this manually, but I'm hoping that I don't have to reinvent the wheel. Is there a library that can do this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "reinvent":1,
                  "idea":1,
                  "librari":1,
                  "wheel":1,
                  "general":1,
                  "hope":1,
                  "manual":1,
                  "reflect":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am familiar with <a href=\"http://code.google.com/p/reflectutils/\"rel=\"nofollow\">ReflectUtils</a>, but I am not sure if that can do this or not.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9088600]-[1571759651]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am familiar with <a href=\"http://code.google.com/p/reflectutils/\"rel=\"nofollow\">ReflectUtils</a>, but I am not sure if that can do this or not.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ReflectUtils",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "googl":1,
                  "util":1,
                  "familiar":1,
                  "reflectutil":1,
                  "rel":1,
                  "code":1,
                  "nofollow":1,
                  "href":1,
                  "http":1,
                  "reflect":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ReflectUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":9088644,
      "questionId":9088600,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11413096,
          "postId":9088644,
          "creationDate":"2012-01-31",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":228371,
            "displayName":"Freiheit",
            "reputation":2878
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Is that recursive? I think that gives me the name of the class but not the value of a field for an instance."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9088644-cu11413096]-[516014625]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Is that recursive? I think that gives me the name of the class but not the value of a field for an instance."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"but",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "instanc":1,
                        "field":1,
                        "recurs":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11413125,
          "postId":9088644,
          "creationDate":"2012-01-31",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1174549,
            "displayName":"Dawood",
            "reputation":1788
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't believe it is recursive but I don't imagine it would be difficult to write a method that calls this one recursively."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9088644-cu11413125]-[-91593550]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't believe it is recursive but I don't imagine it would be difficult to write a method that calls this one recursively."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "difficult":1,
                        "recurs":2,
                        "imagin":1,
                        "call":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11413929,
          "postId":9088644,
          "creationDate":"2012-02-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":41655,
            "displayName":"millimoose",
            "reputation":23793
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"-1: 1) It's preferrable for answers to questions to actually exist on the site and not in its users' imaginations. 2) The method doesn't seem to be related to what the OP asked for. It will return the inner classes declared in the scope of a class, not values of its fields."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9088644-cu11413929]-[-251076525]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"-1: 1) It's preferrable for answers to questions to actually exist on the site and not in its users' imaginations. 2) The method doesn't seem to be related to what the OP asked for. It will return the inner classes declared in the scope of a class, not values of its fields."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "method":1,
                        "field":1,
                        "exist":1,
                        "relat":1,
                        "scope":1,
                        "preferr":1,
                        "site":1,
                        "declar":1,
                        "valu":1,
                        "answer":1,
                        "class":1,
                        "imagin":1,
                        "ask":1,
                        "user":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-31",
      "lastActivityDate":"2012-01-31",
      "score":-1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1174549,
        "displayName":"Dawood",
        "reputation":1788
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Is <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getDeclaredClasses%28%29\"rel=\"nofollow\">this method</a> what you're looking for?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9088644]-[245039205]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Is <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getDeclaredClasses%28%29\"rel=\"nofollow\">this method</a> what you're looking for?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "rel":1,
                    "oracl":1,
                    "doc":2,
                    "declar":1,
                    "nofollow":1,
                    "javas":1,
                    "class":1,
                    "api":1,
                    "lang":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9089033,
      "questionId":9088600,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11428007,
          "postId":9089033,
          "creationDate":"2012-02-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":228371,
            "displayName":"Freiheit",
            "reputation":2878
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think this works, but I'm having to massage it a little to play nicely with Lists which hold instances of SuperClass."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9089033-cu11428007]-[-1394260236]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think this works, but I'm having to massage it a little to play nicely with Lists which hold instances of SuperClass."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"SuperClass",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "play":1,
                        "massag":1,
                        "nice":1,
                        "work":1,
                        "hold":1,
                        "list":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"SuperClass",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11428937,
          "postId":9089033,
          "creationDate":"2012-02-01",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":228371,
            "displayName":"Freiheit",
            "reputation":2878
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This works well. Thank you! I had to add an else case to determine if the field type was a ParameterizedType then get the actual types and then if one of those types was assignable from needle add all the elements from fieldValue to result."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9089033-cu11428937]-[1849435756]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This works well. Thank you! I had to add an else case to determine if the field type was a ParameterizedType then get the actual types and then if one of those types was assignable from needle add all the elements from fieldValue to result."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ParameterizedType",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"fieldValue",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "parameter":1,
                        "determin":1,
                        "field":2,
                        "result":1,
                        "assign":1,
                        "work":1,
                        "element":1,
                        "needl":1,
                        "type":4,
                        "actual":1,
                        "add":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ParameterizedType",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-02-01",
      "lastActivityDate":"2012-02-01",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":41655,
        "displayName":"millimoose",
        "reputation":23793
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If I understand your request correctly, you're looking for something like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9089033]-[1989869172]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If I understand your request correctly, you're looking for something like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "understand":1,
                    "correct":1,
                    "request":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public class Test { public static void main(String[] args) { TopClass top = \u2026; // initialise as appropriate System.out.println(findFields(top, SuperClass.class)); } private static &lt;T&gt; List&lt;T&gt; findFields(Object haystack, Class&lt;T&gt; needle) { return findFields0(haystack, needle, new HashSet&lt;Object&gt;(), new ArrayList&lt;T&gt;()); } private static &lt;T&gt; List&lt;T&gt; findFields0(Object haystack, Class&lt;T&gt; needle, Set&lt;Object&gt; visited, List&lt;T&gt; result) { if (visited.contains(haystack)) return result; // we already searched this object visited.add(haystack); for (Field field : haystack.getClass().getFields()) { field.setAccessible(true); Object fieldValue = null; try { fieldValue = field.get(haystack); } catch (IllegalAccessException e) { // shouldn't happen throw new RuntimeException(e); } if (needle.isAssignableFrom(field.getType())) { result.add(needle.cast(fieldValue)); } // recurse findFields0(fieldValue, needle, visited, result); } return result; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[9089033]-[1439441395]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Test",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"TextFragmentNode",
                              "text":"public static void main(String[] args) { TopClass top = \u2026"
                            },
                            {
                              "type":"EmptyDeclarationNode",
                              "comments":[
                                {
                                  "text":"// initialise as appropriate System.out.println(findFields(top, SuperClass.class)); } private static <T> List<T> findFields(Object haystack, Class<T> needle) { return findFields0(haystack, needle, new HashSet<Object>(), new ArrayList<T>()); } private static <T> List<T> findFields0(Object haystack, Class<T> needle, Set<Object> visited, List<T> result) { if (visited.contains(haystack)) return result; // we already searched this object visited.add(haystack); for (Field field : haystack.getClass().getFields()) { field.setAccessible(true); Object fieldValue = null; try { fieldValue = field.get(haystack); } catch (IllegalAccessException e) { // shouldn't happen throw new RuntimeException(e); } if (needle.isAssignableFrom(field.getType())) { result.add(needle.cast(fieldValue)); } // recurse findFields0(fieldValue, needle, visited, result); } return result; } } \n"
                                }
                              ],
                              "labels":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"public class Test { public static void main(String[] args) { TopClass top = \u2026; // initialise as appropriate System.out.println(findFields(top, SuperClass.class)); } private static <T> List<T> findFields(Object haystack, Class<T> needle) { return findFields0(haystack, needle, new HashSet<Object>(), new ArrayList<T>()); } private static <T> List<T> findFields0(Object haystack, Class<T> needle, Set<Object> visited, List<T> result) { if (visited.contains(haystack)) return result; // we already searched this object visited.add(haystack); for (Field field : haystack.getClass().getFields()) { field.setAccessible(true); Object fieldValue = null; try { fieldValue = field.get(haystack); } catch (IllegalAccessException e) { // shouldn't happen throw new RuntimeException(e); } if (needle.isAssignableFrom(field.getType())) { result.add(needle.cast(fieldValue)); } // recurse findFields0(fieldValue, needle, visited, result); } return result; } } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":5,
                    "test":1,
                    "runtim":1,
                    "system":1,
                    "field":15,
                    "happen":1,
                    "result":5,
                    "set":3,
                    "assign":1,
                    "haystack":7,
                    "main":1,
                    "println":1,
                    "object":6,
                    "array":1,
                    "needl":6,
                    "hash":1,
                    "recurs":1,
                    "cast":1,
                    "visit":4,
                    "illeg":1,
                    "true":1,
                    "type":1,
                    "initialis":1,
                    "shouldn":1,
                    "add":2,
                    "top":3,
                    "arg":1,
                    "list":4,
                    "access":2,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This works by using the static types of the fields as declared. That is, if you declare a field as <code>Object</code> but it holds an instance of <code>SuperClass</code> or one of its descendants, it won't be found. It will also return <code>null</code>s if the fields have them set as the value. I have no idea what this will do about primitive types.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9089033]-[1365535118]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This works by using the static types of the fields as declared. That is, if you declare a field as <code>Object</code> but it holds an instance of <code>SuperClass</code> or one of its descendants, it won't be found. It will also return <code>null</code>s if the fields have them set as the value. I have no idea what this will do about primitive types.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SuperClass",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":3,
                    "set":1,
                    "idea":1,
                    "work":1,
                    "declar":2,
                    "object":1,
                    "code":6,
                    "hold":1,
                    "found":1,
                    "descend":1,
                    "type":2,
                    "primit":1,
                    "won":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SuperClass",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Disclaimer:</strong> Code was tested briefly on an optimistic example, I hold no responsibility if it causes your computer to catch fire.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9089033]-[405902559]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Disclaimer:</strong> Code was tested briefly on an optimistic example, I hold no responsibility if it causes your computer to catch fire.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "fire":1,
                    "strong":2,
                    "code":1,
                    "disclaim":1,
                    "hold":1,
                    "comput":1,
                    "briefli":1,
                    "respons":1,
                    "optimist":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}