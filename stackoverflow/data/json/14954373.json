{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":14954373,
    "title":"UML drawing API for Java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":21016303,
        "postId":14954373,
        "creationDate":"2013-02-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1028408,
          "displayName":"user1028408",
          "reputation":235
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"OK I did it, I'm going to edit the question to put the answer in. Can you put you comment as an answer so I can accept it as the correct one? Thanks :)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14954373-cu21016303]-[1555591751]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"OK I did it, I'm going to edit the question to put the answer in. Can you put you comment as an answer so I can accept it as the correct one? Thanks :)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "accept":1,
                      "correct":1,
                      "edit":1,
                      "comment":1,
                      "put":2,
                      "answer":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21004565,
        "postId":14954373,
        "creationDate":"2013-02-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":223806,
          "displayName":"Paolo",
          "reputation":12417
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Have you seen PlantUML? http://plantuml.sourceforge.net/ It's open source so you might be able to pick some bits to suit."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14954373-cu21004565]-[-1320655674]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Have you seen PlantUML? http://plantuml.sourceforge.net/ It's open source so you might be able to pick some bits to suit."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sourceforg":1,
                      "plant":1,
                      "bit":1,
                      "suit":1,
                      "open":1,
                      "net":1,
                      "uml":1,
                      "pick":1,
                      "http":1,
                      "sourc":1,
                      "plantuml":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21014424,
        "postId":14954373,
        "creationDate":"2013-02-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1028408,
          "displayName":"user1028408",
          "reputation":235
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Coincidentally I'm looking into it right now. I think this is just what I need but it is also a bit vague on how I can use the APIs in my program (lack of documentation)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14954373-cu21014424]-[403355441]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Coincidentally I'm looking into it right now. I think this is just what I need but it is also a bit vague on how I can use the APIs in my program (lack of documentation)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "vagu":1,
                      "bit":1,
                      "document":1,
                      "coincident":1,
                      "lack":1,
                      "api":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21031367,
        "postId":14954373,
        "creationDate":"2013-02-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":223806,
          "displayName":"Paolo",
          "reputation":12417
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yep done, thanks!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14954373-cu21031367]-[-1727780634]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yep done, thanks!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "yep":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "drawing",
      "uml",
      "plantuml"
    ],
    "creationDate":"2013-02-19",
    "lastActivityDate":"2013-10-20",
    "lastEditDate":"2013-10-20",
    "score":2,
    "viewCount":1405,
    "owner":{
      "type":"StackOverflowUser",
      "id":1028408,
      "displayName":"user1028408",
      "reputation":235
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am looking for APIs that can draw UML Class diagrams and present them in a JPanel (or any other suitable UI entity) for a window application. It has to be embedded within the application, so I am not looking for some standalone tool that can generate UMLs based on java files or some plugin. I need actual jars that can be implemented for creating class diagrams so I can use them in a window application. I've looked into several but all of the sources that I am finding are either standalone programs or cannot be implemented within an application and need to take the user's focus away from the app. I am using NetBeans IDE, but I also have Eclipse installed.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14954373]-[910033347]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am looking for APIs that can draw UML Class diagrams and present them in a JPanel (or any other suitable UI entity) for a window application. It has to be embedded within the application, so I am not looking for some standalone tool that can generate UMLs based on java files or some plugin. I need actual jars that can be implemented for creating class diagrams so I can use them in a window application. I've looked into several but all of the sources that I am finding are either standalone programs or cannot be implemented within an application and need to take the user's focus away from the app. I am using NetBeans IDE, but I also have Eclipse installed.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"diagrams",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"NetBeans",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "plugin":1,
                  "standalon":2,
                  "program":1,
                  "find":1,
                  "window":2,
                  "diagram":2,
                  "tool":1,
                  "jpanel":1,
                  "present":1,
                  "look":1,
                  "ide":1,
                  "embed":1,
                  "net":1,
                  "base":1,
                  "eclips":1,
                  "draw":1,
                  "bean":1,
                  "focus":1,
                  "instal":1,
                  "uml":2,
                  "suitabl":1,
                  "applic":4,
                  "implement":2,
                  "generat":1,
                  "app":1,
                  "file":1,
                  "api":1,
                  "entiti":1,
                  "actual":1,
                  "creat":1,
                  "sourc":1,
                  "jar":1,
                  "user":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NetBeans",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>SOLVED:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14954373]-[1920918924]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>SOLVED:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "solv":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I used PlantUML API. I manually input a string in accordance with the PlantUML input language syntax and then used a simple and straightforward generateImage method to populate a byte array which I then converted into an image and saved it to my desktop. This fits what I wanted because it keeps the user focused on my application and mine alone. Alternatively, one can produce the buffered image on a window or something. The PlantUML API needs to be imported to the application package. This code creates an image in my desktop (don't forget to change the directory path) with a UML class image for the class, Person:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14954373]-[381268759]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I used PlantUML API. I manually input a string in accordance with the PlantUML input language syntax and then used a simple and straightforward generateImage method to populate a byte array which I then converted into an image and saved it to my desktop. This fits what I wanted because it keeps the user focused on my application and mine alone. Alternatively, one can produce the buffered image on a window or something. The PlantUML API needs to be imported to the application package. This code creates an image in my desktop (don't forget to change the directory path) with a UML class image for the class, Person:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"generateImage",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"image",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "desktop":2,
                  "chang":1,
                  "method":1,
                  "plant":3,
                  "window":1,
                  "languag":1,
                  "simpl":1,
                  "path":1,
                  "want":1,
                  "mine":1,
                  "produc":1,
                  "fit":1,
                  "buffer":1,
                  "altern":1,
                  "code":1,
                  "syntax":1,
                  "array":1,
                  "import":1,
                  "focus":1,
                  "uml":4,
                  "popul":1,
                  "applic":2,
                  "person":1,
                  "straightforward":1,
                  "forget":1,
                  "directori":1,
                  "generat":1,
                  "api":2,
                  "manual":1,
                  "save":1,
                  "creat":1,
                  "accord":1,
                  "user":1,
                  "input":2,
                  "convert":1,
                  "imag":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public class PaintUML { /** * @param args the command line arguments */ public static void main(String[] args) throws IOException, InterruptedException { // TODO code application logic here ByteArrayOutputStream bous = new ByteArrayOutputStream(); String source = &quot;@startuml\\n&quot;; source += &quot;class Person {\\n&quot;; source += &quot;String name\\n&quot;; source += &quot;int age\\n&quot;; source += &quot;int money\\n&quot;; source += &quot;String getName()\\n&quot;; source += &quot;void setName(String name)\\n&quot;; source += &quot;}\\n&quot;; source += &quot;@enduml\\n&quot;; SourceStringReader reader = new SourceStringReader(source); // Write the first image to &quot;png&quot; String desc = reader.generateImage(bous); // Return a null string if no generation byte [] data = bous.toByteArray(); InputStream in = new ByteArrayInputStream(data); BufferedImage convImg = ImageIO.read(in); ImageIO.write(convImg, &quot;png&quot;, new File(&quot;C:\\\\Users\\\\Aaron\\\\Desktop\\\\image.png&quot;)); System.out.print(desc); } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[14954373]-[-1897009385]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"PaintUML",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"void",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"main",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "parameters":{
                                "type":"FormalParameterDeclsNode",
                                "modifiers":[
                                  
                                ],
                                "parameterType":{
                                  "type":"ArrayTypeNode",
                                  "typeNode":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "depth":[
                                    {
                                      "type":"ArrayDimensionNode",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ]
                                },
                                "nextDeclarator":{
                                  "type":"AdditionalFormalParameterDeclNode",
                                  "variableDeclarator":{
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"args",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "thrownExceptions":{
                              "type":"ThrownExceptionsNode",
                              "qualifiedIdentifierList":{
                                "type":"QualifiedIdentifierListNode",
                                "qualifiedNames":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"IOException",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"InterruptedException",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                {
                                  "text":"// TODO code application logic here ByteArrayOutputStream bous = new ByteArrayOutputStream(); String source = \"@startuml\\n\"; source += \"class Person {\\n\"; source += \"String name\\n\"; source += \"int age\\n\"; source += \"int money\\n\"; source += \"String getName()\\n\"; source += \"void setName(String name)\\n\"; source += \"}\\n\"; source += \"@enduml\\n\"; SourceStringReader reader = new SourceStringReader(source); // Write the first image to \"png\" String desc = reader.generateImage(bous); // Return a null string if no generation byte [] data = bous.toByteArray(); InputStream in = new ByteArrayInputStream(data); BufferedImage convImg = ImageIO.read(in); ImageIO.write(convImg, \"png\", new File(\"C:\\\\Users\\\\Aaron\\\\Desktop\\\\image.png\")); System.out.print(desc); } } \n"
                                }
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          {
                            "text":"/** * @param args the command line arguments */"
                          }
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"public class PaintUML { /** * @param args the command line arguments */ public static void main(String[] args) throws IOException, InterruptedException { // TODO code application logic here ByteArrayOutputStream bous = new ByteArrayOutputStream(); String source = \"@startuml\\n\"; source += \"class Person {\\n\"; source += \"String name\\n\"; source += \"int age\\n\"; source += \"int money\\n\"; source += \"String getName()\\n\"; source += \"void setName(String name)\\n\"; source += \"}\\n\"; source += \"@enduml\\n\"; SourceStringReader reader = new SourceStringReader(source); // Write the first image to \"png\" String desc = reader.generateImage(bous); // Return a null string if no generation byte [] data = bous.toByteArray(); InputStream in = new ByteArrayInputStream(data); BufferedImage convImg = ImageIO.read(in); ImageIO.write(convImg, \"png\", new File(\"C:\\\\Users\\\\Aaron\\\\Desktop\\\\image.png\")); System.out.print(desc); } } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "desktop":1,
                  "read":1,
                  "paint":1,
                  "enduml":1,
                  "desc":2,
                  "png":3,
                  "system":1,
                  "reader":4,
                  "line":1,
                  "param":1,
                  "print":1,
                  "img":2,
                  "data":2,
                  "bous":3,
                  "set":1,
                  "startuml":1,
                  "aaron":1,
                  "buffer":1,
                  "main":1,
                  "command":1,
                  "age":1,
                  "logic":1,
                  "code":1,
                  "array":4,
                  "uml":1,
                  "stream":4,
                  "conv":2,
                  "applic":1,
                  "money":1,
                  "person":1,
                  "generat":2,
                  "file":1,
                  "todo":1,
                  "ioexcept":1,
                  "output":2,
                  "sourc":12,
                  "argument":1,
                  "user":1,
                  "input":2,
                  "interrupt":1,
                  "arg":2,
                  "write":2,
                  "imag":6
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"args",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":14955280,
      "questionId":14954373,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":20995850,
          "postId":14955280,
          "creationDate":"2013-02-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1466267,
            "displayName":"SpaceTrucker",
            "reputation":3494
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Having a diagram editor might be a rather complex task. So I recommend to build upon something preexisting. You are not forced to build an rcp application to use these components. You can also use them embedded in the background of your swing app or whatever. But you would be forced to use osgi."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[14955280-cu20995850]-[-153080395]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Having a diagram editor might be a rather complex task. So I recommend to build upon something preexisting. You are not forced to build an rcp application to use these components. You can also use them embedded in the background of your swing app or whatever. But you would be forced to use osgi."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "recommend":1,
                        "task":1,
                        "preexist":1,
                        "diagram":1,
                        "background":1,
                        "build":2,
                        "swing":1,
                        "embed":1,
                        "compon":1,
                        "rcp":1,
                        "editor":1,
                        "applic":1,
                        "app":1,
                        "forc":2,
                        "complex":1,
                        "osgi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":20996406,
          "postId":14955280,
          "creationDate":"2013-02-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1028408,
            "displayName":"user1028408",
            "reputation":235
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I want that whatever I end up using can be called with using Java code. I want the UML class diagram to be generated as the last step of a series of other procedures in a Java Program. The important thing is that the user would not have to manually do anything to get this result. Do you think it is possible to embed something like PaintUML with osgi?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[14955280-cu20996406]-[373193864]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I want that whatever I end up using can be called with using Java code. I want the UML class diagram to be generated as the last step of a series of other procedures in a Java Program. The important thing is that the user would not have to manually do anything to get this result. Do you think it is possible to embed something like PaintUML with osgi?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"diagram",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "paint":1,
                        "step":1,
                        "diagram":1,
                        "result":1,
                        "procedur":1,
                        "thing":1,
                        "code":1,
                        "import":1,
                        "seri":1,
                        "uml":2,
                        "generat":1,
                        "end":1,
                        "manual":1,
                        "call":1,
                        "user":1,
                        "emb":1,
                        "osgi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":20994315,
          "postId":14955280,
          "creationDate":"2013-02-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1028408,
            "displayName":"user1028408",
            "reputation":235
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm more interested in the drawing support than anything else. I've tried using SVGSalamander but the when I tried the example program it didn't work for me. I posted a separate question about it but nobody helped me yet: http://stackoverflow.com/questions/14936597/producing-an-svg-diagram-on-java I would much rather manage to use SVGSalamander as part of an application rather than have to rely on an IDE tool like Papyrus. The app has to be installable and usable without dependence on Eclipse/NetBeans or other separate applications."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[14955280-cu20994315]-[-797717839]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm more interested in the drawing support than anything else. I've tried using SVGSalamander but the when I tried the example program it didn't work for me. I posted a separate question about it but nobody helped me yet: http://stackoverflow.com/questions/14936597/producing-an-svg-diagram-on-java I would much rather manage to use SVGSalamander as part of an application rather than have to rely on an IDE tool like Papyrus. The app has to be installable and usable without dependence on Eclipse/NetBeans or other separate applications."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NetBeans",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "support":1,
                        "question":2,
                        "post":1,
                        "svg":1,
                        "depend":1,
                        "diagram":1,
                        "produc":1,
                        "tool":1,
                        "separ":2,
                        "ide":1,
                        "work":1,
                        "net":1,
                        "eclips":1,
                        "stackoverflow":1,
                        "help":1,
                        "draw":1,
                        "bean":1,
                        "interest":1,
                        "instal":1,
                        "usabl":1,
                        "applic":2,
                        "app":1,
                        "reli":1,
                        "part":1,
                        "papyrus":1,
                        "svgsalamand":2,
                        "manag":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"NetBeans",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-02-19",
      "lastActivityDate":"2013-02-19",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1466267,
        "displayName":"SpaceTrucker",
        "reputation":3494
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Have a look at the <a href=\"http://wiki.eclipse.org/MDT-UML2\"rel=\"nofollow\">Eclipse UML2 API</a> and <a href=\"http://eclipse.org/papyrus/\"rel=\"nofollow\">Eclipse Papyrus</a>. They should provide the functionality what your are searching for. For drawing support in JPanels, you might need to do some extra work.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14955280]-[-2057328694]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Have a look at the <a href=\"http://wiki.eclipse.org/MDT-UML2\"rel=\"nofollow\">Eclipse UML2 API</a> and <a href=\"http://eclipse.org/papyrus/\"rel=\"nofollow\">Eclipse Papyrus</a>. They should provide the functionality what your are searching for. For drawing support in JPanels, you might need to do some extra work.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "provid":1,
                    "jpanel":1,
                    "rel":2,
                    "work":1,
                    "eclips":4,
                    "draw":1,
                    "nofollow":2,
                    "uml":2,
                    "function":1,
                    "extra":1,
                    "wiki":1,
                    "api":1,
                    "papyrus":2,
                    "org":2,
                    "href":2,
                    "http":2,
                    "search":1,
                    "mdt":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Eclipse UML2 API provides a Java interface for UML2 meta model. Papyrus is a set of components allowing to build diagrams and graphical editors for UML models.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14955280]-[1627177039]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Eclipse UML2 API provides a Java interface for UML2 meta model. Papyrus is a set of components allowing to build diagrams and graphical editors for UML models.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "diagram":1,
                    "graphic":1,
                    "model":2,
                    "set":1,
                    "build":1,
                    "compon":1,
                    "eclips":1,
                    "editor":1,
                    "meta":1,
                    "uml":3,
                    "allow":1,
                    "api":1,
                    "papyrus":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":14977679,
      "questionId":14954373,
      "comments":[
        
      ],
      "creationDate":"2013-02-20",
      "lastActivityDate":"2013-02-20",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":223806,
        "displayName":"Paolo",
        "reputation":12417
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Have you seen PlantUML? </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14977679]-[-1798851647]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Have you seen PlantUML? </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "uml":1,
                    "plant":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://plantuml.sourceforge.net\"rel=\"nofollow\">http://plantuml.sourceforge.net</a> </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14977679]-[1983930714]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://plantuml.sourceforge.net\"rel=\"nofollow\">http://plantuml.sourceforge.net</a> </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sourceforg":2,
                    "rel":1,
                    "net":2,
                    "nofollow":1,
                    "href":1,
                    "http":2,
                    "plantuml":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's open source so you might be able to pick some bits to suit. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14977679]-[1404825812]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's open source so you might be able to pick some bits to suit. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bit":1,
                    "suit":1,
                    "open":1,
                    "pick":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}