{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19214648,
    "title":"Attempt to convert a C++ program to Java. Memcpy help needed",
    "comments":[
      
    ],
    "tags":[
      "java",
      "c++"
    ],
    "creationDate":"2013-10-06",
    "lastActivityDate":"2013-10-30",
    "score":-2,
    "viewCount":150,
    "owner":{
      "type":"StackOverflowUser",
      "id":2287691,
      "displayName":"Jalrashu",
      "reputation":3
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm converting a C++ program to Java, and have hit a hitch in that there is no memcpy in java.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[-559426110]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm converting a C++ program to Java, and have hit a hitch in that there is no memcpy in java.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "hit":1,
                  "memcpi":1,
                  "convert":1,
                  "hitch":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I've taken my best crack at it, after doing some research, but I'm really hesitant and unsure if this is doing as the C++ program should, as I found the information I found so far to be a little confusing. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[1766438673]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I've taken my best crack at it, after doing some research, but I'm really hesitant and unsure if this is doing as the C++ program should, as I found the information I found so far to be a little confusing. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "crack":1,
                  "research":1,
                  "found":2,
                  "inform":1,
                  "hesit":1,
                  "confus":1,
                  "unsur":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>(Java code still has memcpy in but commented out for refernce)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[-450759219]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>(Java code still has memcpy in but commented out for refernce)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "comment":1,
                  "refernc":1,
                  "code":1,
                  "memcpi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The notes for both <br /> Image = Input Image <br /> Output = Output Image <br /> N = Width of Image <br /> M = Height of image.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[-2077856954]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The notes for both <br /> Image = Input Image <br /> Output = Output Image <br /> N = Width of Image <br /> M = Height of image.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "height":1,
                  "note":1,
                  "output":2,
                  "width":1,
                  "input":1,
                  "imag":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In the C++ code, an element is an unsigned short int.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[-775827911]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In the C++ code, an element is an unsigned short int.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "unsign":1,
                  "code":1,
                  "element":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>C++ Code</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[185546421]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>C++ Code</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"void medianfilter(element* image, element* result, int N, int M) { // Check arguments if (!image || N &lt; 1 || M &lt; 1) return; // Allocate memory for signal extension element* extension = new element[(N + 2) * (M + 2)]; // Check memory allocation if (!extension) return; // Create image extension for (int i = 0; i &lt; M; ++i) { memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation _medianfilter(extension, result ? result : image, N + 2, M + 2); // Free memory delete[] extension; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19214648]-[372350914]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"void medianfilter(element* image, element* result, int N, int M) "
                },
                {
                  "type":"BlockDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// Check arguments if (!image || N < 1 || M < 1) return; // Allocate memory for signal extension element* extension = new element[(N + 2) * (M + 2)]; // Check memory allocation if (!extension) return; // Create image extension for (int i = 0; i < M; ++i) { memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation _medianfilter(extension, result ? result : image, N + 2, M + 2); // Free memory delete[] extension; } \n"
                      }
                    ]
                  }
                }
              ]
            },
            "rawText":"void medianfilter(element* image, element* result, int N, int M) { // Check arguments if (!image || N < 1 || M < 1) return; // Allocate memory for signal extension element* extension = new element[(N + 2) * (M + 2)]; // Check memory allocation if (!extension) return; // Create image extension for (int i = 0; i < M; ++i) { memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation _medianfilter(extension, result ? result : image, N + 2, M + 2); // Free memory delete[] extension; } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "delet":1,
                  "alloc":2,
                  "line":2,
                  "result":3,
                  "memcpi":3,
                  "element":7,
                  "filter":1,
                  "medianfilt":2,
                  "check":2,
                  "median":1,
                  "fill":2,
                  "implement":1,
                  "creat":1,
                  "call":1,
                  "extens":15,
                  "argument":1,
                  "imag":9,
                  "sizeof":3,
                  "free":1,
                  "signal":1,
                  "memori":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Java code thus far.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[-2086244185]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Java code thus far.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public static void medianfilter(long[] image, long[] result, int N, int M) { // Check arguments if (N &lt; 1 || M &lt; 1) return; // Allocate memory for signal extension long[] extension = new long[(N + 2) * (M + 2)]; // Create image extension for (int i = 0; i &lt; M; ++i) { //memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); for( int k = 0 ; k &lt; N ; k++) { extension[(N+2 * (i+1)+1)+k] = image[(N*i)+k]; } extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension //memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension //memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation //_medianfilter(extension, result ? result : image, N + 2, M + 2); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19214648]-[-1490919198]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"KeywordModifierNode",
                      "value":"static",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"medianfilter",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"long",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"image",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "formalParameterDeclarator":{
                          "type":"FormalParameterDeclsNode",
                          "modifiers":[
                            
                          ],
                          "parameterType":{
                            "type":"ArrayTypeNode",
                            "typeNode":{
                              "type":"PrimitiveTypeNode",
                              "name":"long",
                              "comments":[
                                
                              ]
                            },
                            "depth":[
                              {
                                "type":"ArrayDimensionNode",
                                "comments":[
                                  
                                ]
                              }
                            ]
                          },
                          "nextDeclarator":{
                            "type":"AdditionalFormalParameterDeclNode",
                            "variableDeclarator":{
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"result",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ]
                            },
                            "formalParameterDeclarator":{
                              "type":"FormalParameterDeclsNode",
                              "modifiers":[
                                
                              ],
                              "parameterType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "nextDeclarator":{
                                "type":"AdditionalFormalParameterDeclNode",
                                "variableDeclarator":{
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"N",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ]
                                },
                                "formalParameterDeclarator":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"M",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// Check arguments if (N < 1 || M < 1) return; // Allocate memory for signal extension long[] extension = new long[(N + 2) * (M + 2)]; // Create image extension for (int i = 0; i < M; ++i) { //memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); for( int k = 0 ; k < N ; k++) { extension[(N+2 * (i+1)+1)+k] = image[(N*i)+k]; } extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension //memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension //memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation //_medianfilter(extension, result ? result : image, N + 2, M + 2); } \n"
                      }
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public static void medianfilter(long[] image, long[] result, int N, int M) { // Check arguments if (N < 1 || M < 1) return; // Allocate memory for signal extension long[] extension = new long[(N + 2) * (M + 2)]; // Create image extension for (int i = 0; i < M; ++i) { //memcpy(extension + (N + 2) * (i + 1) + 1, image + N * i, N * sizeof(element)); for( int k = 0 ; k < N ; k++) { extension[(N+2 * (i+1)+1)+k] = image[(N*i)+k]; } extension[(N + 2) * (i + 1)] = image[N * i]; extension[(N + 2) * (i + 2) - 1] = image[N * (i + 1) - 1]; } // Fill first line of image extension //memcpy(extension, extension + N + 2, (N + 2) * sizeof(element)); // Fill last line of image extension //memcpy(extension + (N + 2) * (M + 1), extension + (N + 2) * M, (N + 2) * sizeof(element)); // Call median filter implementation //_medianfilter(extension, result ? result : image, N + 2, M + 2); } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "alloc":1,
                  "line":2,
                  "result":3,
                  "memcpi":3,
                  "element":3,
                  "filter":1,
                  "medianfilt":2,
                  "check":1,
                  "median":1,
                  "fill":2,
                  "implement":1,
                  "creat":1,
                  "call":1,
                  "extens":14,
                  "argument":1,
                  "imag":9,
                  "sizeof":3,
                  "signal":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"long",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"image",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"result",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"N",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"M",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I highly suspect I've done it wrong, just wanted to get some assistance on this. (The rest of the program is easy, as it doesn't use memcpy).</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19214648]-[1242599099]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I highly suspect I've done it wrong, just wanted to get some assistance on this. (The rest of the program is easy, as it doesn't use memcpy).</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "easi":1,
                  "want":1,
                  "wrong":1,
                  "rest":1,
                  "memcpi":1,
                  "suspect":1,
                  "assist":1,
                  "high":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19214681,
      "questionId":19214648,
      "comments":[
        
      ],
      "creationDate":"2013-10-06",
      "lastActivityDate":"2013-10-06",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":21441,
        "displayName":"Mark Elliot",
        "reputation":34862
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Actually, Java has a form of <code>memcpy</code>, invoked as <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#copyOf%28long%5b%5d,%20int%29\"rel=\"nofollow\"><code>Arrays.copyOf</code></a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19214681]-[-679022072]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Actually, Java has a form of <code>memcpy</code>, invoked as <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#copyOf%28long%5b%5d,%20int%29\"rel=\"nofollow\"><code>Arrays.copyOf</code></a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Arrays",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"copyOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "util":1,
                    "rel":1,
                    "invok":1,
                    "oracl":1,
                    "memcpi":1,
                    "doc":2,
                    "code":4,
                    "array":2,
                    "nofollow":1,
                    "javas":1,
                    "api":1,
                    "form":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "copi":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"memcpy(source, dest, size) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19214681]-[502394126]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"memcpy(source, dest, size) "
                  }
                ]
              },
              "rawText":"memcpy(source, dest, size) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "size":1,
                    "sourc":1,
                    "memcpi":1,
                    "dest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>becomes</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19214681]-[549772483]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>becomes</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"long[] dest = Arrays.copyOf(source, newSize); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19214681]-[1486314819]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"long[] "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"dest",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Arrays",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"copyOf",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"source",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"newSize",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"long[] dest = Arrays.copyOf(source, newSize); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dest":1,
                    "size":1,
                    "array":1,
                    "sourc":1,
                    "copi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Arrays",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"copyOf",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"source",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"newSize",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19689000,
      "questionId":19214648,
      "comments":[
        
      ],
      "creationDate":"2013-10-30",
      "lastActivityDate":"2013-10-30",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":2907920,
        "displayName":"Peter Schaeffer",
        "reputation":118
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java actually does have something just like memcpy(). The Unsafe class has a copyMemory() method that is essentially identical to memcpy(). Of course, like memcpy(), it provides no protection from memory overlays, data destruction, etc. It is not clear if it is really a memcpy() or a memmove(). It can be used to copy from actual addresses to actual addresses or from references to references. Note that if references are used, you must provide an offset (or the JVM will die ASAP).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19689000]-[-759076257]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java actually does have something just like memcpy(). The Unsafe class has a copyMemory() method that is essentially identical to memcpy(). Of course, like memcpy(), it provides no protection from memory overlays, data destruction, etc. It is not clear if it is really a memcpy() or a memmove(). It can be used to copy from actual addresses to actual addresses or from references to references. Note that if references are used, you must provide an offset (or the JVM will die ASAP).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"has",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"copyMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "provid":1,
                    "method":1,
                    "overlay":1,
                    "clear":1,
                    "asap":1,
                    "data":1,
                    "memcpi":4,
                    "memmov":1,
                    "die":1,
                    "ident":1,
                    "offset":1,
                    "destruct":1,
                    "note":1,
                    "refer":3,
                    "address":2,
                    "protect":1,
                    "unsaf":1,
                    "actual":2,
                    "essenti":1,
                    "copi":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Unsafe.copyMemory() works (up to 2 GB per second on my old tired PC). Use at your own risk. Note that the Unsafe class does not exist for all JVM implementations.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19689000]-[-1820634093]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Unsafe.copyMemory() works (up to 2 GB per second on my old tired PC). Use at your own risk. Note that the Unsafe class does not exist for all JVM implementations.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"copyMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"does",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "tire":1,
                    "exist":1,
                    "risk":1,
                    "work":1,
                    "note":1,
                    "implement":1,
                    "unsaf":2,
                    "copi":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You should also take a look at &quot;Tricks with Direct Memory Access in Java&quot; (<a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a>) and &quot;Java Magic. Part 4: sun.misc.Unsafe&quot; (memcpy function in C++ to Java equivalent) for some additional ideas. These guys are deeply versed in how to do low level (and risky) operations in Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19689000]-[1111781988]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You should also take a look at &quot;Tricks with Direct Memory Access in Java&quot; (<a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a>) and &quot;Java Magic. Part 4: sun.misc.Unsafe&quot; (memcpy function in C++ to Java equivalent) for some additional ideas. These guys are deeply versed in how to do low level (and risky) operations in Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "guy":1,
                    "highlyscal":2,
                    "equival":1,
                    "addit":1,
                    "wordpress":2,
                    "trick":1,
                    "idea":1,
                    "sun":1,
                    "rel":1,
                    "memcpi":1,
                    "direct":3,
                    "oper":1,
                    "vers":1,
                    "low":1,
                    "nofollow":1,
                    "function":1,
                    "riski":1,
                    "misc":1,
                    "quot":4,
                    "magic":1,
                    "unsaf":1,
                    "part":1,
                    "href":1,
                    "http":2,
                    "deepli":1,
                    "access":3,
                    "level":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}