{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25738551,
    "title":"Is there an analogue of visitLdcInsn for loading objects (not constant)?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":40244340,
        "postId":25738551,
        "creationDate":"2014-09-09",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":445715,
          "displayName":"Andrey Breslav",
          "reputation":2881
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"There's Unsafe.defineAnonymousClass(), but it is black magic. The last parameter allows you to &quot;patch&quot; the constant pool with arbitrary objects and load them through LDC"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25738551-cu40244340]-[1485598925]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"There's Unsafe.defineAnonymousClass(), but it is black magic. The last parameter allows you to &quot;patch&quot; the constant pool with arbitrary objects and load them through LDC"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"defineAnonymousClass",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "constant":1,
                      "arbitrari":1,
                      "anonym":1,
                      "load":1,
                      "object":1,
                      "paramet":1,
                      "black":1,
                      "pool":1,
                      "quot":2,
                      "magic":1,
                      "unsaf":1,
                      "defin":1,
                      "patch":1,
                      "ldc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":40259930,
        "postId":25738551,
        "creationDate":"2014-09-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1420279,
          "displayName":"Antimony",
          "reputation":15340
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What are you trying to accomplish? By definition, LDC can only be used for constants."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25738551-cu40259930]-[595711732]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What are you trying to accomplish? By definition, LDC can only be used for constants."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "constant":1,
                      "ldc":1,
                      "definit":1,
                      "accomplish":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "bytecode",
      "java-bytecode-asm",
      "bytecode-manipulation"
    ],
    "creationDate":"2014-09-09",
    "lastActivityDate":"2014-09-09",
    "score":1,
    "viewCount":70,
    "owner":{
      "type":"StackOverflowUser",
      "id":4021668,
      "displayName":"Rustam Makulov",
      "reputation":6
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>We wrote a simple PostScript interpreter in Java and want to optimize it by generating bytecode directly for specific parts of source code. For this we need to load the object from the context of the Java bytecode context. Specify such object in the signature of the generated bytecode method is not good, because they may be in a large amount in our case.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[-1681668333]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>We wrote a simple PostScript interpreter in Java and want to optimize it by generating bytecode directly for specific parts of source code. For this we need to load the object from the context of the Java bytecode context. Specify such object in the signature of the generated bytecode method is not good, because they may be in a large amount in our case.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"PostScript",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "post":1,
                  "simpl":1,
                  "signatur":1,
                  "good":1,
                  "bytecod":3,
                  "context":2,
                  "wrote":1,
                  "load":1,
                  "amount":1,
                  "object":2,
                  "direct":1,
                  "code":1,
                  "optim":1,
                  "larg":1,
                  "specif":1,
                  "generat":2,
                  "part":1,
                  "script":1,
                  "sourc":1,
                  "interpret":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PostScript",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In Java Asm we have method</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[832432122]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In Java Asm we have method</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "asm":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<blockquote> \n <p>public void visitLdcInsn(Object cst)</p> \n</blockquote>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[278143383]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<blockquote> \n <p>public void visitLdcInsn(Object cst)</p> \n</blockquote>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"visitLdcInsn",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Object",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"cst",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "blockquot":2,
                  "object":1,
                  "visit":1,
                  "cst":1,
                  "insn":1,
                  "ldc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"cst",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It visits a LDC instruction. Parameter cst - the constant to be loaded on the stack.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[710700828]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It visits a LDC instruction. Parameter cst - the constant to be loaded on the stack.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "constant":1,
                  "load":1,
                  "paramet":1,
                  "visit":1,
                  "stack":1,
                  "cst":1,
                  "ldc":1,
                  "instruct":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is there any way to load not constant object? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[430845838]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is there any way to load not constant object? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "object":1,
                  "constant":1,
                  "load":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25738551]-[-1946290828]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":25742154,
      "questionId":25738551,
      "comments":[
        
      ],
      "creationDate":"2014-09-09",
      "lastActivityDate":"2014-09-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2711488,
        "displayName":"Holger",
        "reputation":28154
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>ldc</code> can be used for loading values of type <code>int</code>, <code>float</code>, <code>String</code>, <code>Class</code>, <code>MethodType</code> or <code>MethodHandle</code>; <code>ldc2_w</code> supports values of type <code>long</code> and <code>double</code>. <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.ldc\"rel=\"nofollow\">1</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25742154]-[-988190087]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>ldc</code> can be used for loading values of type <code>int</code>, <code>float</code>, <code>String</code>, <code>Class</code>, <code>MethodType</code> or <code>MethodHandle</code>; <code>ldc2_w</code> supports values of type <code>long</code> and <code>double</code>. <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.ldc\"rel=\"nofollow\">1</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MethodType",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MethodHandle",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ldc2_w",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "method":2,
                    "rel":1,
                    "oracl":1,
                    "load":1,
                    "jvms":3,
                    "doc":1,
                    "code":20,
                    "nofollow":1,
                    "valu":2,
                    "spec":1,
                    "javas":1,
                    "type":3,
                    "html":2,
                    "href":1,
                    "http":1,
                    "handl":1,
                    "ldc":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"MethodType",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"MethodHandle",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://stackoverflow.com/questions/25738551/is-there-an-analogue-of-visitldcinsn-for-loading-objects-not-constant#comment40244340_25738551\">As said</a>, within Oracle\u2019s JVM implementation there is the internally used <code>Unsafe</code> API which allows patching in runtime objects as replacements for constants but that has several drawbacks. First, it\u2019s obviously not part of the official API, not present in every JVM and might even disappear (or change method signatures) in future Oracle JVMs. Further, the ASM framework will not be aware of what you are going to do and have difficulties to generate the appropriate bytecode for later-on patches.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25742154]-[567629044]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://stackoverflow.com/questions/25738551/is-there-an-analogue-of-visitldcinsn-for-loading-objects-not-constant#comment40244340_25738551\">As said</a>, within Oracle\u2019s JVM implementation there is the internally used <code>Unsafe</code> API which allows patching in runtime objects as replacements for constants but that has several drawbacks. First, it\u2019s obviously not part of the official API, not present in every JVM and might even disappear (or change method signatures) in future Oracle JVMs. Further, the ASM framework will not be aware of what you are going to do and have difficulties to generate the appropriate bytecode for later-on patches.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":2,
                    "chang":1,
                    "jvm":2,
                    "question":1,
                    "method":1,
                    "runtim":1,
                    "disappear":1,
                    "offici":1,
                    "signatur":1,
                    "bytecod":1,
                    "present":1,
                    "analogu":1,
                    "oracl":2,
                    "load":1,
                    "difficulti":1,
                    "framework":1,
                    "jvms":1,
                    "object":2,
                    "drawback":1,
                    "code":2,
                    "awar":1,
                    "stackoverflow":1,
                    "visitldcinsn":1,
                    "replac":1,
                    "futur":1,
                    "comment":1,
                    "asm":1,
                    "implement":1,
                    "generat":1,
                    "api":2,
                    "unsaf":1,
                    "part":1,
                    "href":1,
                    "patch":2,
                    "http":1,
                    "intern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>After all, it\u2019s not clear, what the advantage of abusing <code>ldc</code> for a runtime object in your project shall be. Generating the code for passing the instance as method or constructor parameter and storing an object in a field is not very complicated with ASM. And for the program logic, it doesn\u2019t matter whether you use <code>ldc</code> or, e.g. <code>getstatic</code>, right before using the value.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25742154]-[1927719512]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>After all, it\u2019s not clear, what the advantage of abusing <code>ldc</code> for a runtime object in your project shall be. Generating the code for passing the instance as method or constructor parameter and storing an object in a field is not very complicated with ASM. And for the program logic, it doesn\u2019t matter whether you use <code>ldc</code> or, e.g. <code>getstatic</code>, right before using the value.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "method":1,
                    "runtim":1,
                    "field":1,
                    "project":1,
                    "clear":1,
                    "complic":1,
                    "abus":1,
                    "constructor":1,
                    "store":1,
                    "logic":1,
                    "object":2,
                    "code":7,
                    "paramet":1,
                    "advantag":1,
                    "asm":1,
                    "pass":1,
                    "generat":1,
                    "matter":1,
                    "getstat":1,
                    "instanc":1,
                    "ldc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25749884,
      "questionId":25738551,
      "comments":[
        
      ],
      "creationDate":"2014-09-09",
      "lastActivityDate":"2014-09-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1237575,
        "displayName":"Rafael Winterhalter",
        "reputation":8227
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As the <em>bad way</em> of using the <code>Unsafe</code> was pointed out (it is not really an option either as it requires you to load the classes anonymously):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25749884]-[1329712287]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As the <em>bad way</em> of using the <code>Unsafe</code> was pointed out (it is not really an option either as it requires you to load the classes anonymously):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "anonym":1,
                    "requir":1,
                    "option":1,
                    "bad":1,
                    "load":1,
                    "code":2,
                    "class":1,
                    "unsaf":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I assume that you are creating a class during build time but you want to inject some sort of runtime context into these classes which are required for running your instrumentation. You can at least emulate this by writing a specialized <code>ClassLoader</code> for your application which is aware of this context and which explicitly initializes a class by for example an annotation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25749884]-[-1802798479]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I assume that you are creating a class during build time but you want to inject some sort of runtime context into these classes which are required for running your instrumentation. You can at least emulate this by writing a specialized <code>ClassLoader</code> for your application which is aware of this context and which explicitly initializes a class by for example an annotation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"during",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ClassLoader",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"by",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assum":1,
                    "runtim":1,
                    "loader":1,
                    "requir":1,
                    "context":2,
                    "run":1,
                    "build":1,
                    "emul":1,
                    "code":2,
                    "awar":1,
                    "annot":1,
                    "applic":1,
                    "inject":1,
                    "class":1,
                    "initi":1,
                    "time":1,
                    "special":1,
                    "sort":1,
                    "explicit":1,
                    "creat":1,
                    "instrument":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ClassLoader",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This means you instrument a class such as:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25749884]-[351474981]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This means you instrument a class such as:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"such",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "mean":1,
                    "instrument":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@Enhanced class Foo { static EnhancementDelegate delegate; void instrumentedMethod() { // do something with delegate } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25749884]-[-907991075]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Enhanced",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"delegate",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"EnhancementDelegate",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"instrumentedMethod",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"// do something with delegate } } \n"
                                  }
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"@Enhanced class Foo { static EnhancementDelegate delegate; void instrumentedMethod() { // do something with delegate } } \n...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "enhanc":2,
                    "instrument":1,
                    "deleg":3,
                    "foo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"EnhancementDelegate",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"delegate",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"EnhancementDelegate",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>at build-time and you initialize is explicitly at load time:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25749884]-[-18020701]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>at build-time and you initialize is explicitly at load time:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "build":1,
                    "load":1,
                    "initi":1,
                    "time":2,
                    "explicit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class EnhancementClassLoader extends ClassLoader { @Override protected Class&lt;?&gt; loadClass(String name) { Class&lt;?&gt; clazz = super.loadClass(name); if(clazz.isAnnotationPresent(Enhanced.class)) { // do initialization stuff } return clazz; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25749884]-[-2063255471]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"EnhancementClassLoader",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ClassLoader",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Override",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"protected",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Class",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "typeArguments":{
                                      "type":"TypeArgumentsNode",
                                      "types":[
                                        {
                                          "type":"WildcardTypeArgumentNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"?",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"loadClass",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"name",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"clazz",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"MethodInvocationNode",
                                                "qualifiedIdentifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"super",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"loadClass",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"name",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Class",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "typeArguments":{
                                                  "type":"TypeArgumentsNode",
                                                  "types":[
                                                    {
                                                      "type":"WildcardTypeArgumentNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"?",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IfStatementNode",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"clazz",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"isAnnotationPresent",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"ClassLiteralExpressionNode",
                                            "aType":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"Enhanced",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "arrayDepths":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        {
                                          "text":"// do initialization stuff } return clazz; } } \n"
                                        }
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class EnhancementClassLoader extends ClassLoader { @Override protected Class<?> loadClass(String name) { Class<?> clazz = super.loadClass(name); if(clazz.isAnnotationPresent(Enhanced.class)) { // do initialization stuff } return clazz; } } \n...\n}...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "clazz":3,
                    "loader":2,
                    "present":1,
                    "overrid":1,
                    "load":2,
                    "annot":1,
                    "enhanc":2,
                    "stuff":1,
                    "initi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ClassLoader",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Class",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"WildcardTypeArgumentNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"?",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"super",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"loadClass",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"name",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"clazz",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"isAnnotationPresent",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Enhanced",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"name",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"clazz",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"super",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"loadClass",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"name",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Class",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"WildcardTypeArgumentNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"?",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Would this help you out? It is kind of a guess what you are trying to achieve but I think this might be a good solution. Check out my project <a href=\"http://bytebuddy.net\"rel=\"nofollow\">Byte Buddy</a> which solves a similar problem for proxy classes by introducing a <code>LoadedTypeInitializer</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25749884]-[-1600299448]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Would this help you out? It is kind of a guess what you are trying to achieve but I think this might be a good solution. Check out my project <a href=\"http://bytebuddy.net\"rel=\"nofollow\">Byte Buddy</a> which solves a similar problem for proxy classes by introducing a <code>LoadedTypeInitializer</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"LoadedTypeInitializer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "similar":1,
                    "project":1,
                    "good":1,
                    "problem":1,
                    "introduc":1,
                    "rel":1,
                    "load":1,
                    "net":1,
                    "code":2,
                    "bytebuddi":1,
                    "nofollow":1,
                    "achiev":1,
                    "check":1,
                    "buddi":1,
                    "class":1,
                    "initi":1,
                    "kind":1,
                    "guess":1,
                    "proxi":1,
                    "type":1,
                    "href":1,
                    "http":1,
                    "solut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"LoadedTypeInitializer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}