{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25533616,
    "title":"Alerting user between application event",
    "comments":[
      
    ],
    "tags":[
      "java",
      "spring",
      "java-ee",
      "design-patterns"
    ],
    "creationDate":"2014-08-27",
    "lastActivityDate":"2014-10-28",
    "score":0,
    "viewCount":26,
    "owner":{
      "type":"StackOverflowUser",
      "id":984824,
      "displayName":"Ash",
      "reputation":380
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm not really sure how to describe the design issue I'm having so the title is very vague and possibly just totally wrong.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[-1620224152]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm not really sure how to describe the design issue I'm having so the title is very vague and possibly just totally wrong.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "vagu":1,
                  "wrong":1,
                  "issu":1,
                  "titl":1,
                  "total":1,
                  "possibl":1,
                  "describ":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Basically, I have a web application which uses a number of different payment gateways, depending upon which one the user prefers.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[-1230767149]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Basically, I have a web application which uses a number of different payment gateways, depending upon which one the user prefers.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "depend":1,
                  "gateway":1,
                  "web":1,
                  "payment":1,
                  "applic":1,
                  "basic":1,
                  "user":1,
                  "prefer":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Obviously the communication between the application and the gateway endpoint is going to be different for each. I need the way for my application to react to the response of the gateway by the means of a javascript alert (for now). The gateways might have different return url's back to the application, and it needs to work between browser sessions.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[-1009658323]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Obviously the communication between the application and the gateway endpoint is going to be different for each. I need the way for my application to react to the response of the gateway by the means of a javascript alert (for now). The gateways might have different return url's back to the application, and it needs to work between browser sessions.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "url":1,
                  "browser":1,
                  "react":1,
                  "alert":1,
                  "mean":1,
                  "gateway":3,
                  "work":1,
                  "back":1,
                  "applic":3,
                  "endpoint":1,
                  "session":1,
                  "communic":1,
                  "respons":1,
                  "javascript":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Any ideas or pointers to technology that will help with this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[-1382801868]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Any ideas or pointers to technology that will help with this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "idea":1,
                  "pointer":1,
                  "technolog":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If it helps the technology stack im using: Java, Spring, Struts</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[1339583676]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If it helps the technology stack im using: Java, Spring, Struts</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "spring":1,
                  "strut":1,
                  "help":1,
                  "stack":1,
                  "technolog":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks,</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25533616]-[-219923430]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks,</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":26602228,
      "questionId":25533616,
      "comments":[
        
      ],
      "creationDate":"2014-10-28",
      "lastActivityDate":"2014-10-28",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1120035,
        "displayName":"Coldstar",
        "reputation":532
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I would recommend a dedicated messaging layer with Redis, Socket.io or Rabbit.mq. I had the same issue with a medical app. If you want to stick to Java i would recommend an Observer pattern to pass event messages between classes but you still need a way to distribute notifications to the presentation layer handlers (Javascript) and thats were I recommend a socket server of sorts</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[26602228]-[785049723]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I would recommend a dedicated messaging layer with Redis, Socket.io or Rabbit.mq. I had the same issue with a medical app. If you want to stick to Java i would recommend an Observer pattern to pass event messages between classes but you still need a way to distribute notifications to the presentation layer handlers (Javascript) and thats were I recommend a socket server of sorts</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "medic":1,
                    "notif":1,
                    "recommend":3,
                    "observ":1,
                    "socket":2,
                    "server":1,
                    "pattern":1,
                    "event":1,
                    "stick":1,
                    "present":1,
                    "issu":1,
                    "layer":2,
                    "pass":1,
                    "app":1,
                    "class":1,
                    "dedic":1,
                    "messag":2,
                    "sort":1,
                    "distribut":1,
                    "handler":1,
                    "redi":1,
                    "javascript":1,
                    "rabbit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}