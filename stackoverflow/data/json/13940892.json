{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":13940892,"title":"What is the fastest way to subtract two arrays in scala","comments":[{"type":"StackOverflowComment","id":19229887,"postId":13940892,"creationDate":"2012-12-19","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":390708,"displayName":"Brian","reputation":7421},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"@Zane see my answer. Measured performance with Scalameter."},"units":[{"type":"TextUnit","id":"[13940892-cu19229887]-[-850897114]","astNode":{"type":"TextFragmentNode","text":"@Zane see my answer. Measured performance with Scalameter."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"AnnotationNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Zane","comments":[]}],"comments":[]},"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"zane":1,"measur":1,"scalamet":1,"perform":1,"answer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"Zane","comments":[]}]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":54.72500000000002,"fleshKincaidGradeLevel":6.620000000000001,"automatedReadingIndex":9.41875,"gunningFogIndex":1.6,"smogIndex":3.0,"colemanLiauIndex":12.776249999999994}]}]}]},{"type":"StackOverflowComment","id":19222947,"postId":13940892,"creationDate":"2012-12-18","score":1,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1711374,"displayName":"Zane","reputation":767},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"How do you measure the performance? Are you sure that a list is faster than an array? Does the difference in performance really matter?"},"units":[{"type":"TextUnit","id":"[13940892-cu19222947]-[-1947467408]","astNode":{"type":"TextFragmentNode","text":"How do you measure the performance? Are you sure that a list is faster than an array? Does the difference in performance really matter?"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"faster":1,"differ":1,"measur":1,"array":1,"perform":2,"matter":1,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":64.76500000000001,"fleshKincaidGradeLevel":6.213333333333335,"automatedReadingIndex":3.9612500000000033,"gunningFogIndex":4.866666666666667,"smogIndex":6.16227766016838,"colemanLiauIndex":7.200416666666666}]}]}]},{"type":"StackOverflowComment","id":19223516,"postId":13940892,"creationDate":"2012-12-18","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":298389,"displayName":"om-nom-nom","reputation":36524},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"When nothing else helps, you may try to play directly with memory (just like you do in C) with [sun.misc.Unsafe](http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/). I have heard that direct manipulation with byte buffers may speed up hard math up to 30% (I guess, because we don't have array bounds checks, but they might be eliminated by HotSpot as well), but haven't tried it personally. Note that this is last resort."},"units":[{"type":"TextUnit","id":"[13940892-cu19223516]-[-1199116595]","astNode":{"type":"TextFragmentNode","text":"When nothing else helps, you may try to play directly with memory (just like you do in C) with [sun.misc.Unsafe](http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/). I have heard that direct manipulation with byte buffers may speed up hard math up to 30% (I guess, because we don't have array bounds checks, but they might be eliminated by HotSpot as well), but haven't tried it personally. Note that this is last resort."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"HotSpot","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"heard":1,"hard":1,"highlyscal":1,"wordpress":1,"play":1,"sun":1,"manipul":1,"buffer":1,"resort":1,"direct":3,"array":1,"help":1,"bound":1,"math":1,"check":1,"note":1,"person":1,"misc":1,"elimin":1,"spot":1,"hot":1,"unsaf":1,"guess":1,"http":1,"speed":1,"access":1,"memori":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"HotSpot","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"sun","comments":[]},{"type":"IdentifierNode","name":"misc","comments":[]},{"type":"IdentifierNode","name":"Unsafe","comments":[]},{"type":"IdentifierNode","name":"HotSpot","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":47.394347826087,"fleshKincaidGradeLevel":12.362608695652174,"automatedReadingIndex":15.05347826086956,"gunningFogIndex":12.098550724637683,"smogIndex":10.071067811865476,"colemanLiauIndex":14.138260869565212}]}]}]},{"type":"StackOverflowComment","id":19223650,"postId":13940892,"creationDate":"2012-12-18","score":1,"isEdited":false,"owner":{"type":"StackOverflowUser","id":298389,"displayName":"om-nom-nom","reputation":36524},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"By the way, I really doubt that List here might be faster than array, are you sure you do the proper measurements?"},"units":[{"type":"TextUnit","id":"[13940892-cu19223650]-[586906302]","astNode":{"type":"TextFragmentNode","text":"By the way, I really doubt that List here might be faster than array, are you sure you do the proper measurements?"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"faster":1,"proper":1,"measur":1,"array":1,"doubt":1,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":69.14136363636364,"fleshKincaidGradeLevel":9.080909090909092,"automatedReadingIndex":8.83818181818182,"gunningFogIndex":8.8,"smogIndex":3.0,"colemanLiauIndex":6.931818181818183}]}]}]}],"tags":["scala","micro-optimization","scala-2.9"],"creationDate":"2012-12-18","lastActivityDate":"2012-12-19","lastEditDate":"2012-12-18","score":4,"viewCount":652,"owner":{"type":"StackOverflowUser","id":1527230,"displayName":"Mike Lavender","reputation":87},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I have two arrays (that i have pulled out of a matrix (Array[Array[Int]]) and I need to subtract one from the other.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-414460605]","astNode":{"type":"TextFragmentNode","text":"<p>I have two arrays (that i have pulled out of a matrix (Array[Array[Int]]) and I need to subtract one from the other.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"matrix":1,"subtract":1,"pull":1,"array":3}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>At the moment I am using this method however, when I profile it, it is the bottleneck.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-826225695]","astNode":{"type":"TextFragmentNode","text":"<p>At the moment I am using this method however, when I profile it, it is the bottleneck.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"bottleneck":1,"profil":1,"method":1,"moment":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"def subRows(a: Array[Int], b: Array[Int], sizeHint: Int): Array[Int] = {\n   val l: Array[Int] = new Array(sizeHint)\n   var i = 0\n   while (i &lt; sizeHint) {\n     l(i) = a(i) - b(i)\n     i += 1\n   }\n   l\n }\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[13940892]-[-1166615699]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRows","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(a: Array[Int], b: Array[Int], "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":": Int): Array[Int] = {\n   val l: Array[Int] = "},{"type":"ConstructorCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]},"expressionArgs":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"var i = 0\n   while (i < "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":") {\n     "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"l","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"- "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"i += 1\n   }\n   l\n }\n"}]},"rawText":"def subRows(a: Array[Int], b: Array[Int], sizeHint: Int): Array[Int] = {\n   val l: Array[Int] = new Array(sizeHint)\n   var i = 0\n   while (i < sizeHint) {\n     l(i) = a(i) - b(i)\n     i += 1\n   }\n   l\n }\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"size":3,"row":1,"array":5,"hint":3,"def":1,"var":1,"val":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"l","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]},{"type":"IdentifierNode","name":"a","comments":[]},{"type":"IdentifierNode","name":"subRows","comments":[]},{"type":"IdentifierNode","name":"b","comments":[]},{"type":"IdentifierNode","name":"Array","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"l","comments":[]}]},{"declarators":[]},{"grade":0.16357219219207764}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I need to do this billions of times so any improvement in speed is a plus.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-385233616]","astNode":{"type":"TextFragmentNode","text":"<p>I need to do this billions of times so any improvement in speed is a plus.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"improv":1,"billion":1,"time":1,"speed":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I have tried using a <code>List</code> instead of an <code>Array</code> to collect the differences and it is MUCH faster but I lose all benefit when I convert it back to an <code>Array</code>.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[1017817813]","astNode":{"type":"TextFragmentNode","text":"<p>I have tried using a <code>List</code> instead of an <code>Array</code> to collect the differences and it is MUCH faster but I lose all benefit when I convert it back to an <code>Array</code>.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"faster":1,"differ":1,"code":6,"array":2,"back":1,"collect":1,"benefit":1,"lose":1,"convert":1,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I did modify the downstream code to take a <code>List</code> to see if that would help but I need to access the contents of the list out of order so again there is loss of any gains there.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-801546396]","astNode":{"type":"TextFragmentNode","text":"<p>I did modify the downstream code to take a <code>List</code> to see if that would help but I need to access the contents of the list out of order so again there is loss of any gains there.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"downstream":1,"code":3,"gain":1,"order":1,"modifi":1,"content":1,"loss":1,"list":2,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>It seems like any conversion of one type to another is expensive and I am wondering if there is some way to use a map etc. that might be faster.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[1681422978]","astNode":{"type":"TextFragmentNode","text":"<p>It seems like any conversion of one type to another is expensive and I am wondering if there is some way to use a map etc. that might be faster.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"faster":1,"map":1,"convers":1,"wonder":1,"type":1,"expens":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Is there a better way?</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[2042732826]","astNode":{"type":"TextFragmentNode","text":"<p>Is there a better way?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<hr>"},"units":[{"type":"TextUnit","id":"[13940892]-[1891000]","astNode":{"type":"TextFragmentNode","text":"<hr>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<h2>EDIT</h2>"},"units":[{"type":"TextUnit","id":"[13940892]-[2079932575]","astNode":{"type":"TextFragmentNode","text":"<h2>EDIT</h2>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"edit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Not sure what I did the first time!?</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-385728469]","astNode":{"type":"TextFragmentNode","text":"<p>Not sure what I did the first time!?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"time":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>So the code I used to test it was this:</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[-686877572]","astNode":{"type":"TextFragmentNode","text":"<p>So the code I used to test it was this:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"code":1,"test":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"def subRowsArray(a: Array[Int], b: Array[Int], sizeHint: Int): Array[Int] = {\n  val l: Array[Int] = new Array(sizeHint)\n  var i = 0\n  while (i &lt; sizeHint) {\n    l(i) = a(i) - b(i)\n    i += 1\n  }\n  l\n}\n\ndef subRowsList(a: Array[Int], b: Array[Int], sizeHint: Int): List[Int] = {\n  var l: List[Int] = Nil\n  var i = 0\n  while (i &lt; sizeHint) {\n    l = a(i) - b(i) :: l\n    i += 1\n  }\n  l\n}\n\nval a = Array.fill(100, 100)(scala.util.Random.nextInt(2))\nval loops = 30000 * 10000\n\ndef runArray = for (i &lt;- 1 to loops) subRowsArray(a(scala.util.Random.nextInt(100)), a(scala.util.Random.nextInt(100)), 100)\n\ndef runList = for (i &lt;- 1 to loops) subRowsList(a(scala.util.Random.nextInt(100)), a(scala.util.Random.nextInt(100)), 100)\n\ndef optTimer(f: =&gt; Unit) = {\n  val s = System.currentTimeMillis\n  f\n  System.currentTimeMillis - s\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[13940892]-[1271068565]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsArray","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(a: Array[Int], b: Array[Int], "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":": Int): Array[Int] = {\n  val l: Array[Int] = "},{"type":"ConstructorCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]},"expressionArgs":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"var i = 0\n  while (i < "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":") {\n    "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"l","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"- "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"i += 1\n  }\n  l\n}\n\ndef "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsList","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(a: Array[Int], b: Array[Int], "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":": Int): List[Int] = {\n  var l: List[Int] = Nil\n  var i = 0\n  while (i < "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":") {\n    l = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"- "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":":: l\n    i += 1\n  }\n  l\n}\n\nval a = "},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Array","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"fill","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"("},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"2"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":")\nval loops = 30000 * 10000\n\ndef "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"runArray","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" = for (i <- 1 to loops) "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"subRowsArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"runList","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" = for (i <- 1 to loops) "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"subRowsList","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"optTimer","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(f: => Unit) = {\n  val s = "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"currentTimeMillis","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"\n  f\n  "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"currentTimeMillis","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" - s\n}\n"}]},"rawText":"def subRowsArray(a: Array[Int], b: Array[Int], sizeHint: Int): Array[Int] = {\n  val l: Array[Int] = new Array(sizeHint)\n  var i = 0\n  while (i < sizeHint) {\n    l(i) = a(i) - b(i)\n    i += 1\n  }\n  l\n}\n\ndef subRowsList(a: Array[Int], b: Array[Int], sizeHint: Int): List[Int] = {\n  var l: List[Int] = Nil\n  var i = 0\n  while (i < sizeHint) {\n    l = a(i) - b(i) :: l\n    i += 1\n  }\n  l\n}\n\nval a = Array.fill(100, 100)(scala.util.Random.nextInt(2))\nval loops = 30000 * 10000\n\ndef runArray = for (i <- 1 to loops) subRowsArray(a(scala.util.Random.nextInt(100)), a(scala.util.Random.nextInt(100)), 100)\n\ndef runList = for (i <- 1 to loops) subRowsList(a(scala.util.Random.nextInt(100)), a(scala.util.Random.nextInt(100)), 100)\n\ndef optTimer(f: => Unit) = {\n  val s = System.currentTimeMillis\n  f\n  System.currentTimeMillis - s\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"random":5,"loop":3,"opt":1,"util":5,"size":5,"system":2,"run":2,"milli":2,"row":4,"nil":1,"array":11,"fill":1,"scala":5,"hint":5,"def":5,"unit":1,"time":2,"current":2,"var":3,"timer":1,"val":4,"list":5}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"2"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"l","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Array","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"fill","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"subRowsArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"subRowsList","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"nextInt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"100"},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"sizeHint","comments":[]},{"type":"IdentifierNode","name":"a","comments":[]},{"type":"IdentifierNode","name":"nextInt","comments":[]},{"type":"IdentifierNode","name":"scala","comments":[]},{"type":"IdentifierNode","name":"b","comments":[]},{"type":"IdentifierNode","name":"runArray","comments":[]},{"type":"IdentifierNode","name":"util","comments":[]},{"type":"IdentifierNode","name":"subRowsArray","comments":[]},{"type":"IdentifierNode","name":"currentTimeMillis","comments":[]},{"type":"IdentifierNode","name":"Array","comments":[]},{"type":"IdentifierNode","name":"fill","comments":[]},{"type":"IdentifierNode","name":"optTimer","comments":[]},{"type":"IdentifierNode","name":"runList","comments":[]},{"type":"IdentifierNode","name":"Random","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"subRowsList","comments":[]},{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"l","comments":[]}]},{"declarators":[]},{"grade":6.884532631374896E-4}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>The results I thought I got the first time I did this were the exact opposite... I must have misread or mixed up the methods.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[1526048224]","astNode":{"type":"TextFragmentNode","text":"<p>The results I thought I got the first time I did this were the exact opposite... I must have misread or mixed up the methods.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"thought":1,"result":1,"exact":1,"mix":1,"opposit":1,"misread":1,"time":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>My apologies for asking a bad question.</p>"},"units":[{"type":"TextUnit","id":"[13940892]-[1179578790]","astNode":{"type":"TextFragmentNode","text":"<p>My apologies for asking a bad question.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"apolog":1,"bad":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},"answers":[{"type":"StackOverflowAnswer","id":13942501,"questionId":13940892,"comments":[],"creationDate":"2012-12-18","lastActivityDate":"2012-12-18","score":6,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":247533,"displayName":"Rex Kerr","reputation":104113},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>That code is the fastest you can manage single-threaded using a standard JVM.  If you think <code>List</code> is faster, you're either fooling yourself or not actually telling us what you're doing.  Putting an <code>Int</code> into <code>List</code> requires two object creations: one to create the list element, and one to box the integer.  Object creations take about 10x longer than an array access.  So it's really not a winning proposition to do it any other way.</p>"},"units":[{"type":"TextUnit","id":"[13942501]-[1076625006]","astNode":{"type":"TextFragmentNode","text":"<p>That code is the fastest you can manage single-threaded using a standard JVM.  If you think <code>List</code> is faster, you're either fooling yourself or not actually telling us what you're doing.  Putting an <code>Int</code> into <code>List</code> requires two object creations: one to create the list element, and one to box the integer.  Object creations take about 10x longer than an array access.  So it's really not a winning proposition to do it any other way.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"singl":1,"win":1,"faster":1,"standard":1,"requir":1,"fool":1,"fastest":1,"creation":2,"object":2,"element":1,"code":7,"array":1,"thread":1,"proposit":1,"put":1,"box":1,"longer":1,"manag":1,"creat":1,"tell":1,"list":3,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>If you really, really need to go faster, and must stay with a single thread, you should probably switch to C++ or the like and explicitly use SSE instructions.  See <a href=\"http://stackoverflow.com/questions/5008831\">this question</a>, for example.</p>"},"units":[{"type":"TextUnit","id":"[13942501]-[610679736]","astNode":{"type":"TextFragmentNode","text":"<p>If you really, really need to go faster, and must stay with a single thread, you should probably switch to C++ or the like and explicitly use SSE instructions.  See <a href=\"http://stackoverflow.com/questions/5008831\">this question</a>, for example.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":2,"singl":1,"faster":1,"stackoverflow":1,"thread":1,"stay":1,"href":1,"explicit":1,"sse":1,"http":1,"instruct":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>If you really, really need to go faster and can use multiple threads, then the easiest is to package up a chunk of work like this (i.e. a sensible number of pairs of vectors that need to be subtracted--probably at least a few million elements per chunk) into a list as long as the number of processors on your machine, and then call <code>list.par.map(yourSubtractionRoutineThatActsOnTheChunkOfWork)</code>.</p>"},"units":[{"type":"TextUnit","id":"[13942501]-[-1729338694]","astNode":{"type":"TextFragmentNode","text":"<p>If you really, really need to go faster and can use multiple threads, then the easiest is to package up a chunk of work like this (i.e. a sensible number of pairs of vectors that need to be subtracted--probably at least a few million elements per chunk) into a list as long as the number of processors on your machine, and then call <code>list.par.map(yourSubtractionRoutineThatActsOnTheChunkOfWork)</code>.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"list","comments":[]},{"type":"IdentifierNode","name":"par","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"map","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"yourSubtractionRoutineThatActsOnTheChunkOfWork","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"chunk":3,"faster":1,"easiest":1,"map":1,"subtract":2,"par":1,"vector":1,"work":2,"element":1,"code":2,"thread":1,"routin":1,"machin":1,"processor":1,"pair":1,"million":1,"act":1,"call":1,"multipl":1,"list":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"list","comments":[]},{"type":"IdentifierNode","name":"par","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"map","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"yourSubtractionRoutineThatActsOnTheChunkOfWork","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"list","comments":[]},{"type":"IdentifierNode","name":"par","comments":[]},{"type":"IdentifierNode","name":"map","comments":[]},{"type":"IdentifierNode","name":"yourSubtractionRoutineThatActsOnTheChunkOfWork","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Finally, if you can be destructive,</p>"},"units":[{"type":"TextUnit","id":"[13942501]-[1523839073]","astNode":{"type":"TextFragmentNode","text":"<p>Finally, if you can be destructive,</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"destruct":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"a(i) -= b(i)\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[13942501]-[1728737261]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"-= "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},"rawText":"a(i) -= b(i)\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"a","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"b","comments":[]}]},{"declarators":[]},{"grade":0.9870479702949524}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>in the inner loop is, of course, faster.  Likewise, if you can reuse space (e.g. with <code>System.arraycopy</code>), you're better off than if you have to keep allocating it.  But that changes the interface from what you've shown.</p>"},"units":[{"type":"TextUnit","id":"[13942501]-[1539168887]","astNode":{"type":"TextFragmentNode","text":"<p>in the inner loop is, of course, faster.  Likewise, if you can reuse space (e.g. with <code>System.arraycopy</code>), you're better off than if you have to keep allocating it.  But that changes the interface from what you've shown.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"faster":1,"loop":1,"alloc":1,"system":1,"likewis":1,"code":2,"shown":1,"space":1,"arraycopi":1,"reus":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":13944899,"questionId":13940892,"comments":[],"creationDate":"2012-12-19","lastActivityDate":"2012-12-19","lastEditDate":"2012-12-19","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":390708,"displayName":"Brian","reputation":7421},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>You can use <a href=\"http://axel22.github.com/scalameter/\" rel=\"nofollow\">Scalameter</a> to try a benchmark the two implementations which requires at least JRE 7 update 4 and Scala 2.10 to be run. I used scala 2.10 RC2.</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[-103120373]","astNode":{"type":"TextFragmentNode","text":"<p>You can use <a href=\"http://axel22.github.com/scalameter/\" rel=\"nofollow\">Scalameter</a> to try a benchmark the two implementations which requires at least JRE 7 update 4 and Scala 2.10 to be run. I used scala 2.10 RC2.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jre":1,"github":1,"requir":1,"run":1,"updat":1,"rel":1,"axel":1,"nofollow":1,"scalamet":2,"scala":2,"implement":1,"href":1,"http":1,"benchmark":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Compile with <code>scalac -cp scalameter_2.10-0.2.jar RangeBenchmark.scala</code>.</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[1251878095]","astNode":{"type":"TextFragmentNode","text":"<p>Compile with <code>scalac -cp scalameter_2.10-0.2.jar RangeBenchmark.scala</code>.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scalameter_2","comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"rang":1,"code":2,"scalamet":1,"scala":1,"scalac":1,"compil":1,"jar":1,"benchmark":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"scalameter_2","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Run with <code>scala -cp scalameter_2.10-0.2.jar:. RangeBenchmark</code>.</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[-59677886]","astNode":{"type":"TextFragmentNode","text":"<p>Run with <code>scala -cp scalameter_2.10-0.2.jar:. RangeBenchmark</code>.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"scalameter_2","comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"RangeBenchmark","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"rang":1,"run":1,"code":2,"scalamet":1,"scala":1,"jar":1,"benchmark":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"RangeBenchmark","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"scalameter_2","comments":[]},{"type":"IdentifierNode","name":"RangeBenchmark","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Here's the code I used:</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[-1703147459]","astNode":{"type":"TextFragmentNode","text":"<p>Here's the code I used:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"code":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"import org.scalameter.api._\n\nobject RangeBenchmark extends PerformanceTest.Microbenchmark {\n  val limit = 100\n  val a = new Array[Int](limit)\n  val b = new Array[Int](limit)\n  val array: Array[Int] = new Array(limit)\n  var list: List[Int] = Nil\n  val ranges = for {\n    size &lt;- Gen.single(\"size\")(limit)\n  } yield 0 until size\n\n  measure method \"subRowsArray\" in {\n    using(ranges) curve(\"Range\") in {\n      var i = 0\n      while (i &lt; limit) {\n        array(i) = a(i) - b(i)\n        i += 1\n      }\n      r =&gt; array\n    }\n  }\n\n  measure method \"subRowsList\" in {\n    using(ranges) curve(\"Range\") in {\n      var i = 0\n      while (i &lt; limit) {\n        list = a(i) - b(i) :: list\n        i += 1\n      }\n      r =&gt; list\n    }\n  }\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[13944899]-[1976905487]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"ImportDeclarationNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"org","comments":[]},{"type":"IdentifierNode","name":"scalameter","comments":[]},{"type":"IdentifierNode","name":"api","comments":[]},{"type":"IdentifierNode","name":"_","comments":[]}],"comments":[]},"isStatic":false,"isOnDemand":false,"comments":[]},{"type":"TextFragmentNode","text":"\n\nobject "},{"type":"ClassRelationshipNode","typeName":{"type":"IdentifierNode","name":"RangeBenchmark","comments":[]},"superTypeName":{"type":"IdentifierNode","name":"PerformanceTest","comments":[]},"comments":[]},{"type":"TextFragmentNode","text":".Microbenchmark {\n  val limit = 100\n  val a = "},{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Int","comments":[]}],"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]},{"type":"TextFragmentNode","text":"(limit)\n  val b = "},{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Int","comments":[]}],"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]},{"type":"TextFragmentNode","text":"(limit)\n  val array: Array[Int] = "},{"type":"ConstructorCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]},"expressionArgs":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"limit","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"var list: List[Int] = Nil\n  val ranges = for {\n    size <- "},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Gen","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"single","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"size\""},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"(limit)\n  } yield 0 until size\n\n  measure method \""},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsArray","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"\" in {\n    "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"using","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"ranges","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"curve","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Range\""},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"in {\n      var i = 0\n      while (i < limit) {\n        "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"array","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"- "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"i += 1\n      }\n      r => array\n    }\n  }\n\n  measure method \""},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsList","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"\" in {\n    "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"using","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"ranges","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"curve","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Range\""},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"in {\n      var i = 0\n      while (i < limit) {\n        list = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"- "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":":: list\n        i += 1\n      }\n      r => list\n    }\n  }\n}\n"}]},"rawText":"import org.scalameter.api._\n\nobject RangeBenchmarkextends PerformanceTest.Microbenchmark {\n  val limit = 100\n  val a = new Array[Int](limit)\n  val b = new Array[Int](limit)\n  val array: Array[Int] = new Array(limit)\n  var list: List[Int] = Nil\n  val ranges = for {\n    size <- Gen.single(\"size\")(limit)\n  } yield 0 until size\n\n  measure method \"subRowsArray\" in {\n    using(ranges) curve(\"Range\") in {\n      var i = 0\n      while (i < limit) {\n        array(i) = a(i) - b(i)\n        i += 1\n      }\n      r => array\n    }\n  }\n\n  measure method \"subRowsList\" in {\n    using(ranges) curve(\"Range\") in {\n      var i = 0\n      while (i < limit) {\n        list = a(i) - b(i) :: list\n        i += 1\n      }\n      r => list\n    }\n  }\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"method":2,"test":1,"size":3,"rang":6,"microbenchmark":1,"yield":1,"curv":2,"row":2,"measur":2,"object":1,"nil":1,"benchmarkextend":1,"array":8,"scalamet":1,"perform":1,"api":1,"org":1,"limit":7,"gen":1,"var":3,"val":5,"list":6}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"org","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"scalameter","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"api","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"_","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Gen","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"single","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"size\""},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"using","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"ranges","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"b","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"array","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"a","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"curve","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Range\""},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"RangeBenchmark","comments":[]},{"type":"IdentifierNode","name":"a","comments":[]},{"type":"IdentifierNode","name":"api","comments":[]},{"type":"IdentifierNode","name":"curve","comments":[]},{"type":"IdentifierNode","name":"b","comments":[]},{"type":"IdentifierNode","name":"PerformanceTest","comments":[]},{"type":"IdentifierNode","name":"ranges","comments":[]},{"type":"IdentifierNode","name":"subRowsArray","comments":[]},{"type":"IdentifierNode","name":"Array","comments":[]},{"type":"IdentifierNode","name":"limit","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"subRowsList","comments":[]},{"type":"IdentifierNode","name":"_","comments":[]},{"type":"IdentifierNode","name":"Int","comments":[]},{"type":"IdentifierNode","name":"using","comments":[]},{"type":"IdentifierNode","name":"org","comments":[]},{"type":"IdentifierNode","name":"single","comments":[]},{"type":"IdentifierNode","name":"scalameter","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"Gen","comments":[]}]},{"declarators":[]},{"grade":0.050299324095249176}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Here's the results:</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[-697576210]","astNode":{"type":"TextFragmentNode","text":"<p>Here's the results:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"result":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"::Benchmark subRowsArray::\nParameters(size -&gt; 100): 8.26E-4\n\n::Benchmark subRowsList::\nParameters(size -&gt; 100): 7.94E-4\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[13944899]-[-181540967]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"::Benchmark "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsArray","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"::\nParameters(size -> 100): 8.26E-4\n\n::Benchmark "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"subRowsList","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"::\nParameters(size -> 100): 7.94E-4\n"}]},"rawText":"::Benchmark subRowsArray::\nParameters(size -> 100): 8.26E-4\n\n::Benchmark subRowsList::\nParameters(size -> 100): 7.94E-4\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"size":2,"row":2,"array":1,"paramet":2,"list":1,"benchmark":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"subRowsArray","comments":[]},{"type":"IdentifierNode","name":"subRowsList","comments":[]}]},{"declarators":[]},{"grade":0.47044405341148376}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>You can draw your own conclusions. :)</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[33331184]","astNode":{"type":"TextFragmentNode","text":"<p>You can draw your own conclusions. :)</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"draw":1,"conclus":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>The stack blew up on larger values of <code>limit</code>. I'll guess it's because it's measuring the performance many times.</p>"},"units":[{"type":"TextUnit","id":"[13944899]-[1705614980]","astNode":{"type":"TextFragmentNode","text":"<p>The stack blew up on larger values of <code>limit</code>. I'll guess it's because it's measuring the performance many times.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"measur":1,"code":2,"larger":1,"perform":1,"valu":1,"stack":1,"time":1,"guess":1,"limit":1,"blew":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]}]}