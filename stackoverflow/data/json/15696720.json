{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":15696720,
    "title":"What is the most efficient way to program electric wires in a 3d grid based environment?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":22391572,
        "postId":15696720,
        "creationDate":"2013-04-02",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":263149,
          "displayName":"sharakan",
          "reputation":4384
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"A thought... you've said you're computationally constrained, so doing a floodfill each time a wire is added/removed would take too long. Are you also memory constrained, or can you assume plenty of that?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15696720-cu22391572]-[-656574522]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"A thought... you've said you're computationally constrained, so doing a floodfill each time a wire is added/removed would take too long. Are you also memory constrained, or can you assume plenty of that?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "assum":1,
                      "remov":1,
                      "thought":1,
                      "wire":1,
                      "comput":1,
                      "floodfil":1,
                      "ad":1,
                      "constrain":2,
                      "time":1,
                      "plenti":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":22768519,
        "postId":15696720,
        "creationDate":"2013-04-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2223015,
          "displayName":"Zwander",
          "reputation":66
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@sharakan Sorry about the late reply. I will also be memory constrained due to it being for phone/tablet."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15696720-cu22768519]-[430875003]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@sharakan Sorry about the late reply. I will also be memory constrained due to it being for phone/tablet."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "due":1,
                      "late":1,
                      "tablet":1,
                      "repli":1,
                      "constrain":1,
                      "sharakan":1,
                      "phone":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance",
      "algorithm"
    ],
    "creationDate":"2013-03-29",
    "lastActivityDate":"2013-03-29",
    "lastEditDate":"2013-03-29",
    "score":3,
    "viewCount":209,
    "owner":{
      "type":"StackOverflowUser",
      "id":2223015,
      "displayName":"Zwander",
      "reputation":66
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am currently working on a 2D grid based sandbox type game. Technically its 3D as the map is a 3 dimensional array with grid tiles being able to be placed behind each other. It is however rendered in 2D. All scripts in the game will need to be quite efficient as I am looking to release it for android.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1106953117]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am currently working on a 2D grid based sandbox type game. Technically its 3D as the map is a 3 dimensional array with grid tiles being able to be placed behind each other. It is however rendered in 2D. All scripts in the game will need to be quite efficient as I am looking to release it for android.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "map":1,
                  "effici":1,
                  "work":1,
                  "grid":2,
                  "base":1,
                  "array":1,
                  "releas":1,
                  "sandbox":1,
                  "technic":1,
                  "script":1,
                  "type":1,
                  "render":1,
                  "game":2,
                  "dimension":1,
                  "tile":1,
                  "android":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The game will have a major wiring mechanic that allows players to connect machines up to electrical sources using wire. I need an efficient way to calculate all entities connected by the wire for every circuit. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1145906249]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The game will have a major wiring mechanic that allows players to connect machines up to electrical sources using wire. I need an efficient way to calculate all entities connected by the wire for every circuit. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "connect":2,
                  "effici":1,
                  "calcul":1,
                  "wire":3,
                  "player":1,
                  "machin":1,
                  "circuit":1,
                  "electr":1,
                  "mechan":1,
                  "entiti":1,
                  "game":1,
                  "sourc":1,
                  "major":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The only failsafe way I can think of is using a flood fill algorithm to spread out from one point and record all connected objects, but I feel this would be too inefficient for an android app.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-1332459291]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The only failsafe way I can think of is using a flood fill algorithm to spread out from one point and record all connected objects, but I feel this would be too inefficient for an android app.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "feel":1,
                  "spread":1,
                  "point":1,
                  "connect":1,
                  "object":1,
                  "algorithm":1,
                  "failsaf":1,
                  "fill":1,
                  "ineffici":1,
                  "app":1,
                  "record":1,
                  "flood":1,
                  "android":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here is some information on the structure of the game and the wire.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1921786415]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here is some information on the structure of the game and the wire.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "game":1,
                  "wire":1,
                  "structur":1,
                  "inform":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>The game is being written in java.</li> \n <li>All objects are currently static. </li> \n <li>Every object is held in an array that reflects the objects position. Adjacent objects and their variables can be accessed simply be referencing the x/y values in the array.This means adjacent blocks can be updated as needed.</li> \n <li>Wire can be placed an removed at will by the player, and may follow any pattern.</li> \n <li>Wire can connect on all x/y/z axis' to other wire and machinery. </li> \n <li>Certain objects will output power and others will use power.</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-203753803]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>The game is being written in java.</li> \n <li>All objects are currently static. </li> \n <li>Every object is held in an array that reflects the objects position. Adjacent objects and their variables can be accessed simply be referencing the x/y values in the array.This means adjacent blocks can be updated as needed.</li> \n <li>Wire can be placed an removed at will by the player, and may follow any pattern.</li> \n <li>Wire can connect on all x/y/z axis' to other wire and machinery. </li> \n <li>Certain objects will output power and others will use power.</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "remov":1,
                  "pattern":1,
                  "connect":1,
                  "held":1,
                  "adjac":2,
                  "axi":1,
                  "updat":1,
                  "mean":1,
                  "wire":3,
                  "object":5,
                  "array":2,
                  "block":1,
                  "need":1,
                  "player":1,
                  "simpli":1,
                  "machineri":1,
                  "written":1,
                  "valu":1,
                  "posit":1,
                  "power":2,
                  "output":1,
                  "variabl":1,
                  "game":1,
                  "reflect":1,
                  "referenc":1,
                  "access":1,
                  "follow":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Im currently thinking along the lines of having wireGroup objects that contain all connected objects for a group of wires including the wires themselves. Each wire object would contain the wireGroup ID allowing new wires(and machines) to be easily added to the wireGroup.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1665886157]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Im currently thinking along the lines of having wireGroup objects that contain all connected objects for a group of wires including the wires themselves. Each wire object would contain the wireGroup ID allowing new wires(and machines) to be easily added to the wireGroup.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroup",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroup",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroup",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "connect":1,
                  "line":1,
                  "wire":7,
                  "object":3,
                  "includ":1,
                  "easili":1,
                  "machin":1,
                  "allow":1,
                  "think":1,
                  "ad":1,
                  "group":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>All I really need is a way to detect connected objects when a piece of wire is removed. Detecting connected objects when it is being placed is simple: Just add any machinery next to the new wire to the list in the adjacent wire's wireGroup.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1846184401]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>All I really need is a way to detect connected objects when a piece of wire is removed. Detecting connected objects when it is being placed is simple: Just add any machinery next to the new wire to the list in the adjacent wire's wireGroup.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroup",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "remov":1,
                  "simpl":1,
                  "connect":2,
                  "detect":2,
                  "adjac":1,
                  "wire":4,
                  "object":2,
                  "machineri":1,
                  "piec":1,
                  "add":1,
                  "group":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The problem comes about when removing wire. Since their may be 7 or 8 unique wire paths connecting two objects together, it is difficult to find the effect of removing one wire.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1276162211]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The problem comes about when removing wire. Since their may be 7 or 8 unique wire paths connecting two objects together, it is difficult to find the effect of removing one wire.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "uniqu":1,
                  "remov":2,
                  "path":1,
                  "connect":1,
                  "problem":1,
                  "effect":1,
                  "wire":3,
                  "object":1,
                  "difficult":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For example:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-1097037390]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For example:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><img src=\"http://i.stack.imgur.com/czLuv.png\"alt=\"EG1\"/></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-559310975]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><img src=\"http://i.stack.imgur.com/czLuv.png\"alt=\"EG1\"/></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "imgur":1,
                  "png":1,
                  "img":1,
                  "luv":1,
                  "alt":1,
                  "src":1,
                  "stack":1,
                  "http":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here you can see that no changes will take place to the connected objects.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[2093898171]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here you can see that no changes will take place to the connected objects.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "object":1,
                  "connect":1,
                  "place":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><img src=\"http://i.stack.imgur.com/jcMOJ.png\"alt=\"EG2\"/></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[1741077721]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><img src=\"http://i.stack.imgur.com/jcMOJ.png\"alt=\"EG2\"/></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "imgur":1,
                  "png":1,
                  "img":1,
                  "moj":1,
                  "alt":1,
                  "src":1,
                  "stack":1,
                  "http":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>And here the wireGroup will be split into two wireGroups, one containing the blue and bottom white, and one containing the two whites.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-1634956067]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>And here the wireGroup will be split into two wireGroups, one containing the blue and bottom white, and one containing the two whites.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroup",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"wireGroups",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "blue":1,
                  "bottom":1,
                  "wire":2,
                  "split":1,
                  "white":2,
                  "group":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Even if someone can come up with a 2D only algorithm, that would still be fantastic.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[-543533817]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Even if someone can come up with a 2D only algorithm, that would still be fantastic.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "algorithm":1,
                  "fantast":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm sorry If I've missed anything important, please do tell me so I can remedy it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15696720]-[124026952]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm sorry If I've missed anything important, please do tell me so I can remedy it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "import":1,
                  "remedi":1,
                  "miss":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":15697151,
      "questionId":15696720,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":22289463,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So essentially: On placement, check for state change. If there is a state change, flood fill check all connected nodes and change their states accordingly? EDIT: Could you please clarify this part: &quot;If either of the **endpoint nodes now have an empty powered set of connections**, walk the graph from that node turning everyone off.&quot;"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289463]-[-794479538]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So essentially: On placement, check for state change. If there is a state change, flood fill check all connected nodes and change their states accordingly? EDIT: Could you please clarify this part: &quot;If either of the **endpoint nodes now have an empty powered set of connections**, walk the graph from that node turning everyone off.&quot;"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":3,
                        "connect":2,
                        "state":3,
                        "set":1,
                        "walk":1,
                        "edit":1,
                        "placement":1,
                        "check":2,
                        "fill":1,
                        "empti":1,
                        "turn":1,
                        "endpoint":1,
                        "quot":2,
                        "graph":1,
                        "node":3,
                        "part":1,
                        "power":1,
                        "clarifi":1,
                        "essenti":1,
                        "flood":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22289501,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"There won't be any check, but you do have to visit them. If any node in a sub graph changes state, all it's still connected neighbors must change state as well."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289501]-[-351488082]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"There won't be any check, but you do have to visit them. If any node in a sub graph changes state, all it's still connected neighbors must change state as well."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "neighbor":1,
                        "connect":1,
                        "state":2,
                        "check":1,
                        "visit":1,
                        "graph":1,
                        "node":1,
                        "won":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22289526,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1541005,
            "displayName":"Gabriel Netto",
            "reputation":1366
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Very elegant and simple."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289526]-[1301089863]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Very elegant and simple."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "eleg":1,
                        "simpl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22289606,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Zwander added a clarification that there are two sets of 'wires' for each node. One of them is wires transmitting power to this node, thus the &quot;powered&quot; set."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289606]-[609550951]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Zwander added a clarification that there are two sets of 'wires' for each node. One of them is wires transmitting power to this node, thus the &quot;powered&quot; set."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Zwander",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "transmit":1,
                        "set":2,
                        "wire":2,
                        "ad":1,
                        "quot":2,
                        "node":2,
                        "zwander":1,
                        "power":2,
                        "clarif":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22289698,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@sharakan Sorry im having some trouble getting my head around this :P Are you saying that every wire node in the whole 'map' will all be represented in two graphs, powered and unpowered? Or are you saying each node has its own 'graph' that represents all nodes it is connected to?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289698]-[-1005647477]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@sharakan Sorry im having some trouble getting my head around this :P Are you saying that every wire node in the whole 'map' will all be represented in two graphs, powered and unpowered? Or are you saying each node has its own 'graph' that represents all nodes it is connected to?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "connect":1,
                        "map":1,
                        "head":1,
                        "wire":1,
                        "troubl":1,
                        "unpow":1,
                        "graph":2,
                        "node":3,
                        "power":1,
                        "sharakan":1,
                        "repres":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22289843,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Zwander No... I updated the answer to try and clarify the data structures involved."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22289843]-[-2115826712]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Zwander No... I updated the answer to try and clarify the data structures involved."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Zwander",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "involv":1,
                        "data":1,
                        "updat":1,
                        "structur":1,
                        "answer":1,
                        "zwander":1,
                        "clarifi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22290014,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@sharakan Ok, got it. Heres the only part I dont understand.. When removing a powered node, all surrounding nodes are in the powered state. Say there are 4 nodes in a vertical line, the top being a power source and the rest being wires. If you remove the 2nd one down, the third one will not change state as the 4th is still in its 'powered' list, and thus it does not have an empty powered set."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22290014]-[1824451880]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@sharakan Ok, got it. Heres the only part I dont understand.. When removing a powered node, all surrounding nodes are in the powered state. Say there are 4 nodes in a vertical line, the top being a power source and the rest being wires. If you remove the 2nd one down, the third one will not change state as the 4th is still in its 'powered' list, and thus it does not have an empty powered set."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "remov":2,
                        "state":2,
                        "line":1,
                        "rest":1,
                        "set":1,
                        "understand":1,
                        "dont":1,
                        "vertic":1,
                        "wire":1,
                        "here":1,
                        "empti":1,
                        "node":3,
                        "part":1,
                        "power":5,
                        "sharakan":1,
                        "sourc":1,
                        "top":1,
                        "list":1,
                        "surround":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22290059,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Zwander I see the confusion. I would say that a 'wire' is not a 'node'. In your example, think of four nodes: a power source (one node) and three other nodes that are empty, and three wires connecting them. The power source has a single wire (in it's 'unpowered' set), the next two nodes have two wires (one in each set), the last has one wire (in &quot;powered&quot;). So disconnecting the second wire will make the third node go unpowered, which cascades to the fourth."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22290059]-[1777804691]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Zwander I see the confusion. I would say that a 'wire' is not a 'node'. In your example, think of four nodes: a power source (one node) and three other nodes that are empty, and three wires connecting them. The power source has a single wire (in it's 'unpowered' set), the next two nodes have two wires (one in each set), the last has one wire (in &quot;powered&quot;). So disconnecting the second wire will make the third node go unpowered, which cascades to the fourth."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Zwander",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "fourth":1,
                        "singl":1,
                        "disconnect":1,
                        "connect":1,
                        "set":2,
                        "cascad":1,
                        "wire":6,
                        "empti":1,
                        "unpow":2,
                        "make":1,
                        "quot":2,
                        "node":6,
                        "confus":1,
                        "zwander":1,
                        "power":3,
                        "sourc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22290197,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@sharakan Why is the wire connecting the power source to the first empty node unpowered?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22290197]-[-1091001121]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@sharakan Why is the wire connecting the power source to the first empty node unpowered?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "connect":1,
                        "wire":1,
                        "empti":1,
                        "unpow":1,
                        "node":1,
                        "power":1,
                        "sharakan":1,
                        "sourc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22290266,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Zwander My thought was because the power is going *from* the power source node *to* the first node. From the point of view of the power source node, it is not bringing in power. From the point of view of the first node, it is bringing in power. You've made me realize though that this idea has a problem with cycles in the graph, which I'm not sure how to resolve immediately. I take it you have to handle cycles?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22290266]-[1975401039]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Zwander My thought was because the power is going *from* the power source node *to* the first node. From the point of view of the power source node, it is not bringing in power. From the point of view of the first node, it is bringing in power. You've made me realize though that this idea has a problem with cycles in the graph, which I'm not sure how to resolve immediately. I take it you have to handle cycles?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Zwander",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "resolv":1,
                        "point":2,
                        "thought":1,
                        "problem":1,
                        "idea":1,
                        "bring":2,
                        "graph":1,
                        "node":4,
                        "zwander":1,
                        "power":5,
                        "immedi":1,
                        "cycl":2,
                        "made":1,
                        "sourc":2,
                        "handl":1,
                        "realiz":1,
                        "view":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22290317,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@sharakan What do you mean by cycles? As in the node connections looping back upon themselves? Essentially you have made a directional current which is of no use because multiple power sources means multi-directional currents."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22290317]-[-288075166]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@sharakan What do you mean by cycles? As in the node connections looping back upon themselves? Essentially you have made a directional current which is of no use because multiple power sources means multi-directional currents."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "loop":1,
                        "connect":1,
                        "mean":1,
                        "direct":2,
                        "back":1,
                        "node":1,
                        "power":1,
                        "sharakan":1,
                        "cycl":1,
                        "current":2,
                        "multipl":1,
                        "made":1,
                        "essenti":1,
                        "sourc":1,
                        "multi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22337441,
          "postId":15697151,
          "creationDate":"2013-03-30",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@sharakan Yea, I have thought about this quite a bit and thats the conclusion I came to. Hence why I posted this thread. Im fairly sure the only way to make it more efficient is to make the initial 'check to flood fill' as narrow as possible to avoid unnecessary flood filling. The only other way I can think of is by running an algorithm that calculates the number of unique paths (or bottlenecks even) from point x to point y, however I doubt that would be any more efficient. By bottlenecks I mean the number of places where breaking the wire would cause a change to at least one node."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22337441]-[1128777116]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@sharakan Yea, I have thought about this quite a bit and thats the conclusion I came to. Hence why I posted this thread. Im fairly sure the only way to make it more efficient is to make the initial 'check to flood fill' as narrow as possible to avoid unnecessary flood filling. The only other way I can think of is by running an algorithm that calculates the number of unique paths (or bottlenecks even) from point x to point y, however I doubt that would be any more efficient. By bottlenecks I mean the number of places where breaking the wire would cause a change to at least one node."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":2,
                        "chang":1,
                        "post":1,
                        "uniqu":1,
                        "fair":1,
                        "point":2,
                        "bit":1,
                        "break":1,
                        "path":1,
                        "thought":1,
                        "run":1,
                        "effici":2,
                        "calcul":1,
                        "avoid":1,
                        "wire":1,
                        "thread":1,
                        "conclus":1,
                        "algorithm":1,
                        "check":1,
                        "fill":2,
                        "doubt":1,
                        "make":2,
                        "yea":1,
                        "initi":1,
                        "place":1,
                        "node":1,
                        "bottleneck":2,
                        "sharakan":1,
                        "narrow":1,
                        "unnecessari":1,
                        "flood":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22309011,
          "postId":15697151,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":263149,
            "displayName":"sharakan",
            "reputation":4384
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Zwander Agreed. Because of that you can demonstrate that this solution won't work with just a power source, and two other nodes... I feel that you can't get much more efficient than simply walking the graph from the power sources upon re-wiring (flood filling, basically), but I'd like to see if someone with more graph theory than me has thoughts. I'll offer a bounty if no one else answers in the next day or two."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15697151-cu22309011]-[624009245]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Zwander Agreed. Because of that you can demonstrate that this solution won't work with just a power source, and two other nodes... I feel that you can't get much more efficient than simply walking the graph from the power sources upon re-wiring (flood filling, basically), but I'd like to see if someone with more graph theory than me has thoughts. I'll offer a bounty if no one else answers in the next day or two."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Zwander",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "feel":1,
                        "thought":1,
                        "effici":1,
                        "walk":1,
                        "demonstr":1,
                        "bounti":1,
                        "work":1,
                        "wire":1,
                        "theori":1,
                        "simpli":1,
                        "fill":1,
                        "agre":1,
                        "answer":1,
                        "graph":2,
                        "offer":1,
                        "node":1,
                        "zwander":1,
                        "power":2,
                        "basic":1,
                        "sourc":2,
                        "day":1,
                        "solut":1,
                        "won":1,
                        "flood":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-03-29",
      "lastActivityDate":"2013-03-29",
      "lastEditDate":"2013-03-29",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":263149,
        "displayName":"sharakan",
        "reputation":4384
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Think of all your 'connectable' points (whether empty, a power source, or a machine) as nodes in a (disconnected) graph. A wire can connect two nodes. Say that each node keeps track of the wires connected to it, and thinks about each wire as being one of two types: &quot;powered&quot; and &quot;unpowered&quot;, where &quot;powered&quot; wires are those that are transmitting power to this node. Each node tracks these in a pair of sets. A node is &quot;powered&quot; if it has any wires in the &quot;powered&quot; set, or if it itself is a power source.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15697151]-[1824647122]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Think of all your 'connectable' points (whether empty, a power source, or a machine) as nodes in a (disconnected) graph. A wire can connect two nodes. Say that each node keeps track of the wires connected to it, and thinks about each wire as being one of two types: &quot;powered&quot; and &quot;unpowered&quot;, where &quot;powered&quot; wires are those that are transmitting power to this node. Each node tracks these in a pair of sets. A node is &quot;powered&quot; if it has any wires in the &quot;powered&quot; set, or if it itself is a power source.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "disconnect":1,
                    "point":1,
                    "connect":3,
                    "transmit":1,
                    "set":2,
                    "track":2,
                    "wire":5,
                    "machin":1,
                    "think":1,
                    "empti":1,
                    "unpow":1,
                    "quot":10,
                    "graph":1,
                    "node":6,
                    "pair":1,
                    "power":7,
                    "type":1,
                    "sourc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So the interesting question is, how to handle adding or removing a wire:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15697151]-[851444960]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So the interesting question is, how to handle adding or removing a wire:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "remov":1,
                    "wire":1,
                    "interest":1,
                    "ad":1,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When a wire is placed between two nodes, for each of the two nodes place it in either the powered or unpowered set, depending on the &quot;power&quot; status of the other node. If as a result, this node goes from unpowered to powered, walk the graph changing the states of nodes and wires appropriately by moving wires from &quot;unpowered&quot; to &quot;powered&quot;.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15697151]-[-1462134057]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When a wire is placed between two nodes, for each of the two nodes place it in either the powered or unpowered set, depending on the &quot;power&quot; status of the other node. If as a result, this node goes from unpowered to powered, walk the graph changing the states of nodes and wires appropriately by moving wires from &quot;unpowered&quot; to &quot;powered&quot;.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "move":1,
                    "depend":1,
                    "state":1,
                    "result":1,
                    "set":1,
                    "walk":1,
                    "wire":3,
                    "status":1,
                    "unpow":3,
                    "quot":6,
                    "place":1,
                    "graph":1,
                    "node":5,
                    "power":4,
                    "appropri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If a wire is removed, remove it from the sets of connected wires it exists in. If either of the endpoint nodes now have an empty &quot;powered&quot; set of connections, walk the graph from that node turning everyone off.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15697151]-[2065005047]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If a wire is removed, remove it from the sets of connected wires it exists in. If either of the endpoint nodes now have an empty &quot;powered&quot; set of connections, walk the graph from that node turning everyone off.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "remov":2,
                    "exist":1,
                    "connect":2,
                    "set":2,
                    "walk":1,
                    "wire":2,
                    "empti":1,
                    "turn":1,
                    "endpoint":1,
                    "quot":2,
                    "graph":1,
                    "node":2,
                    "power":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This should handle multiple powered inputs very efficiently, only having to visit multiple nodes if their state changes. And if a state changes for any node in a subgraph, then it is changing for <strong>all</strong> the nodes in the subgraph.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15697151]-[-240202990]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This should handle multiple powered inputs very efficiently, only having to visit multiple nodes if their state changes. And if a state changes for any node in a subgraph, then it is changing for <strong>all</strong> the nodes in the subgraph.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "state":2,
                    "effici":1,
                    "strong":2,
                    "subgraph":2,
                    "visit":1,
                    "node":3,
                    "power":1,
                    "multipl":2,
                    "handl":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":15696755,
      "questionId":15696720,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":22288825,
          "postId":15696755,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"To be honest I dont know much about linked lists, but from what i do know, I dont believe it will solve the multi-path problem. When taking a segment it will only tell me the next node and the previous node if I'm doing a double linked list. Unless I flood check the whole list it will still give the same issues. Not only that, linked list only go two ways do they not? A wire can be linked to up to 6 other nodes if we are talking 3D, or 4 if we are talking 2D."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22288825]-[858599312]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"To be honest I dont know much about linked lists, but from what i do know, I dont believe it will solve the multi-path problem. When taking a segment it will only tell me the next node and the previous node if I'm doing a double linked list. Unless I flood check the whole list it will still give the same issues. Not only that, linked list only go two ways do they not? A wire can be linked to up to 6 other nodes if we are talking 3D, or 4 if we are talking 2D."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "path":1,
                        "problem":1,
                        "previous":1,
                        "dont":2,
                        "talk":2,
                        "issu":1,
                        "way":1,
                        "segment":1,
                        "wire":1,
                        "check":1,
                        "take":1,
                        "link":4,
                        "give":1,
                        "node":3,
                        "honest":1,
                        "multi":1,
                        "flood":1,
                        "list":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22288829,
          "postId":15696755,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1124794,
            "displayName":"Mozoby",
            "reputation":741
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Editted to give an implementable solution."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22288829]-[2019637792]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Editted to give an implementable solution."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "give":1,
                        "edit":1,
                        "solut":1,
                        "implement":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22288896,
          "postId":15696755,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ok, comments on the post-edited answer. There may be multiple power sources. This should not be a problem though as when the tree is crawled it will locate these and add them to the total power output for the circuit. However, as you are essentially doing a flood fill check, it is still quite inefficient. The usage of pathfinding algorithm was incorrect in my post, I will change it to flood fill. Sorry about that."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22288896]-[1107776227]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ok, comments on the post-edited answer. There may be multiple power sources. This should not be a problem though as when the tree is crawled it will locate these and add them to the total power output for the circuit. However, as you are essentially doing a flood fill check, it is still quite inefficient. The usage of pathfinding algorithm was incorrect in my post, I will change it to flood fill. Sorry about that."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "post":2,
                        "pathfind":1,
                        "problem":1,
                        "total":1,
                        "crawl":1,
                        "edit":1,
                        "algorithm":1,
                        "check":1,
                        "incorrect":1,
                        "circuit":1,
                        "fill":2,
                        "comment":1,
                        "answer":1,
                        "ineffici":1,
                        "usag":1,
                        "tree":1,
                        "power":2,
                        "output":1,
                        "multipl":1,
                        "add":1,
                        "essenti":1,
                        "sourc":1,
                        "locat":1,
                        "flood":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22294333,
          "postId":15696755,
          "creationDate":"2013-03-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1124794,
            "displayName":"Mozoby",
            "reputation":741
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This should be rather more efficient and able to handle your situation."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22294333]-[-1836940711]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This should be rather more efficient and able to handle your situation."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "situat":1,
                        "handl":1,
                        "effici":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22344757,
          "postId":15696755,
          "creationDate":"2013-03-31",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1124794,
            "displayName":"Mozoby",
            "reputation":741
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"this model supports multi-directional currents.. Each wire can have multiple directional currents running through it. This is the closest thing to a visualization i could find. http://pages.cpsc.ucalgary.ca/~jacobs/Courses/cpsc331/W12/tutorials/Figures/directed_graph_example1.gif"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22344757]-[-1452225542]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"this model supports multi-directional currents.. Each wire can have multiple directional currents running through it. This is the closest thing to a visualization i could find. http://pages.cpsc.ucalgary.ca/~jacobs/Courses/cpsc331/W12/tutorials/Figures/directed_graph_example1.gif"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"IdentifierNode",
                        "name":"directed_graph_example1",
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "support":1,
                        "ucalgari":1,
                        "model":1,
                        "run":1,
                        "page":1,
                        "thing":1,
                        "wire":1,
                        "direct":3,
                        "jacob":1,
                        "cpsc":2,
                        "gif":1,
                        "visual":1,
                        "cours":1,
                        "figur":1,
                        "graph":1,
                        "current":2,
                        "http":1,
                        "tutori":1,
                        "multipl":1,
                        "closest":1,
                        "multi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22337524,
          "postId":15696755,
          "creationDate":"2013-03-30",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You are using directional currents. Currents will end up being multi-directional with multiple power sources. However, your suggestion has made me consider a different approach to this. Each power source could contain its own directional power output array. However, this would make it interesting to directly reference individual nodes. Each node would have to contain an array list corresponding to each power source in the order they were added. This would require a numerical flood fill like the one used in A* pathfinding. Im not 100% sure this would work, or that it would be any more efficient"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22337524]-[-1975182389]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You are using directional currents. Currents will end up being multi-directional with multiple power sources. However, your suggestion has made me consider a different approach to this. Each power source could contain its own directional power output array. However, this would make it interesting to directly reference individual nodes. Each node would have to contain an array list corresponding to each power source in the order they were added. This would require a numerical flood fill like the one used in A* pathfinding. Im not 100% sure this would work, or that it would be any more efficient"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pathfind":1,
                        "requir":1,
                        "suggest":1,
                        "individu":1,
                        "effici":1,
                        "numer":1,
                        "work":1,
                        "direct":4,
                        "array":2,
                        "interest":1,
                        "order":1,
                        "fill":1,
                        "refer":1,
                        "make":1,
                        "approach":1,
                        "end":1,
                        "ad":1,
                        "node":2,
                        "power":4,
                        "output":1,
                        "current":2,
                        "multipl":1,
                        "made":1,
                        "sourc":3,
                        "multi":1,
                        "flood":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22546927,
          "postId":15696755,
          "creationDate":"2013-04-05",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2223015,
            "displayName":"Zwander",
            "reputation":66
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What about this situation: [link](http://i.stack.imgur.com/ABBTK.png) If you remove b2, c2 is still being powered by c3 and d2 due to the split currents converging after looping around. They must loop around otherwise removing a wire from c3 will cause everything to power off when it isnt meant to."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15696755-cu22546927]-[-1639223412]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What about this situation: [link](http://i.stack.imgur.com/ABBTK.png) If you remove b2, c2 is still being powered by c3 and d2 due to the split currents converging after looping around. They must loop around otherwise removing a wire from c3 will cause everything to power off when it isnt meant to."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "imgur":1,
                        "due":1,
                        "remov":2,
                        "loop":2,
                        "png":1,
                        "converg":1,
                        "isnt":1,
                        "wire":1,
                        "meant":1,
                        "situat":1,
                        "split":1,
                        "link":1,
                        "stack":1,
                        "abbtk":1,
                        "power":2,
                        "current":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-03-29",
      "lastActivityDate":"2013-03-29",
      "lastEditDate":"2013-03-29",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1124794,
        "displayName":"Mozoby",
        "reputation":741
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Imagine that each node either supplies or receives power. Each wire carries with it one or more directions in which power travels (from power source to element). Two connected power sources would have one wire represented by two internal connections. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15696755]-[114263165]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Imagine that each node either supplies or receives power. Each wire carries with it one or more directions in which power travels (from power source to element). Two connected power sources would have one wire represented by two internal connections. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "receiv":1,
                    "connect":2,
                    "carri":1,
                    "wire":2,
                    "element":1,
                    "direct":1,
                    "travel":1,
                    "imagin":1,
                    "node":1,
                    "power":4,
                    "suppli":1,
                    "sourc":2,
                    "repres":1,
                    "intern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So you have a directed graph of power. Upon removing a wire, all associated internal connections are removed. Check all nodes which the removal of the wire affected to see if they have any incoming connections. If there are none and the node was previously powered, then you must walk the graph from that point and depower every node. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15696755]-[332987236]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So you have a directed graph of power. Upon removing a wire, all associated internal connections are removed. Check all nodes which the removal of the wire affected to see if they have any incoming connections. If there are none and the node was previously powered, then you must walk the graph from that point and depower every node. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "remov":3,
                    "point":1,
                    "connect":2,
                    "previous":1,
                    "walk":1,
                    "affect":1,
                    "wire":2,
                    "direct":1,
                    "check":1,
                    "depow":1,
                    "incom":1,
                    "graph":2,
                    "node":3,
                    "power":2,
                    "intern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Adding a wire is also simple, you check the power state of both nodes. Each node that is powered builds an internal connection in the direction of the other node. Then the graph must be walked from the other node building outward connections at every node. If neither are powered build a directionless connection which may be changed on the event of power. This allows for multiple power sources quite efficiently.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15696755]-[261635630]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Adding a wire is also simple, you check the power state of both nodes. Each node that is powered builds an internal connection in the direction of the other node. Then the graph must be walked from the other node building outward connections at every node. If neither are powered build a directionless connection which may be changed on the event of power. This allows for multiple power sources quite efficiently.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "simpl":1,
                    "connect":3,
                    "state":1,
                    "event":1,
                    "directionless":1,
                    "effici":1,
                    "walk":1,
                    "build":3,
                    "outward":1,
                    "wire":1,
                    "direct":1,
                    "check":1,
                    "ad":1,
                    "graph":1,
                    "node":5,
                    "power":5,
                    "multipl":1,
                    "sourc":1,
                    "intern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}