{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7649900,
    "title":"Check the arguments for all annotated methods at runtime",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":9293415,
        "postId":7649900,
        "creationDate":"2011-10-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":685923,
          "displayName":"Ed Staub",
          "reputation":7937
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This will require you to load all these classes at startup. Is the effect on startup time acceptable?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7649900-cu9293415]-[58284239]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This will require you to load all these classes at startup. Is the effect on startup time acceptable?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "accept":1,
                      "startup":2,
                      "requir":1,
                      "effect":1,
                      "load":1,
                      "class":1,
                      "time":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9293694,
        "postId":7649900,
        "creationDate":"2011-10-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":685923,
          "displayName":"Ed Staub",
          "reputation":7937
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Can you provide some insight into the nature of the &quot;operation&quot; strings? What control do you have over them? Could they be constrained, say, to be valid Java names (no dashes, et al)? Is there a set of them that's valid globally across the system? Could this set be compiled as an enum - then use enum values in your @Protect? Etc..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7649900-cu9293694]-[-271914700]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Can you provide some insight into the nature of the &quot;operation&quot; strings? What control do you have over them? Could they be constrained, say, to be valid Java names (no dashes, et al)? Is there a set of them that's valid globally across the system? Could this set be compiled as an enum - then use enum values in your @Protect? Etc..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Protect",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "provid":1,
                      "insight":1,
                      "name":1,
                      "natur":1,
                      "system":1,
                      "set":2,
                      "string":1,
                      "oper":1,
                      "global":1,
                      "dash":1,
                      "valu":1,
                      "valid":2,
                      "quot":2,
                      "control":1,
                      "protect":1,
                      "compil":1,
                      "constrain":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9294159,
        "postId":7649900,
        "creationDate":"2011-10-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":106342,
          "displayName":"espinchi",
          "reputation":1655
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Ed, I've updated the question with a clarification on the arguments of the annotations. I don't have control over them. The startup time can take long, it wouldn't be an issue. But you raise an interesting point there. On the other hand, you could access the pointcut expression and do the same search as the AspectJ engine does, which I assume is pretty inexpensive."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7649900-cu9294159]-[290550727]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Ed, I've updated the question with a clarification on the arguments of the annotations. I don't have control over them. The startup time can take long, it wouldn't be an issue. But you raise an interesting point there. On the other hand, you could access the pointcut expression and do the same search as the AspectJ engine does, which I assume is pretty inexpensive."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "assum":1,
                      "inexpens":1,
                      "point":1,
                      "startup":1,
                      "hand":1,
                      "pointcut":1,
                      "updat":1,
                      "aspect":1,
                      "issu":1,
                      "pretti":1,
                      "engin":1,
                      "interest":1,
                      "annot":1,
                      "rais":1,
                      "wouldn":1,
                      "express":1,
                      "control":1,
                      "time":1,
                      "argument":1,
                      "clarif":1,
                      "access":1,
                      "search":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "spring",
      "annotations",
      "aspectj",
      "interceptor"
    ],
    "creationDate":"2011-10-04",
    "lastActivityDate":"2011-10-05",
    "lastEditDate":"2011-10-04",
    "score":0,
    "viewCount":214,
    "owner":{
      "type":"StackOverflowUser",
      "id":106342,
      "displayName":"espinchi",
      "reputation":1655
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>How can you perform a check at startup-time on all the usages of an annotation?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7649900]-[1512443953]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>How can you perform a check at startup-time on all the usages of an annotation?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "startup":1,
                  "check":1,
                  "annot":1,
                  "perform":1,
                  "usag":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For instance, I have this aspect, that is applied to the methods annotated with <code>@Protect</code>, that applies some security policy. Across the system, we have methods annotated with <code>@Protect(&quot;valid-operation-1&quot;)</code>, <code>@Protect(&quot;valid-operation-2&quot;)</code> or <code>@Protect(&quot;INVALID-operation&quot;)</code>. As soon as the application starts up, I'd like to check the arguments provided for all these annotations in order to detect such misconfigurations.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7649900]-[-323700185]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For instance, I have this aspect, that is applied to the methods annotated with <code>@Protect</code>, that applies some security policy. Across the system, we have methods annotated with <code>@Protect(&quot;valid-operation-1&quot;)</code>, <code>@Protect(&quot;valid-operation-2&quot;)</code> or <code>@Protect(&quot;INVALID-operation&quot;)</code>. As soon as the application starts up, I'd like to check the arguments provided for all these annotations in order to detect such misconfigurations.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Protect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Protect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "element":{
                    "type":"ElementValueNode",
                    "value":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"valid-operation-1\""
                      },
                      "comments":[
                        
                      ]
                    }
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Protect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "element":{
                    "type":"ElementValueNode",
                    "value":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"valid-operation-2\""
                      },
                      "comments":[
                        
                      ]
                    }
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Protect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "element":{
                    "type":"ElementValueNode",
                    "value":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"INVALID-operation\""
                      },
                      "comments":[
                        
                      ]
                    }
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "provid":1,
                  "method":2,
                  "misconfigur":1,
                  "system":1,
                  "detect":1,
                  "aspect":1,
                  "secur":1,
                  "code":8,
                  "oper":3,
                  "check":1,
                  "annot":3,
                  "invalid":1,
                  "order":1,
                  "polici":1,
                  "applic":1,
                  "valid":2,
                  "quot":6,
                  "protect":4,
                  "appli":2,
                  "start":1,
                  "argument":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In particular, I'll check that we have a bean defined in the Spring application context whose ID matches the argument of the annotation. That means, to protect the method <code>void drive()</code>, I'll annotate with <code>@Protect(&quot;drive&quot;)</code>, and expect a bean <code>protect_drive</code> to be present in the application context.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7649900]-[-1270112327]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In particular, I'll check that we have a bean defined in the Spring application context whose ID matches the argument of the annotation. That means, to protect the method <code>void drive()</code>, I'll annotate with <code>@Protect(&quot;drive&quot;)</code>, and expect a bean <code>protect_drive</code> to be present in the application context.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Protect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "element":{
                    "type":"ElementValueNode",
                    "value":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"drive\""
                      },
                      "comments":[
                        
                      ]
                    }
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"protect_drive",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "drive":3,
                  "method":1,
                  "context":2,
                  "present":1,
                  "mean":1,
                  "spring":1,
                  "match":1,
                  "code":6,
                  "bean":2,
                  "check":1,
                  "annot":2,
                  "expect":1,
                  "applic":2,
                  "quot":2,
                  "protect":3,
                  "defin":1,
                  "argument":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>You can easily just wait until the method is invoked, then the advice is called, and you check the argument. Then you'll see that <code>INVALID-operation</code> is wrongly defined. But this is <em>too late</em>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7649900]-[-1490308665]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>You can easily just wait until the method is invoked, then the advice is called, and you check the argument. Then you'll see that <code>INVALID-operation</code> is wrongly defined. But this is <em>too late</em>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "wait":1,
                  "late":1,
                  "wrong":1,
                  "advic":1,
                  "invok":1,
                  "code":2,
                  "easili":1,
                  "oper":1,
                  "check":1,
                  "invalid":1,
                  "defin":1,
                  "call":1,
                  "argument":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible to have this checked for all annotated methods when the application starts?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7649900]-[350090616]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible to have this checked for all annotated methods when the application starts?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "check":1,
                  "annot":1,
                  "applic":1,
                  "start":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7660508,
      "questionId":7649900,
      "comments":[
        
      ],
      "creationDate":"2011-10-05",
      "lastActivityDate":"2011-10-05",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":280244,
        "displayName":"Ralph",
        "reputation":48766
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the Classes you want to check are Spring Beans, then you can use a <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-factory-extension-bpp\"rel=\"nofollow\">BeanPostProcessor</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7660508]-[385107481]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the Classes you want to check are Spring Beans, then you can use a <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-factory-extension-bpp\"rel=\"nofollow\">BeanPostProcessor</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BeanPostProcessor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "post":1,
                    "springsourc":1,
                    "rel":1,
                    "spring":4,
                    "bpp":1,
                    "framework":2,
                    "doc":1,
                    "factori":1,
                    "htmlsingl":1,
                    "nofollow":1,
                    "bean":3,
                    "check":1,
                    "processor":1,
                    "refer":2,
                    "class":1,
                    "org":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "extens":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BeanPostProcessor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public class OnlyAScratchForAnPostProcessor { @Inject private ApplicationContext context; @Override public Object postProcessAfterInitialization(final Object bean, final String beanName) throws BeansException { ReflectionUtils.doWithMethods(bean.getClass(), new MethodCallback() { @Override public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException { String expecedNameFromAnnotation = scanAnnotation(method); if(expecedNameFromAnnotation != null) { if(context.beanByName(expecedNameFromAnnotation) != null) { throw new RuntimeException(&quot;illegal configuration&quot;); } } } String scanAnnotation(Method method){...} }, ReflectionUtils.USER_DECLARED_METHODS); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[7660508]-[2127879195]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"OnlyAScratchForAnPostProcessor",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Inject",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"context",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"ApplicationContext",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"TextFragmentNode",
                              "text":"@Override public Object postProcessAfterInitialization(final Object bean, final String beanName) throws BeansException { ReflectionUtils.doWithMethods(bean.getClass(), new MethodCallback() { @Override public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException "
                            },
                            {
                              "type":"BlockDeclarationNode",
                              "modifiers":[
                                
                              ],
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"expecedNameFromAnnotation",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"MethodInvocationNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"scanAnnotation",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"method",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"String",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IfStatementNode",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"!=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"expecedNameFromAnnotation",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"NullLiteralNode"
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"IfStatementNode",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"!=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"MethodInvocationNode",
                                              "qualifiedIdentifier":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"context",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"beanByName",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "args":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"expecedNameFromAnnotation",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"NullLiteralNode"
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "statement":{
                                            "type":"BlockNode",
                                            "statements":[
                                              {
                                                "type":"ThrowStatementNode",
                                                "expression":{
                                                  "type":"ConstructorCreatorNode",
                                                  "creatorType":{
                                                    "type":"ReferenceTypeNode",
                                                    "ids":[
                                                      {
                                                        "type":"ParameterizedTypeNode",
                                                        "identifier":{
                                                          "type":"IdentifierNode",
                                                          "name":"RuntimeException",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "expressionArgs":{
                                                    "type":"ExpressionListNode",
                                                    "arguments":[
                                                      {
                                                        "type":"LiteralNode",
                                                        "node":{
                                                          "type":"StringLiteralNode",
                                                          "valueRep":"\"illegal configuration\""
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "labels":[
                                                  
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            {
                              "type":"TextFragmentNode",
                              "text":"String scanAnnotation(Method method){..."
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"}, ReflectionUtils.USER"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_DECLARED_METHODS",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"); } "
                  }
                ]
              },
              "rawText":"public class OnlyAScratchForAnPostProcessor { @Inject private ApplicationContext context; @Override public Object postProcessAfterInitialization(final Object bean, final String beanName) throws BeansException { ReflectionUtils.doWithMethods(bean.getClass(), new MethodCallback() { @Override public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException { String expecedNameFromAnnotation = scanAnnotation(method); if(expecedNameFromAnnotation != null) { if(context.beanByName(expecedNameFromAnnotation) != null) { throw new RuntimeException(\"illegal configuration\"); } } } String scanAnnotation(Method method){...} }, ReflectionUtils.USER_DECLARED_METHODS); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":8,
                    "post":2,
                    "runtim":1,
                    "util":2,
                    "process":1,
                    "context":3,
                    "overrid":2,
                    "scan":2,
                    "configur":1,
                    "callback":1,
                    "declar":1,
                    "object":2,
                    "bean":5,
                    "annot":5,
                    "processor":1,
                    "illeg":3,
                    "applic":1,
                    "expec":3,
                    "inject":1,
                    "initi":1,
                    "reflect":2,
                    "argument":1,
                    "user":1,
                    "access":1,
                    "ascratch":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ApplicationContext",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RuntimeException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"scanAnnotation",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"method",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"context",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"beanByName",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"expecedNameFromAnnotation",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"context",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ApplicationContext",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"expecedNameFromAnnotation",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"scanAnnotation",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"method",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}