{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":12549653,
    "title":"java - Convert a byte array to a class?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":16901317,
        "postId":12549653,
        "creationDate":"2012-09-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can only do that sort of thing in C++ in general by blithely ignoring all the platform and compiler dependencies that it depends on."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12549653-cu16901317]-[151179706]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can only do that sort of thing in C++ in general by blithely ignoring all the platform and compiler dependencies that it depends on."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "ignor":1,
                      "depend":2,
                      "thing":1,
                      "general":1,
                      "blith":1,
                      "compil":1,
                      "sort":1,
                      "platform":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16901391,
        "postId":12549653,
        "creationDate":"2012-09-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":56541,
          "displayName":"David Z",
          "reputation":53688
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"A little nitpick: the Java equivalent, if it existed, would probably be converting a byte array to an _object_, or part of an object, not a class. (You actually can convert a Java byte array to a class if the byte array conforms to the structure of a class definition as described in the Java specification, but that's not what you're asking about.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12549653-cu16901391]-[-1550546320]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"A little nitpick: the Java equivalent, if it existed, would probably be converting a byte array to an _object_, or part of an object, not a class. (You actually can convert a Java byte array to a class if the byte array conforms to the structure of a class definition as described in the Java specification, but that's not what you're asking about.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_object_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"definition",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "exist":1,
                      "conform":1,
                      "equival":1,
                      "structur":1,
                      "object":2,
                      "array":3,
                      "definit":1,
                      "specif":1,
                      "part":1,
                      "nitpick":1,
                      "convert":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16901489,
        "postId":12549653,
        "creationDate":"2012-09-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2058002,
          "displayName":"slimetree",
          "reputation":1474
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@DavidZaslavsky that sounds like exactly what I'm asking about. How can I do that?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12549653-cu16901489]-[736581885]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@DavidZaslavsky that sounds like exactly what I'm asking about. How can I do that?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"DavidZaslavsky",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "zaslavski":1,
                      "david":1,
                      "sound":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16901896,
        "postId":12549653,
        "creationDate":"2012-09-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":56541,
          "displayName":"David Z",
          "reputation":53688
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Brandon no, it's not at all the same thing as what the C code you put in your question does. But if you're curious, the relevant method is [`ClassLoader.defineClass`](http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#defineClass%28java.lang.String,%20byte[],%20int,%20int%29)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12549653-cu16901896]-[1251079365]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Brandon no, it's not at all the same thing as what the C code you put in your question does. But if you're curious, the relevant method is [`ClassLoader.defineClass`](http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#defineClass%28java.lang.String,%20byte[],%20int,%20int%29)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Brandon",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"ClassLoader",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"defineClass",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"defineClass",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "method":1,
                      "loader":2,
                      "brandon":1,
                      "relev":1,
                      "oracl":1,
                      "thing":1,
                      "doc":2,
                      "code":1,
                      "curious":1,
                      "javas":1,
                      "put":1,
                      "api":1,
                      "lang":2,
                      "defin":2,
                      "html":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16901898,
        "postId":12549653,
        "creationDate":"2012-09-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":661519,
          "displayName":"juanchopanza",
          "reputation":129146
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Another nitpick: you are not converting from byte to a class or object, you are setting the data members of an object from the data contained in a `char` array."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12549653-cu16901898]-[366098447]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Another nitpick: you are not converting from byte to a class or object, you are setting the data members of an object from the data contained in a `char` array."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"or",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "data":2,
                      "set":1,
                      "contain":1,
                      "object":2,
                      "array":1,
                      "member":1,
                      "nitpick":1,
                      "convert":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "c++",
      "c"
    ],
    "creationDate":"2012-09-23",
    "lastActivityDate":"2012-09-23",
    "score":0,
    "viewCount":701,
    "owner":{
      "type":"StackOverflowUser",
      "id":2058002,
      "displayName":"slimetree",
      "reputation":1474
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In C/C++, you can do the following:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12549653]-[406161091]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In C/C++, you can do the following:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"struct DataStructure { char member1; char member2; }; DataStructure ds; char bytes[] = {0xFF, 0xFE}; memcpy(&amp;ds, bytes, sizeof(ds)); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[12549653]-[776273568]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"struct "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"DataStructure",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"BlockDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"member1",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "varType":{
                                "type":"PrimitiveTypeNode",
                                "name":"char",
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"member2",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "varType":{
                                "type":"PrimitiveTypeNode",
                                "name":"char",
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                },
                {
                  "type":"TextFragmentNode",
                  "text":"; "
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ds",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"DataStructure",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"char bytes[] = {0xFF, 0xFE}; memcpy(&ds, bytes, sizeof(ds)); "
                }
              ]
            },
            "rawText":"struct DataStructure { char member1; char member2; }; DataStructure ds; char bytes[] = {0xFF, 0xFE}; memcpy(&ds, bytes, sizeof(ds)); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "data":2,
                  "memcpi":1,
                  "structur":2,
                  "member":2,
                  "struct":1,
                  "byte":2,
                  "sizeof":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DataStructure",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"char",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"member1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"member2",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"ds",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DataStructure",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>and you would essentially get the following:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12549653]-[1989236615]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>and you would essentially get the following:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "essenti":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"ds.member1 = 0xFF; ds.member2 = 0xFE; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[12549653]-[200987230]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"ds",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"member1",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"0xFF"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"ds",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"member2",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"0xFE"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                }
              ]
            },
            "rawText":"ds.member1 = 0xFF; ds.member2 = 0xFE; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "member":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What is the Java equivalent?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12549653]-[-736363125]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What is the Java equivalent?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "equival":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":12549700,
      "questionId":12549653,
      "comments":[
        
      ],
      "creationDate":"2012-09-23",
      "lastActivityDate":"2012-09-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":579580,
        "displayName":"aviad",
        "reputation":4866
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java <strong>you cannot work with the memory directly</strong> (no <code>memcpy</code>) it is the advantage (disadvantage?) of Java. There are some java library methods to copy arrays: <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/System.html#arraycopy%28java.lang.Object,%20int,%20java.lang.Object,%20int,%20int%29\"rel=\"nofollow\">System.arraycopy()</a>. In general, to copy some object you need to ship it with <a href=\"http://javapapers.com/core-java/java-clone-shallow-copy-and-deep-copy/\"rel=\"nofollow\">clone</a> method.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549700]-[-900997201]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java <strong>you cannot work with the memory directly</strong> (no <code>memcpy</code>) it is the advantage (disadvantage?) of Java. There are some java library methods to copy arrays: <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/System.html#arraycopy%28java.lang.Object,%20int,%20java.lang.Object,%20int,%20int%29\"rel=\"nofollow\">System.arraycopy()</a>. In general, to copy some object you need to ship it with <a href=\"http://javapapers.com/core-java/java-clone-shallow-copy-and-deep-copy/\"rel=\"nofollow\">clone</a> method.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "javapap":1,
                    "system":2,
                    "disadvantag":1,
                    "rel":2,
                    "oracl":1,
                    "librari":1,
                    "memcpi":1,
                    "strong":2,
                    "doc":2,
                    "work":1,
                    "object":3,
                    "direct":1,
                    "code":2,
                    "array":1,
                    "nofollow":2,
                    "advantag":1,
                    "general":1,
                    "deep":1,
                    "ship":1,
                    "clone":2,
                    "javas":1,
                    "api":1,
                    "shallow":1,
                    "lang":3,
                    "core":1,
                    "html":1,
                    "href":2,
                    "arraycopi":2,
                    "http":2,
                    "copi":4,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":12549698,
      "questionId":12549653,
      "comments":[
        
      ],
      "creationDate":"2012-09-23",
      "lastActivityDate":"2012-09-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1662019,
        "displayName":"epsalon",
        "reputation":1763
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <code>memcpy</code> you wrote depends on the internal implementation of the struct and would not necessarily work. In java, you need to define a constructor that accepts a byte array and set the fields. No shortcuts like this, as the memory structure of the class is not defined.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549698]-[1560485211]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <code>memcpy</code> you wrote depends on the internal implementation of the struct and would not necessarily work. In java, you need to define a constructor that accepts a byte array and set the fields. No shortcuts like this, as the memory structure of the class is not defined.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "accept":1,
                    "depend":1,
                    "field":1,
                    "set":1,
                    "wrote":1,
                    "constructor":1,
                    "memcpi":1,
                    "work":1,
                    "structur":1,
                    "code":2,
                    "array":1,
                    "implement":1,
                    "struct":1,
                    "shortcut":1,
                    "necessarili":1,
                    "defin":2,
                    "intern":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":12549706,
      "questionId":12549653,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":16901486,
          "postId":12549706,
          "creationDate":"2012-09-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2058002,
            "displayName":"slimetree",
            "reputation":1474
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"out of curiosity -- and I swear I won't use it in my project -- how can this be done?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12549706-cu16901486]-[-1025669262]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"out of curiosity -- and I swear I won't use it in my project -- how can this be done?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "won":1,
                        "curios":1,
                        "project":1,
                        "swear":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16901544,
          "postId":12549706,
          "creationDate":"2012-09-23",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"In native methods or using the &quot;Unsafe&quot; class. But you really need to know what you are doing, or else you are liable to randomly crash the JVM. And besides, there is no real benefit from resorting to that kind of thing in this situation. It is not simpler, it is not faster, it is not anything good ... that I can think of."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12549706-cu16901544]-[907893267]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"In native methods or using the &quot;Unsafe&quot; class. But you really need to know what you are doing, or else you are liable to randomly crash the JVM. And besides, there is no real benefit from resorting to that kind of thing in this situation. It is not simpler, it is not faster, it is not anything good ... that I can think of."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "method":1,
                        "random":1,
                        "faster":1,
                        "real":1,
                        "good":1,
                        "crash":1,
                        "thing":1,
                        "resort":1,
                        "situat":1,
                        "quot":2,
                        "unsaf":1,
                        "kind":1,
                        "benefit":1,
                        "liabl":1,
                        "simpler":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16902159,
          "postId":12549706,
          "creationDate":"2012-09-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 just because there is an obtuse way to do something doesn't make it a good idea. Its highly unlikely to be a good idea in any language IMHO."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12549706-cu16902159]-[-1452199317]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 just because there is an obtuse way to do something doesn't make it a good idea. Its highly unlikely to be a good idea in any language IMHO."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "languag":1,
                        "good":2,
                        "idea":2,
                        "imho":1,
                        "obtus":1,
                        "make":1,
                        "high":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16902170,
          "postId":12549706,
          "creationDate":"2012-09-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Disclaimer: While I use Unsafe more than anyone I have met, I still wouldn't use it for this sort of thing."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12549706-cu16902170]-[-1258210918]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Disclaimer: While I use Unsafe more than anyone I have met, I still wouldn't use it for this sort of thing."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thing":1,
                        "met":1,
                        "disclaim":1,
                        "wouldn":1,
                        "unsaf":1,
                        "sort":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-09-23",
      "lastActivityDate":"2012-09-23",
      "lastEditDate":"2012-09-23",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>What is the Java equivalent?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549706]-[-526425686]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>What is the Java equivalent?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "equival":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is no Java equivalent.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549706]-[-1846312426]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is no Java equivalent.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "equival":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java does not allow you to create or modify objects by accessing them at that level. You should be using <code>new</code> or setter methods, depending on what you are trying to achieve.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549706]-[1556668451]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java does not allow you to create or modify objects by accessing them at that level. You should be using <code>new</code> or setter methods, depending on what you are trying to achieve.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "depend":1,
                    "setter":1,
                    "object":1,
                    "code":2,
                    "achiev":1,
                    "modifi":1,
                    "creat":1,
                    "access":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><sub>(There are a couple of ways to do this kind of thing, but they are unsafe, non-portable and &quot;not Java&quot; ... and they are not warranted in this situation.)</sub></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549706]-[621524493]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><sub>(There are a couple of ways to do this kind of thing, but they are unsafe, non-portable and &quot;not Java&quot; ... and they are not warranted in this situation.)</sub></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "portabl":1,
                    "warrant":1,
                    "thing":1,
                    "way":1,
                    "situat":1,
                    "coupl":1,
                    "quot":2,
                    "unsaf":1,
                    "kind":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":12549748,
      "questionId":12549653,
      "comments":[
        
      ],
      "creationDate":"2012-09-23",
      "lastActivityDate":"2012-09-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":72508,
        "displayName":"Jeremy W. Sherman",
        "reputation":23867
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You might be able to do that in C. But you'd be wandering into aliasing problems and a hunka hunka burning undefined behavior.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549748]-[2147353191]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You might be able to do that in C. But you'd be wandering into aliasing problems and a hunka hunka burning undefined behavior.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "burn":1,
                    "problem":1,
                    "wander":1,
                    "alias":1,
                    "undefin":1,
                    "behavior":1,
                    "hunka":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And because struct padding is up to a compiler, what you might get with your memcpy is just ds.member1 = 0xFF, ds.member2 = whatever junk happened to be on the stack at the time, because member1 was padded to occupy 4 bytes rather than just 1. Or maybe you get junk for both, because you set the top 2 bytes of a 4-byte and they're in the bottom 2 bytes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549748]-[-1705229610]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And because struct padding is up to a compiler, what you might get with your memcpy is just ds.member1 = 0xFF, ds.member2 = whatever junk happened to be on the stack at the time, because member1 was padded to occupy 4 bytes rather than just 1. Or maybe you get junk for both, because you set the top 2 bytes of a 4-byte and they're in the bottom 2 bytes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "happen":1,
                    "bottom":1,
                    "set":1,
                    "memcpi":1,
                    "pad":2,
                    "member":3,
                    "stack":1,
                    "struct":1,
                    "junk":2,
                    "compil":1,
                    "time":1,
                    "occupi":1,
                    "byte":3,
                    "top":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you're wandering into is compiler/runtime-specific memory layouts. The same is true in Java. Java itself won't let you do something so horrendously un-Java, but if you write your own JVM or debug an existing JVM written in C or C++, you could do something like that. And who knows what would happen; I'm not Java god enough to know exactly how much the JVM spec pins down JVM implementation, but my guess is, not to the degree necessary to enable interoperability of the in-memory, runtime representations of objects.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549748]-[-154560372]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you're wandering into is compiler/runtime-specific memory layouts. The same is true in Java. Java itself won't let you do something so horrendously un-Java, but if you write your own JVM or debug an existing JVM written in C or C++, you could do something like that. And who knows what would happen; I'm not Java god enough to know exactly how much the JVM spec pins down JVM implementation, but my guess is, not to the degree necessary to enable interoperability of the in-memory, runtime representations of objects.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":4,
                    "represent":1,
                    "runtim":2,
                    "god":1,
                    "exist":1,
                    "happen":1,
                    "interoper":1,
                    "wander":1,
                    "degre":1,
                    "object":1,
                    "horrend":1,
                    "debug":1,
                    "written":1,
                    "specif":1,
                    "implement":1,
                    "spec":1,
                    "true":1,
                    "enabl":1,
                    "compil":1,
                    "layout":1,
                    "guess":1,
                    "pin":1,
                    "won":1,
                    "write":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So you get undefined behavior in every language flavor. Tastes just as good in each language, too - like mystery meat.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12549748]-[-1134810177]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So you get undefined behavior in every language flavor. Tastes just as good in each language, too - like mystery meat.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tast":1,
                    "languag":2,
                    "good":1,
                    "meat":1,
                    "mysteri":1,
                    "undefin":1,
                    "flavor":1,
                    "behavior":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}