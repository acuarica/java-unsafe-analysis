{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19397507,
    "title":"In clojure, how does one refer to java functions when not calling immediately?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28752796,
        "postId":19397507,
        "creationDate":"2013-10-16",
        "score":5,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1798856,
          "displayName":"Alister Lee",
          "reputation":365
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"[memfn](http://clojuredocs.org/clojure_core/clojure.core/memfn)?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19397507-cu28752796]-[328463491]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"[memfn](http://clojuredocs.org/clojure_core/clojure.core/memfn)?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"clojure_core",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "clojuredoc":1,
                      "org":1,
                      "core":2,
                      "http":1,
                      "clojur":2,
                      "memfn":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28764083,
        "postId":19397507,
        "creationDate":"2013-10-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2258453,
          "displayName":"noisesmith",
          "reputation":11019
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"memfn is considered all but deprecated. A typehinted call like `#(.method #^some.package/WhateverClass %)` can avoid reflection, and memfn cannot."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19397507-cu28764083]-[-158981547]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"memfn is considered all but deprecated. A typehinted call like `#(.method #^some.package/WhateverClass %)` can avoid reflection, and memfn cannot."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"WhateverClass",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "typehint":1,
                      "avoid":1,
                      "deprec":1,
                      "consid":1,
                      "call":1,
                      "reflect":1,
                      "memfn":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"WhateverClass",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "clojure"
    ],
    "creationDate":"2013-10-16",
    "lastActivityDate":"2013-10-16",
    "score":2,
    "viewCount":171,
    "owner":{
      "type":"StackOverflowUser",
      "id":177677,
      "displayName":"metasoarous",
      "reputation":879
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Consider the <code>.indexOf</code> function. I get that I can call <code>(.indexOf [1 2 3] 2)</code> if I just need to use the function immediately. But what if I want to pass the function as an argument to some other function, such as map? The following doesn't work, returning a CompilerException &quot;Unable to resolve symbol&quot;:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19397507]-[-471573787]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Consider the <code>.indexOf</code> function. I get that I can call <code>(.indexOf [1 2 3] 2)</code> if I just need to use the function immediately. But what if I want to pass the function as an argument to some other function, such as map? The following doesn't work, returning a CompilerException &quot;Unable to resolve symbol&quot;:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"CompilerException",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "resolv":1,
                  "map":1,
                  "return":1,
                  "work":1,
                  "code":4,
                  "symbol":1,
                  "function":4,
                  "pass":1,
                  "quot":2,
                  "compil":1,
                  "immedi":1,
                  "unabl":1,
                  "call":1,
                  "argument":1,
                  "index":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"CompilerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"(map .indexOf [[1 2 3] [4 5 6]] [2 4]) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19397507]-[-323751251]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"(map ."
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" [[1 2 3] [4 5 6]] [2 4]) "
                }
              ]
            },
            "rawText":"(map .indexOf [[1 2 3] [4 5 6]] [2 4]) ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "index":1,
                  "map":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Obviously I could wrap a call to <code>.indexOf</code> inside some anonymous function to the same effect:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19397507]-[-1287614763]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Obviously I could wrap a call to <code>.indexOf</code> inside some anonymous function to the same effect:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "anonym":1,
                  "effect":1,
                  "code":2,
                  "wrap":1,
                  "insid":1,
                  "function":1,
                  "call":1,
                  "index":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"(map #(.indexOf %1 %2) [[1 2 3] [4 5 6]] [2 4]) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19397507]-[419221186]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"(map #(."
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" %1 %2) [[1 2 3] [4 5 6]] [2 4]) "
                }
              ]
            },
            "rawText":"(map #(.indexOf %1 %2) [[1 2 3] [4 5 6]] [2 4]) ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "index":1,
                  "map":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>but that's not what I'm asking. Is there another way to refer to <code>.indexOf</code> such that a wrapping function wouldn't be necessary? If this isn't possible, is there a good reason why this isn't supported?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19397507]-[-5164989]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>but that's not what I'm asking. Is there another way to refer to <code>.indexOf</code> such that a wrapping function wouldn't be necessary? If this isn't possible, is there a good reason why this isn't supported?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"indexOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "support":1,
                  "good":1,
                  "reason":1,
                  "code":2,
                  "wrap":1,
                  "function":1,
                  "wouldn":1,
                  "refer":1,
                  "isn":2,
                  "index":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19414563,
      "questionId":19397507,
      "comments":[
        
      ],
      "creationDate":"2013-10-16",
      "lastActivityDate":"2013-10-16",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":621427,
        "displayName":"robkuz",
        "reputation":1917
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I dunno - but shouldnt</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19414563]-[-996832529]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I dunno - but shouldnt</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shouldnt":1,
                    "dunno":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(def j-fn #(.indexOf %1 %2)) (j-fn &quot;foox&quot; &quot;x&quot;) ;=&gt; 3 "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19414563]-[104605532]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(def j-fn #(."
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" %1 %2)) (j-fn \"foox\" \"x\") ;=> 3 "
                  }
                ]
              },
              "rawText":"(def j-fn #(.indexOf %1 %2)) (j-fn \"foox\" \"x\") ;=> 3 ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "foox":1,
                    "index":1,
                    "def":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>pretty much do what you expect? Basically wrap it in a anon-fn</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19414563]-[-633660450]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>pretty much do what you expect? Basically wrap it in a anon-fn</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pretti":1,
                    "wrap":1,
                    "anon":1,
                    "expect":1,
                    "basic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19402517,
      "questionId":19397507,
      "comments":[
        
      ],
      "creationDate":"2013-10-16",
      "lastActivityDate":"2013-10-16",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1074389,
        "displayName":"tangrammer",
        "reputation":1926
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Only one clarification</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19402517]-[1385618881]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Only one clarification</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "clarif":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>&quot;.indexOf&quot; is not exactly a function but a &quot;dot&quot; plus a &quot;name function or instanceMember&quot;. I mean that the function in this case is the union of this elements so your &quot;name function&quot; needs the java object which contextualize the real function. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19402517]-[-573697122]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>&quot;.indexOf&quot; is not exactly a function but a &quot;dot&quot; plus a &quot;name function or instanceMember&quot;. I mean that the function in this case is the union of this elements so your &quot;name function&quot; needs the java object which contextualize the real function. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"instanceMember",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":1,
                    "real":1,
                    "union":1,
                    "object":1,
                    "element":1,
                    "member":1,
                    "function":5,
                    "quot":8,
                    "index":1,
                    "instanc":1,
                    "contextu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Good luck Juan</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19402517]-[-153174673]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Good luck Juan</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "juan":1,
                    "luck":1,
                    "good":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19405464,
      "questionId":19397507,
      "comments":[
        
      ],
      "creationDate":"2013-10-16",
      "lastActivityDate":"2013-10-16",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":2121025,
        "displayName":"aldazosa",
        "reputation":315
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Clojure functions are instances of the IFn interface, meaning they can be invoked. On the other hand, a java method does not implement the interface and cannot be used as a higher order function.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405464]-[719292594]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Clojure functions are instances of the IFn interface, meaning they can be invoked. On the other hand, a java method does not implement the interface and cannot be used as a higher order function.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "higher":1,
                    "hand":1,
                    "invok":1,
                    "mean":1,
                    "ifn":1,
                    "order":1,
                    "function":2,
                    "implement":1,
                    "clojur":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As Alister Lee pointed out, you can use memfn to wrap the method call. But if you check the <a href=\"http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form-%28memfn%20method-name%20arg-names%2a%29\"rel=\"nofollow\"title=\"documentation\"> documentation</a> you'll see that the anonymous function approach that you mention is the preferred way to do what you are asking for.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405464]-[1710012254]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As Alister Lee pointed out, you can use memfn to wrap the method call. But if you check the <a href=\"http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form-%28memfn%20method-name%20arg-names%2a%29\"rel=\"nofollow\"title=\"documentation\"> documentation</a> you'll see that the anonymous function approach that you mention is the preferred way to do what you are asking for.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":1,
                    "method":2,
                    "name":1,
                    "point":1,
                    "document":2,
                    "anonym":1,
                    "rel":1,
                    "titl":1,
                    "lee":1,
                    "mention":1,
                    "wrap":1,
                    "nofollow":1,
                    "check":1,
                    "function":1,
                    "approach":1,
                    "special":1,
                    "form":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "call":1,
                    "interop":2,
                    "alist":1,
                    "clojur":1,
                    "arg":1,
                    "prefer":1,
                    "memfn":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19405457,
      "questionId":19397507,
      "comments":[
        
      ],
      "creationDate":"2013-10-16",
      "lastActivityDate":"2013-10-16",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2258453,
        "displayName":"noisesmith",
        "reputation":11019
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java methods were not designed to be first class functions. They don't act like first class functions, and aren't implemented like them either. Passing java methods around without classes doesn't really make much sense.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405457]-[-889688719]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java methods were not designed to be first class functions. They don't act like first class functions, and aren't implemented like them either. Passing java methods around without classes doesn't really make much sense.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"functions",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"functions",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "method":2,
                    "design":1,
                    "aren":1,
                    "function":2,
                    "implement":1,
                    "pass":1,
                    "make":1,
                    "class":1,
                    "act":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So that Clojure can be a functional language, it creates things that are first class functions, that are meant to be used and passed around without needing an owning class (implementation wise they are singleton classes, since we have to use the JVM's model of things for implementation).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405457]-[-1990473822]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So that Clojure can be a functional language, it creates things that are first class functions, that are meant to be used and passed around without needing an owning class (implementation wise they are singleton classes, since we have to use the JVM's model of things for implementation).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"functions",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wise":1,
                    "jvm":1,
                    "languag":1,
                    "model":1,
                    "own":1,
                    "thing":2,
                    "meant":1,
                    "need":1,
                    "function":2,
                    "implement":2,
                    "pass":1,
                    "class":1,
                    "singleton":1,
                    "creat":1,
                    "clojur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If we tried to make Java methods act like clojure first class functions, we would have to either have a much less powerful basis for our functions (lowering the bar for functions so they really behaved like methods), or a bunch of tedious special case exceptions to memorize about method functions vs. real functions. The decision was made that we are better off acknowledging that methods were never meant to be true functions, and not treating them as if they were. Especially when it is so easy to wrap a call to a method in a function (as you show).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405457]-[-615512115]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If we tried to make Java methods act like clojure first class functions, we would have to either have a much less powerful basis for our functions (lowering the bar for functions so they really behaved like methods), or a bunch of tedious special case exceptions to memorize about method functions vs. real functions. The decision was made that we are better off acknowledging that methods were never meant to be true functions, and not treating them as if they were. Especially when it is so easy to wrap a call to a method in a function (as you show).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"functions",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":5,
                    "basi":1,
                    "show":1,
                    "easi":1,
                    "real":1,
                    "memor":1,
                    "tedious":1,
                    "bunch":1,
                    "lower":1,
                    "behav":1,
                    "decis":1,
                    "meant":1,
                    "wrap":1,
                    "function":7,
                    "bar":1,
                    "true":1,
                    "make":1,
                    "treat":1,
                    "acknowledg":1,
                    "power":1,
                    "special":1,
                    "act":1,
                    "except":1,
                    "call":1,
                    "made":1,
                    "clojur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19405545,
      "questionId":19397507,
      "comments":[
        
      ],
      "creationDate":"2013-10-16",
      "lastActivityDate":"2013-10-16",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57618,
        "displayName":"Subhash Gopalakrishnan",
        "reputation":120
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Firstly <code>.indexOf</code> is not a function. The snippet </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405545]-[-2070184256]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Firstly <code>.indexOf</code> is not a function. The snippet </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "snippet":1,
                    "code":2,
                    "function":1,
                    "first":1,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(.indexOf [1 2 3] 2) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19405545]-[889645422]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(."
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" [1 2 3] 2) "
                  }
                ]
              },
              "rawText":"(.indexOf [1 2 3] 2) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>or the equivalent form </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405545]-[-214372663]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>or the equivalent form </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "form":1,
                    "equival":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(. [1 2 3] indexOf 3) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19405545]-[982643931]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(. [1 2 3] "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" 3) "
                  }
                ]
              },
              "rawText":"(. [1 2 3] indexOf 3) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>is called the Dot special form. A special form is not evaluated by the same rules as for a function application. In this case, the special rule is that the first argument is treated as the target object and the second argument (if it is a symbol) is assumed to be a method or a field on the target object. Now, it is clear why <code>.indexOf</code> is not a valid symbol or a function.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405545]-[-1745470627]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>is called the Dot special form. A special form is not evaluated by the same rules as for a function application. In this case, the special rule is that the first argument is treated as the target object and the second argument (if it is a symbol) is assumed to be a method or a field on the target object. Now, it is clear why <code>.indexOf</code> is not a valid symbol or a function.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":1,
                    "method":1,
                    "assum":1,
                    "field":1,
                    "clear":1,
                    "rule":2,
                    "object":2,
                    "code":2,
                    "symbol":2,
                    "function":2,
                    "applic":1,
                    "valid":1,
                    "treat":1,
                    "target":2,
                    "evalu":1,
                    "special":3,
                    "form":2,
                    "call":1,
                    "argument":2,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You are right that we could wrap the member access with a first-class function and use that in the <code>map</code> method. As Alister Lee mentions above, <code>memfn</code> is handy for this purpose:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19405545]-[-1830948979]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You are right that we could wrap the member access with a first-class function and use that in the <code>map</code> method. As Alister Lee mentions above, <code>memfn</code> is handy for this purpose:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"function",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "handi":1,
                    "map":1,
                    "lee":1,
                    "code":4,
                    "mention":1,
                    "wrap":1,
                    "member":1,
                    "function":1,
                    "alist":1,
                    "purpos":1,
                    "access":1,
                    "memfn":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(map (memfn indexOf elem) [[1 2 3] [4 5 6]] [2 4]) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19405545]-[1173623626]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(map (memfn "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" elem) [[1 2 3] [4 5 6]] [2 4]) "
                  }
                ]
              },
              "rawText":"(map (memfn indexOf elem) [[1 2 3] [4 5 6]] [2 4]) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "memfn":1,
                    "elem":1,
                    "index":1,
                    "map":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}