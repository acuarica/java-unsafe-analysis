{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2805561,
    "title":"Java Socket Disconnect Reporting vs. C# Disconnection",
    "comments":[
      
    ],
    "tags":[
      "c#",
      "java",
      "sockets",
      "disconnect"
    ],
    "creationDate":"2010-05-10",
    "lastActivityDate":"2014-05-12",
    "lastEditDate":"2014-05-12",
    "score":4,
    "viewCount":608,
    "owner":{
      "type":"StackOverflowUser",
      "id":324249,
      "displayName":"iTEgg",
      "reputation":1886
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>in C# when a sockets connection is terminated the other node is informed of this before terminating the link thus the remaning node can update the connection status.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2805561]-[-1190654890]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>in C# when a sockets connection is terminated the other node is informed of this before terminating the link thus the remaning node can update the connection status.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "socket":1,
                  "connect":2,
                  "updat":1,
                  "inform":1,
                  "status":1,
                  "link":1,
                  "node":2,
                  "termin":2,
                  "reman":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>in Java when i terminate a communication link the other node keeps reporting the connection as valid.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2805561]-[50278371]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>in Java when i terminate a communication link the other node keeps reporting the connection as valid.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "connect":1,
                  "link":1,
                  "valid":1,
                  "communic":1,
                  "report":1,
                  "node":1,
                  "termin":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>do i need to implement a read cycle (makes sense) that reports the connection as lost when it recieves a -1 during read (in C# this is 0 i think)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2805561]-[-376166076]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>do i need to implement a read cycle (makes sense) that reports the connection as lost when it recieves a -1 during read (in C# this is 0 i think)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sens":1,
                  "read":2,
                  "connect":1,
                  "lost":1,
                  "implement":1,
                  "make":1,
                  "report":1,
                  "reciev":1,
                  "cycl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>thank you for your insight.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2805561]-[-1455268596]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>thank you for your insight.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "insight":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>EDIT: thanks to you both. as i suspected and mentioned in my post that an additional check is required to confirm the connected state of a connection.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2805561]-[-1750812235]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>EDIT: thanks to you both. as i suspected and mentioned in my post that an additional check is required to confirm the connected state of a connection.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "post":1,
                  "connect":2,
                  "state":1,
                  "addit":1,
                  "requir":1,
                  "edit":1,
                  "mention":1,
                  "check":1,
                  "confirm":1,
                  "suspect":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2806466,
      "questionId":2805561,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2844460,
          "postId":2806466,
          "creationDate":"2010-05-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":324249,
            "displayName":"iTEgg",
            "reputation":1886
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"no, at the moment im playing around with ideas. this issue stood out as it functions differently than C#."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2806466-cu2844460]-[474940763]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"no, at the moment im playing around with ideas. this issue stood out as it functions differently than C#."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "play":1,
                        "differ":1,
                        "idea":1,
                        "issu":1,
                        "function":1,
                        "moment":1,
                        "stood":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-05-10",
      "lastActivityDate":"2010-05-10",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":326480,
        "displayName":"mdma",
        "reputation":35994
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In java, you find out about the other end of the socket being closed only when you read/write to/from the socket, or query the input stream state (e.g. <code>InputStream.available()</code>). I don't think there is any asynchronous notification that the other end is closed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2806466]-[-251941252]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In java, you find out about the other end of the socket being closed only when you read/write to/from the socket, or query the input stream state (e.g. <code>InputStream.available()</code>). I don't think there is any asynchronous notification that the other end is closed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "notif":1,
                    "find":1,
                    "asynchron":1,
                    "socket":2,
                    "state":1,
                    "code":2,
                    "queri":1,
                    "stream":2,
                    "end":2,
                    "close":2,
                    "input":2,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How are you testing that the socket is still open? </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2806466]-[1509967390]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How are you testing that the socket is still open? </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "socket":1,
                    "open":1,
                    "test":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can poll the <code>InputStream.available()</code> method and if that returns -1, you know the socket is closed. Of course, you can also read data, if that fits with your usage.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2806466]-[-1935429242]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can poll the <code>InputStream.available()</code> method and if that returns -1, you know the socket is closed. Of course, you can also read data, if that fits with your usage.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "method":1,
                    "poll":1,
                    "socket":1,
                    "return":1,
                    "fit":1,
                    "data":1,
                    "code":2,
                    "stream":1,
                    "usag":1,
                    "close":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>See <a href=\"http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#available%28%29\"rel=\"nofollow\">InputStream.available()</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2806466]-[-1906092056]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>See <a href=\"http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#available%28%29\"rel=\"nofollow\">InputStream.available()</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sun":1,
                    "rel":1,
                    "doc":1,
                    "nofollow":1,
                    "stream":2,
                    "javas":1,
                    "api":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "input":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2806467,
      "questionId":2805561,
      "comments":[
        
      ],
      "creationDate":"2010-05-10",
      "lastActivityDate":"2010-05-10",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":6365,
        "displayName":"Michael Barker",
        "reputation":8907
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the remote side of the connection goes away, normally you'll get an IOException from the InputStream/InputChannel if the disconnection can be detected. If it can't detect the disconnect an IOException will eventually be thrown when the socket read times out. The length of time it waits for a timeout can be adjusted using Socket.setSoTimeout().</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2806467]-[258639090]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the remote side of the connection goes away, normally you'll get an IOException from the InputStream/InputChannel if the disconnection can be detected. If it can't detect the disconnect an IOException will eventually be thrown when the socket read times out. The length of time it waits for a timeout can be adjusted using Socket.setSoTimeout().</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"InputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"InputChannel",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Socket",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"setSoTimeout",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "read":1,
                    "disconnect":2,
                    "channel":1,
                    "wait":1,
                    "socket":2,
                    "connect":1,
                    "detect":2,
                    "set":1,
                    "thrown":1,
                    "eventu":1,
                    "adjust":1,
                    "stream":1,
                    "length":1,
                    "ioexcept":2,
                    "time":2,
                    "timeout":2,
                    "input":2,
                    "remot":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"InputStream",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"InputChannel",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}