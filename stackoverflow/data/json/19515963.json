{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19515963,
    "title":"How Java is secure?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28950944,
        "postId":19515963,
        "creationDate":"2013-10-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":982149,
          "displayName":"Fildor",
          "reputation":3217
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"&quot;But when I print a1, it prints the address of the object.&quot; I doubt that."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19515963-cu28950944]-[-1330221800]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"&quot;But when I print a1, it prints the address of the object.&quot; I doubt that."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "print":2,
                      "object":1,
                      "doubt":1,
                      "address":1,
                      "quot":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28950975,
        "postId":19515963,
        "creationDate":"2013-10-22",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2759848,
          "displayName":"Eel Lee",
          "reputation":1674
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What exactly is *not safe* here, and what do you mean by that?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19515963-cu28950975]-[-766729841]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What exactly is *not safe* here, and what do you mean by that?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "safe":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28951003,
        "postId":19515963,
        "creationDate":"2013-10-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":129570,
          "displayName":"Oliver Charlesworth",
          "reputation":157510
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If you don't want to be able to create instances of your class, then don't write a (public) method that creates instances of your class!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19515963-cu28951003]-[-741565732]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If you don't want to be able to create instances of your class, then don't write a (public) method that creates instances of your class!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "instanc":2,
                      "method":1,
                      "write":1,
                      "creat":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28951032,
        "postId":19515963,
        "creationDate":"2013-10-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":129570,
          "displayName":"Oliver Charlesworth",
          "reputation":157510
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@RohitJain: See the Javadoc for Object.hashCode()."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19515963-cu28951032]-[-760645512]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@RohitJain: See the Javadoc for Object.hashCode()."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"RohitJain",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "object":1,
                      "code":1,
                      "hash":1,
                      "rohit":1,
                      "jain":1,
                      "javadoc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28951227,
        "postId":19515963,
        "creationDate":"2013-10-22",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":277304,
          "displayName":"leonbloy",
          "reputation":30301
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You seem to assume that to keep object address secret has something to do with &quot;security&quot;. Why on earth?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19515963-cu28951227]-[-355931404]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You seem to assume that to keep object address secret has something to do with &quot;security&quot;. Why on earth?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "secret":1,
                      "assum":1,
                      "secur":1,
                      "object":1,
                      "address":1,
                      "quot":2,
                      "earth":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "pointers",
      "object"
    ],
    "creationDate":"2013-10-22",
    "lastActivityDate":"2014-07-06",
    "lastEditDate":"2014-07-06",
    "score":0,
    "viewCount":94,
    "owner":{
      "type":"StackOverflowUser",
      "id":1466788,
      "displayName":"jsborn17",
      "reputation":64
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know Java doesn't support concept of pointers, which actually can provide you address of the variable or an object. But what do you say in this case</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19515963]-[1795263669]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know Java doesn't support concept of pointers, which actually can provide you address of the variable or an object. But what do you say in this case</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "support":1,
                  "provid":1,
                  "pointer":1,
                  "object":1,
                  "address":1,
                  "concept":1,
                  "variabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"A a1 = new A(); System.out.println(a1); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19515963]-[1038934009]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"a1",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"A",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"A",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"out",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"println",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"a1",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"A a1 = new A(); Systemoutprintln(a1); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "systemoutprintln":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"A",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"a1",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"a1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"A",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"A",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>here a1 is one reference variable which points to object of class A. But when I print a1, it prints the address of the object.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19515963]-[-982897058]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>here a1 is one reference variable which points to object of class A. But when I print a1, it prints the address of the object.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"A",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "point":1,
                  "print":2,
                  "object":2,
                  "refer":1,
                  "address":1,
                  "variabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19515963]-[-1773878560]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "safe":1,
                  "object":1,
                  "qualifi":1,
                  "fulli":1,
                  "address":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can somebody clear my concepts on Java is safe. Thanks in advance.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19515963]-[1053910661]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can somebody clear my concepts on Java is safe. Thanks in advance.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "advanc":1,
                  "clear":1,
                  "safe":1,
                  "concept":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19516085,
      "questionId":19515963,
      "comments":[
        
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2314073,
        "displayName":"Juned Ahsan",
        "reputation":35464
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>But when I print a1, it prints the address of the object.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516085]-[676975532]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>But when I print a1, it prints the address of the object.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "object":1,
                    "address":1,
                    "print":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No it does not print the address of the object. When you try to print an object its <code>toString</code> method is called and the default <code>toString</code> method output will contain, class name and the unsigned hexadecimal representation of the hash code of the object separated by @` . symbol</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516085]-[1794677295]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No it does not print the address of the object. When you try to print an object its <code>toString</code> method is called and the default <code>toString</code> method output will contain, class name and the unsigned hexadecimal representation of the hash code of the object separated by @` . symbol</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"toString",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"toString",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"name",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "represent":1,
                    "print":2,
                    "separ":1,
                    "unsign":1,
                    "object":3,
                    "code":5,
                    "symbol":1,
                    "hash":1,
                    "address":1,
                    "output":1,
                    "call":1,
                    "hexadecim":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516085]-[-309540299]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "safe":1,
                    "blockquot":2,
                    "object":1,
                    "qualifi":1,
                    "fulli":1,
                    "address":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You never get the memory address of the object and you cannot manipulate that either.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516085]-[-483085728]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You never get the memory address of the object and you cannot manipulate that either.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "manipul":1,
                    "object":1,
                    "address":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19516058,
      "questionId":19515963,
      "comments":[
        
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2241463,
        "displayName":"Piovezan",
        "reputation":1668
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What is printed actually is the &quot;identity hash code&quot;, not the address (see <a href=\"http://stackoverflow.com/questions/4712139/java-object-default-tostring\">here</a>). And even if it was the address, it would be a read-only information that cannot be used to perform unsafe pointer references.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516058]-[314271875]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What is printed actually is the &quot;identity hash code&quot;, not the address (see <a href=\"http://stackoverflow.com/questions/4712139/java-object-default-tostring\">here</a>). And even if it was the address, it would be a read-only information that cannot be used to perform unsafe pointer references.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "question":1,
                    "pointer":1,
                    "tostr":1,
                    "print":1,
                    "object":1,
                    "code":1,
                    "stackoverflow":1,
                    "hash":1,
                    "ident":1,
                    "inform":1,
                    "perform":1,
                    "refer":1,
                    "address":2,
                    "quot":2,
                    "unsaf":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19516147,
      "questionId":19515963,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28952930,
          "postId":19516147,
          "creationDate":"2013-10-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":129570,
            "displayName":"Oliver Charlesworth",
            "reputation":157510
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you're running native code through JNI, then you presumably *could* access arbitrary virtual memory addresses..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19516147-cu28952930]-[1241510832]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you're running native code through JNI, then you presumably *could* access arbitrary virtual memory addresses..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "arbitrari":1,
                        "run":1,
                        "virtual":1,
                        "code":1,
                        "jni":1,
                        "address":1,
                        "access":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1206301,
        "displayName":"Alexei Kaigorodov",
        "reputation":6180
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java is safe, unless you are using <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\"rel=\"nofollow\">sun.misc.Unsafe</a>. What <code>println(a1)</code> prints is not specified, it need not to be an address. And even it were an address, you have no legal ways to read or write using it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516147]-[-1152825842]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java is safe, unless you are using <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\"rel=\"nofollow\">sun.misc.Unsafe</a>. What <code>println(a1)</code> prints is not specified, it need not to be an address. And even it were an address, you have no legal ways to read or write using it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "docjar":1,
                    "print":1,
                    "sun":2,
                    "rel":1,
                    "safe":1,
                    "way":1,
                    "println":1,
                    "doc":1,
                    "code":2,
                    "legal":1,
                    "nofollow":1,
                    "misc":2,
                    "address":2,
                    "api":1,
                    "unsaf":2,
                    "html":1,
                    "href":1,
                    "http":1,
                    "write":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19516138,
      "questionId":19515963,
      "comments":[
        
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2381006,
        "displayName":"VD'",
        "reputation":2349
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>well for your very first question i would ask you to read <a href=\"http://programmers.stackexchange.com/questions/141834/how-is-a-java-reference-different-from-a-c-pointer\">this</a> and give some more burden to your brain understanding the difference,</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516138]-[159579199]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>well for your very first question i would ask you to read <a href=\"http://programmers.stackexchange.com/questions/141834/how-is-a-java-reference-different-from-a-c-pointer\">this</a> and give some more burden to your brain understanding the difference,</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "question":2,
                    "pointer":1,
                    "differ":1,
                    "understand":1,
                    "burden":1,
                    "programm":1,
                    "refer":1,
                    "give":1,
                    "brain":1,
                    "stackexchang":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>for second one, considering you as a programmer, you can put the restriction of keeping things of a class private by not creating the method for object generation you are talking about(first)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516138]-[-772251392]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>for second one, considering you as a programmer, you can put the restriction of keeping things of a class private by not creating the method for object generation you are talking about(first)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "keep":1,
                    "talk":1,
                    "thing":1,
                    "object":1,
                    "programm":1,
                    "generat":1,
                    "put":1,
                    "creat":1,
                    "restrict":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>second, you can provide methods through which user can access only the portion of the class he/she is supposed to(which again is restriction put by you by coding it such a way)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516138]-[-696530068]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>second, you can provide methods through which user can access only the portion of the class he/she is supposed to(which again is restriction put by you by coding it such a way)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"he",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "method":1,
                    "portion":1,
                    "code":1,
                    "put":1,
                    "suppos":1,
                    "user":1,
                    "restrict":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and according to me, we should worry about how secure our code is than how secure the platform is :)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516138]-[-2093812635]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and according to me, we should worry about how secure our code is than how secure the platform is :)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "platform":1,
                    "worri":1,
                    "secur":2,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19516063,
      "questionId":19515963,
      "comments":[
        
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2711488,
        "displayName":"Holger",
        "reputation":28154
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The number printed by <code>Object.toString()</code> is not an address. It\u2019s the <em>identitiy hashcode</em>. This number <em>might</em> be derived from the address but you don\u2019t know how or if at all.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516063]-[1932385955]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The number printed by <code>Object.toString()</code> is not an address. It\u2019s the <em>identitiy hashcode</em>. This number <em>might</em> be derived from the address but you don\u2019t know how or if at all.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"toString",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":2,
                    "hashcod":1,
                    "deriv":1,
                    "print":1,
                    "object":1,
                    "code":2,
                    "address":2,
                    "identitiy":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Even if it was the address you can\u2019t do anything with it as you can\u2019t access arbitrary addresses.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516063]-[1408581965]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Even if it was the address you can\u2019t do anything with it as you can\u2019t access arbitrary addresses.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "arbitrari":1,
                    "address":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The question whether creating instances of your class is security relevant is a decision up to you. If so, <em>you</em> must take action to ensure that only allowed entities may create such instances.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516063]-[-1666632951]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The question whether creating instances of your class is security relevant is a decision up to you. If so, <em>you</em> must take action to ensure that only allowed entities may create such instances.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "relev":1,
                    "secur":1,
                    "decis":1,
                    "allow":1,
                    "entiti":1,
                    "creat":2,
                    "action":1,
                    "instanc":2,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19516205,
      "questionId":19515963,
      "comments":[
        
      ],
      "creationDate":"2013-10-22",
      "lastActivityDate":"2013-10-22",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2902950,
        "displayName":"Prashant Shilimkar",
        "reputation":908
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe? "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19516205]-[-1199021077]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe? "
                  }
                ]
              },
              "rawText":"So, I mean to ask is when I can get address of the object (that too fully qualified address) in Java also, how it could be safe? ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "safe":1,
                    "object":1,
                    "qualifi":1,
                    "fulli":1,
                    "address":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p>First off, reference to an object does not mean a pointer to an object. It could (theoretically) be a double pointer, it could be a triple pointer with an offset, or anything else, as long as it references the object by some specific convention. Of course, the simplest convention is a direct pointer to the object, but the Java language doesn't bother to spell that out (as far as I know) because it's an implementation thing.</p></li> \n <li><p>Java is a different language than C and C++, so it defines its own semantics for the operators. So, to put it simply, in Java, &amp; is not the &quot;address of&quot; operator because the language designers have defined it like that. There is no &quot;address of&quot; operator regardless of whether references as implemented as simple pointers. The philosophy behind this is, of course, avoidance of pointer arithmetic and memory safety.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516205]-[1603573543]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p>First off, reference to an object does not mean a pointer to an object. It could (theoretically) be a double pointer, it could be a triple pointer with an offset, or anything else, as long as it references the object by some specific convention. Of course, the simplest convention is a direct pointer to the object, but the Java language doesn't bother to spell that out (as far as I know) because it's an implementation thing.</p></li> \n <li><p>Java is a different language than C and C++, so it defines its own semantics for the operators. So, to put it simply, in Java, &amp; is not the &quot;address of&quot; operator because the language designers have defined it like that. There is no &quot;address of&quot; operator regardless of whether references as implemented as simple pointers. The philosophy behind this is, of course, avoidance of pointer arithmetic and memory safety.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "philosophi":1,
                    "languag":3,
                    "design":1,
                    "simpl":1,
                    "pointer":6,
                    "spell":1,
                    "theoret":1,
                    "thing":1,
                    "bother":1,
                    "amp":1,
                    "avoid":1,
                    "object":4,
                    "direct":1,
                    "oper":3,
                    "safeti":1,
                    "offset":1,
                    "simpli":1,
                    "arithmet":1,
                    "specif":1,
                    "refer":3,
                    "semant":1,
                    "implement":2,
                    "address":2,
                    "put":1,
                    "simplest":1,
                    "quot":4,
                    "defin":2,
                    "tripl":1,
                    "convent":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Also, in other case, if my class A is private, so you can't create an object of it, but what if I create a method inside this class which is used for creating objects of this class. And I just call this method wherever I want to create an object of this class!!! </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516205]-[-114035300]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Also, in other case, if my class A is private, so you can't create an object of it, but what if I create a method inside this class which is used for creating objects of this class. And I just call this method wherever I want to create an object of this class!!! </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"A",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"which",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "blockquot":2,
                    "object":3,
                    "insid":1,
                    "creat":4,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think this question is not making any sense. Class A cannot be a Private if it is not a inner class.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19516205]-[1367587387]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think this question is not making any sense. Class A cannot be a Private if it is not a inner class.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "sens":1,
                    "make":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}