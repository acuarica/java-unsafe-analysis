{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11332239,
    "title":"Is it possible to mark java objects non-collectable from gc perspective to save on gc-sweep time?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":14919433,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":139010,
          "displayName":"Matt Ball",
          "reputation":181784
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What makes you think that BigMemory isn't Java-native? It sounds like what you _really_ mean is **free.**"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919433]-[-1801602311]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What makes you think that BigMemory isn't Java-native? It sounds like what you _really_ mean is **free.**"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BigMemory",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_really_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "big":1,
                      "sound":1,
                      "isn":1,
                      "make":1,
                      "free":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"BigMemory",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14919473,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can use direct memory yourself to cache your data (which is off heap) I have done this to keep 100s of GB off heap."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919473]-[-18738794]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can use direct memory yourself to cache your data (which is off heap) I have done this to keep 100s of GB off heap."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":1,
                      "data":1,
                      "direct":1,
                      "heap":2,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14919676,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@PeterLawrey Using direct memory myself is not an option as I want to avoid serialization overhead which means it should happen within same jvm."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919676]-[1083580005]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@PeterLawrey Using direct memory myself is not an option as I want to avoid serialization overhead which means it should happen within same jvm."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PeterLawrey",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "jvm":1,
                      "happen":1,
                      "peter":1,
                      "option":1,
                      "mean":1,
                      "avoid":1,
                      "direct":1,
                      "overhead":1,
                      "lawrey":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14919711,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MattBall Yes, preferably free and (native, single jvm) without serialization overhead."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919711]-[1165546344]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MattBall Yes, preferably free and (native, single jvm) without serialization overhead."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MattBall",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "jvm":1,
                      "singl":1,
                      "matt":1,
                      "overhead":1,
                      "ball":1,
                      "free":1,
                      "prefer":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14921705,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You could monitor the value of `Runtime.getRuntime().maxMemory() - Runtime.getRuntime.totalMemory()` in a `TimerTask` and when it reaches the threshold of pain, fire some code that will dispose of a cache segment."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14921705]-[1426223685]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You could monitor the value of `Runtime.getRuntime().maxMemory() - Runtime.getRuntime.totalMemory()` in a `TimerTask` and when it reaches the threshold of pain, fire some code that will dispose of a cache segment."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Runtime",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"getRuntime",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"maxMemory",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Runtime",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"getRuntime",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"totalMemory",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"TimerTask",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "monitor":1,
                      "reach":1,
                      "task":1,
                      "runtim":4,
                      "cach":1,
                      "dispos":1,
                      "fire":1,
                      "total":1,
                      "segment":1,
                      "code":1,
                      "max":1,
                      "threshold":1,
                      "pain":1,
                      "timer":1,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"TimerTask",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14919826,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":139010,
          "displayName":"Matt Ball",
          "reputation":181784
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Martin I haven't used it myself, but I'm pretty sure that direct memory doesn't _force_ you to use serialization at all. Direct memory is absolutely &quot;within the same JVM.&quot;"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919826]-[-2074011544]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Martin I haven't used it myself, but I'm pretty sure that direct memory doesn't _force_ you to use serialization at all. Direct memory is absolutely &quot;within the same JVM.&quot;"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Martin",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_force_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "jvm":1,
                      "martin":1,
                      "direct":2,
                      "pretti":1,
                      "absolut":1,
                      "quot":2,
                      "forc":1,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14919920,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MattBall To my understanding DirectMemory os _off heap_ which means that the objects must be serialized/deserialized to/from memory outside jvm."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14919920]-[617342191]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MattBall To my understanding DirectMemory os _off heap_ which means that the objects must be serialized/deserialized to/from memory outside jvm."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MattBall",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DirectMemory",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_off",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"heap_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "jvm":1,
                      "understand":1,
                      "mean":1,
                      "matt":1,
                      "object":1,
                      "direct":1,
                      "ball":1,
                      "heap":1,
                      "deseri":1,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"DirectMemory",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920283,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":586399,
          "displayName":"Desolator",
          "reputation":3966
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Try not to use RAM for big size operations. You can use files rather."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920283]-[691434195]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Try not to use RAM for big size operations. You can use files rather."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "ram":1,
                      "size":1,
                      "big":1,
                      "oper":1,
                      "file":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920360,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Keep in mind that the GC is already smart enough NOT to traverse your objects as soon as they survive into the tenured generation."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920360]-[481452717]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Keep in mind that the GC is already smart enough NOT to traverse your objects as soon as they survive into the tenured generation."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "surviv":1,
                      "tenur":1,
                      "smart":1,
                      "travers":1,
                      "object":1,
                      "mind":1,
                      "generat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920383,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Desolator Using Files for cache is not an option either, it has the same unaffordable serialization/deserialization overhead - use case is a HA server with lots of data used in random (human) order and low latency needed."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920383]-[-1608383803]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Desolator Using Files for cache is not an option either, it has the same unaffordable serialization/deserialization overhead - use case is a HA server with lots of data used in random (human) order and low latency needed."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Desolator",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "random":1,
                      "latenc":1,
                      "cach":1,
                      "server":1,
                      "human":1,
                      "data":1,
                      "option":1,
                      "unafford":1,
                      "overhead":1,
                      "low":1,
                      "need":1,
                      "order":1,
                      "lot":1,
                      "file":1,
                      "deseri":1,
                      "desol":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920408,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik True... though full gc scans begin to occur near full memory... wich though is an indication that memory runs out for some other reason."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920408]-[-2026483318]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik True... though full gc scans begin to occur near full memory... wich though is an indication that memory runs out for some other reason."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "begin":1,
                      "occur":1,
                      "run":1,
                      "full":2,
                      "scan":1,
                      "reason":1,
                      "marko":1,
                      "indic":1,
                      "topolnik":1,
                      "true":1,
                      "memori":2,
                      "wich":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920454,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If memory is about to run out, you are in trouble anyway, it will only hit you with a longer delay. Is that worth all the redesign?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920454]-[303541188]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If memory is about to run out, you are in trouble anyway, it will only hit you with a longer delay. Is that worth all the redesign?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "delay":1,
                      "hit":1,
                      "run":1,
                      "worth":1,
                      "troubl":1,
                      "redesign":1,
                      "longer":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14920646,
        "postId":11332239,
        "creationDate":"2012-07-04",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1335717,
          "displayName":"Martin",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik Maybe I could then have an indicator when I know that memory is running out, to clear some caches... hmm.."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11332239-cu14920646]-[1444979207]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik Maybe I could then have an indicator when I know that memory is running out, to clear some caches... hmm.."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":1,
                      "clear":1,
                      "run":1,
                      "hmm":1,
                      "marko":1,
                      "indic":1,
                      "topolnik":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "garbage-collection"
    ],
    "creationDate":"2012-07-04",
    "lastActivityDate":"2012-07-05",
    "lastEditDate":"2012-07-04",
    "score":8,
    "viewCount":903,
    "owner":{
      "type":"StackOverflowUser",
      "id":1335717,
      "displayName":"Martin",
      "reputation":194
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible to mark java objects non-collectable from gc perspective to save on gc-sweep time?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11332239]-[1376381197]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible to mark java objects non-collectable from gc perspective to save on gc-sweep time?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sweep":1,
                  "object":1,
                  "perspect":1,
                  "collect":1,
                  "time":1,
                  "mark":1,
                  "save":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Something along the lines of <a href=\"http://wwwasd.web.cern.ch/wwwasd/lhc++/Objectivity/V5.2/Java/guide/jgdStorage.fm.html\"rel=\"nofollow\">http://wwwasd.web.cern.ch/wwwasd/lhc++/Objectivity/V5.2/Java/guide/jgdStorage.fm.html</a> and specifically <em>non-garbage-collectible containers</em> there (non-garbage-collectable?).</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11332239]-[-988929432]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Something along the lines of <a href=\"http://wwwasd.web.cern.ch/wwwasd/lhc++/Objectivity/V5.2/Java/guide/jgdStorage.fm.html\"rel=\"nofollow\">http://wwwasd.web.cern.ch/wwwasd/lhc++/Objectivity/V5.2/Java/guide/jgdStorage.fm.html</a> and specifically <em>non-garbage-collectible containers</em> there (non-garbage-collectable?).</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"IdentifierNode",
                  "name":"jgdStorage",
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "guid":2,
                  "line":1,
                  "lhc":2,
                  "jgd":2,
                  "rel":1,
                  "contain":1,
                  "cern":2,
                  "object":2,
                  "web":2,
                  "nofollow":1,
                  "specif":1,
                  "wwwasd":4,
                  "collect":2,
                  "html":2,
                  "href":1,
                  "storag":2,
                  "http":2,
                  "garbag":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The problem is that I have lots of ordinary temporary objects, but I have even bigger (several Gigs) of objects that are stored for Cache purposes. For no reason should the Java GC traverse all those Cache gigabytes trying to find anything to collect, because they contain cached data which have their own timeouts.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11332239]-[82492087]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The problem is that I have lots of ordinary temporary objects, but I have even bigger (several Gigs) of objects that are stored for Cache purposes. For no reason should the Java GC traverse all those Cache gigabytes trying to find anything to collect, because they contain cached data which have their own timeouts.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "cach":3,
                  "ordinari":1,
                  "problem":1,
                  "data":1,
                  "store":1,
                  "reason":1,
                  "travers":1,
                  "object":2,
                  "temporari":1,
                  "gigabyt":1,
                  "lot":1,
                  "bigger":1,
                  "collect":1,
                  "gig":1,
                  "timeout":1,
                  "purpos":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This way I could partition my data in a custom way into infinite-lived and normal-lived objects, and hopefully GC would be quite fast because normal objects don't live so long and amount to smaller amounts.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11332239]-[-947539377]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This way I could partition my data in a custom way into infinite-lived and normal-lived objects, and hopefully GC would be quite fast because normal objects don't live so long and amount to smaller amounts.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "custom":1,
                  "partit":1,
                  "normal":2,
                  "data":1,
                  "amount":2,
                  "object":2,
                  "live":3,
                  "infinit":1,
                  "fast":1,
                  "smaller":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There are some workarounds to this problem, such as <a href=\"http://incubator.apache.org/projects/directmemory.html\"rel=\"nofollow\">Apache DirectMemory</a> and Commercial Terracotta BigMemory(http://terracotta.org/products/bigmemory), but a java-native solution would be nicer (I mean free and probably more reliable?). Also I want to avoid serialization overhead which means it should happen within same jvm. To my understanding DirectMemory and BigMemory operate mainly <em>off heap</em> which means that the objects must be serialized/deserialized to/from memory outside jvm. Simply marking non-gc regions within the jvm would seem a better solution. Using Files for cache is not an option either, it has the same unaffordable serialization/deserialization overhead - use case is a HA server with lots of data used in random (human) order and low latency needed.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11332239]-[-2134946295]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There are some workarounds to this problem, such as <a href=\"http://incubator.apache.org/projects/directmemory.html\"rel=\"nofollow\">Apache DirectMemory</a> and Commercial Terracotta BigMemory(http://terracotta.org/products/bigmemory), but a java-native solution would be nicer (I mean free and probably more reliable?). Also I want to avoid serialization overhead which means it should happen within same jvm. To my understanding DirectMemory and BigMemory operate mainly <em>off heap</em> which means that the objects must be serialized/deserialized to/from memory outside jvm. Simply marking non-gc regions within the jvm would seem a better solution. Using Files for cache is not an option either, it has the same unaffordable serialization/deserialization overhead - use case is a HA server with lots of data used in random (human) order and low latency needed.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"DirectMemory",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"BigMemory",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"DirectMemory",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"BigMemory",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "terracotta":2,
                  "serial":3,
                  "jvm":3,
                  "random":1,
                  "latenc":1,
                  "cach":1,
                  "apach":2,
                  "nicer":1,
                  "server":1,
                  "reliabl":1,
                  "project":1,
                  "happen":1,
                  "problem":1,
                  "big":2,
                  "human":1,
                  "commerci":1,
                  "data":1,
                  "understand":1,
                  "option":1,
                  "rel":1,
                  "mean":2,
                  "unafford":1,
                  "avoid":1,
                  "object":1,
                  "direct":2,
                  "overhead":2,
                  "oper":1,
                  "low":1,
                  "nofollow":1,
                  "need":1,
                  "simpli":1,
                  "order":1,
                  "workaround":1,
                  "directmemori":1,
                  "region":1,
                  "lot":1,
                  "file":1,
                  "heap":1,
                  "deseri":2,
                  "incub":1,
                  "org":2,
                  "html":1,
                  "mark":1,
                  "href":1,
                  "http":2,
                  "solut":2,
                  "free":1,
                  "bigmemori":1,
                  "product":1,
                  "memori":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DirectMemory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BigMemory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11332771,
      "questionId":11332239,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":14920622,
          "postId":11332771,
          "creationDate":"2012-07-04",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1335717,
            "displayName":"Martin",
            "reputation":194
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Is simply my assumption, that when the jvm is starving it begins scanning all those unnecessary objects too."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11332771-cu14920622]-[-527214278]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Is simply my assumption, that when the jvm is starving it begins scanning all those unnecessary objects too."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "begin":1,
                        "starv":1,
                        "scan":1,
                        "object":1,
                        "simpli":1,
                        "assumpt":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":14920856,
          "postId":11332771,
          "creationDate":"2012-07-04",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"As a general rule, you should assume that the GC is _very, very smart._"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11332771-cu14920856]-[1000664572]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"As a general rule, you should assume that the GC is _very, very smart._"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_very",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "rule":1,
                        "general":1,
                        "smart":1,
                        "assum":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-07-04",
      "lastActivityDate":"2012-07-04",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1468366,
        "displayName":"MvG",
        "reputation":24479
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Any memory the JVM manages is also garbage-collected by the JVM. And any \u201clive\u201d objects which are directly available to Java methods without deserialization have to live in JVM memory. Therefore in my understanding you cannot have live objects which are immune to garbage collection.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332771]-[-1032275204]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Any memory the JVM manages is also garbage-collected by the JVM. And any \u201clive\u201d objects which are directly available to Java methods without deserialization have to live in JVM memory. Therefore in my understanding you cannot have live objects which are immune to garbage collection.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":3,
                    "method":1,
                    "understand":1,
                    "object":2,
                    "direct":1,
                    "immun":1,
                    "live":3,
                    "collect":2,
                    "deseri":1,
                    "manag":1,
                    "garbag":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>On the other hand, the usage you describe should make the generational approach to garbage collection quite efficient. If your big objects stay around for a while, they will be checked for reclamation less often. So I doubt there is much to be gained from avoiding those checks.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332771]-[-1058498439]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>On the other hand, the usage you describe should make the generational approach to garbage collection quite efficient. If your big objects stay around for a while, they will be checked for reclamation less often. So I doubt there is much to be gained from avoiding those checks.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "big":1,
                    "hand":1,
                    "effici":1,
                    "reclam":1,
                    "avoid":1,
                    "object":1,
                    "check":2,
                    "gain":1,
                    "doubt":1,
                    "generat":1,
                    "make":1,
                    "approach":1,
                    "usag":1,
                    "stay":1,
                    "collect":1,
                    "describ":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11333280,
      "questionId":11332239,
      "comments":[
        
      ],
      "creationDate":"2012-07-04",
      "lastActivityDate":"2012-07-04",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":941357,
        "displayName":"ali haider",
        "reputation":5960
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The recommended approaches would be to use either a commerical RTSJ implementation to avoid GC, or to use off heap memory. One could also look into soft references for caches as well (they do get collected). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333280]-[-994054261]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The recommended approaches would be to use either a commerical RTSJ implementation to avoid GC, or to use off heap memory. One could also look into soft references for caches as well (they do get collected). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "recommend":1,
                    "cach":1,
                    "avoid":1,
                    "soft":1,
                    "refer":1,
                    "implement":1,
                    "approach":1,
                    "collect":1,
                    "heap":1,
                    "rtsj":1,
                    "commer":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is not recommended: If for some reason you do not believe these options are sufficient, you could look into direct memory access which is UNSAFE (part of sun.misc.Unsafe). You can use the 'theUnsafe' field to get the 'Unsafe' instance. Unsafe allows to allocation/deallocate memory via 'allocateMemory' and 'freeMemory'. This is not under GC control nor limited by JVM heap size. The impact on GC/application, once you go down this route, is not guaranteed - which is why using byte buffers might be the way to go (if you're not using a RTSJ like implementation).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333280]-[2069915692]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is not recommended: If for some reason you do not believe these options are sufficient, you could look into direct memory access which is UNSAFE (part of sun.misc.Unsafe). You can use the 'theUnsafe' field to get the 'Unsafe' instance. Unsafe allows to allocation/deallocate memory via 'allocateMemory' and 'freeMemory'. This is not under GC control nor limited by JVM heap size. The impact on GC/application, once you go down this route, is not guaranteed - which is why using byte buffers might be the way to go (if you're not using a RTSJ like implementation).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"theUnsafe",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"freeMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "recommend":1,
                    "alloc":2,
                    "size":1,
                    "field":1,
                    "sun":1,
                    "option":1,
                    "impact":1,
                    "buffer":1,
                    "reason":1,
                    "rout":1,
                    "direct":1,
                    "guarante":1,
                    "suffici":1,
                    "applic":1,
                    "implement":1,
                    "misc":1,
                    "dealloc":1,
                    "control":1,
                    "unsaf":5,
                    "part":1,
                    "heap":1,
                    "rtsj":1,
                    "limit":1,
                    "free":1,
                    "instanc":1,
                    "access":1,
                    "memori":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Hope this helps. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333280]-[424454141]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Hope this helps. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hope":1,
                    "help":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11333042,
      "questionId":11332239,
      "comments":[
        
      ],
      "creationDate":"2012-07-04",
      "lastActivityDate":"2012-07-04",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":45664,
        "displayName":"Andrzej Doyle",
        "reputation":57263
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Quite simply, for you to be able to do this, the garbage collection algorithm would need to be aware of such a flag, and take it into account when doing its work.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333042]-[-1470398196]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Quite simply, for you to be able to do this, the garbage collection algorithm would need to be aware of such a flag, and take it into account when doing its work.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "work":1,
                    "awar":1,
                    "simpli":1,
                    "algorithm":1,
                    "flag":1,
                    "account":1,
                    "collect":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm not aware of any of the standard GC algorithms having such a flag, so for this to work you would need to write your own GC algorithm (after deciding on some feasible way to communicate this information to it).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333042]-[1576631608]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm not aware of any of the standard GC algorithms having such a flag, so for this to work you would need to write your own GC algorithm (after deciding on some feasible way to communicate this information to it).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "decid":1,
                    "standard":1,
                    "feasibl":1,
                    "work":1,
                    "awar":1,
                    "algorithm":2,
                    "inform":1,
                    "flag":1,
                    "communic":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In principle, in fact, you've already started down this track - you're deciding how garbage collection should be done rather than being happy to leaving it to the JVM's GC algo. Is the situation you describe a measurable problem for you; something for which the existing garbage collection is insufficient, but your plan would work? Garbage collectors are extremely well-tuned, so I wouldn't be surprised if the &quot;inefficient&quot; default strategy is actually faster than your naively-optimal one. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333042]-[2083599160]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In principle, in fact, you've already started down this track - you're deciding how garbage collection should be done rather than being happy to leaving it to the JVM's GC algo. Is the situation you describe a measurable problem for you; something for which the existing garbage collection is insufficient, but your plan would work? Garbage collectors are extremely well-tuned, so I wouldn't be surprised if the &quot;inefficient&quot; default strategy is actually faster than your naively-optimal one. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "naiv":1,
                    "tune":1,
                    "decid":1,
                    "jvm":1,
                    "collector":1,
                    "faster":1,
                    "exist":1,
                    "problem":1,
                    "track":1,
                    "algo":1,
                    "strategi":1,
                    "insuffici":1,
                    "principl":1,
                    "work":1,
                    "leav":1,
                    "surpris":1,
                    "measur":1,
                    "fact":1,
                    "situat":1,
                    "optim":1,
                    "wouldn":1,
                    "extrem":1,
                    "ineffici":1,
                    "quot":2,
                    "collect":2,
                    "happi":1,
                    "start":1,
                    "describ":1,
                    "garbag":3,
                    "plan":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(Doing manual memory management is tricky and error-prone at the best of times; managing <em>some</em> memory yourself while using a stock garbage collector to handle the rest seems even worse. I expect you'd run into a lot of edge cases where the GC assumes it &quot;knows&quot; what's happening with the whole heap, which would no longer be true. Steer clear if you can...)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11333042]-[678501470]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(Doing manual memory management is tricky and error-prone at the best of times; managing <em>some</em> memory yourself while using a stock garbage collector to handle the rest seems even worse. I expect you'd run into a lot of edge cases where the GC assumes it &quot;knows&quot; what's happening with the whole heap, which would no longer be true. Steer clear if you can...)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "steer":1,
                    "stock":1,
                    "assum":1,
                    "collector":1,
                    "tricki":1,
                    "happen":1,
                    "clear":1,
                    "rest":1,
                    "run":1,
                    "wors":1,
                    "prone":1,
                    "error":1,
                    "expect":1,
                    "true":1,
                    "lot":1,
                    "quot":2,
                    "longer":1,
                    "time":1,
                    "heap":1,
                    "case":1,
                    "manag":2,
                    "manual":1,
                    "edg":1,
                    "handl":1,
                    "garbag":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11332970,
      "questionId":11332239,
      "comments":[
        
      ],
      "creationDate":"2012-07-04",
      "lastActivityDate":"2012-07-04",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is it possible to mark java objects non-collectable from gc perspective to save on gc-sweep time?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332970]-[612175042]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is it possible to mark java objects non-collectable from gc perspective to save on gc-sweep time?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sweep":1,
                    "blockquot":2,
                    "object":1,
                    "perspect":1,
                    "collect":1,
                    "time":1,
                    "mark":1,
                    "save":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No it is not possible.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332970]-[-2009553925]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No it is not possible.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can prevent objects from being garbage collected by keeping them reachable, but the GC will still need to trace them to check reachability on each full; GC (at least).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332970]-[1758611107]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can prevent objects from being garbage collected by keeping them reachable, but the GC will still need to trace them to check reachability on each full; GC (at least).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "trace":1,
                    "prevent":1,
                    "keep":1,
                    "full":1,
                    "reachabl":2,
                    "object":1,
                    "check":1,
                    "collect":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is simply my assumption, that when the jvm is starving it begins scanning all those unnecessary objects too.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332970]-[1109660208]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is simply my assumption, that when the jvm is starving it begins scanning all those unnecessary objects too.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "begin":1,
                    "starv":1,
                    "scan":1,
                    "blockquot":2,
                    "object":1,
                    "simpli":1,
                    "assumpt":1,
                    "unnecessari":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Yes. That is correct. However, unless you've got LOTS of objects that you want to be treated this way, the overhead is likely to be insignificant. (And anyway, a better idea is to give the JVM more memory ... if that is possible.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11332970]-[1481437446]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Yes. That is correct. However, unless you've got LOTS of objects that you want to be treated this way, the overhead is likely to be insignificant. (And anyway, a better idea is to give the JVM more memory ... if that is possible.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "correct":1,
                    "idea":1,
                    "object":1,
                    "overhead":1,
                    "insignific":1,
                    "give":1,
                    "lot":1,
                    "treat":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11334552,
      "questionId":11332239,
      "comments":[
        
      ],
      "creationDate":"2012-07-04",
      "lastActivityDate":"2012-07-04",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":221441,
        "displayName":"Killerwhile",
        "reputation":26
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Living Java objects will <strong>always</strong> be part of the GC life cycle. Or said another way, marking an object to be non-gc is the same order of overhead than having your object referenced by a root reference (a static final map for instance).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11334552]-[-1805647243]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Living Java objects will <strong>always</strong> be part of the GC life cycle. Or said another way, marking an object to be non-gc is the same order of overhead than having your object referenced by a root reference (a static final map for instance).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "map":1,
                    "root":1,
                    "strong":2,
                    "object":3,
                    "overhead":1,
                    "live":1,
                    "order":1,
                    "refer":1,
                    "life":1,
                    "part":1,
                    "mark":1,
                    "cycl":1,
                    "referenc":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But thinking a bit further, data put in a cache are most likely to be temporary, and would eventually be evicted. At that point you will start again to like the JVM and the GC. If you have 100's of GBs of permanent data, you may want to rethink the architecture of your application, and try to shard and distribute your data (horizontally scalability).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11334552]-[103456306]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But thinking a bit further, data put in a cache are most likely to be temporary, and would eventually be evicted. At that point you will start again to like the JVM and the GC. If you have 100's of GBs of permanent data, you may want to rethink the architecture of your application, and try to shard and distribute your data (horizontally scalability).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "point":1,
                    "cach":1,
                    "bit":1,
                    "data":3,
                    "shard":1,
                    "eventu":1,
                    "perman":1,
                    "temporari":1,
                    "think":1,
                    "scalabl":1,
                    "architectur":1,
                    "applic":1,
                    "evict":1,
                    "put":1,
                    "gbs":1,
                    "start":1,
                    "distribut":1,
                    "rethink":1,
                    "horizont":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Last but not least, lots of work has been done around serialization, and the overhead of serialization (I'm not speaking about the poor reputation of ObjectInputStream and ObjectOutputStream) is not that big. More than that, if your data is mainly composed of primitive types (including bytes array), there is efficient way to readInt() or readBytes() from <em>off heap</em> buffers (for instannce <a href=\"http://static.netty.io/3.5/api/org/jboss/netty/buffer/ChannelBuffer.html\"rel=\"nofollow\">netty.io's ChannelBuffer</a>). This could be a way to go.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11334552]-[-2004203668]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Last but not least, lots of work has been done around serialization, and the overhead of serialization (I'm not speaking about the poor reputation of ObjectInputStream and ObjectOutputStream) is not that big. More than that, if your data is mainly composed of primitive types (including bytes array), there is efficient way to readInt() or readBytes() from <em>off heap</em> buffers (for instannce <a href=\"http://static.netty.io/3.5/api/org/jboss/netty/buffer/ChannelBuffer.html\"rel=\"nofollow\">netty.io's ChannelBuffer</a>). This could be a way to go.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ObjectInputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ObjectOutputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"readInt",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"readBytes",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ChannelBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":2,
                    "read":2,
                    "channel":2,
                    "compos":1,
                    "big":1,
                    "instannc":1,
                    "data":1,
                    "rel":1,
                    "effici":1,
                    "buffer":4,
                    "work":1,
                    "object":2,
                    "includ":1,
                    "overhead":1,
                    "array":1,
                    "jboss":1,
                    "nofollow":1,
                    "poor":1,
                    "stream":2,
                    "reput":1,
                    "lot":1,
                    "api":1,
                    "heap":1,
                    "output":1,
                    "type":1,
                    "org":1,
                    "html":1,
                    "href":1,
                    "primit":1,
                    "netti":3,
                    "http":1,
                    "byte":2,
                    "input":1,
                    "speak":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ObjectInputStream",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ObjectOutputStream",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ChannelBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}