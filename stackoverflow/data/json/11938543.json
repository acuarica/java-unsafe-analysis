{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11938543,
    "title":"Class with private construct instantiated outside class",
    "comments":[
      
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2012-08-13",
    "lastActivityDate":"2012-08-13",
    "score":2,
    "viewCount":98,
    "owner":{
      "type":"StackOverflowUser",
      "id":1026764,
      "displayName":"noMAD",
      "reputation":2840
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I found this code online where the person is instantiating a class which has a private constructor outside the class. I am not able to understand how this works, cause from what I had read earlier, you use a private constructor in a class so that it cannot be instantiated outside the class.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11938543]-[1123221784]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I found this code online where the person is instantiating a class which has a private constructor outside the class. I am not able to understand how this works, cause from what I had read earlier, you use a private constructor in a class so that it cannot be instantiated outside the class.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"which",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"so",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "instanti":2,
                  "onlin":1,
                  "understand":1,
                  "earlier":1,
                  "constructor":2,
                  "work":1,
                  "code":1,
                  "found":1,
                  "person":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public final class A extends B { private A(Something, Something) { //Something } public void someMethods() { //Something } } public final class B { private A a; public void someMethod() { final ObjectInputStream objectInputStream = new ObjectInputStream( new ByteArrayInputStream(buffer.toByteArray())); a = (A) objectInputStream.readObject(); objectInputStream.close(); a.someMethods(); } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[11938543]-[1225999289]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"KeywordModifierNode",
                          "value":"final",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"A",
                        "comments":[
                          
                        ]
                      },
                      "superTypes":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"B",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"TextFragmentNode",
                            "text":"private A(Something, Something) "
                          },
                          {
                            "type":"BlockDeclarationNode",
                            "modifiers":[
                              
                            ],
                            "block":{
                              "type":"BlockNode",
                              "statements":[
                                
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                {
                                  "text":"//Something } public void someMethods() { //Something } } public final class B { private A a; public void someMethod() { final ObjectInputStream objectInputStream = new ObjectInputStream( new ByteArrayInputStream(buffer.toByteArray())); a = (A) objectInputStream.readObject(); objectInputStream.close(); a.someMethods(); } } \n"
                                }
                              ]
                            }
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"public final class A extends B { private A(Something, Something) { //Something } public void someMethods() { //Something } } public final class B { private A a; public void someMethod() { final ObjectInputStream objectInputStream = new ObjectInputStream( new ByteArrayInputStream(buffer.toByteArray())); a = (A) objectInputStream.readObject(); objectInputStream.close(); a.someMethods(); } } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "method":3,
                  "buffer":1,
                  "object":6,
                  "array":2,
                  "stream":6,
                  "close":1,
                  "input":6
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"B",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I just want to understand what exactly is going on here? I tried reading up on <code>ObjectInputStream</code> but could not get anything out of it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11938543]-[1078242823]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I just want to understand what exactly is going on here? I tried reading up on <code>ObjectInputStream</code> but could not get anything out of it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ObjectInputStream",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "understand":1,
                  "object":1,
                  "code":2,
                  "stream":1,
                  "input":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ObjectInputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11938649,
      "questionId":11938543,
      "comments":[
        
      ],
      "creationDate":"2012-08-13",
      "lastActivityDate":"2012-08-13",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1059372,
        "displayName":"Eugene",
        "reputation":7008
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This has to do with Serialization and when you de-serialize, the Constructor is actually NOT called.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11938649]-[-74734441]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This has to do with Serialization and when you de-serialize, the Constructor is actually NOT called.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "call":1,
                    "constructor":1,
                    "serial":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11938671,
      "questionId":11938543,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":15902788,
          "postId":11938671,
          "creationDate":"2012-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 You don't need access to the constructor to perform deserialization."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938671-cu15902788]-[-992876282]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 You don't need access to the constructor to perform deserialization."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "deseri":1,
                        "constructor":1,
                        "perform":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15902900,
          "postId":11938671,
          "creationDate":"2012-08-13",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"In the OpenJDK it calls `Unsafe.allocateInstance(Class)` which allocates an instance of a class without calling a constructor. It needs to do this to restore the fields as it serialized them and a constructor can have side effects."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938671-cu15902900]-[-1011244043]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"In the OpenJDK it calls `Unsafe.allocateInstance(Class)` which allocates an instance of a class without calling a constructor. It needs to do this to restore the fields as it serialized them and a constructor can have side effects."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"allocateInstance",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"without",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "side":1,
                        "alloc":2,
                        "field":1,
                        "restor":1,
                        "effect":1,
                        "constructor":2,
                        "open":1,
                        "unsaf":1,
                        "call":2,
                        "jdk":1,
                        "instanc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15902978,
          "postId":11938671,
          "creationDate":"2012-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"For reference, OP, this _appears_ to be something of a dirty hack."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938671-cu15902978]-[-2061897030]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"For reference, OP, this _appears_ to be something of a dirty hack."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_appears_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "refer":1,
                        "hack":1,
                        "appear":1,
                        "dirti":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15903474,
          "postId":11938671,
          "creationDate":"2012-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1026764,
            "displayName":"noMAD",
            "reputation":2840
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PeterLawrey: I tried the `Unsafe` class but could not find a static method `allocateInstance(Class)` in it. It says the `Unsafe` is undocumented. When I checked the code, all the methods in there are deprecated."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938671-cu15903474]-[632656270]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PeterLawrey: I tried the `Unsafe` class but could not find a static method `allocateInstance(Class)` in it. It says the `Unsafe` is undocumented. When I checked the code, all the methods in there are deprecated."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"but",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"allocateInstance",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "method":2,
                        "alloc":1,
                        "peter":1,
                        "code":1,
                        "undocu":1,
                        "deprec":1,
                        "check":1,
                        "unsaf":2,
                        "lawrey":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15904977,
          "postId":11938671,
          "creationDate":"2012-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"have a look http://www.docjar.com/html/api/sun/misc/Unsafe.java.html `/** Allocate an instance but do not run any constructor. Initializes the class if it has not yet been. */ public native Object allocateInstance(Class cls) throws InstantiationException;`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938671-cu15904977]-[-1495923462]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"have a look http://www.docjar.com/html/api/sun/misc/Unsafe.java.html `/** Allocate an instance but do not run any constructor. Initializes the class if it has not yet been. */ public native Object allocateInstance(Class cls) throws InstantiationException;`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"MethodDeclaratorNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"KeywordModifierNode",
                            "value":"native",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "returnType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Object",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        },
                        "parameters":{
                          "type":"FormalParametersNode",
                          "parameters":{
                            "type":"FormalParameterDeclsNode",
                            "modifiers":[
                              
                            ],
                            "parameterType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Class",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "nextDeclarator":{
                              "type":"AdditionalFormalParameterDeclNode",
                              "variableDeclarator":{
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"cls",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "arrayReturnType":[
                          
                        ],
                        "thrownExceptions":{
                          "type":"ThrownExceptionsNode",
                          "qualifiedIdentifierList":{
                            "type":"QualifiedIdentifierListNode",
                            "qualifiedNames":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"InstantiationException",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alloc":2,
                        "instanti":1,
                        "docjar":1,
                        "run":1,
                        "sun":1,
                        "constructor":1,
                        "object":1,
                        "cls":1,
                        "misc":1,
                        "initi":1,
                        "api":1,
                        "unsaf":1,
                        "html":2,
                        "http":1,
                        "instanc":2,
                        "www":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Object",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Class",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"cls",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-08-13",
      "lastActivityDate":"2012-08-13",
      "lastEditDate":"2012-08-13",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1442874,
        "displayName":"Chris Gerken",
        "reputation":9354
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Looks like the code is instantiating an object via serialization and then casting that object to class A. Nowhere in here is the class A constructor invoked.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11938671]-[-970215889]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Looks like the code is instantiating an object via serialization and then casting that object to class A. Nowhere in here is the class A constructor invoked.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"A",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"A",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "instanti":1,
                    "invok":1,
                    "constructor":1,
                    "object":2,
                    "code":1,
                    "cast":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11938719,
      "questionId":11938543,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":15903590,
          "postId":11938719,
          "creationDate":"2012-08-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1026764,
            "displayName":"noMAD",
            "reputation":2840
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So does that mean that this particular object behaves like a static object? Meaning, there would be only one instance of it since it got mapped form the heap? Not sure if I am clear."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938719-cu15903590]-[-776926721]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So does that mean that this particular object behaves like a static object? Meaning, there would be only one instance of it since it got mapped form the heap? Not sure if I am clear."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "map":1,
                        "clear":1,
                        "mean":1,
                        "behav":1,
                        "object":2,
                        "heap":1,
                        "form":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15947868,
          "postId":11938719,
          "creationDate":"2012-08-15",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":637853,
            "displayName":"Thomas",
            "reputation":38670
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Well, there's always only one instance of an object since an object _is_ an instance of a class. If you mean if this would be something like a singleton (only one instance of a class), then the answer is no. You can serialize and deserialize multiple objects of the same class."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11938719-cu15947868]-[-123508680]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Well, there's always only one instance of an object since an object _is_ an instance of a class. If you mean if this would be something like a singleton (only one instance of a class), then the answer is no. You can serialize and deserialize multiple objects of the same class."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_is_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "object":3,
                        "answer":1,
                        "singleton":1,
                        "deseri":1,
                        "multipl":1,
                        "instanc":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-08-13",
      "lastActivityDate":"2012-08-13",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":637853,
        "displayName":"Thomas",
        "reputation":38670
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Well, the constructor is never called since the object is not being constructed but deserialized. Thus the access modifier has no effect here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11938719]-[-1503408335]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Well, the constructor is never called since the object is not being constructed but deserialized. Thus the access modifier has no effect here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "effect":1,
                    "constructor":1,
                    "object":1,
                    "modifi":1,
                    "deseri":1,
                    "call":1,
                    "construct":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Serialization is basically the process of writing part of the content of the heap into some stream/file etc. Constructing an object will create a new object on the heap and call the constructor to initialize it. It then has a state which is retained during serialization. Hence there's no need for initializing that object again when it is deserialized. It's just like reading that part of the heap from a stream/file into memory again.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11938719]-[-1555560561]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Serialization is basically the process of writing part of the content of the heap into some stream/file etc. Constructing an object will create a new object on the heap and call the constructor to initialize it. It then has a state which is retained during serialization. Hence there's no need for initializing that object again when it is deserialized. It's just like reading that part of the heap from a stream/file into memory again.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":2,
                    "read":1,
                    "state":1,
                    "process":1,
                    "constructor":1,
                    "retain":1,
                    "object":3,
                    "stream":2,
                    "content":1,
                    "file":2,
                    "initi":2,
                    "part":2,
                    "heap":3,
                    "deseri":1,
                    "basic":1,
                    "creat":1,
                    "call":1,
                    "construct":1,
                    "write":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Besides that, keep in mind that there are ways to circumvent access modifiers by using reflection.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11938719]-[607195947]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Besides that, keep in mind that there are ways to circumvent access modifiers by using reflection.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "way":1,
                    "mind":1,
                    "modifi":1,
                    "circumv":1,
                    "reflect":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}