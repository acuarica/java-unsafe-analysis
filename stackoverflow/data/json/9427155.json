{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9427155,
    "title":"Storing state in Java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":11919291,
        "postId":9427155,
        "creationDate":"2012-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":635306,
          "displayName":"Pavan",
          "reputation":1057
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If the kind of recovery you are looking at is transactional, then storing the progress data in a DB might be a good option. Otherwise, I am not sure if there is any way of doing this, without loosing data in the event of a crash/shutdown. After all, how do you make a process (at the end of the day, JVM is a process) do the right thing when you issue, say, a &quot;kill -9&quot;?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9427155-cu11919291]-[-2123600669]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If the kind of recovery you are looking at is transactional, then storing the progress data in a DB might be a good option. Otherwise, I am not sure if there is any way of doing this, without loosing data in the event of a crash/shutdown. After all, how do you make a process (at the end of the day, JVM is a process) do the right thing when you issue, say, a &quot;kill -9&quot;?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "event":1,
                      "good":1,
                      "process":2,
                      "crash":1,
                      "data":2,
                      "option":1,
                      "thing":1,
                      "store":1,
                      "issu":1,
                      "loos":1,
                      "shutdown":1,
                      "transact":1,
                      "progress":1,
                      "make":1,
                      "end":1,
                      "quot":2,
                      "kind":1,
                      "recoveri":1,
                      "kill":1,
                      "day":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11919402,
        "postId":9427155,
        "creationDate":"2012-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":558243,
          "displayName":"Neeraj",
          "reputation":2331
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@PavanSudarshan If you are worried about a kill -9, then even this approach will not help :)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9427155-cu11919402]-[1678272217]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@PavanSudarshan If you are worried about a kill -9, then even this approach will not help :)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PavanSudarshan",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pavan":1,
                      "sudarshan":1,
                      "approach":1,
                      "worri":1,
                      "kill":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11920155,
        "postId":9427155,
        "creationDate":"2012-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":635306,
          "displayName":"Pavan",
          "reputation":1057
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If that is not the case, then just have an internal state that gets persisted in a JVM shutdown hook. This should work just fine right?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9427155-cu11920155]-[1927806358]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If that is not the case, then just have an internal state that gets persisted in a JVM shutdown hook. This should work just fine right?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "state":1,
                      "work":1,
                      "shutdown":1,
                      "persist":1,
                      "hook":1,
                      "fine":1,
                      "intern":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11918759,
        "postId":9427155,
        "creationDate":"2012-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":187141,
          "displayName":"yegor256",
          "reputation":26003
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If it's a command line application [Spring Batch](http://static.springsource.org/spring-batch/) may help you, in certain way"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9427155-cu11918759]-[-420168935]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If it's a command line application [Spring Batch](http://static.springsource.org/spring-batch/) may help you, in certain way"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "springsourc":1,
                      "line":1,
                      "spring":2,
                      "command":1,
                      "batch":2,
                      "applic":1,
                      "org":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11918987,
        "postId":9427155,
        "creationDate":"2012-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":917616,
          "displayName":"NiranjanBhat",
          "reputation":981
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Check this out :[persisting state of JVM][1] [1]: http://stackoverflow.com/questions/424341/are-there-any-java-vms-which-can-save-their-state-to-a-file-and-then-reload-that"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9427155-cu11918987]-[9490863]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Check this out :[persisting state of JVM][1] [1]: http://stackoverflow.com/questions/424341/are-there-any-java-vms-which-can-save-their-state-to-a-file-and-then-reload-that"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "question":1,
                      "state":2,
                      "stackoverflow":1,
                      "persist":1,
                      "check":1,
                      "vms":1,
                      "file":1,
                      "save":1,
                      "http":1,
                      "reload":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "persistence"
    ],
    "creationDate":"2012-02-24",
    "lastActivityDate":"2013-08-23",
    "score":4,
    "viewCount":944,
    "owner":{
      "type":"StackOverflowUser",
      "id":558243,
      "displayName":"Neeraj",
      "reputation":2331
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Broad discussion question. Are there any libraries already which allow me to store the state of execution of my application in Java?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9427155]-[1628887304]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Broad discussion question. Are there any libraries already which allow me to store the state of execution of my application in Java?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "state":1,
                  "broad":1,
                  "store":1,
                  "librari":1,
                  "discuss":1,
                  "applic":1,
                  "execut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>E.g I have an application which processes files, now the application may be forced to shutdown suddenly at some point.I want to store the information on what all files have been processed and what all have not been, and what stage the processing was on for the ongoing processes.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9427155]-[1647674481]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>E.g I have an application which processes files, now the application may be forced to shutdown suddenly at some point.I want to store the information on what all files have been processed and what all have not been, and what stage the processing was on for the ongoing processes.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "stage":1,
                  "point":1,
                  "process":4,
                  "store":1,
                  "shutdown":1,
                  "ongo":1,
                  "inform":1,
                  "applic":2,
                  "file":2,
                  "forc":1,
                  "sudden":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Are there already any libraries which abstract this functionality or I would have to implement it from scratch?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9427155]-[-620390689]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Are there already any libraries which abstract this functionality or I would have to implement it from scratch?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "function":1,
                  "scratch":1,
                  "librari":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18413366,
      "questionId":9427155,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":27050639,
          "postId":18413366,
          "creationDate":"2013-08-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":558243,
            "displayName":"Neeraj",
            "reputation":2331
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think you understood the question incorrectly. Please read the whole description again."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18413366-cu27050639]-[-383799354]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think you understood the question incorrectly. Please read the whole description again."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "question":1,
                        "descript":1,
                        "understood":1,
                        "incorrect":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":27051603,
          "postId":18413366,
          "creationDate":"2013-08-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":714112,
            "displayName":"Sridhar-Sarnobat",
            "reputation":1311
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ooops, I was looking for some persistent configuration storage and found my answer here and forgot that this question is asking something different. Thanks."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18413366-cu27051603]-[-277258715]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ooops, I was looking for some persistent configuration storage and found my answer here and forgot that this question is asking something different. Thanks."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "ooop":1,
                        "configur":1,
                        "persist":1,
                        "found":1,
                        "forgot":1,
                        "answer":1,
                        "storag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-23",
      "lastActivityDate":"2013-08-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":714112,
        "displayName":"Sridhar-Sarnobat",
        "reputation":1311
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Apache Commons Configuration API: <a href=\"http://commons.apache.org/proper/commons-configuration/userguide/howto_filebased.html#File-based_Configurations\"rel=\"nofollow\">http://commons.apache.org/proper/commons-configuration/userguide/howto_filebased.html#File-based_Configurations</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18413366]-[-141539012]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Apache Commons Configuration API: <a href=\"http://commons.apache.org/proper/commons-configuration/userguide/howto_filebased.html#File-based_Configurations\"rel=\"nofollow\">http://commons.apache.org/proper/commons-configuration/userguide/howto_filebased.html#File-based_Configurations</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IdentifierNode",
                    "name":"howto_filebased",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"based_Configurations",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "howto":2,
                    "apach":3,
                    "proper":2,
                    "filebas":2,
                    "rel":1,
                    "configur":5,
                    "base":2,
                    "nofollow":1,
                    "common":5,
                    "file":2,
                    "api":1,
                    "org":2,
                    "html":2,
                    "href":1,
                    "userguid":2,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9427385,
      "questionId":9427155,
      "comments":[
        
      ],
      "creationDate":"2012-02-24",
      "lastActivityDate":"2012-02-24",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":338004,
        "displayName":"jowierun",
        "reputation":4352
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It sounds like the Java Preferences API might be a good option for you. This can store user/system settings with minimal effort on your part and you can update/retrieve at any time. <a href=\"http://docs.oracle.com/javase/1.4.2/docs/guide/lang/preferences.html\"rel=\"nofollow\">http://docs.oracle.com/javase/1.4.2/docs/guide/lang/preferences.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427385]-[-1481179781]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It sounds like the Java Preferences API might be a good option for you. This can store user/system settings with minimal effort on your part and you can update/retrieve at any time. <a href=\"http://docs.oracle.com/javase/1.4.2/docs/guide/lang/preferences.html\"rel=\"nofollow\">http://docs.oracle.com/javase/1.4.2/docs/guide/lang/preferences.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "minim":1,
                    "effort":1,
                    "system":1,
                    "guid":2,
                    "retriev":1,
                    "good":1,
                    "set":1,
                    "updat":1,
                    "option":1,
                    "rel":1,
                    "oracl":2,
                    "store":1,
                    "doc":4,
                    "nofollow":1,
                    "sound":1,
                    "javas":2,
                    "api":1,
                    "time":1,
                    "part":1,
                    "lang":2,
                    "html":2,
                    "href":1,
                    "http":2,
                    "user":1,
                    "prefer":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9428392,
      "questionId":9427155,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11920525,
          "postId":9428392,
          "creationDate":"2012-02-24",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":558243,
            "displayName":"Neeraj",
            "reputation":2331
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This is great!!Thanks a lot Peter.Worth a read and I would certainly try it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9428392-cu11920525]-[441996119]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This is great!!Thanks a lot Peter.Worth a read and I would certainly try it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "peter":1,
                        "worth":1,
                        "lot":1,
                        "great":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11920630,
          "postId":9428392,
          "creationDate":"2012-02-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Its worth a read, even if you don't use it. i.e. I don't want to be seen as pushing my own library. I just think its a cool/interesting approach that more people should know about."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9428392-cu11920630]-[1318536322]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Its worth a read, even if you don't use it. i.e. I don't want to be seen as pushing my own library. I just think its a cool/interesting approach that more people should know about."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "push":1,
                        "librari":1,
                        "interest":1,
                        "worth":1,
                        "cool":1,
                        "approach":1,
                        "peopl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-02-24",
      "lastActivityDate":"2012-02-24",
      "lastEditDate":"2012-02-24",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are almost too many ways to mention. I would choice the option you believe is simplest.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-822369296]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are almost too many ways to mention. I would choice the option you believe is simplest.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "option":1,
                    "way":1,
                    "mention":1,
                    "choic":1,
                    "simplest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can use;</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-83954192]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can use;</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>a file to record what is done (and what is to be done)</li> \n <li>a persistent queue on JMS (which support multiple processes, even on different machine)</li> \n <li>a embedded or remote database.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-626332421]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>a file to record what is done (and what is to be done)</li> \n <li>a persistent queue on JMS (which support multiple processes, even on different machine)</li> \n <li>a embedded or remote database.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "jms":1,
                    "queue":1,
                    "process":1,
                    "embed":1,
                    "persist":1,
                    "machin":1,
                    "file":1,
                    "databas":1,
                    "multipl":1,
                    "record":1,
                    "remot":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>An approach I rave about is using memory mapped files. A nice feature is that information is not lost if the application dies or is killed (provided the OS doesn't crash) which means you don't have to flush it, nor worry about losing data if you don't.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-1248688533]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>An approach I rave about is using memory mapped files. A nice feature is that information is not lost if the application dies or is killed (provided the OS doesn't crash) which means you don't have to flush it, nor worry about losing data if you don't.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "map":1,
                    "crash":1,
                    "data":1,
                    "mean":1,
                    "nice":1,
                    "lost":1,
                    "rave":1,
                    "die":1,
                    "inform":1,
                    "applic":1,
                    "approach":1,
                    "flush":1,
                    "file":1,
                    "featur":1,
                    "worri":1,
                    "kill":1,
                    "lose":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This works because the data is partly managed by the OS which means it uses little heap (even for TB of data) and the OS deals with loading and flushing to disk making it much faster (and making sizes much larger than your main memory practical).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-1641731132]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This works because the data is partly managed by the OS which means it uses little heap (even for TB of data) and the OS deals with loading and flushing to disk making it much faster (and making sizes much larger than your main memory practical).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "size":1,
                    "disk":1,
                    "data":2,
                    "mean":1,
                    "load":1,
                    "main":1,
                    "work":1,
                    "larger":1,
                    "make":2,
                    "flush":1,
                    "part":1,
                    "heap":1,
                    "practic":1,
                    "manag":1,
                    "deal":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>BTW: This approach works even with a <code>kill -9</code> as the OS flushes the data to disk. To test this I use <code>Unsafe.getByte(0)</code> which crashes the application with a SEG fault immediately after making a change (as in the next machine code instruction) and it still writes the change to disk.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[694612535]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>BTW: This approach works even with a <code>kill -9</code> as the OS flushes the data to disk. To test this I use <code>Unsafe.getByte(0)</code> which crashes the application with a SEG fault immediately after making a change (as in the next machine code instruction) and it still writes the change to disk.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getByte",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":2,
                    "test":1,
                    "disk":2,
                    "btw":1,
                    "crash":1,
                    "data":1,
                    "seg":1,
                    "work":1,
                    "code":5,
                    "machin":1,
                    "applic":1,
                    "make":1,
                    "approach":1,
                    "flush":1,
                    "unsaf":1,
                    "fault":1,
                    "immedi":1,
                    "kill":1,
                    "write":1,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This won't work if you pull the power, but you have to be really quick. You can use memory mapped files to force the data to disk before continuing, but I don't know how you can test this really works. ;)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-673445562]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This won't work if you pull the power, but you have to be really quick. You can use memory mapped files to force the data to disk before continuing, but I don't know how you can test this really works. ;)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "disk":1,
                    "map":1,
                    "continu":1,
                    "data":1,
                    "work":2,
                    "file":1,
                    "pull":1,
                    "quick":1,
                    "power":1,
                    "forc":1,
                    "won":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have a library which could make memory mapped files easier to use</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[1736179288]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have a library which could make memory mapped files easier to use</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "map":1,
                    "librari":1,
                    "easier":1,
                    "make":1,
                    "file":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"https://github.com/peter-lawrey/Java-Chronicle\"rel=\"nofollow\">https://github.com/peter-lawrey/Java-Chronicle</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-139711516]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"https://github.com/peter-lawrey/Java-Chronicle\"rel=\"nofollow\">https://github.com/peter-lawrey/Java-Chronicle</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":2,
                    "peter":2,
                    "rel":1,
                    "https":2,
                    "nofollow":1,
                    "href":1,
                    "lawrey":2,
                    "chronicl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Its a not long read and you can use it as an example.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9428392]-[-944930696]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Its a not long read and you can use it as an example.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9427243,
      "questionId":9427155,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11919100,
          "postId":9427243,
          "creationDate":"2012-02-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":866172,
            "displayName":"Jalayn",
            "reputation":2667
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Nishant I don't see a difference with your solution ? What if the connection to the DB is severed ? I think both our solutions need something like a separate thread for persisting the state of the application whenever something changes, for example by implementing the Observable interface into the ApplicationState. What do you think ?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9427243-cu11919100]-[-127323773]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Nishant I don't see a difference with your solution ? What if the connection to the DB is severed ? I think both our solutions need something like a separate thread for persisting the state of the application whenever something changes, for example by implementing the Observable interface into the ApplicationState. What do you think ?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Nishant",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "observ":1,
                        "connect":1,
                        "state":2,
                        "differ":1,
                        "separ":1,
                        "persist":1,
                        "thread":1,
                        "sever":1,
                        "nishant":1,
                        "applic":2,
                        "implement":1,
                        "solut":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11919398,
          "postId":9427243,
          "creationDate":"2012-02-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":298455,
            "displayName":"Nishant",
            "reputation":25249
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"ah yeah, my bad, you'd be serializing after each module of processing is over. And probably, a List of files that have been processed will be serialized all along. don't mind my doubt above."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9427243-cu11919398]-[-999337506]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"ah yeah, my bad, you'd be serializing after each module of processing is over. And probably, a List of files that have been processed will be serialized all along. don't mind my doubt above."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":2,
                        "process":2,
                        "bad":1,
                        "mind":1,
                        "yeah":1,
                        "modul":1,
                        "doubt":1,
                        "file":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11918902,
          "postId":9427243,
          "creationDate":"2012-02-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":298455,
            "displayName":"Nishant",
            "reputation":25249
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"on sudden shutdown/crash, you wouldn't have time to serialize (or know when to serialize)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9427243-cu11918902]-[612493901]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"on sudden shutdown/crash, you wouldn't have time to serialize (or know when to serialize)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":2,
                        "crash":1,
                        "shutdown":1,
                        "wouldn":1,
                        "time":1,
                        "sudden":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-02-24",
      "lastActivityDate":"2012-02-24",
      "lastEditDate":"2012-02-24",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":866172,
        "displayName":"Jalayn",
        "reputation":2667
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It seems like what you are looking for is serialization which can be performed with the <a href=\"http://java.sun.com/developer/technicalArticles/Programming/serialization/\"rel=\"nofollow\">Java Serialization API</a>. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427243]-[1738425086]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It seems like what you are looking for is serialization which can be performed with the <a href=\"http://java.sun.com/developer/technicalArticles/Programming/serialization/\"rel=\"nofollow\">Java Serialization API</a>. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":3,
                    "program":1,
                    "sun":1,
                    "rel":1,
                    "articl":1,
                    "nofollow":1,
                    "perform":1,
                    "technic":1,
                    "api":1,
                    "href":1,
                    "develop":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can write even less code if you decide to use known libraries such as Apache Commons Lang, and its <a href=\"http://commons.apache.org/lang/api-2.6/org/apache/commons/lang/SerializationUtils.html\"rel=\"nofollow\">SerializationUtils</a> class which itself is built on top the Java Serialization API.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427243]-[-1070103138]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can write even less code if you decide to use known libraries such as Apache Commons Lang, and its <a href=\"http://commons.apache.org/lang/api-2.6/org/apache/commons/lang/SerializationUtils.html\"rel=\"nofollow\">SerializationUtils</a> class which itself is built on top the Java Serialization API.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SerializationUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"which",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":3,
                    "decid":1,
                    "built":1,
                    "apach":3,
                    "util":2,
                    "rel":1,
                    "librari":1,
                    "code":1,
                    "nofollow":1,
                    "common":3,
                    "api":2,
                    "lang":3,
                    "org":2,
                    "html":1,
                    "href":1,
                    "http":1,
                    "top":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SerializationUtils",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Using the latest, serializing/deserializing your application state into a file is done in a few lines.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427243]-[-193642113]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Using the latest, serializing/deserializing your application state into a file is done in a few lines.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "state":1,
                    "line":1,
                    "applic":1,
                    "file":1,
                    "latest":1,
                    "deseri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The only thing you have to do is create a class holding your application state, let's call it... <code>ApplicationState</code> :-) It can look like that:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427243]-[588976987]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The only thing you have to do is create a class holding your application state, let's call it... <code>ApplicationState</code> :-) It can look like that:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"holding",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ApplicationState",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "state":2,
                    "thing":1,
                    "code":2,
                    "hold":1,
                    "applic":2,
                    "creat":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ApplicationState",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class ApplicationState { enum ProcessState { READ_DONE, PROCESSING_STARTED, PROCESSING_ENDED, ANOTHER_STATE; } private List&lt;String&gt; filesDone, filesToDo; private String currentlyProcessingFile; private ProcessState currentProcessState; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[9427243]-[1203696747]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ApplicationState",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"EnumDeclarationNode",
                              "modifiers":[
                                
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ProcessState",
                                "comments":[
                                  
                                ]
                              },
                              "body":{
                                "type":"EnumBodyNode",
                                "constants":{
                                  "type":"EnumConstantsNode",
                                  "constants":[
                                    {
                                      "type":"EnumConstantNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"READ_DONE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    {
                                      "type":"EnumConstantNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"PROCESSING_STARTED",
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    {
                                      "type":"EnumConstantNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"PROCESSING_ENDED",
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    {
                                      "type":"EnumConstantNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"ANOTHER_STATE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "members":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"filesDone",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"List",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "typeArguments":{
                                            "type":"TypeArgumentsNode",
                                            "types":[
                                              {
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"String",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"filesToDo",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"List",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "typeArguments":{
                                            "type":"TypeArgumentsNode",
                                            "types":[
                                              {
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"String",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"currentlyProcessingFile",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"String",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"currentProcessState",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"ProcessState",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class ApplicationState { enum ProcessState { ; } private List<String> filesDone, filesToDo; private String currentlyProcessingFile; private ProcessState currentProcessState; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "state":4,
                    "process":4,
                    "applic":1,
                    "file":3,
                    "current":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"List",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"String",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ProcessState",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"filesDone",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"List",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"String",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"filesToDo",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"List",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"String",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"currentlyProcessingFile",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"currentProcessState",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ProcessState",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>With such a structure, and using SerializationUtils, serializing is done the following way:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427243]-[-1506459474]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>With such a structure, and using SerializationUtils, serializing is done the following way:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SerializationUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "structur":1,
                    "util":1,
                    "serial":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SerializationUtils",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"try { ApplicationState state = new ApplicationState(); ... // File to serialize object to String fileName = &quot;applicationState.ser&quot;; // New file output stream for the file FileOutputStream fos = new FileOutputStream(fileName); // Serialize String SerializationUtils.serialize(state, fos); fos.close(); // Open FileInputStream to the file FileInputStream fis = new FileInputStream(fileName); // Deserialize and cast into String String ser = (String) SerializationUtils.deserialize(fis); System.out.println(ser); fis.close(); } catch (Exception e) { e.printStackTrace(); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[9427243]-[-1241477053]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"try "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"state",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"ConstructorCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"ApplicationState",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionArgs":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"ApplicationState",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"."
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"."
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"."
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"/"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"/"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"File"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"to"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"serialize"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"object"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"to"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"fileName",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"applicationState.ser\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"String",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"// New file output stream for the file FileOutputStream fos = new FileOutputStream(fileName); // Serialize String SerializationUtils.serialize(state, fos); fos.close(); // Open FileInputStream to the file FileInputStream fis = new FileInputStream(fileName); // Deserialize and cast into String String ser = (String) SerializationUtils.deserialize(fis); System.out.println(ser); fis.close(); } catch (Exception e) { e.printStackTrace(); } \n"
                            }
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "rawText":"try { ApplicationState state = new ApplicationState(); ... // File to serialize object to String fileName = \"applicationState.ser\"; // New file output stream for the file FileOutputStream fos = new FileOutputStream(fileName); // Serialize String SerializationUtils.serialize(state, fos); fos.close(); // Open FileInputStream to the file FileInputStream fis = new FileInputStream(fileName); // Deserialize and cast into String String ser = (String) SerializationUtils.deserialize(fis); System.out.println(ser); fis.close(); } catch (Exception e) { e.printStackTrace(); } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":5,
                    "ser":3,
                    "trace":1,
                    "util":2,
                    "system":1,
                    "state":5,
                    "fos":3,
                    "print":1,
                    "fis":3,
                    "println":1,
                    "open":1,
                    "object":1,
                    "cast":1,
                    "stream":6,
                    "applic":3,
                    "stack":1,
                    "file":12,
                    "deseri":2,
                    "output":3,
                    "close":2,
                    "input":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ApplicationState",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"state",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"ApplicationState",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ApplicationState",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"fileName",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"applicationState.ser\""
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9427275,
      "questionId":9427155,
      "comments":[
        
      ],
      "creationDate":"2012-02-24",
      "lastActivityDate":"2012-02-24",
      "lastEditDate":"2012-02-24",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":298455,
        "displayName":"Nishant",
        "reputation":25249
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's pretty simple to make from scratch. You could follow this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427275]-[-1553735436]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's pretty simple to make from scratch. You could follow this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "simpl":1,
                    "pretti":1,
                    "scratch":1,
                    "make":1,
                    "follow":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li><p>Have a DB (or just a file) that stores the information of processing progress. Something like:</p> <pre><code> Id|fileName|status|metadata </code></pre></li> \n <li><p>As soon as you start processing a file make a entry to this table. Ans mark status as <code>PROCESSING</code>, the you can store intermediate states, and finally when you're done you can set status to <code>DONE</code>. <br /><br />This way, on restart, you would know what are the files processed; what are the files that were in-citu when the process shutdown/crashed. And (obviously) where to start.</p></li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427275]-[-2146978778]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li><p>Have a DB (or just a file) that stores the information of processing progress. Something like:</p> <pre><code> Id|fileName|status|metadata </code></pre></li> \n <li><p>As soon as you start processing a file make a entry to this table. Ans mark status as <code>PROCESSING</code>, the you can store intermediate states, and finally when you're done you can set status to <code>DONE</code>. <br /><br />This way, on restart, you would know what are the files processed; what are the files that were in-citu when the process shutdown/crashed. And (obviously) where to start.</p></li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"fileName",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pre":2,
                    "state":1,
                    "process":5,
                    "crash":1,
                    "set":1,
                    "store":2,
                    "citu":1,
                    "code":6,
                    "tabl":1,
                    "shutdown":1,
                    "entri":1,
                    "inform":1,
                    "progress":1,
                    "status":3,
                    "make":1,
                    "metadata":1,
                    "file":5,
                    "an":1,
                    "restart":1,
                    "mark":1,
                    "start":2,
                    "intermedi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In large enterprise environment where applications are loosely coupled (and there is no guarantee if the application will be available or might crash), we use Message Queue to do something like the same to ensure reliable architecture.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9427275]-[-1612114793]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In large enterprise environment where applications are loosely coupled (and there is no guarantee if the application will be available or might crash), we use Message Queue to do something like the same to ensure reliable architecture.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "reliabl":1,
                    "queue":1,
                    "crash":1,
                    "loos":1,
                    "guarante":1,
                    "larg":1,
                    "coupl":1,
                    "architectur":1,
                    "applic":2,
                    "enterpris":1,
                    "messag":1,
                    "environ":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}