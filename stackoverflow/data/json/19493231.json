{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19493231,
    "title":"Converting from decimal base to hexadecimal base",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28914421,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@DavidWallace - Actually, that's just good programming. The &quot;cheat&quot; is in doing string concat on an int and relying on concat to convert the int to a character. Might as well just use Integer.toXxxString."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28914421]-[-1288215729]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@DavidWallace - Actually, that's just good programming. The &quot;cheat&quot; is in doing string concat on an int and relying on concat to convert the int to a character. Might as well just use Integer.toXxxString."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"DavidWallace",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Integer",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"toXxxString",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "charact":1,
                      "cheat":1,
                      "david":1,
                      "good":1,
                      "xxx":1,
                      "concat":2,
                      "wallac":1,
                      "quot":2,
                      "reli":1,
                      "convert":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28912911,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Simplest approach is to define a string &quot;0123456789ABCDEF&quot; and use charAt to access the character corresponding to a 4-bit &quot;nybble&quot; from your source number. Or simply use the support in Integer class."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28912911]-[755671692]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Simplest approach is to define a string &quot;0123456789ABCDEF&quot; and use charAt to access the character corresponding to a 4-bit &quot;nybble&quot; from your source number. Or simply use the support in Integer class."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"charAt",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "number":1,
                      "support":1,
                      "charact":1,
                      "bit":1,
                      "abcdef":1,
                      "simpli":1,
                      "simplest":1,
                      "approach":1,
                      "quot":4,
                      "nybbl":1,
                      "defin":1,
                      "sourc":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28912967,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1081110,
          "displayName":"David Wallace",
          "reputation":28987
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Ooh, sorry, @HotLicks, I didn't see that you had beaten me to it, when I posted my answer. If you want to convert your comment to an answer, I'll remove mine, so that you get the credit."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28912967]-[1745415237]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Ooh, sorry, @HotLicks, I didn't see that you had beaten me to it, when I posted my answer. If you want to convert your comment to an answer, I'll remove mine, so that you get the credit."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HotLicks",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "post":1,
                      "lick":1,
                      "remov":1,
                      "mine":1,
                      "beaten":1,
                      "credit":1,
                      "ooh":1,
                      "comment":1,
                      "answer":2,
                      "hot":1,
                      "convert":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28913013,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't see how the others can work, though. (OK, now I do, but it's a bit of a cheat. You should add the char value `0` to r and cast to char before concatenating.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28913013]-[-1134415214]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't see how the others can work, though. (OK, now I do, but it's a bit of a cheat. You should add the char value `0` to r and cast to char before concatenating.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cheat":1,
                      "bit":1,
                      "work":1,
                      "cast":1,
                      "concaten":1,
                      "add":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28913052,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1081110,
          "displayName":"David Wallace",
          "reputation":28987
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Why not? They're all using a standard algorithm. Of course, I haven't tested this code, but it looks OK to me."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28913052]-[-1991578591]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Why not? They're all using a standard algorithm. Of course, I haven't tested this code, but it looks OK to me."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "algorithm":1,
                      "standard":1,
                      "code":1,
                      "test":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28913143,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"(Not a &quot;standard algorithm&quot; I'm familiar with, relying on string concatenation to convert a number to it's char representation.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28913143]-[1048553304]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"(Not a &quot;standard algorithm&quot; I'm familiar with, relying on string concatenation to convert a number to it's char representation.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "number":1,
                      "represent":1,
                      "familiar":1,
                      "standard":1,
                      "algorithm":1,
                      "quot":2,
                      "reli":1,
                      "concaten":1,
                      "convert":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28913184,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"(Note that you can use one algorithm for all 3 by making the divisor a variable rather than a literal. It doesn't hurt if the translation string is too long.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28913184]-[-496868393]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"(Note that you can use one algorithm for all 3 by making the divisor a variable rather than a literal. It doesn't hurt if the translation string is too long.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "divisor":1,
                      "hurt":1,
                      "liter":1,
                      "algorithm":1,
                      "note":1,
                      "translat":1,
                      "make":1,
                      "variabl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28913207,
        "postId":19493231,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1081110,
          "displayName":"David Wallace",
          "reputation":28987
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Bit of a cheat? No, cheating would be writing something like `(r &lt; 10 ? '0' : '7' ) + (char)r`"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19493231-cu28913207]-[1915291749]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Bit of a cheat? No, cheating would be writing something like `(r &lt; 10 ? '0' : '7' ) + (char)r`"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "bit":1,
                      "write":1,
                      "cheat":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2013-10-21",
    "lastActivityDate":"2013-10-21",
    "lastEditDate":"2013-10-21",
    "score":0,
    "viewCount":108,
    "owner":{
      "type":"StackOverflowUser",
      "id":2902894,
      "displayName":"drgPP",
      "reputation":290
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>i have a question about transforming from decimal base to hexadecimal base in Java. I've done with part of code to transform from Decimal to Binary and Octal, but i've got some problems with hexadecimal, cause i don't know how to make the result to show with A, B, C, D, E and F. Here is mine code:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19493231]-[2055568991]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>i have a question about transforming from decimal base to hexadecimal base in Java. I've done with part of code to transform from Decimal to Binary and Octal, but i've got some problems with hexadecimal, cause i don't know how to make the result to show with A, B, C, D, E and F. Here is mine code:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "show":1,
                  "mine":1,
                  "problem":1,
                  "result":1,
                  "octal":1,
                  "binari":1,
                  "base":2,
                  "code":2,
                  "decim":2,
                  "make":1,
                  "part":1,
                  "transform":2,
                  "hexadecim":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"package transformare1; import java.io.*; public class Transformare1 { public static void main(String[] args)throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); System.out.println (&quot;Introduceti un numar natural in baza 10 &quot;); int n = Integer.parseInt(br.readLine()); System.out.println (&quot;Alegeti in ce baza sa fie convertit numarul: 2, 8, 16 &quot;); int n1 = Integer.parseInt(br.readLine()); if (n1==2){ String b = &quot;&quot;; while (n!=0){ int r = (int)(n%2); b = r+b; n /=2; } System.out.println (&quot;Numarul binar este &quot;+b); } else if (n1==8){ String b = &quot;&quot;; while (n!=0){ int r = (int)(n%8); b = r+b; n /=8; } System.out.println (&quot;Numarul octal este &quot;+b); } else if (n1==16){ String b =&quot;&quot;; while (n!=0){ int r = (int)(n%16); b = r+b; n /=16; final char A=10; final char B=11; final char C=12; final char D=13; final char E=14; final char F=15; } System.out.println (&quot;Numarul hexadecimal este &quot;+b); }} } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19493231]-[-1901064515]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "packageDeclaration":{
                    "type":"PackageDeclarationNode",
                    "annotations":[
                      
                    ],
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"transformare1",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "imports":[
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"io",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    }
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Transformare1",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"void",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"main",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "parameters":{
                                "type":"FormalParameterDeclsNode",
                                "modifiers":[
                                  
                                ],
                                "parameterType":{
                                  "type":"ArrayTypeNode",
                                  "typeNode":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "depth":[
                                    {
                                      "type":"ArrayDimensionNode",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ]
                                },
                                "nextDeclarator":{
                                  "type":"AdditionalFormalParameterDeclNode",
                                  "variableDeclarator":{
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"args",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "thrownExceptions":{
                              "type":"ThrownExceptionsNode",
                              "qualifiedIdentifierList":{
                                "type":"QualifiedIdentifierListNode",
                                "qualifiedNames":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"IOException",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"br",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"ConstructorCreatorNode",
                                              "creatorType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"BufferedReader",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "expressionArgs":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"ConstructorCreatorNode",
                                                    "creatorType":{
                                                      "type":"ReferenceTypeNode",
                                                      "ids":[
                                                        {
                                                          "type":"ParameterizedTypeNode",
                                                          "identifier":{
                                                            "type":"IdentifierNode",
                                                            "name":"InputStreamReader",
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "expressionArgs":{
                                                      "type":"ExpressionListNode",
                                                      "arguments":[
                                                        {
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"System",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"in",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"BufferedReader",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"out",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"println",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"StringLiteralNode",
                                            "valueRep":"\"Introduceti un numar natural in baza 10 \""
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"n",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"MethodInvocationNode",
                                              "qualifiedIdentifier":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"Integer",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"parseInt",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "args":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"MethodInvocationNode",
                                                    "qualifiedIdentifier":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"br",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"readLine",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "args":{
                                                      "type":"ExpressionListNode",
                                                      "arguments":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"PrimitiveTypeNode",
                                          "name":"int",
                                          "comments":[
                                            
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"out",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"println",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"StringLiteralNode",
                                            "valueRep":"\"Alegeti in ce baza sa fie convertit numarul: 2, 8, 16 \""
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"n1",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"MethodInvocationNode",
                                              "qualifiedIdentifier":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"Integer",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"parseInt",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "args":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"MethodInvocationNode",
                                                    "qualifiedIdentifier":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"br",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"readLine",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "args":{
                                                      "type":"ExpressionListNode",
                                                      "arguments":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"PrimitiveTypeNode",
                                          "name":"int",
                                          "comments":[
                                            
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IfStatementNode",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"==",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"n1",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"2"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "statement":{
                                    "type":"BlockNode",
                                    "statements":[
                                      {
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"b",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"StringLiteralNode",
                                                      "valueRep":"\"\""
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"String",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"WhileStatementNode",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"!=",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"n",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"0"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "statement":{
                                          "type":"BlockNode",
                                          "statements":[
                                            {
                                              "type":"LocalVariableDeclarationStatementNode",
                                              "modifiers":[
                                                
                                              ],
                                              "declarators":{
                                                "type":"VariableDeclaratorsNode",
                                                "declarators":[
                                                  {
                                                    "type":"VariableDeclaratorNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"r",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "arrayDepth":[
                                                      
                                                    ],
                                                    "assignment":{
                                                      "type":"VariableAssignmentNode",
                                                      "variableAssignment":{
                                                        "type":"VariableExpressionInitNode",
                                                        "expression":{
                                                          "type":"CastExpressionNode",
                                                          "aType":{
                                                            "type":"PrimitiveTypeNode",
                                                            "name":"int",
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "argument":{
                                                            "type":"BinaryExpressionNode",
                                                            "operator":{
                                                              "type":"OperatorNode",
                                                              "symbol":"%",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "left":{
                                                              "type":"QualifiedIdentifierNode",
                                                              "identifiers":[
                                                                {
                                                                  "type":"IdentifierNode",
                                                                  "name":"n",
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              ],
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "right":{
                                                              "type":"LiteralNode",
                                                              "node":{
                                                                "type":"IntegerLiteralNode",
                                                                "valueRep":"2"
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "varType":{
                                                      "type":"PrimitiveTypeNode",
                                                      "name":"int",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "labels":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"ExpressionStatement",
                                              "expression":{
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"=",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"b",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"BinaryExpressionNode",
                                                  "operator":{
                                                    "type":"OperatorNode",
                                                    "symbol":"+",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "left":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"r",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "right":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"b",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "labels":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"ExpressionStatement",
                                              "expression":{
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"/=",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"n",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"IntegerLiteralNode",
                                                    "valueRep":"2"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "labels":[
                                                
                                              ]
                                            }
                                          ],
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"ExpressionStatement",
                                        "expression":{
                                          "type":"MethodInvocationNode",
                                          "qualifiedIdentifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"System",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"out",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"println",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "args":{
                                            "type":"ExpressionListNode",
                                            "arguments":[
                                              {
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"+",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"StringLiteralNode",
                                                    "valueRep":"\"Numarul binar este \""
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"b",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "elseStatement":{
                                    "type":"ElseStatementNode",
                                    "statement":{
                                      "type":"IfStatementNode",
                                      "expression":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"==",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"n1",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"8"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "statement":{
                                        "type":"BlockNode",
                                        "statements":[
                                          {
                                            "type":"LocalVariableDeclarationStatementNode",
                                            "modifiers":[
                                              
                                            ],
                                            "declarators":{
                                              "type":"VariableDeclaratorsNode",
                                              "declarators":[
                                                {
                                                  "type":"VariableDeclaratorNode",
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"b",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "arrayDepth":[
                                                    
                                                  ],
                                                  "assignment":{
                                                    "type":"VariableAssignmentNode",
                                                    "variableAssignment":{
                                                      "type":"VariableExpressionInitNode",
                                                      "expression":{
                                                        "type":"LiteralNode",
                                                        "node":{
                                                          "type":"StringLiteralNode",
                                                          "valueRep":"\"\""
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "varType":{
                                                    "type":"ReferenceTypeNode",
                                                    "ids":[
                                                      {
                                                        "type":"ParameterizedTypeNode",
                                                        "identifier":{
                                                          "type":"IdentifierNode",
                                                          "name":"String",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"WhileStatementNode",
                                            "expression":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"!=",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"n",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "statement":{
                                              "type":"BlockNode",
                                              "statements":[
                                                {
                                                  "type":"LocalVariableDeclarationStatementNode",
                                                  "modifiers":[
                                                    
                                                  ],
                                                  "declarators":{
                                                    "type":"VariableDeclaratorsNode",
                                                    "declarators":[
                                                      {
                                                        "type":"VariableDeclaratorNode",
                                                        "identifier":{
                                                          "type":"IdentifierNode",
                                                          "name":"r",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "arrayDepth":[
                                                          
                                                        ],
                                                        "assignment":{
                                                          "type":"VariableAssignmentNode",
                                                          "variableAssignment":{
                                                            "type":"VariableExpressionInitNode",
                                                            "expression":{
                                                              "type":"CastExpressionNode",
                                                              "aType":{
                                                                "type":"PrimitiveTypeNode",
                                                                "name":"int",
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              "argument":{
                                                                "type":"BinaryExpressionNode",
                                                                "operator":{
                                                                  "type":"OperatorNode",
                                                                  "symbol":"%",
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                },
                                                                "left":{
                                                                  "type":"QualifiedIdentifierNode",
                                                                  "identifiers":[
                                                                    {
                                                                      "type":"IdentifierNode",
                                                                      "name":"n",
                                                                      "comments":[
                                                                        
                                                                      ]
                                                                    }
                                                                  ],
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                },
                                                                "right":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"8"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                },
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "varType":{
                                                          "type":"PrimitiveTypeNode",
                                                          "name":"int",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "labels":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                {
                                                  "type":"ExpressionStatement",
                                                  "expression":{
                                                    "type":"BinaryExpressionNode",
                                                    "operator":{
                                                      "type":"OperatorNode",
                                                      "symbol":"=",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "left":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"b",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "right":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"+",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"r",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"b",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "labels":[
                                                    
                                                  ]
                                                },
                                                {
                                                  "type":"ExpressionStatement",
                                                  "expression":{
                                                    "type":"BinaryExpressionNode",
                                                    "operator":{
                                                      "type":"OperatorNode",
                                                      "symbol":"/=",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "left":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"n",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "right":{
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"IntegerLiteralNode",
                                                        "valueRep":"8"
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "labels":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "labels":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"ExpressionStatement",
                                            "expression":{
                                              "type":"MethodInvocationNode",
                                              "qualifiedIdentifier":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"System",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"out",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"println",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "args":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"BinaryExpressionNode",
                                                    "operator":{
                                                      "type":"OperatorNode",
                                                      "symbol":"+",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "left":{
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"StringLiteralNode",
                                                        "valueRep":"\"Numarul octal este \""
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "right":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"b",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "labels":[
                                              
                                            ]
                                          }
                                        ],
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "elseStatement":{
                                        "type":"ElseStatementNode",
                                        "statement":{
                                          "type":"IfStatementNode",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"==",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"n1",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"IntegerLiteralNode",
                                                "valueRep":"16"
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "statement":{
                                            "type":"BlockNode",
                                            "statements":[
                                              {
                                                "type":"LocalVariableDeclarationStatementNode",
                                                "modifiers":[
                                                  
                                                ],
                                                "declarators":{
                                                  "type":"VariableDeclaratorsNode",
                                                  "declarators":[
                                                    {
                                                      "type":"VariableDeclaratorNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"b",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "arrayDepth":[
                                                        
                                                      ],
                                                      "assignment":{
                                                        "type":"VariableAssignmentNode",
                                                        "variableAssignment":{
                                                          "type":"VariableExpressionInitNode",
                                                          "expression":{
                                                            "type":"LiteralNode",
                                                            "node":{
                                                              "type":"StringLiteralNode",
                                                              "valueRep":"\"\""
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "varType":{
                                                        "type":"ReferenceTypeNode",
                                                        "ids":[
                                                          {
                                                            "type":"ParameterizedTypeNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"String",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "labels":[
                                                  
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"WhileStatementNode",
                                                "expression":{
                                                  "type":"BinaryExpressionNode",
                                                  "operator":{
                                                    "type":"OperatorNode",
                                                    "symbol":"!=",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "left":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"n",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "right":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "statement":{
                                                  "type":"BlockNode",
                                                  "statements":[
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"r",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"CastExpressionNode",
                                                                  "aType":{
                                                                    "type":"PrimitiveTypeNode",
                                                                    "name":"int",
                                                                    "comments":[
                                                                      
                                                                    ]
                                                                  },
                                                                  "argument":{
                                                                    "type":"BinaryExpressionNode",
                                                                    "operator":{
                                                                      "type":"OperatorNode",
                                                                      "symbol":"%",
                                                                      "comments":[
                                                                        
                                                                      ]
                                                                    },
                                                                    "left":{
                                                                      "type":"QualifiedIdentifierNode",
                                                                      "identifiers":[
                                                                        {
                                                                          "type":"IdentifierNode",
                                                                          "name":"n",
                                                                          "comments":[
                                                                            
                                                                          ]
                                                                        }
                                                                      ],
                                                                      "comments":[
                                                                        
                                                                      ]
                                                                    },
                                                                    "right":{
                                                                      "type":"LiteralNode",
                                                                      "node":{
                                                                        "type":"IntegerLiteralNode",
                                                                        "valueRep":"16"
                                                                      },
                                                                      "comments":[
                                                                        
                                                                      ]
                                                                    },
                                                                    "comments":[
                                                                      
                                                                    ]
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"int",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"ExpressionStatement",
                                                      "expression":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"=",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"b",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"BinaryExpressionNode",
                                                          "operator":{
                                                            "type":"OperatorNode",
                                                            "symbol":"+",
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "left":{
                                                            "type":"QualifiedIdentifierNode",
                                                            "identifiers":[
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"r",
                                                                "comments":[
                                                                  
                                                                ]
                                                              }
                                                            ],
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "right":{
                                                            "type":"QualifiedIdentifierNode",
                                                            "identifiers":[
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"b",
                                                                "comments":[
                                                                  
                                                                ]
                                                              }
                                                            ],
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"ExpressionStatement",
                                                      "expression":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"/=",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"n",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"IntegerLiteralNode",
                                                            "valueRep":"16"
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"A",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"10"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"B",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"11"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"C",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"12"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"D",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"13"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"E",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"14"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"LocalVariableDeclarationStatementNode",
                                                      "modifiers":[
                                                        {
                                                          "type":"KeywordModifierNode",
                                                          "value":"final",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "declarators":{
                                                        "type":"VariableDeclaratorsNode",
                                                        "declarators":[
                                                          {
                                                            "type":"VariableDeclaratorNode",
                                                            "identifier":{
                                                              "type":"IdentifierNode",
                                                              "name":"F",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "arrayDepth":[
                                                              
                                                            ],
                                                            "assignment":{
                                                              "type":"VariableAssignmentNode",
                                                              "variableAssignment":{
                                                                "type":"VariableExpressionInitNode",
                                                                "expression":{
                                                                  "type":"LiteralNode",
                                                                  "node":{
                                                                    "type":"IntegerLiteralNode",
                                                                    "valueRep":"15"
                                                                  },
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "varType":{
                                                              "type":"PrimitiveTypeNode",
                                                              "name":"char",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "labels":[
                                                        
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "labels":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "labels":[
                                                  
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"ExpressionStatement",
                                                "expression":{
                                                  "type":"MethodInvocationNode",
                                                  "qualifiedIdentifier":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"System",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"out",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"println",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "args":{
                                                    "type":"ExpressionListNode",
                                                    "arguments":[
                                                      {
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"+",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"StringLiteralNode",
                                                            "valueRep":"\"Numarul hexadecimal este \""
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"b",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "labels":[
                                                  
                                                ]
                                              }
                                            ],
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"package transformare1; import java.io.*; public class Transformare1 { public static void main(String[] args)throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); System.out.println (\"Introduceti un numar natural in baza 10 \"); int n = Integer.parseInt(br.readLine()); System.out.println (\"Alegeti in ce baza sa fie convertit numarul: 2, 8, 16 \"); int n1 = Integer.parseInt(br.readLine()); if (n1==2){ String b = \"\"; while (n!=0){ int r = (int)(n%2); b = r+b; n /=2; } System.out.println (\"Numarul binar este \"+b); } else if (n1==8){ String b = \"\"; while (n!=0){ int r = (int)(n%8); b = r+b; n /=8; } System.out.println (\"Numarul octal este \"+b); } else if (n1==16){ String b =\"\"; while (n!=0){ int r = (int)(n%16); b = r+b; n /=16; final char A=10; final char B=11; final char C=12; final char D=13; final char E=14; final char F=15; } System.out.println (\"Numarul hexadecimal este \"+b); }} } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "est":3,
                  "read":2,
                  "natur":1,
                  "numarul":4,
                  "system":6,
                  "reader":3,
                  "line":2,
                  "octal":1,
                  "introduceti":1,
                  "buffer":2,
                  "alegeti":1,
                  "main":1,
                  "println":5,
                  "binar":1,
                  "transformar":2,
                  "pars":2,
                  "stream":1,
                  "baza":2,
                  "numar":1,
                  "convertit":1,
                  "ioexcept":1,
                  "fie":1,
                  "hexadecim":1,
                  "input":1,
                  "arg":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"io",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BufferedReader",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"InputStreamReader",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"char",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Numarul hexadecimal este \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"b",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Integer",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"parseInt",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"br",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"readLine",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"Introduceti un numar natural in baza 10 \""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Numarul binar este \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"b",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Numarul octal este \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"b",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"br",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"readLine",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"Alegeti in ce baza sa fie convertit numarul: 2, 8, 16 \""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"r",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"PrimitiveTypeNode",
                            "name":"int",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"%",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"n",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"16"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"r",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"PrimitiveTypeNode",
                            "name":"int",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"%",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"n",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"8"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"args",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"br",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"BufferedReader",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"ConstructorCreatorNode",
                                "creatorType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"InputStreamReader",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "expressionArgs":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"in",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BufferedReader",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"r",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"PrimitiveTypeNode",
                            "name":"int",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"%",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"n",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"2"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"F",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"15"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"C",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"12"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"b",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"\""
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"D",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"13"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"n1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"parseInt",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"br",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"readLine",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"E",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"14"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"B",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"11"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"A",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"10"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"char",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"n",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"parseInt",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"br",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"readLine",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19493304,
      "questionId":19493231,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28913087,
          "postId":19493304,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2902894,
            "displayName":"drgPP",
            "reputation":290
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for fast answer"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19493304-cu28913087]-[-1098878988]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for fast answer"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "fast":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-21",
      "lastActivityDate":"2013-10-21",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1081110,
        "displayName":"David Wallace",
        "reputation":28987
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are lots of ways of fixing this. One way is to replace <code>b = r+b</code> in the &quot;hexadecimal&quot; section of the code with <code>b = &quot;0123456789ABCDEF&quot;.charAt(r) + b</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19493304]-[764174551]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are lots of ways of fixing this. One way is to replace <code>b = r+b</code> in the &quot;hexadecimal&quot; section of the code with <code>b = &quot;0123456789ABCDEF&quot;.charAt(r) + b</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"charAt",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fix":1,
                    "abcdef":1,
                    "way":1,
                    "section":1,
                    "code":5,
                    "replac":1,
                    "lot":1,
                    "quot":4,
                    "hexadecim":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}