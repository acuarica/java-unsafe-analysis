{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":12591806,
    "title":"Can Java's NullPointerException be changed to report on which variable was null?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":16969994,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":784338,
          "displayName":"jozefg",
          "reputation":30970
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Sadly no, it'd be useful though"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16969994]-[-1628762866]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Sadly no, it'd be useful though"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sad":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16970014,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":4,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":28760,
          "displayName":"Lirik",
          "reputation":19285
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Isn't the line of code sufficient?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16970014]-[-1261718487]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Isn't the line of code sufficient?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "suffici":1,
                      "line":1,
                      "isn":1,
                      "code":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16970038,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":299818,
          "displayName":"pankar",
          "reputation":1040
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Lirik I presume the obvious answer is _yes_. When it comes to _spaghetti code_ the answer is _no_ I'm afraid..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16970038]-[904176537]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Lirik I presume the obvious answer is _yes_. When it comes to _spaghetti code_ the answer is _no_ I'm afraid..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Lirik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_yes_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_spaghetti",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"code_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_no_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "lirik":1,
                      "obvious":1,
                      "afraid":1,
                      "spaghetti":1,
                      "code":1,
                      "presum":1,
                      "answer":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16970044,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":873580,
          "displayName":"questborn",
          "reputation":445
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"why don't you point debugger at that line of code and determine which variable is null. Is your code not structured properly so, that you have couple of variables in single line?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16970044]-[1983905945]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"why don't you point debugger at that line of code and determine which variable is null. Is your code not structured properly so, that you have couple of variables in single line?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "determin":1,
                      "point":1,
                      "proper":1,
                      "line":2,
                      "structur":1,
                      "code":2,
                      "debugg":1,
                      "coupl":1,
                      "variabl":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16970094,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":28760,
          "displayName":"Lirik",
          "reputation":19285
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@pankar if the code is such a spaghetti mess that one can't figure out which variable is `null` on a given line of code, then I would say there are **MUCH** bigger problems there."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16970094]-[-730733553]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@pankar if the code is such a spaghetti mess that one can't figure out which variable is `null` on a given line of code, then I would say there are **MUCH** bigger problems there."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "line":1,
                      "problem":1,
                      "spaghetti":1,
                      "code":2,
                      "pankar":1,
                      "mess":1,
                      "figur":1,
                      "bigger":1,
                      "variabl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16970352,
        "postId":12591806,
        "creationDate":"2012-09-25",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":646634,
          "displayName":"Brian",
          "reputation":8350
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@pankar The problem really comes in chained method calls. If I have `something.getThis().getThat().getAnotherThing().whyAmIStillChaining().seriouslyWtf()` all on one line and get an NPE, the only easy way to figure it out is to pull it all apart and recompile/rerun. It's why I wish they had put the [Elvis operator](http://stackoverflow.com/questions/4390141/java-operator-for-checking-null-what-is-it-not-ternary) in Java 7. Oh well. I had this problem recently too -.-"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu16970352]-[-1816766801]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@pankar The problem really comes in chained method calls. If I have `something.getThis().getThat().getAnotherThing().whyAmIStillChaining().seriouslyWtf()` all on one line and get an NPE, the only easy way to figure it out is to pull it all apart and recompile/rerun. It's why I wish they had put the [Elvis operator](http://stackoverflow.com/questions/4390141/java-operator-for-checking-null-what-is-it-not-ternary) in Java 7. Oh well. I had this problem recently too -.-"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"something",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"getThis",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"getThat",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"getAnotherThing",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"whyAmIStillChaining",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"seriouslyWtf",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "method":1,
                      "npe":1,
                      "easi":1,
                      "rerun":1,
                      "ternari":1,
                      "recent":1,
                      "line":1,
                      "elvi":1,
                      "problem":2,
                      "recompil":1,
                      "wtf":1,
                      "thing":1,
                      "istil":1,
                      "oper":2,
                      "pankar":1,
                      "stackoverflow":1,
                      "check":1,
                      "figur":1,
                      "put":1,
                      "pull":1,
                      "http":1,
                      "call":1,
                      "chain":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":27119657,
        "postId":12591806,
        "creationDate":"2013-08-26",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Even if the call isn't chained like that, the actual (conceptual) error can be several calls away from where it was detected (perhaps by an API). (But I share a general distaste for &quot;chained&quot; calls, since they make debugging a bear and do not at all improve performance.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12591806-cu27119657]-[1159075084]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Even if the call isn't chained like that, the actual (conceptual) error can be several calls away from where it was detected (perhaps by an API). (But I share a general distaste for &quot;chained&quot; calls, since they make debugging a bear and do not at all improve performance.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "bear":1,
                      "detect":1,
                      "distast":1,
                      "improv":1,
                      "debug":1,
                      "share":1,
                      "general":1,
                      "error":1,
                      "perform":1,
                      "isn":1,
                      "make":1,
                      "quot":2,
                      "api":1,
                      "actual":1,
                      "conceptu":1,
                      "call":3,
                      "chain":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "nullpointerexception"
    ],
    "creationDate":"2012-09-25",
    "lastActivityDate":"2012-09-26",
    "closedDate":"2013-08-27",
    "score":2,
    "viewCount":185,
    "owner":{
      "type":"StackOverflowUser",
      "id":228371,
      "displayName":"Freiheit",
      "reputation":2878
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The <code>NullPointerException</code> in Java seems to only report that it occurred on a particular line of code. Is it possible to alter that exception to state which variable was null if there is more than one variable used in a line of code?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12591806]-[1370881702]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The <code>NullPointerException</code> in Java seems to only report that it occurred on a particular line of code. Is it possible to alter that exception to state which variable was null if there is more than one variable used in a line of code?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"NullPointerException",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "alter":1,
                  "pointer":1,
                  "state":1,
                  "line":2,
                  "occur":1,
                  "code":4,
                  "report":1,
                  "variabl":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":12591911,
      "questionId":12591806,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":16970098,
          "postId":12591911,
          "creationDate":"2012-09-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438992,
            "displayName":"Dave Newton",
            "reputation":98426
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What else is an NPE caused by?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16970098]-[927896808]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What else is an NPE caused by?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "caus":1,
                        "npe":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16970171,
          "postId":12591911,
          "creationDate":"2012-09-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":122207,
            "displayName":"Tim Bender",
            "reputation":12304
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ugh, iterating the cases would be rough. But it could be thrown as part of the guard pattern. Basically, a method that checks its arguments for `null` and then throws an NPE before doing work. For instance, some collections do this to avoid corrupting the data structure. Other application may be to just avoid the NPE happening organically."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16970171]-[-1089601518]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ugh, iterating the cases would be rough. But it could be thrown as part of the guard pattern. Basically, a method that checks its arguments for `null` and then throws an NPE before doing work. For instance, some collections do this to avoid corrupting the data structure. Other application may be to just avoid the NPE happening organically."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ugh":1,
                        "method":1,
                        "npe":2,
                        "organ":1,
                        "pattern":1,
                        "happen":1,
                        "data":1,
                        "thrown":1,
                        "avoid":2,
                        "work":1,
                        "structur":1,
                        "check":1,
                        "iter":1,
                        "applic":1,
                        "rough":1,
                        "collect":1,
                        "part":1,
                        "guard":1,
                        "case":1,
                        "basic":1,
                        "argument":1,
                        "corrupt":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16970188,
          "postId":12591911,
          "creationDate":"2012-09-25",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":122207,
            "displayName":"Tim Bender",
            "reputation":12304
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"A random terrible coder could throw an NPE for fun."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16970188]-[974589251]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"A random terrible coder could throw an NPE for fun."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "random":1,
                        "npe":1,
                        "terribl":1,
                        "coder":1,
                        "fun":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16970402,
          "postId":12591911,
          "creationDate":"2012-09-25",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":646634,
            "displayName":"Brian",
            "reputation":8350
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@DaveNewton You can also get an NPE from auto-boxing, such as doing `Integer val = null` and then passing it to `someMethod(int i)` like so: `someMethod(val);`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16970402]-[-877052535]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@DaveNewton You can also get an NPE from auto-boxing, such as doing `Integer val = null` and then passing it to `someMethod(int i)` like so: `someMethod(val);`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"DaveNewton",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"someMethod",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"someMethod",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"val",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":2,
                        "auto":1,
                        "npe":1,
                        "dave":1,
                        "newton":1,
                        "pass":1,
                        "box":1,
                        "val":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"someMethod",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"val",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16970859,
          "postId":12591911,
          "creationDate":"2012-09-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438992,
            "displayName":"Dave Newton",
            "reputation":98426
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So, all caused by a variable, except when thrown explicitly."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16970859]-[36396374]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So, all caused by a variable, except when thrown explicitly."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explicit":1,
                        "caus":1,
                        "variabl":1,
                        "thrown":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16971915,
          "postId":12591911,
          "creationDate":"2012-09-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":122207,
            "displayName":"Tim Bender",
            "reputation":12304
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`throw null` too..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591911-cu16971915]-[-2101231045]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`throw null` too..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-09-25",
      "lastActivityDate":"2012-09-26",
      "lastEditDate":"2012-09-26",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":122207,
        "displayName":"Tim Bender",
        "reputation":12304
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No. NullPointerException does not always have to be caused by a variable/identifier being <code>null</code>. E.g. <code>throw new NullPointerException()</code> and <code>throw null</code>. Though it is often the case, it is not strictly required.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[1875714542]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No. NullPointerException does not always have to be caused by a variable/identifier being <code>null</code>. E.g. <code>throw new NullPointerException()</code> and <code>throw null</code>. Though it is often the case, it is not strictly required.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ConstructorCreatorNode",
                    "creatorType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "expressionArgs":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strict":1,
                    "pointer":2,
                    "requir":1,
                    "code":6,
                    "caus":1,
                    "identifi":1,
                    "variabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In most cases, it is fairly obvious what has caused the NPE. If not, then you may have too much going on in one line of code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[-109853624]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In most cases, it is fairly obvious what has caused the NPE. If not, then you may have too much going on in one line of code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fair":1,
                    "npe":1,
                    "line":1,
                    "obvious":1,
                    "code":1,
                    "caus":1,
                    "case":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Consider this use case:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[74241421]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Consider this use case:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"foo.doWork(bar1, bar2, bar3); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[12591911]-[-1906766781]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"foo",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"doWork",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"bar1",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"bar2",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"bar3",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"foodoWork(bar1, bar2, bar3); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "foodo":1,
                    "work":1,
                    "bar":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"foo",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"doWork",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"bar1",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"bar2",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"bar3",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here it is obvious that <code>foo</code> is `null.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[-1930954076]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here it is obvious that <code>foo</code> is `null.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":2,
                    "foo":1,
                    "obvious":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Another case:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[-2123242556]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Another case:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"foo.doWork(bar.get(), bar2.get()) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[12591911]-[239748297]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"foo",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"doWork",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(bar.get(), bar2.get()) "
                  }
                ]
              },
              "rawText":"foodoWork(bar.get(), bar2.get()) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "foodo":1,
                    "work":1,
                    "bar":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here it could be <code>foo</code>, <code>bar</code>, or <code>bar2</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[239273246]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here it could be <code>foo</code>, <code>bar</code>, or <code>bar2</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":6,
                    "foo":1,
                    "bar":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The point is, that armed with this information and a breakpoint, it should be obvious what was <code>null</code>. If worse comes to worse, a static code analyzer like <code>FindBugs</code> could also give you some hints.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591911]-[-1129451689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The point is, that armed with this information and a breakpoint, it should be obvious what was <code>null</code>. If worse comes to worse, a static code analyzer like <code>FindBugs</code> could also give you some hints.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"FindBugs",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "point":1,
                    "analyz":1,
                    "obvious":1,
                    "wors":2,
                    "arm":1,
                    "code":5,
                    "inform":1,
                    "bug":1,
                    "give":1,
                    "hint":1,
                    "breakpoint":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FindBugs",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":12591983,
      "questionId":12591806,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":16970258,
          "postId":12591983,
          "creationDate":"2012-09-25",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":331052,
            "displayName":"Affe",
            "reputation":26229
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"auto un-box is also a possible cause of null pointers."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591983-cu16970258]-[1250263644]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"auto un-box is also a possible cause of null pointers."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pointer":1,
                        "auto":1,
                        "box":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16970551,
          "postId":12591983,
          "creationDate":"2012-09-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":53897,
            "displayName":"Thorbjørn Ravn Andersen",
            "reputation":42054
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I did not think of that. I have been on both sides of the fence regarding auto-boxing/unboxing, but I think I might come down on the side saying &quot;as little magic as possible&quot;. In other words find out how to have the compiler flag autoboxing usages as errors and explicitly do the conversion manually. I believe the Eclipse compiler can do this, but have not checked."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12591983-cu16970551]-[-219101416]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I did not think of that. I have been on both sides of the fence regarding auto-boxing/unboxing, but I think I might come down on the side saying &quot;as little magic as possible&quot;. In other words find out how to have the compiler flag autoboxing usages as errors and explicitly do the conversion manually. I believe the Eclipse compiler can do this, but have not checked."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":2,
                        "find":1,
                        "auto":1,
                        "fenc":1,
                        "eclips":1,
                        "check":1,
                        "autobox":1,
                        "error":1,
                        "unbox":1,
                        "convers":1,
                        "flag":1,
                        "usag":1,
                        "quot":2,
                        "box":1,
                        "magic":1,
                        "compil":2,
                        "explicit":1,
                        "manual":1,
                        "word":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-09-25",
      "lastActivityDate":"2012-09-25",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":53897,
        "displayName":"Thorbjørn Ravn Andersen",
        "reputation":42054
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, the debug information in the class file does not contain enough information to allow this. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591983]-[-1285490456]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, the debug information in the class file does not contain enough information to allow this. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"file",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "file":1,
                    "debug":1,
                    "inform":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can, however, improve on the situation. There are two things that can cause a NPE to be thrown:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591983]-[-1734519283]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can, however, improve on the situation. There are two things that can cause a NPE to be thrown:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "npe":1,
                    "thrown":1,
                    "thing":1,
                    "improv":1,
                    "situat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>A <code>.</code> dereferencing a variable, like <code>foo.bar()</code>.</li> \n <li>A <code>[</code> indexing an array, like <code>args[0]</code>.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591983]-[-756562695]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>A <code>.</code> dereferencing a variable, like <code>foo.bar()</code>.</li> \n <li>A <code>[</code> indexing an array, like <code>args[0]</code>.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dereferenc":1,
                    "code":8,
                    "array":1,
                    "bar":1,
                    "variabl":1,
                    "arg":1,
                    "index":1,
                    "foo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you write your code so there is only <em>one</em> of these on a given code line, there is simply no doubt about which one caused the NPE. It will introduce a <em>lot</em> of temporary variables but then you have more information readily available when debugging. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12591983]-[671928694]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you write your code so there is only <em>one</em> of these on a given code line, there is simply no doubt about which one caused the NPE. It will introduce a <em>lot</em> of temporary variables but then you have more information readily available when debugging. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "npe":1,
                    "line":1,
                    "introduc":1,
                    "readili":1,
                    "debug":1,
                    "code":2,
                    "temporari":1,
                    "simpli":1,
                    "inform":1,
                    "doubt":1,
                    "caus":1,
                    "lot":1,
                    "variabl":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}