{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":16292134,
    "title":"How to stop a thread in a web server",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":23327068,
        "postId":16292134,
        "creationDate":"2013-04-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":758133,
          "displayName":"Martin James",
          "reputation":16761
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"In general, don't make blocking calls from within a synchronized section."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16292134-cu23327068]-[1669211618]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"In general, don't make blocking calls from within a synchronized section."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "section":1,
                      "block":1,
                      "general":1,
                      "make":1,
                      "call":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "multithreading",
      "synchronization",
      "webserver",
      "netty"
    ],
    "creationDate":"2013-04-30",
    "lastActivityDate":"2013-05-02",
    "lastEditDate":"2013-05-02",
    "score":0,
    "viewCount":156,
    "owner":{
      "type":"StackOverflowUser",
      "id":827927,
      "displayName":"Erel Segal Halevi",
      "reputation":3087
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a Java socket.io server, based on netty implementation (of com.corundumstudio.socketio).</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[-2080620206]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a Java socket.io server, based on netty implementation (of com.corundumstudio.socketio).</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "socket":1,
                  "server":1,
                  "base":1,
                  "socketio":1,
                  "implement":1,
                  "corundumstudio":1,
                  "netti":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The server handles requests using some closed-source code, and sometimes, a request may get stuck indefinitely. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[-273171687]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The server handles requests using some closed-source code, and sometimes, a request may get stuck indefinitely. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "request":2,
                  "server":1,
                  "code":1,
                  "stuck":1,
                  "close":1,
                  "sourc":1,
                  "indefinit":1,
                  "handl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The big problem starts when the requests get stuck inside a synchronized{} block, so that they keep holding a resource, and no other request can be fulfilled.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[1737176140]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The big problem starts when the requests get stuck inside a synchronized{} block, so that they keep holding a resource, and no other request can be fulfilled.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"JsonObjectNode",
                  "members":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "request":2,
                  "problem":1,
                  "big":1,
                  "fulfil":1,
                  "resourc":1,
                  "hold":1,
                  "stuck":1,
                  "block":1,
                  "insid":1,
                  "start":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I would like to add an option to stop/kill a specific thread, so that it doesn't halt the entire application.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[-1475049492]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I would like to add an option to stop/kill a specific thread, so that it doesn't halt the entire application.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "halt":1,
                  "option":1,
                  "entir":1,
                  "stop":1,
                  "thread":1,
                  "specif":1,
                  "applic":1,
                  "kill":1,
                  "add":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thread.stop() is deprecated, and also apparently doesn't work with netty, as netty catches the ThreadDeath exception and converts it to a harmless warning message...</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[1974066345]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thread.stop() is deprecated, and also apparently doesn't work with netty, as netty catches the ThreadDeath exception and converts it to a harmless warning message...</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ThreadDeath",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "death":1,
                  "harmless":1,
                  "warn":1,
                  "appar":1,
                  "stop":1,
                  "work":1,
                  "thread":2,
                  "deprec":1,
                  "messag":1,
                  "catch":1,
                  "netti":2,
                  "convert":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ThreadDeath",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>adding an interrupt flag is impossible because the difficult code is closed.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[-1850725209]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>adding an interrupt flag is impossible because the difficult code is closed.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "imposs":1,
                  "code":1,
                  "difficult":1,
                  "flag":1,
                  "ad":1,
                  "close":1,
                  "interrupt":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What is a good way to implement the server such that it is robust on this regard?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16292134]-[-523215409]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What is a good way to implement the server such that it is robust on this regard?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "regard":1,
                  "server":1,
                  "good":1,
                  "robust":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":16297639,
      "questionId":16292134,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":23482795,
          "postId":16297639,
          "creationDate":"2013-05-05",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":827927,
            "displayName":"Erel Segal Halevi",
            "reputation":3087
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for the explanation about ReentrantLock. As far as I understand from the docs, I can interrupt a thread only if it is waiting for the lock, but not if it already holds the lock. But my main problem is that threads sometimes get stuck while they hold the lock. When this happens in Linux or Windows, I just kill the process that got stuck, so that it releases any locks it holds. What is the alternative in Java?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16297639-cu23482795]-[-1995692422]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for the explanation about ReentrantLock. As far as I understand from the docs, I can interrupt a thread only if it is waiting for the lock, but not if it already holds the lock. But my main problem is that threads sometimes get stuck while they hold the lock. When this happens in Linux or Windows, I just kill the process that got stuck, so that it releases any locks it holds. What is the alternative in Java?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "window":1,
                        "wait":1,
                        "problem":1,
                        "process":1,
                        "understand":1,
                        "lock":5,
                        "altern":1,
                        "main":1,
                        "reentrant":1,
                        "doc":1,
                        "hold":3,
                        "stuck":2,
                        "thread":2,
                        "explan":1,
                        "releas":1,
                        "linux":1,
                        "kill":1,
                        "interrupt":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-04-30",
      "lastActivityDate":"2013-04-30",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":43786,
        "displayName":"Nicholas",
        "reputation":9017
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I am sure it goes without saying that what you really need to do is figure out and fix what-ever the problem is with the synchronized resource, because killing off threads will not, in the end, actually get the job done. Without knowing anything about the resource, it's impossible to advise you on that specific point.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16297639]-[779681470]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I am sure it goes without saying that what you really need to do is figure out and fix what-ever the problem is with the synchronized resource, because killing off threads will not, in the end, actually get the job done. Without knowing anything about the resource, it's impossible to advise you on that specific point.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "advis":1,
                    "point":1,
                    "problem":1,
                    "imposs":1,
                    "fix":1,
                    "resourc":2,
                    "job":1,
                    "know":1,
                    "thread":1,
                    "specif":1,
                    "figur":1,
                    "end":1,
                    "kill":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In the interim, I would suggest you wrap the problematic code segment with a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantLock.html\"rel=\"nofollow\">ReentrantLock</a> which each thread must acquire in order to reach the synchronized block. Effectively, you are replacing the <strong>synchronized</strong> behaviour (from which a thread cannot be pulled out of) with a lock which has the same guarding properties, but for which you can timeout the acquiring threads (so the threads don't pile-up and stop your system) by having them acquire the lock with a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock%28long,%20java.util.concurrent.TimeUnit%29\"rel=\"nofollow\">tryLock(long timeout, TimeUnit unit)</a> with an appropriate timeout. The ReentrantLock also has a layer of &quot;instrumentation: allowing you to determine how many threads are waiting on the lock, and acquire a direct reference to the threads themselves. That last point will be useful to you as it allows you to interrupt the waiting threads as an alternative to *<em>stop</em>*ping them. Once a waiting thread is interrupted, it will throw an interrupted exception and then continue on its way in a perfectly legal and non-deprecated way.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16297639]-[1681388623]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In the interim, I would suggest you wrap the problematic code segment with a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantLock.html\"rel=\"nofollow\">ReentrantLock</a> which each thread must acquire in order to reach the synchronized block. Effectively, you are replacing the <strong>synchronized</strong> behaviour (from which a thread cannot be pulled out of) with a lock which has the same guarding properties, but for which you can timeout the acquiring threads (so the threads don't pile-up and stop your system) by having them acquire the lock with a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock%28long,%20java.util.concurrent.TimeUnit%29\"rel=\"nofollow\">tryLock(long timeout, TimeUnit unit)</a> with an appropriate timeout. The ReentrantLock also has a layer of &quot;instrumentation: allowing you to determine how many threads are waiting on the lock, and acquire a direct reference to the threads themselves. That last point will be useful to you as it allows you to interrupt the waiting threads as an alternative to *<em>stop</em>*ping them. Once a waiting thread is interrupted, it will throw an interrupted exception and then continue on its way in a perfectly legal and non-deprecated way.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ReentrantLock",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"tryLock",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"TimeUnit",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ReentrantLock",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "reach":1,
                    "determin":1,
                    "point":1,
                    "wait":3,
                    "concurr":3,
                    "util":3,
                    "system":1,
                    "suggest":1,
                    "effect":1,
                    "rel":2,
                    "oracl":2,
                    "lock":11,
                    "perfect":1,
                    "altern":1,
                    "strong":2,
                    "reentrant":4,
                    "stop":2,
                    "segment":1,
                    "doc":4,
                    "direct":1,
                    "code":1,
                    "layer":1,
                    "interim":1,
                    "ping":1,
                    "pile":1,
                    "block":1,
                    "legal":1,
                    "thread":8,
                    "replac":1,
                    "wrap":1,
                    "nofollow":2,
                    "deprec":1,
                    "allow":1,
                    "order":1,
                    "refer":1,
                    "behaviour":1,
                    "javas":2,
                    "quot":1,
                    "pull":1,
                    "api":2,
                    "unit":3,
                    "time":2,
                    "guard":1,
                    "acquir":4,
                    "html":2,
                    "href":2,
                    "http":2,
                    "timeout":3,
                    "instrument":1,
                    "interrupt":3,
                    "problemat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ReentrantLock",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"TimeUnit",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>At the risk of raising the ire of some purists, and with some caution advised, you could have other threads avoid entering the synchronized block by using <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html#tryMonitorEnter%28Object%29\"rel=\"nofollow\">sun.misc.Unsafe.tryMonitorEnter</a> which will return false if the synchronization point is already blocked.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16297639]-[586600433]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>At the risk of raising the ire of some purists, and with some caution advised, you could have other threads avoid entering the synchronized block by using <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html#tryMonitorEnter%28Object%29\"rel=\"nofollow\">sun.misc.Unsafe.tryMonitorEnter</a> which will return false if the synchronization point is already blocked.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"tryMonitorEnter",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "advis":1,
                    "monitor":2,
                    "point":1,
                    "docjar":1,
                    "caution":1,
                    "enter":3,
                    "ire":1,
                    "sun":2,
                    "rel":1,
                    "risk":1,
                    "avoid":1,
                    "doc":1,
                    "object":1,
                    "block":2,
                    "thread":1,
                    "nofollow":1,
                    "rais":1,
                    "misc":2,
                    "fals":1,
                    "api":1,
                    "unsaf":2,
                    "purist":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "www":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}