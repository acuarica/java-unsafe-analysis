{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":14378729,
    "title":"Why would memory access on x86 be slower when aligned to first 4 bytes of the cache line?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":20002871,
        "postId":14378729,
        "creationDate":"2013-01-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1047667,
          "displayName":"Nitsan Wakart",
          "reputation":666
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Mysticial Not yet... but have examined the generated assembly and found nothing to explain it. It is just a MOV..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20002871]-[-26674985]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Mysticial Not yet... but have examined the generated assembly and found nothing to explain it. It is just a MOV..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Mysticial",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "examin":1,
                      "assembl":1,
                      "mov":1,
                      "explain":1,
                      "found":1,
                      "generat":1,
                      "mystici":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19999406,
        "postId":14378729,
        "creationDate":"2013-01-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":352131,
          "displayName":"Durandal",
          "reputation":10490
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Far too little meat to tell. Show some actual code. Most likely you do not read from where you think you're reading OR your code structure triggers the CPU to perform a speculative read. BTW the pagesize paragraph contained not what I would expect. The term pagesize I know from the context of memory management (PMMU), not IO, which would also make more sense considering the topic."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu19999406]-[296896816]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Far too little meat to tell. Show some actual code. Most likely you do not read from where you think you're reading OR your code structure triggers the CPU to perform a speculative read. BTW the pagesize paragraph contained not what I would expect. The term pagesize I know from the context of memory management (PMMU), not IO, which would also make more sense considering the topic."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "read":3,
                      "show":1,
                      "btw":1,
                      "context":1,
                      "term":1,
                      "meat":1,
                      "pages":2,
                      "specul":1,
                      "contain":1,
                      "structur":1,
                      "code":2,
                      "paragraph":1,
                      "pmmu":1,
                      "expect":1,
                      "cpu":1,
                      "perform":1,
                      "make":1,
                      "topic":1,
                      "manag":1,
                      "actual":1,
                      "trigger":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20000890,
        "postId":14378729,
        "creationDate":"2013-01-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1047667,
          "displayName":"Nitsan Wakart",
          "reputation":666
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The code is in the post and also on GitHub, I can cut and paste it here if it helps, but was hoping to avoid repeating it in one extra place."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20000890]-[-103421827]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The code is in the post and also on GitHub, I can cut and paste it here if it helps, but was hoping to avoid repeating it in one extra place."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"GitHub",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "post":1,
                      "cut":1,
                      "avoid":1,
                      "code":1,
                      "help":1,
                      "git":1,
                      "hope":1,
                      "hub":1,
                      "extra":1,
                      "place":1,
                      "repeat":1,
                      "past":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"GitHub",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20000992,
        "postId":14378729,
        "creationDate":"2013-01-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1047667,
          "displayName":"Nitsan Wakart",
          "reputation":666
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Durandal How would the code trigger a speculative read from 0-3 byte offset, but not from anywhere else? The term pagesize is not in the question and is indeed not that relevant to it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20000992]-[-1918396661]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Durandal How would the code trigger a speculative read from 0-3 byte offset, but not from anywhere else? The term pagesize is not in the question and is indeed not that relevant to it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Durandal",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "question":1,
                      "durand":1,
                      "term":1,
                      "pages":1,
                      "relev":1,
                      "specul":1,
                      "code":1,
                      "offset":1,
                      "trigger":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20001436,
        "postId":14378729,
        "creationDate":"2013-01-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":922184,
          "displayName":"Mysticial",
          "reputation":195265
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Have you tried this in something closer to the hardware? Such as C or C++?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20001436]-[-1760279838]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Have you tried this in something closer to the hardware? Such as C or C++?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "hardwar":1,
                      "closer":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20042506,
        "postId":14378729,
        "creationDate":"2013-01-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":233981,
          "displayName":"srking",
          "reputation":1821
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You have too many uncontrolled variables. There can also be significant variations from one generation of core to the next in cache behavior. I recommend: (1) Write your critical code in assembly so you can account for every instruction (2) Enable user mode performance counters by setting the PCE bit in CR4 (3) Identify the relevant icache, dcache and prefetching counters and read them with the rdpmc instruction in tight proximity to your critical code. By inspecting the performance counters, you'll get a clue what's happening in the micro architecture."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20042506]-[1776298701]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You have too many uncontrolled variables. There can also be significant variations from one generation of core to the next in cache behavior. I recommend: (1) Write your critical code in assembly so you can account for every instruction (2) Enable user mode performance counters by setting the PCE bit in CR4 (3) Identify the relevant icache, dcache and prefetching counters and read them with the rdpmc instruction in tight proximity to your critical code. By inspecting the performance counters, you'll get a clue what's happening in the micro architecture."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "recommend":1,
                      "assembl":1,
                      "critic":2,
                      "variat":1,
                      "rdpmc":1,
                      "cach":1,
                      "bit":1,
                      "happen":1,
                      "dcach":1,
                      "prefetch":1,
                      "set":1,
                      "relev":1,
                      "code":2,
                      "inspect":1,
                      "micro":1,
                      "signific":1,
                      "architectur":1,
                      "perform":2,
                      "identifi":1,
                      "mode":1,
                      "enabl":1,
                      "generat":1,
                      "counter":3,
                      "tight":1,
                      "account":1,
                      "pce":1,
                      "proxim":1,
                      "behavior":1,
                      "core":1,
                      "variabl":1,
                      "icach":1,
                      "user":1,
                      "write":1,
                      "clue":1,
                      "uncontrol":1,
                      "instruct":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20060494,
        "postId":14378729,
        "creationDate":"2013-01-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1047667,
          "displayName":"Nitsan Wakart",
          "reputation":666
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@srking fair enough, although I must admit I'm not very familiar with the tools involved. I was hoping someone might have an idea given the invariance of the code apart from the access offset. If no answer materializes I shall go down the route you describe."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20060494]-[-1300220821]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@srking fair enough, although I must admit I'm not very familiar with the tools involved. I was hoping someone might have an idea given the invariance of the code apart from the access offset. If no answer materializes I shall go down the route you describe."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "involv":1,
                      "fair":1,
                      "familiar":1,
                      "tool":1,
                      "idea":1,
                      "srking":1,
                      "rout":1,
                      "code":1,
                      "offset":1,
                      "hope":1,
                      "answer":1,
                      "invari":1,
                      "admit":1,
                      "describ":1,
                      "materi":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20074061,
        "postId":14378729,
        "creationDate":"2013-01-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":233981,
          "displayName":"srking",
          "reputation":1821
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Nitsan it's a tough but interesting goal to understand where every cycle went. Even with the exact same machine and exact same CPU, one box could have prefetching enabled (via a BIOS setting) and the other not. You'll be forever scratching your head without a direct look into the micro-architectural behavior."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20074061]-[2004439853]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Nitsan it's a tough but interesting goal to understand where every cycle went. Even with the exact same machine and exact same CPU, one box could have prefetching enabled (via a BIOS setting) and the other not. You'll be forever scratching your head without a direct look into the micro-architectural behavior."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Nitsan",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "prefetch":1,
                      "head":1,
                      "set":1,
                      "understand":1,
                      "goal":1,
                      "direct":1,
                      "exact":2,
                      "scratch":1,
                      "bio":1,
                      "nitsan":1,
                      "interest":1,
                      "micro":1,
                      "machin":1,
                      "architectur":1,
                      "cpu":1,
                      "enabl":1,
                      "box":1,
                      "tough":1,
                      "behavior":1,
                      "forev":1,
                      "cycl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20117407,
        "postId":14378729,
        "creationDate":"2013-01-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":233981,
          "displayName":"srking",
          "reputation":1821
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Nitsan - One place to start: For L1 data cache miss count, subtract the rdpmc result at the start of the test from the rdpmc result at the end of the test. Do you see the number of L1 misses you expected your test to cause?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20117407]-[-953013950]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Nitsan - One place to start: For L1 data cache miss count, subtract the rdpmc result at the start of the test from the rdpmc result at the end of the test. Do you see the number of L1 misses you expected your test to cause?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Nitsan",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "number":1,
                      "test":3,
                      "count":1,
                      "rdpmc":2,
                      "cach":1,
                      "subtract":1,
                      "data":1,
                      "result":2,
                      "miss":2,
                      "nitsan":1,
                      "expect":1,
                      "end":1,
                      "place":1,
                      "start":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":20077445,
        "postId":14378729,
        "creationDate":"2013-01-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1047667,
          "displayName":"Nitsan Wakart",
          "reputation":666
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@srking I ran the same test on 2 machines and got the same result, have 2 more I can try it on for good measure... The counters I measured using perf showed me nothing unusual... still scratching ;)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[14378729-cu20077445]-[-128325914]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@srking I ran the same test on 2 machines and got the same result, have 2 more I can try it on for good measure... The counters I measured using perf showed me nothing unusual... still scratching ;)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "test":1,
                      "show":1,
                      "perf":1,
                      "good":1,
                      "ran":1,
                      "result":1,
                      "srking":1,
                      "measur":2,
                      "scratch":1,
                      "machin":1,
                      "counter":1,
                      "unusu":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance",
      "memory",
      "x86"
    ],
    "creationDate":"2013-01-17",
    "lastActivityDate":"2013-01-17",
    "lastEditDate":"2013-01-17",
    "score":2,
    "viewCount":167,
    "owner":{
      "type":"StackOverflowUser",
      "id":1047667,
      "displayName":"Nitsan Wakart",
      "reputation":666
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In writing a blog post on <a href=\"http://psy-lob-saw.blogspot.co.uk/2013/01/direct-memory-alignment-in-java.html\"rel=\"nofollow\">unaligned/aligned direct memory access</a> I've hit a result I struggle to explain: If my memory access is aligned to the first 4 bytes I see a measurable difference in performance for the worse when data structure fits into L1 cache. In some cases other locations are 20% faster.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[1899087607]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In writing a blog post on <a href=\"http://psy-lob-saw.blogspot.co.uk/2013/01/direct-memory-alignment-in-java.html\"rel=\"nofollow\">unaligned/aligned direct memory access</a> I've hit a result I struggle to explain: If my memory access is aligned to the first 4 bytes I see a measurable difference in performance for the worse when data structure fits into L1 cache. In some cases other locations are 20% faster.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "post":1,
                  "unalign":1,
                  "faster":1,
                  "cach":1,
                  "explain":1,
                  "lob":1,
                  "differ":1,
                  "fit":1,
                  "align":3,
                  "hit":1,
                  "data":1,
                  "result":1,
                  "rel":1,
                  "wors":1,
                  "blogspot":1,
                  "psi":1,
                  "measur":1,
                  "structur":1,
                  "direct":2,
                  "blog":1,
                  "nofollow":1,
                  "struggl":1,
                  "perform":1,
                  "case":1,
                  "html":1,
                  "href":1,
                  "http":1,
                  "byte":1,
                  "write":1,
                  "locat":1,
                  "access":2,
                  "memori":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The article goes into allot more detail about the experiment and method, but here is the summary:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[2005825329]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The article goes into allot more detail about the experiment and method, but here is the summary:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "summari":1,
                  "allot":1,
                  "articl":1,
                  "experi":1,
                  "detail":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>Allocate a block of memory which fits into L1(32k on my laptop, use hwloc/check the spec of your cpu to find out). Align block to cacheline size(usually 64b, check your hardware). The allocation is done upfront and not measured.</li> \n <li>Iterate over the memory block and write a long(some value) into each cacheline in a given offset(effectively causing an unaligned write if the offset is not a multiple of 8).</li> \n <li>Iterate over memory block and read from same offset and verify the value is as expected.</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[-1135006667]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>Allocate a block of memory which fits into L1(32k on my laptop, use hwloc/check the spec of your cpu to find out). Align block to cacheline size(usually 64b, check your hardware). The allocation is done upfront and not measured.</li> \n <li>Iterate over the memory block and write a long(some value) into each cacheline in a given offset(effectively causing an unaligned write if the offset is not a multiple of 8).</li> \n <li>Iterate over memory block and read from same offset and verify the value is as expected.</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "find":1,
                  "unalign":1,
                  "alloc":2,
                  "size":1,
                  "fit":1,
                  "align":1,
                  "effect":1,
                  "verifi":1,
                  "laptop":1,
                  "cachelin":2,
                  "measur":1,
                  "upfront":1,
                  "block":4,
                  "offset":3,
                  "check":2,
                  "expect":1,
                  "iter":2,
                  "cpu":1,
                  "hardwar":1,
                  "spec":1,
                  "caus":1,
                  "multipl":1,
                  "hwloc":1,
                  "write":2,
                  "memori":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Why should there be any difference in performance when offset is 0-3?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[-89497721]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Why should there be any difference in performance when offset is 0-3?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "differ":1,
                  "offset":1,
                  "perform":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The essence of the measured code(as per request in comment):</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[1671639048]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The essence of the measured code(as per request in comment):</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "request":1,
                  "measur":1,
                  "code":1,
                  "essenc":1,
                  "comment":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"for (address = startingAddress; address &lt; limit; address += CACHE_LINE_SIZE) { Unsafe.putLong(address, value); } for (address = startingAddress; address &lt; limit; address += CACHE_LINE_SIZE) { if (Unsafe.getLong(address) != value) throw new RuntimeException(); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[14378729]-[-271935507]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ForLoopStatementNode",
                  "forControl":{
                    "type":"ForExpressionControlNode",
                    "init":[
                      {
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"=",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"startingAddress",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "condition":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"address",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"limit",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "update":[
                      {
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"+=",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"CACHE_LINE_SIZE",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"putLong",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"address",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"value",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ForLoopStatementNode",
                  "forControl":{
                    "type":"ForExpressionControlNode",
                    "init":[
                      {
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"=",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"startingAddress",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "condition":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"address",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"limit",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "update":[
                      {
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"+=",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"CACHE_LINE_SIZE",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"!=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getLong",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"address",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"value",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"ThrowStatementNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"RuntimeException",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"for (address = startingAddress; address < limit; address += CACHE_LINE_SIZE) { Unsafe.putLong(address, value); } for (address = startingAddress; address < limit; address += CACHE_LINE_SIZE) { if (Unsafe.getLong(address) != value) throw new RuntimeException(); } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "runtim":1,
                  "cach":2,
                  "size":2,
                  "line":2,
                  "address":10,
                  "put":1,
                  "unsaf":2,
                  "start":2,
                  "limit":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"RuntimeException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"putLong",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"value",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getLong",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Where starting address is cache aligned + offset. Full experiment is available <a href=\"https://github.com/nitsanw/psy-lob-saw/blob/master/experiments/alignment/UnalignedMemoryAccessCostBenchmark.java\"rel=\"nofollow\">here</a>: </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14378729]-[1139595326]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Where starting address is cache aligned + offset. Full experiment is available <a href=\"https://github.com/nitsanw/psy-lob-saw/blob/master/experiments/alignment/UnalignedMemoryAccessCostBenchmark.java\"rel=\"nofollow\">here</a>: </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "github":1,
                  "unalign":1,
                  "cach":1,
                  "master":1,
                  "lob":1,
                  "align":2,
                  "full":1,
                  "rel":1,
                  "https":1,
                  "psi":1,
                  "experi":2,
                  "nitsanw":1,
                  "offset":1,
                  "nofollow":1,
                  "cost":1,
                  "address":1,
                  "href":1,
                  "start":1,
                  "blob":1,
                  "access":1,
                  "benchmark":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}