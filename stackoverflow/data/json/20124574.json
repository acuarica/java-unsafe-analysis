{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20124574,
    "title":"Why ConcurrentHashMap.Segment and ConcurrentHashMap.HashEntry classes are static?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "design-patterns",
      "design",
      "concurrenthashmap"
    ],
    "creationDate":"2013-11-21",
    "lastActivityDate":"2013-12-06",
    "lastEditDate":"2013-11-23",
    "score":5,
    "viewCount":200,
    "owner":{
      "type":"StackOverflowUser",
      "id":2993256,
      "displayName":"Vipin",
      "reputation":1064
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Why <code>ConcurrentHashMap.Segment</code> and <code>ConcurrentHashMap.HashEntry</code> classes are static? Why it is designed in this way ?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20124574]-[626494141]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Why <code>ConcurrentHashMap.Segment</code> and <code>ConcurrentHashMap.HashEntry</code> classes are static? Why it is designed in this way ?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ConcurrentHashMap",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"HashEntry",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "concurr":2,
                  "map":2,
                  "segment":1,
                  "code":4,
                  "hash":3,
                  "entri":1,
                  "class":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ConcurrentHashMap",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HashEntry",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":20124624,
      "questionId":20124574,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29991904,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":485337,
            "displayName":"Adam Arold",
            "reputation":11886
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't really understand the point you are trying to make."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29991904]-[1232935860]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't really understand the point you are trying to make."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "understand":1,
                        "point":1,
                        "make":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29992689,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2993256,
            "displayName":"Vipin",
            "reputation":1064
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;all inner classes which does not need to use the properties of their enclosing classes are supposed to be static&quot; , if this was the reason then how about possibility of modifying this static inner class ( ConcurrentHashMap.Segment ) by other classes as it is not private , isn't is bad? Or if author deliberately wanted to give this functionality to other classes then why ? Hope it is clear now"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29992689]-[945073013]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;all inner classes which does not need to use the properties of their enclosing classes are supposed to be static&quot; , if this was the reason then how about possibility of modifying this static inner class ( ConcurrentHashMap.Segment ) by other classes as it is not private , isn't is bad? Or if author deliberately wanted to give this functionality to other classes then why ? Hope it is clear now"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "properti":1,
                        "author":1,
                        "concurr":1,
                        "want":1,
                        "map":1,
                        "clear":1,
                        "bad":1,
                        "deliber":1,
                        "reason":1,
                        "possibl":1,
                        "segment":1,
                        "hash":1,
                        "hope":1,
                        "enclos":1,
                        "function":1,
                        "modifi":1,
                        "isn":1,
                        "give":1,
                        "class":4,
                        "quot":2,
                        "suppos":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29992927,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":485337,
            "displayName":"Adam Arold",
            "reputation":11886
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It is actually `package private`. If you look at the code of other classes in the JCF you see this all over the place. It might be a design oversight."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29992927]-[1458438427]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It is actually `package private`. If you look at the code of other classes in the JCF you see this all over the place. It might be a design oversight."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "design":1,
                        "code":1,
                        "jcf":1,
                        "class":1,
                        "place":1,
                        "oversight":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29990301,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2993256,
            "displayName":"Vipin",
            "reputation":1064
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"but it adds one more possibility of accessing inner class from some other class."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29990301]-[-273585293]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"but it adds one more possibility of accessing inner class from some other class."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"from",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "possibl":1,
                        "access":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29990436,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":485337,
            "displayName":"Adam Arold",
            "reputation":11886
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What do you refer to by &quot;**it**&quot;?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29990436]-[268325918]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What do you refer to by &quot;**it**&quot;?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "refer":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29991084,
          "postId":20124624,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2993256,
            "displayName":"Vipin",
            "reputation":1064
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;it&quot; means current implementation of these classes . current signature for segment is &quot;static final class Segment\n<k,v>\n  extends ReentrantLock implements Serializabl&quot;\n</k,v>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20124624-cu29991084]-[-741320534]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;it&quot; means current implementation of these classes . current signature for segment is &quot;static final class Segment\n<k,v>\n  extends ReentrantLock implements Serializabl&quot;\n</k,v>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"static",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"KeywordModifierNode",
                            "value":"final",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Segment",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ReentrantLock",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "implementedInterfaces":{
                          "type":"TypeListNode",
                          "types":[
                            {
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Serializabl",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "signatur":1,
                        "mean":1,
                        "lock":1,
                        "reentrant":1,
                        "segment":2,
                        "serializabl":1,
                        "implement":1,
                        "class":1,
                        "quot":4,
                        "current":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ReentrantLock",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Serializabl",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-11-21",
      "lastActivityDate":"2013-11-21",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":485337,
        "displayName":"Adam Arold",
        "reputation":11886
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Basically all inner classes which does not need to use the properties of their enclosing classes are supposed to be <code>static</code>. This comes from the general principle in java which says that every object should have access to the least possible other objects.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20124624]-[-764918244]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Basically all inner classes which does not need to use the properties of their enclosing classes are supposed to be <code>static</code>. This comes from the general principle in java which says that every object should have access to the least possible other objects.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "principl":1,
                    "object":2,
                    "code":2,
                    "general":1,
                    "enclos":1,
                    "class":2,
                    "basic":1,
                    "suppos":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":20125446,
      "questionId":20124574,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29992812,
          "postId":20125446,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2993256,
            "displayName":"Vipin",
            "reputation":1064
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This is one good point but if it is the reason why this class is not private?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20125446-cu29992812]-[-343157382]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This is one good point but if it is the reason why this class is not private?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"is",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "reason":1,
                        "good":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29992951,
          "postId":20125446,
          "creationDate":"2013-11-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1851024,
            "displayName":"Andrey Chaschev",
            "reputation":7032
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It's package-local which is like private for a package. I don't know what was their intention, but usually private entities are made package-local for unit-testing so that one could access them from a different class (a unit test)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20125446-cu29992951]-[1018184844]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It's package-local which is like private for a package. I don't know what was their intention, but usually private entities are made package-local for unit-testing so that one could access them from a different class (a unit test)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "test":2,
                        "intent":1,
                        "local":2,
                        "unit":2,
                        "entiti":1,
                        "made":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30049740,
          "postId":20125446,
          "creationDate":"2013-11-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2993256,
            "displayName":"Vipin",
            "reputation":1064
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"most probably for testing purpose only java guys will not play with design , I don't know how can ask author Doug Lea."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20125446-cu30049740]-[1588135991]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"most probably for testing purpose only java guys will not play with design , I don't know how can ask author Doug Lea."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "test":1,
                        "author":1,
                        "design":1,
                        "guy":1,
                        "doug":1,
                        "play":1,
                        "lea":1,
                        "purpos":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30052817,
          "postId":20125446,
          "creationDate":"2013-11-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1851024,
            "displayName":"Andrey Chaschev",
            "reputation":7032
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You may try reaching them at the mailing list. If you're doing TDD, then testability is a very important part of your design and `Segment` is a part of a contract not of an implementation. Another reason is that the sacrifice made to performance by introducing `sun.misc.Unsafe` was very huge - `ConcurrentHashMap` is really hard to read, compared to that package-private visibility is a tiny sacrifice if at all."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20125446-cu30052817]-[-2103590840]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You may try reaching them at the mailing list. If you're doing TDD, then testability is a very important part of your design and `Segment` is a part of a contract not of an implementation. Another reason is that the sacrifice made to performance by introducing `sun.misc.Unsafe` was very huge - `ConcurrentHashMap` is really hard to read, compared to that package-private visibility is a tiny sacrifice if at all."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ConcurrentHashMap",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "reach":1,
                        "huge":1,
                        "design":1,
                        "concurr":1,
                        "hard":1,
                        "map":1,
                        "introduc":1,
                        "sun":1,
                        "visibl":1,
                        "reason":1,
                        "segment":1,
                        "tini":1,
                        "hash":1,
                        "import":1,
                        "compar":1,
                        "mail":1,
                        "sacrific":2,
                        "tdd":1,
                        "perform":1,
                        "implement":1,
                        "misc":1,
                        "testabl":1,
                        "unsaf":1,
                        "part":2,
                        "made":1,
                        "contract":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ConcurrentHashMap",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-11-21",
      "lastActivityDate":"2013-11-21",
      "lastEditDate":"2013-11-21",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1851024,
        "displayName":"Andrey Chaschev",
        "reputation":7032
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Each inner non-static class contains an invisible field <code>this$</code> which references it's parent object (<code>ConcurrentHashMap</code>) which creates an overhead of 8 bytes per entity (<code>Segment</code> or <code>HashEntry</code>). This is how parent's class fields are accessed - inner class is in some sort a syntax sugar for objects which belong to a single container (e.g. parent). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20125446]-[-1222531525]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Each inner non-static class contains an invisible field <code>this$</code> which references it's parent object (<code>ConcurrentHashMap</code>) which creates an overhead of 8 bytes per entity (<code>Segment</code> or <code>HashEntry</code>). This is how parent's class fields are accessed - inner class is in some sort a syntax sugar for objects which belong to a single container (e.g. parent). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"static",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"contains",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ConcurrentHashMap",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HashEntry",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"fields",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":3,
                    "singl":1,
                    "concurr":1,
                    "sugar":1,
                    "field":2,
                    "map":1,
                    "contain":1,
                    "belong":1,
                    "segment":1,
                    "object":2,
                    "code":8,
                    "overhead":1,
                    "syntax":1,
                    "invis":1,
                    "hash":2,
                    "entri":1,
                    "refer":1,
                    "entiti":1,
                    "sort":1,
                    "creat":1,
                    "byte":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ConcurrentHashMap",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HashEntry",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is why inner classes should be replaced with static inner classes when possible.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20125446]-[-167963334]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is why inner classes should be replaced with static inner classes when possible.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "replac":1,
                    "class":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":20428853,
      "questionId":20124574,
      "comments":[
        
      ],
      "creationDate":"2013-12-06",
      "lastActivityDate":"2013-12-06",
      "lastEditDate":"2013-12-06",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":2993256,
        "displayName":"Vipin",
        "reputation":1064
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>@Andrey , @Adam I agree the points you presented but the real answer I got from effective java book. Item#22 Favor static member classes over nonstatic.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20428853]-[892926003]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>@Andrey , @Adam I agree the points you presented but the real answer I got from effective java book. Item#22 Favor static member classes over nonstatic.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Andrey",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Adam",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "real":1,
                    "book":1,
                    "present":1,
                    "effect":1,
                    "andrey":1,
                    "member":1,
                    "adam":1,
                    "agre":1,
                    "answer":1,
                    "class":1,
                    "nonstat":1,
                    "favor":1,
                    "item":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>A common use of private static member classes is to represent components of the object represented by their enclosing class.For example, consider a Map instance, which associates keys with values. Many Map implementations have an internal Entry object for each key-value pair in the map. While each entry is associated with a map, the methods on an entry (getKey, getValue, and setValue) do not need access to the map. Therefore, it would be wasteful to use a nonstatic member class to represent entries: a private static member class is best.</p> \n <p>If you declare a member class that does not require access to an enclosing instance, always put the static modifier in its declaration.If you omit this modifier, each instance will have an extraneous reference to its enclosing instance</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20428853]-[926078873]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>A common use of private static member classes is to represent components of the object represented by their enclosing class.For example, consider a Map instance, which associates keys with values. Many Map implementations have an internal Entry object for each key-value pair in the map. While each entry is associated with a map, the methods on an entry (getKey, getValue, and setValue) do not need access to the map. Therefore, it would be wasteful to use a nonstatic member class to represent entries: a private static member class is best.</p> \n <p>If you declare a member class that does not require access to an enclosing instance, always put the static modifier in its declaration.If you omit this modifier, each instance will have an extraneous reference to its enclosing instance</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getKey",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getValue",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setValue",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"to",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "wast":1,
                    "map":5,
                    "requir":1,
                    "set":1,
                    "blockquot":2,
                    "declar":2,
                    "compon":1,
                    "object":2,
                    "key":3,
                    "entri":4,
                    "common":1,
                    "member":4,
                    "omit":1,
                    "enclos":3,
                    "valu":1,
                    "refer":1,
                    "modifi":2,
                    "implement":1,
                    "put":1,
                    "class":1,
                    "pair":1,
                    "extran":1,
                    "nonstat":1,
                    "repres":3,
                    "intern":1,
                    "associ":1,
                    "instanc":4,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>lot more good stuff I got from item#22 but above are the main points.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20428853]-[-972079552]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>lot more good stuff I got from item#22 but above are the main points.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "good":1,
                    "main":1,
                    "stuff":1,
                    "lot":1,
                    "item":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}