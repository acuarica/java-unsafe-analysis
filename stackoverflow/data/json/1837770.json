{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":1837770,
    "title":"access running JVM raw memory",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":1735922,
        "postId":1837770,
        "creationDate":"2009-12-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":223535,
          "displayName":"Rick",
          "reputation":6
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Thanks for the replies. I guess I didn't have any specific uses in mind, just wondered if it was possible. I just realized I was thinking about printing an array. When I do println() on an array with a class instance in it I get an address looking thing after an @ like so: [0] sketch_dec03a$MyClass@141fab6 Thats from Processing (processing.org) by the way through which I get all my Java experience."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[1837770-cu1735922]-[438520232]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Thanks for the replies. I guess I didn't have any specific uses in mind, just wondered if it was possible. I just realized I was thinking about printing an array. When I do println() on an array with a class instance in it I get an address looking thing after an @ like so: [0] sketch_dec03a$MyClass@141fab6 Thats from Processing (processing.org) by the way through which I get all my Java experience."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"instance",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"sketch_dec03a$MyClass",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "fab":1,
                      "process":2,
                      "print":1,
                      "thing":1,
                      "println":1,
                      "experi":1,
                      "array":2,
                      "mind":1,
                      "repli":1,
                      "think":1,
                      "specif":1,
                      "wonder":1,
                      "address":1,
                      "sketch":1,
                      "guess":1,
                      "org":1,
                      "dec":1,
                      "realiz":1,
                      "instanc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":1730564,
        "postId":1837770,
        "creationDate":"2009-12-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":177324,
          "displayName":"Dave",
          "reputation":3336
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It might be possible. But I don't think it would do you much good. This would be the virtual memory address. So it's only relevant inside that JVM -- that process really."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[1837770-cu1730564]-[-1850553856]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It might be possible. But I don't think it would do you much good. This would be the virtual memory address. So it's only relevant inside that JVM -- that process really."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "good":1,
                      "process":1,
                      "relev":1,
                      "virtual":1,
                      "insid":1,
                      "address":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":1730756,
        "postId":1837770,
        "creationDate":"2009-12-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"the reason an address is not very useful is that objects can move when the gc is performed. Basicly you don't need to know this level of information in Java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[1837770-cu1730756]-[1071205066]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"the reason an address is not very useful is that objects can move when the gc is performed. Basicly you don't need to know this level of information in Java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "move":1,
                      "reason":1,
                      "object":1,
                      "inform":1,
                      "perform":1,
                      "address":1,
                      "basic":1,
                      "level":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jvm",
      "memory-dump"
    ],
    "creationDate":"2009-12-03",
    "lastActivityDate":"2009-12-04",
    "score":1,
    "viewCount":507,
    "owner":{
      "type":"StackOverflowUser",
      "id":223535,
      "displayName":"Rick",
      "reputation":6
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Forgive me if this is an ignorant question, I'm not exactly an expert programmer just curious. Is it possible to read the working memory, say for an instance of a class, from inside a running program? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1837770]-[942085453]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Forgive me if this is an ignorant question, I'm not exactly an expert programmer just curious. Is it possible to read the working memory, say for an instance of a class, from inside a running program? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "program":1,
                  "question":1,
                  "ignor":1,
                  "run":1,
                  "forgiv":1,
                  "work":1,
                  "expert":1,
                  "insid":1,
                  "curious":1,
                  "programm":1,
                  "instanc":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know you can do something like <code>println(theInstance.getClass());</code> and it will give you the memory address of the instance (I'm assuming thats what it is). I'm wondering if can do something like <code>byte[]memory = theInstance.getClass().getMemory(); println(toString(memory));</code> I know thats all made up but just to illustrate.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1837770]-[561076683]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know you can do something like <code>println(theInstance.getClass());</code> and it will give you the memory address of the instance (I'm assuming thats what it is). I'm wondering if can do something like <code>byte[]memory = theInstance.getClass().getMemory(); println(toString(memory));</code> I know thats all made up but just to illustrate.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"println",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"theInstance",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"getClass",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"memory",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":".",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"theInstance",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"getClass",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"getMemory",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"println",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"toString",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"memory",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "assum":1,
                  "illustr":1,
                  "println":2,
                  "code":4,
                  "wonder":1,
                  "give":1,
                  "address":1,
                  "made":1,
                  "instanc":3,
                  "memori":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"toString",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"memory",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"toString",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"memory",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"theInstance",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getClass",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getMemory",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"theInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getClass",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":1844588,
      "questionId":1837770,
      "comments":[
        
      ],
      "creationDate":"2009-12-04",
      "lastActivityDate":"2009-12-04",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":199305,
        "displayName":"Xepoch",
        "reputation":4323
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I haven't looked at this lately but if on Linux you could seek/read <code>/proc/PID/mem</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1844588]-[-727846493]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I haven't looked at this lately but if on Linux you could seek/read <code>/proc/PID/mem</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "seek":1,
                    "look":1,
                    "code":2,
                    "pid":1,
                    "mem":1,
                    "linux":1,
                    "proc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":1837792,
      "questionId":1837770,
      "comments":[
        
      ],
      "creationDate":"2009-12-03",
      "lastActivityDate":"2009-12-03",
      "lastEditDate":"2009-12-03",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":143938,
        "displayName":"Jonathan Feinberg",
        "reputation":26338
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, printing the result of getClass() doesn't give a &quot;memory address&quot;; it gives a string representation of a class (which would be something like &quot;class Argyle&quot;).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1837792]-[-1892724002]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, printing the result of getClass() doesn't give a &quot;memory address&quot;; it gives a string representation of a class (which would be something like &quot;class Argyle&quot;).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getClass",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"Argyle",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "represent":1,
                    "print":1,
                    "result":1,
                    "argyl":1,
                    "give":1,
                    "address":1,
                    "quot":4,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's not clear, from your question, what you'd expect the contents of such a thing to be. If you'd like to understand how Java represents objects in memory, then read the <a href=\"http://java.sun.com/docs/books/jvms/second%5Fedition/html/VMSpecTOC.doc.html\"rel=\"nofollow\">VM specification</a>. Then again, <a href=\"http://java.sun.com/docs/books/jvms/second%5Fedition/html/Overview.doc.html#16066\"rel=\"nofollow\">the Java virtual machine does not mandate any particular internal structure for objects</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1837792]-[1818385245]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's not clear, from your question, what you'd expect the contents of such a thing to be. If you'd like to understand how Java represents objects in memory, then read the <a href=\"http://java.sun.com/docs/books/jvms/second%5Fedition/html/VMSpecTOC.doc.html\"rel=\"nofollow\">VM specification</a>. Then again, <a href=\"http://java.sun.com/docs/books/jvms/second%5Fedition/html/Overview.doc.html#16066\"rel=\"nofollow\">the Java virtual machine does not mandate any particular internal structure for objects</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "question":1,
                    "mandat":1,
                    "clear":1,
                    "book":2,
                    "understand":1,
                    "sun":2,
                    "rel":2,
                    "vmspec":1,
                    "thing":1,
                    "jvms":2,
                    "doc":4,
                    "virtual":1,
                    "structur":1,
                    "object":2,
                    "nofollow":2,
                    "machin":1,
                    "expect":1,
                    "specif":1,
                    "content":1,
                    "overview":1,
                    "toc":1,
                    "html":4,
                    "href":2,
                    "http":2,
                    "repres":1,
                    "intern":1,
                    "fedit":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":1837843,
      "questionId":1837770,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":1730682,
          "postId":1837843,
          "creationDate":"2009-12-03",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Tom - actually, I don't think that JNI does allow you to get at the raw memory per se. Rather, it provides methods for getting and setting (for example) an object's fields. (If you knew what the internal representation of a JNI FieldID was, maybe you could &quot;punch&quot; through the abstraction barrier ...)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[1837843-cu1730682]-[-2015368604]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Tom - actually, I don't think that JNI does allow you to get at the raw memory per se. Rather, it provides methods for getting and setting (for example) an object's fields. (If you knew what the internal representation of a JNI FieldID was, maybe you could &quot;punch&quot; through the abstraction barrier ...)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Tom",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "represent":1,
                        "field":2,
                        "barrier":1,
                        "set":1,
                        "abstract":1,
                        "knew":1,
                        "object":1,
                        "jni":2,
                        "tom":1,
                        "raw":1,
                        "quot":2,
                        "punch":1,
                        "intern":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":1731735,
          "postId":1837843,
          "creationDate":"2009-12-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It's C. The abstraction barriers are not very robust..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[1837843-cu1731735]-[1360500827]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It's C. The abstraction barriers are not very robust..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "barrier":1,
                        "abstract":1,
                        "robust":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2009-12-03",
      "lastActivityDate":"2009-12-03",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":4725,
        "displayName":"Tom Hawtin - tackline",
        "reputation":89549
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Not using standard Java APIs. However, you can access memory through <code>sun.misc.Unsafe</code> (you will probably need to use reflection to get the instance of this class). You can, of course, also do this through JNI.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1837843]-[-732145655]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Not using standard Java APIs. However, you can access memory through <code>sun.misc.Unsafe</code> (you will probably need to use reflection to get the instance of this class). You can, of course, also do this through JNI.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "standard":1,
                    "sun":1,
                    "code":2,
                    "jni":1,
                    "misc":1,
                    "api":1,
                    "unsaf":1,
                    "reflect":1,
                    "instanc":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But why would you want to?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1837843]-[1680101346]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But why would you want to?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}