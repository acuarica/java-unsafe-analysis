{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8926706,
    "title":"JNI, Garbage collection and Pointers- Java/C++ who should do what?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "c++",
      "garbage-collection",
      "jni"
    ],
    "creationDate":"2012-01-19",
    "lastActivityDate":"2012-01-19",
    "score":7,
    "viewCount":2071,
    "owner":{
      "type":"StackOverflowUser",
      "id":2343179,
      "displayName":"seahorse",
      "reputation":882
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>We have the concept of pointers in C++. Now if we allocate some memory in C++ and pass it on to Java as an object reference(using JNI) then who should be and who will be freeing it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[-1765865712]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>We have the concept of pointers in C++. Now if we allocate some memory in C++ and pass it on to Java as an object reference(using JNI) then who should be and who will be freeing it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "alloc":1,
                  "pointer":1,
                  "object":1,
                  "jni":1,
                  "refer":1,
                  "pass":1,
                  "concept":1,
                  "free":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Will it be </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[-238031635]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Will it be </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>1.)The Garbage collector does it automatically in Java?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[1367584893]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>1.)The Garbage collector does it automatically in Java?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "collector":1,
                  "garbag":1,
                  "automat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>2.)We need to explicitly do a delete on the pointer in the wrapped JNI class finalize method?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[-1286099064]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>2.)We need to explicitly do a delete on the pointer in the wrapped JNI class finalize method?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"finalize",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "delet":1,
                  "pointer":1,
                  "jni":1,
                  "wrap":1,
                  "final":1,
                  "explicit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>3.)Or we should just forget finalize(as finalizers cannot be trusted) and it is responsibility of Java to call a C++ code which deletes the object</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[1835749867]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>3.)Or we should just forget finalize(as finalizers cannot be trusted) and it is responsibility of Java to call a C++ code which deletes the object</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "delet":1,
                  "trust":1,
                  "object":1,
                  "code":1,
                  "final":2,
                  "forget":1,
                  "respons":1,
                  "call":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>4.)Or is there some way to deallocate the memory directly in Java itself (not sure how Java intreprets a C++ pointer inorder to delete it)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[-1547973892]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>4.)Or is there some way to deallocate the memory directly in Java itself (not sure how Java intreprets a C++ pointer inorder to delete it)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "delet":1,
                  "pointer":1,
                  "intrepret":1,
                  "direct":1,
                  "dealloc":1,
                  "inord":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What is the best practice for doing this and vice versa(when we pass objects from Java to C++)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8926706]-[1582047161]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What is the best practice for doing this and vice versa(when we pass objects from Java to C++)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "vice":1,
                  "object":1,
                  "versa":1,
                  "pass":1,
                  "practic":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":8926787,
      "questionId":8926706,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11170720,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Sure, or just calling the native release function will also be deterministically - the problem is deciding WHEN I can call the function. But then in my experience I never had complicated scenarios where just calling `close()` wouldn't have worked (now much nicer with java7 syntax). And most of the time I don't hold resources in my C++ code that need to be cleaned up deterministically anyhow so I go for the simplest solution."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170720]-[-548414263]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Sure, or just calling the native release function will also be deterministically - the problem is deciding WHEN I can call the function. But then in my experience I never had complicated scenarios where just calling `close()` wouldn't have worked (now much nicer with java7 syntax). And most of the time I don't hold resources in my C++ code that need to be cleaned up deterministically anyhow so I go for the simplest solution."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "scenario":1,
                        "decid":1,
                        "nicer":1,
                        "problem":1,
                        "complic":1,
                        "clean":1,
                        "resourc":1,
                        "experi":1,
                        "work":1,
                        "code":1,
                        "syntax":1,
                        "hold":1,
                        "releas":1,
                        "function":2,
                        "wouldn":1,
                        "simplest":1,
                        "time":1,
                        "close":1,
                        "determinist":2,
                        "call":3,
                        "solut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11170786,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`I go for the simplest solution.` agreed, its more likely to work that way.;)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170786]-[-571401064]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`I go for the simplest solution.` agreed, its more likely to work that way.;)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "agre":1,
                        "work":1,
                        "solut":1,
                        "simplest":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11170870,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Exactly - I can't screw up (well not that easily at least) if I let the JVM figure out all the hard parts ;) Though I still tend to try to outsmart myself - it's just much more interesting that way! (bad habit that I know)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170870]-[-1994952175]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Exactly - I can't screw up (well not that easily at least) if I let the JVM figure out all the hard parts ;) Though I still tend to try to outsmart myself - it's just much more interesting that way! (bad habit that I know)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "hard":1,
                        "habit":1,
                        "bad":1,
                        "easili":1,
                        "interest":1,
                        "tend":1,
                        "outsmart":1,
                        "figur":1,
                        "part":1,
                        "screw":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11170906,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Voo, put another way, its more likely to work if you use something already tested. ;)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170906]-[-1195706338]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Voo, put another way, its more likely to work if you use something already tested. ;)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Voo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "voo":1,
                        "put":1,
                        "work":1,
                        "test":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11169538,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1054036,
            "displayName":"Viruzzo",
            "reputation":2530
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 definitely the allocator should be the one to release, and allocating Java-side (if possible) is &quot;cleaner&quot;."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11169538]-[219601644]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 definitely the allocator should be the one to release, and allocating Java-side (if possible) is &quot;cleaner&quot;."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":1,
                        "alloc":2,
                        "cleaner":1,
                        "releas":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11169621,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I agree its cleaner, esp if Java calls C++ rather than they other way around."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11169621]-[-1588981761]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I agree its cleaner, esp if Java calls C++ rather than they other way around."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "call":1,
                        "esp":1,
                        "cleaner":1,
                        "agre":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11169640,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2343179,
            "displayName":"seahorse",
            "reputation":882
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"For point number 2, the release method in Java will call the C++ method which will actually delete the object? How can Java directly release memory allocated in C++?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11169640]-[-1743091533]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"For point number 2, the release method in Java will call the C++ method which will actually delete the object? How can Java directly release memory allocated in C++?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":1,
                        "method":2,
                        "point":1,
                        "delet":1,
                        "alloc":1,
                        "object":1,
                        "direct":1,
                        "releas":2,
                        "call":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11169819,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can use Unsafe.freeMemory if the memory was `malloc`ed. But like I say that's not the best option."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11169819]-[837770866]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can use Unsafe.freeMemory if the memory was `malloc`ed. But like I say that's not the best option."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"freeMemory",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "malloc":1,
                        "option":1,
                        "unsaf":1,
                        "free":1,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11170490,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"As long as it's only memory we are freeing I usually just write a small java wrapper around the c++ resource and use the finalizer to call the release method there - extremely simple and fool proof. The only problem are resources we want to release deterministically, but then we have the same problem and solutions for normal Java as well."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170490]-[2116419845]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"As long as it's only memory we are freeing I usually just write a small java wrapper around the c++ resource and use the finalizer to call the release method there - extremely simple and fool proof. The only problem are resources we want to release deterministically, but then we have the same problem and solutions for normal Java as well."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "simpl":1,
                        "problem":2,
                        "normal":1,
                        "fool":1,
                        "resourc":2,
                        "small":1,
                        "releas":2,
                        "final":1,
                        "wrapper":1,
                        "extrem":1,
                        "proof":1,
                        "determinist":1,
                        "call":1,
                        "solut":1,
                        "write":1,
                        "free":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11170539,
          "postId":8926787,
          "creationDate":"2012-01-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you use a direct ByteBuffer you can call `((DirectBuffer) buffer).cleaner().clean();` to clean it up deterministically."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8926787-cu11170539]-[-1408534633]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you use a direct ByteBuffer you can call `((DirectBuffer) buffer).cleaner().clean();` to clean it up deterministically."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ByteBuffer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"DirectBuffer",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"buffer",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"cleaner",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"clean",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "cleaner":1,
                        "clean":2,
                        "buffer":3,
                        "direct":2,
                        "determinist":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ByteBuffer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"DirectBuffer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"cleaner",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"clean",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-19",
      "lastActivityDate":"2012-01-19",
      "lastEditDate":"2012-01-19",
      "score":7,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>We have the concept of pointers in C++. Now if we allocate some memory in C++ and pass it on to Java as an object reference(using JNI) then who should be and who will be freeing it.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[1532923871]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>We have the concept of pointers in C++. Now if we allocate some memory in C++ and pass it on to Java as an object reference(using JNI) then who should be and who will be freeing it.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "pointer":1,
                    "blockquot":2,
                    "object":1,
                    "jni":1,
                    "refer":1,
                    "pass":1,
                    "concept":1,
                    "free":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The best strategy is usually to have the allocator also be the one to free the data.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[-1953492058]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The best strategy is usually to have the allocator also be the one to free the data.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "data":1,
                    "alloc":1,
                    "strategi":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>1.)The Garbage collector does it automatically in Java?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[-1427698798]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>1.)The Garbage collector does it automatically in Java?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "blockquot":2,
                    "garbag":1,
                    "automat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The problem with this is you don't know when, if ever it will run.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[-1272955814]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The problem with this is you don't know when, if ever it will run.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "run":1,
                    "problem":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>2.)We need to explicitly do a delete on the pointer in the wrapped JNI class finalize method?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[-378022041]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>2.)We need to explicitly do a delete on the pointer in the wrapped JNI class finalize method?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"finalize",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "delet":1,
                    "pointer":1,
                    "blockquot":2,
                    "jni":1,
                    "wrap":1,
                    "final":1,
                    "explicit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Better to have a release() method in Java rather than imply that C++ has to delete it. You may want C++ to recycle the memory.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[-881682947]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Better to have a release() method in Java rather than imply that C++ has to delete it. You may want C++ to recycle the memory.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "delet":1,
                    "impli":1,
                    "recycl":1,
                    "releas":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>3.)Or we should just forget finalize(as finalizers cannot be trusted) and it is responsibility of Java to call a C++ code which deletes the object</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[1459390730]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>3.)Or we should just forget finalize(as finalizers cannot be trusted) and it is responsibility of Java to call a C++ code which deletes the object</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "delet":1,
                    "trust":1,
                    "blockquot":2,
                    "object":1,
                    "code":1,
                    "final":2,
                    "forget":1,
                    "respons":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you mean, allocate the memory in Java and pass it to C++ to populate. This is my preference. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[716788541]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you mean, allocate the memory in Java and pass it to C++ to populate. This is my preference. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "popul":1,
                    "pass":1,
                    "prefer":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I would use can use ByteBuffer.allocateDirect() and you can call <code>((DirectBuffer) buffer).cleaner().clean();</code> to clean it up deterministically.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[2092142342]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I would use can use ByteBuffer.allocateDirect() and you can call <code>((DirectBuffer) buffer).cleaner().clean();</code> to clean it up deterministically.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ByteBuffer",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateDirect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":".",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":".",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"call",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"CastExpressionNode",
                                "aType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"DirectBuffer",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"buffer",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"cleaner",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"clean",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "cleaner":1,
                    "clean":2,
                    "buffer":3,
                    "direct":2,
                    "code":2,
                    "determinist":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DirectBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"call",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"CastExpressionNode",
                            "aType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"DirectBuffer",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"buffer",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"cleaner",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"clean",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This can make recycling the memory simpler, possibly the same buffer can be used for the life of the application.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8926787]-[1314720993]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This can make recycling the memory simpler, possibly the same buffer can be used for the life of the application.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "recycl":1,
                    "buffer":1,
                    "possibl":1,
                    "applic":1,
                    "life":1,
                    "make":1,
                    "simpler":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}