{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":21775237,"title":"In Java, is a global variable always put on the heap?","comments":[{"type":"StackOverflowComment","id":32942987,"postId":21775237,"creationDate":"2014-02-14","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1719010,"displayName":"praveen_mohan","reputation":92},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"It all depends on the scope of a variable, in Case 1: the static variable is declared on class loading and is gc when program terminate,Case 2:scope is inside the method local variable"},"units":[{"type":"TextUnit","id":"[21775237-cu32942987]-[-410905822]","astNode":{"type":"TextFragmentNode","text":"It all depends on the scope of a variable, in Case 1: the static variable is declared on class loading and is gc when program terminate,Case 2:scope is inside the method local variable"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"loading","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"method":1,"depend":1,"scope":2,"local":1,"load":1,"declar":1,"insid":1,"variabl":3,"termin":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"loading","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":57.70428571428572,"fleshKincaidGradeLevel":13.905714285714286,"automatedReadingIndex":15.98657142857143,"gunningFogIndex":14.0,"smogIndex":3.0,"colemanLiauIndex":8.249142857142854}]}]}]},{"type":"StackOverflowComment","id":32943093,"postId":21775237,"creationDate":"2014-02-14","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":302916,"displayName":"Brian Roach","reputation":43537},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"**All** objects in Java are created on the heap. And arrays are objects in Java. There is absolutely no difference between your two examples."},"units":[{"type":"TextUnit","id":"[21775237-cu32943093]-[-102138696]","astNode":{"type":"TextFragmentNode","text":"**All** objects in Java are created on the heap. And arrays are objects in Java. There is absolutely no difference between your two examples."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"exampl":1,"differ":1,"object":2,"array":1,"absolut":1,"heap":1,"creat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":50.66500000000002,"fleshKincaidGradeLevel":8.180000000000003,"automatedReadingIndex":4.353750000000002,"gunningFogIndex":6.533333333333335,"smogIndex":7.47213595499958,"colemanLiauIndex":7.691249999999997}]}]}]},{"type":"StackOverflowComment","id":32943190,"postId":21775237,"creationDate":"2014-02-14","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":3165602,"displayName":"Oleg S.","reputation":1345},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Consider you call init() followed by solve() of your first example from two threads, what would you expect with respect to the value of maze availble to both threads? Now analyse the second case in the same way. Then consider `some_number` is massive, why do you wan that variable hanging around forever (until init is called again)?"},"units":[{"type":"TextUnit","id":"[21775237-cu32943190]-[-1330821864]","astNode":{"type":"TextFragmentNode","text":"Consider you call init() followed by solve() of your first example from two threads, what would you expect with respect to the value of maze availble to both threads? Now analyse the second case in the same way. Then consider `some_number` is massive, why do you wan that variable hanging around forever (until init is called again)?"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"init","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"some_number","comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"solv":1,"number":1,"massiv":1,"wan":1,"hang":1,"maze":1,"thread":2,"expect":1,"respect":1,"variabl":1,"forev":1,"analys":1,"call":2,"init":2,"availbl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"init","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"init","comments":[]},{"type":"IdentifierNode","name":"solve","comments":[]},{"type":"IdentifierNode","name":"some_number","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":62.87631578947371,"fleshKincaidGradeLevel":9.209473684210526,"automatedReadingIndex":9.884736842105266,"gunningFogIndex":7.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":9.901052631578946}]}]}]},{"type":"StackOverflowComment","id":32943198,"postId":21775237,"creationDate":"2014-02-14","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":672135,"displayName":"HectorLector","reputation":846},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Everything you create with &quot;new&quot; allocates memory, thus it&acute;s dynamic - so it has to be on the heap."},"units":[{"type":"TextUnit","id":"[21775237-cu32943198]-[2142195177]","astNode":{"type":"TextFragmentNode","text":"Everything you create with &quot;new&quot; allocates memory, thus it&acute;s dynamic - so it has to be on the heap."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"alloc":1,"dynam":1,"acut":1,"quot":2,"heap":1,"creat":1,"memori":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":62.87631578947371,"fleshKincaidGradeLevel":9.209473684210526,"automatedReadingIndex":6.662105263157894,"gunningFogIndex":7.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":5.871052631578948}]}]}]}],"tags":["java","heap-memory"],"creationDate":"2014-02-14","lastActivityDate":"2014-02-14","score":0,"viewCount":189,"owner":{"type":"StackOverflowUser","id":3270407,"displayName":"user3270407","reputation":383},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Also, how does having a static variable affect things? (If at all) For example:</p>"},"units":[{"type":"TextUnit","id":"[21775237]-[-1082134139]","astNode":{"type":"TextFragmentNode","text":"<p>Also, how does having a static variable affect things? (If at all) For example:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"thing":1,"variabl":1,"affect":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"class myclass{\n     static int[][] maze;\n     static void init(){ maze=new int[some number][some number]; /*read data into array*/}\n     static void solve(){\n          /*now use maze array here*/\n     }\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[21775237]-[1441323810]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"myclass","comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"{\n     static int[][] maze;\n     "},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"init","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]},{"type":"TextFragmentNode","text":"{ maze=new int[some number][some number]; /*read data into array*/}\n     "},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"/*now use maze array here*/"}]},"comments":[]},{"type":"TextFragmentNode","text":"}\n"}]},"rawText":"class myclass{\n     static int[][] maze;\n     static void init(){ maze=new int[some number][some number]; /*read data into array*/}\n     static void solve(){\n          /*now use maze array here*/\n     }\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"solv":1,"read":1,"number":2,"data":1,"maze":3,"array":2,"init":1,"myclass":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"myclass","comments":[]},{"type":"IdentifierNode","name":"init","comments":[]},{"type":"IdentifierNode","name":"solve","comments":[]}]},{"declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"init","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"/*now use maze array here*/"}]},"comments":[]}]},{"grade":0.9886440634727478}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Is this put on the heap? </p>"},"units":[{"type":"TextUnit","id":"[21775237]-[977389335]","astNode":{"type":"TextFragmentNode","text":"<p>Is this put on the heap? </p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"put":1,"heap":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>versus</p>"},"units":[{"type":"TextUnit","id":"[21775237]-[1081427929]","astNode":{"type":"TextFragmentNode","text":"<p>versus</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"versus":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":" class myclass{\n     static void solve(){\n          int[][] maze = new int[some number][some number];\n          /*read data into maze and solve directly*/\n     }\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[21775237]-[-58917108]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":" "},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"myclass","comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"{\n     "},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]},{"type":"TextFragmentNode","text":"{\n          int[][] maze = new int[some number][some number];\n          /*read data into maze and solve directly*/\n     }\n}\n"}]},"rawText":" class myclass{\n     static void solve(){\n          int[][] maze = new int[some number][some number];\n          /*read data into maze and solve directly*/\n     }\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"solv":2,"read":1,"number":2,"data":1,"maze":2,"direct":1,"myclass":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"myclass","comments":[]},{"type":"IdentifierNode","name":"solve","comments":[]}]},{"declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"solve","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]}]},{"grade":0.9808957576751709}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Which one would be \"better\" and really, how much difference is there between these two little code examples? Please shed any insight! </p>"},"units":[{"type":"TextUnit","id":"[21775237]-[-416267251]","astNode":{"type":"TextFragmentNode","text":"<p>Which one would be \"better\" and really, how much difference is there between these two little code examples? Please shed any insight! </p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"insight":1,"exampl":1,"differ":1,"shed":1,"code":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},"answers":[{"type":"StackOverflowAnswer","id":21775409,"questionId":21775237,"comments":[],"creationDate":"2014-02-14","lastActivityDate":"2014-02-14","lastEditDate":"2014-02-14","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":267482,"displayName":"bobah","reputation":7473},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>There are just two places where data can reside in JVM: the heap and the stack (well, JNI tricks inclusive it can reside anywhere, but this is an exception). All local variables in methods are located on the stack, everything else - on the heap. In both your examples array data is allocated on the heap, though in the second example the reference <code>maze</code> is a method local variable so is itself located on the stack.</p>"},"units":[{"type":"TextUnit","id":"[21775409]-[1868743000]","astNode":{"type":"TextFragmentNode","text":"<p>There are just two places where data can reside in JVM: the heap and the stack (well, JNI tricks inclusive it can reside anywhere, but this is an exception). All local variables in methods are located on the stack, everything else - on the heap. In both your examples array data is allocated on the heap, though in the second example the reference <code>maze</code> is a method local variable so is itself located on the stack.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":1,"resid":2,"method":2,"alloc":1,"exampl":1,"trick":1,"data":2,"local":2,"maze":1,"code":2,"jni":1,"array":1,"refer":1,"stack":3,"inclus":1,"place":1,"heap":3,"variabl":2,"locat":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":21775434,"questionId":21775237,"comments":[],"creationDate":"2014-02-14","lastActivityDate":"2014-02-14","score":2,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":3049628,"displayName":"Tim B","reputation":20768},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Java has a concept of PermGen space - this is the space used to store all class definitions, static variables, interned strings, etc.</p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-1605274779]","astNode":{"type":"TextFragmentNode","text":"<p>Java has a concept of PermGen space - this is the space used to store all class definitions, static variables, interned strings, etc.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PermGen","comments":[]},"comments":[]}],"comments":[]},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"definitions","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"store":1,"string":1,"space":2,"definit":1,"perm":1,"concept":1,"variabl":1,"intern":1,"gen":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PermGen","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"PermGen","comments":[]},{"type":"IdentifierNode","name":"definitions","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p><a href=\"http://www.integratingstuff.com/2011/07/24/understanding-and-avoiding-the-java-permgen-space-error/\" rel=\"nofollow\">http://www.integratingstuff.com/2011/07/24/understanding-and-avoiding-the-java-permgen-space-error/</a></p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-127678842]","astNode":{"type":"TextFragmentNode","text":"<p><a href=\"http://www.integratingstuff.com/2011/07/24/understanding-and-avoiding-the-java-permgen-space-error/\" rel=\"nofollow\">http://www.integratingstuff.com/2011/07/24/understanding-and-avoiding-the-java-permgen-space-error/</a></p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"understand":2,"rel":1,"integratingstuff":2,"avoid":2,"nofollow":1,"space":2,"error":2,"href":1,"http":2,"permgen":2,"www":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<blockquote>\n  <p>This Java heap memory is structured again into regions, called generations. The longer an object lives, the higher the chance it will be promoted to an older generation. Young generations(such as Eden on Sun JVM) are more garbage collected than older generations(survivor and tenured on Sun JVM). However, there is also some separate heap space called permanent generation. Since it is a separate region, it is not considered part of the Java Heap space. Objects in this space are relatively permanent. Class definitions are stored here, as are static instances.</p>\n</blockquote>"},"units":[{"type":"TextUnit","id":"[21775434]-[413256844]","astNode":{"type":"TextFragmentNode","text":"<blockquote>\n  <p>This Java heap memory is structured again into regions, called generations. The longer an object lives, the higher the chance it will be promoted to an older generation. Young generations(such as Eden on Sun JVM) are more garbage collected than older generations(survivor and tenured on Sun JVM). However, there is also some separate heap space called permanent generation. Since it is a separate region, it is not considered part of the Java Heap space. Objects in this space are relatively permanent. Class definitions are stored here, as are static instances.</p>\n</blockquote>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jvm":2,"young":1,"tenur":1,"higher":1,"sun":2,"separ":2,"store":1,"blockquot":2,"structur":1,"object":2,"eden":1,"perman":2,"older":2,"space":3,"live":1,"consid":1,"survivor":1,"definit":1,"region":2,"generat":5,"longer":1,"collect":1,"part":1,"heap":3,"promot":1,"call":2,"garbag":1,"chanc":1,"instanc":1,"memori":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>A full description of PermGen space can also be found here, although note that this is changing with Java 8:</p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-1912829010]","astNode":{"type":"TextFragmentNode","text":"<p>A full description of PermGen space can also be found here, although note that this is changing with Java 8:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PermGen","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"descript":1,"full":1,"found":1,"space":1,"note":1,"perm":1,"gen":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PermGen","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"PermGen","comments":[]}]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p><a href=\"https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation</a></p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-1013024386]","astNode":{"type":"TextFragmentNode","text":"<p><a href=\"https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation\" rel=\"nofollow\">https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation</a></p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"presenting_the_permanent_generation","comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jonthecollector":2,"present":2,"rel":1,"oracl":2,"https":2,"perman":2,"blog":2,"entri":2,"nofollow":1,"generat":2,"href":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"presenting_the_permanent_generation","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Static variables are stored there, dynamically allocated things are stored in the regular heap.</p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-788742523]","astNode":{"type":"TextFragmentNode","text":"<p>Static variables are stored there, dynamically allocated things are stored in the regular heap.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"alloc":1,"dynam":1,"thing":1,"store":2,"regular":1,"heap":1,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>(Note that even for the static array the things placed within the array are dynamically generated).</p>"},"units":[{"type":"TextUnit","id":"[21775434]-[566163458]","astNode":{"type":"TextFragmentNode","text":"<p>(Note that even for the static array the things placed within the array are dynamically generated).</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"dynam":1,"thing":1,"array":2,"note":1,"generat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Your second example is better for this case though unless you really need to remember the contents of that array between calls. You are using up memory all the time to store an array that you only need while you are inside the method. Additionally by having the static data like that your method is not re-entrant. That means that if two threads call the method at the same time then they will interfere with each other and give bad results.</p>"},"units":[{"type":"TextUnit","id":"[21775434]-[-190828145]","astNode":{"type":"TextFragmentNode","text":"<p>Your second example is better for this case though unless you really need to remember the contents of that array between calls. You are using up memory all the time to store an array that you only need while you are inside the method. Additionally by having the static data like that your method is not re-entrant. That means that if two threads call the method at the same time then they will interfere with each other and give bad results.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":3,"addit":1,"data":1,"result":1,"mean":1,"bad":1,"store":1,"array":2,"rememb":1,"interfer":1,"thread":1,"entrant":1,"insid":1,"content":1,"give":1,"time":2,"call":2,"memori":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":21775449,"questionId":21775237,"comments":[{"type":"StackOverflowComment","id":32945222,"postId":21775449,"creationDate":"2014-02-14","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1103872,"displayName":"Marko Topolnik","reputation":75863},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"Have you heard of Escape Analysis? It makes your opening statement false."},"units":[{"type":"TextUnit","id":"[21775449-cu32945222]-[2069060439]","astNode":{"type":"TextFragmentNode","text":"Have you heard of Escape Analysis? It makes your opening statement false."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"heard":1,"escap":1,"statement":1,"open":1,"make":1,"fals":1,"analysi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":52.69500000000002,"fleshKincaidGradeLevel":7.400000000000002,"automatedReadingIndex":5.120000000000001,"gunningFogIndex":5.733333333333334,"smogIndex":6.872983346207417,"colemanLiauIndex":8.649999999999999}]}]}]}],"creationDate":"2014-02-14","lastActivityDate":"2014-02-14","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":2563754,"displayName":"Seelenvirtuose","reputation":4213},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Every object, that you create while your program is running, is created in the heap space. I think this is the most important thing to understand, when you are asking for antyhing \"better\".</p>"},"units":[{"type":"TextUnit","id":"[21775449]-[-904702525]","astNode":{"type":"TextFragmentNode","text":"<p>Every object, that you create while your program is running, is created in the heap space. I think this is the most important thing to understand, when you are asking for antyhing \"better\".</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"run":1,"understand":1,"antyh":1,"thing":1,"object":1,"import":1,"space":1,"heap":1,"creat":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Positive"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>A variable can be a local variable inside a method (method parameters are also local in this sense), or they belong to an instance or to a class. Here is the difference. The memory for local variables is allocated on the thread's stack, the memory for instance and class variables reside in the corresponding object's space, which is in the heap.</p>"},"units":[{"type":"TextUnit","id":"[21775449]-[-816379411]","astNode":{"type":"TextFragmentNode","text":"<p>A variable can be a local variable inside a method (method parameters are also local in this sense), or they belong to an instance or to a class. Here is the difference. The memory for local variables is allocated on the thread's stack, the memory for instance and class variables reside in the corresponding object's space, which is in the heap.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"variables","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"sens":1,"resid":1,"method":2,"alloc":1,"differ":1,"local":3,"belong":1,"object":1,"thread":1,"paramet":1,"space":1,"insid":1,"stack":1,"heap":1,"variabl":4,"instanc":2,"memori":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"variables","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Keep in mind, that variables only store references to objects. They do not store the object! Therefore the memory consumption of variables is very low.</p>"},"units":[{"type":"TextUnit","id":"[21775449]-[-133295654]","astNode":{"type":"TextFragmentNode","text":"<p>Keep in mind, that variables only store references to objects. They do not store the object! Therefore the memory consumption of variables is very low.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"store":2,"object":2,"low":1,"mind":1,"refer":1,"variabl":2,"consumpt":1,"memori":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":21776584,"questionId":21775237,"comments":[],"creationDate":"2014-02-14","lastActivityDate":"2014-02-14","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1103872,"displayName":"Marko Topolnik","reputation":75863},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>One thing you must carefully distinguish is the following:</p>"},"units":[{"type":"TextUnit","id":"[21776584]-[541333869]","astNode":{"type":"TextFragmentNode","text":"<p>One thing you must carefully distinguish is the following:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"distinguish":1,"care":1,"thing":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<ol>\n<li>placement of the <em>reference-typed variable</em>;</li>\n<li>placement of the <em>referent</em> (the array in your case).</li>\n</ol>"},"units":[{"type":"TextUnit","id":"[21776584]-[49200786]","astNode":{"type":"TextFragmentNode","text":"<ol>\n<li>placement of the <em>reference-typed variable</em>;</li>\n<li>placement of the <em>referent</em> (the array in your case).</li>\n</ol>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"array":1,"placement":2,"refer":2,"type":1,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>If I follow your thoughts correctly, you are not really interested in 1., which is just four bytes, but in 2. </p>"},"units":[{"type":"TextUnit","id":"[21776584]-[543857868]","astNode":{"type":"TextFragmentNode","text":"<p>If I follow your thoughts correctly, you are not really interested in 1., which is just four bytes, but in 2. </p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"thought":1,"correct":1,"interest":1,"byte":1,"follow":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<ul>\n<li>If the variable which refers to the array is <code>static</code>, the array will be placed on the heap;</li>\n<li>if the variable is local, and if the JIT compiler can prove that your array will definitely not be reachable when your <code>solve</code> method completes, then <em>there is a chance</em> that the whole array will be stack-allocated.</li>\n</ul>"},"units":[{"type":"TextUnit","id":"[21776584]-[654625453]","astNode":{"type":"TextFragmentNode","text":"<ul>\n<li>If the variable which refers to the array is <code>static</code>, the array will be placed on the heap;</li>\n<li>if the variable is local, and if the JIT compiler can prove that your array will definitely not be reachable when your <code>solve</code> method completes, then <em>there is a chance</em> that the whole array will be stack-allocated.</li>\n</ul>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jit":1,"solv":1,"method":1,"prove":1,"alloc":1,"local":1,"reachabl":1,"code":4,"array":4,"refer":1,"stack":1,"compil":1,"complet":1,"heap":1,"variabl":2,"chanc":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>For arrays, which are quite large, but efficiently allocated objects, it will make very little difference where they are allocated&mdash;as long as they don't get <em>tenured</em> into the Old Generation. If they do get tenured regularly, then you will probably experience significant slowdowns due to frequent Full GC cycles.</p>"},"units":[{"type":"TextUnit","id":"[21776584]-[1383857653]","astNode":{"type":"TextFragmentNode","text":"<p>For arrays, which are quite large, but efficiently allocated objects, it will make very little difference where they are allocated&mdash;as long as they don't get <em>tenured</em> into the Old Generation. If they do get tenured regularly, then you will probably experience significant slowdowns due to frequent Full GC cycles.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"due":1,"alloc":2,"tenur":2,"differ":1,"full":1,"effici":1,"regular":1,"experi":1,"object":1,"array":1,"larg":1,"signific":1,"generat":1,"make":1,"slowdown":1,"cycl":1,"mdash":1,"frequent":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]}]}