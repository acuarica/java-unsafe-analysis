{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20791096,
    "title":"Ignore certain words (http address) in textspeech",
    "comments":[
      
    ],
    "tags":[
      "java",
      "android",
      "text-to-speech",
      "ignore",
      "words"
    ],
    "creationDate":"2013-12-26",
    "lastActivityDate":"2014-05-05",
    "lastEditDate":"2014-05-05",
    "score":0,
    "viewCount":44,
    "owner":{
      "type":"StackOverflowUser",
      "id":3126055,
      "displayName":"Ann83",
      "reputation":21
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a question about whether it's possible to have text2speech ignore certain words when it's speaking, like instead of reading the &quot;http address, it just skip it. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[-1236657271]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a question about whether it's possible to have text2speech ignore certain words when it's speaking, like instead of reading the &quot;http address, it just skip it. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "question":1,
                  "ignor":1,
                  "skip":1,
                  "text":1,
                  "address":1,
                  "quot":1,
                  "http":1,
                  "word":1,
                  "speech":1,
                  "speak":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am developing a program that help users learn another language.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[617697405]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am developing a program that help users learn another language.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "languag":1,
                  "learn":1,
                  "develop":1,
                  "user":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I.e &quot;Hola = Hello&quot;</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[2119238286]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I.e &quot;Hola = Hello&quot;</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "quot":2,
                  "hola":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible for the text2speech to ignore hello and just say Hola?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[-171282112]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible for the text2speech to ignore hello and just say Hola?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "text":1,
                  "speech":1,
                  "ignor":1,
                  "hola":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If not that, is it possible to have them both spoken but in their own languages: Spanish and then in English.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[473094130]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If not that, is it possible to have them both spoken but in their own languages: Spanish and then in English.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "spoken":1,
                  "spanish":1,
                  "languag":1,
                  "english":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The vocab word is on one editText. Because of spacing, I am confined to using one editText. However, if there's a suggestion, please do share. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[181172256]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The vocab word is on one editText. Because of spacing, I am confined to using one editText. However, if there's a suggestion, please do share. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"editText",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"editText",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "suggest":1,
                  "confin":1,
                  "text":2,
                  "edit":2,
                  "share":1,
                  "vocab":1,
                  "space":1,
                  "word":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>~Ann</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[-9004914]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>~Ann</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ann":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>P.s I am still learning Java/Android, so please don't be shy in explaining it to me like I still learning the ABC of java. :-) Thanks for all your helps.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20791096]-[895437550]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>P.s I am still learning Java/Android, so please don't be shy in explaining it to me like I still learning the ABC of java. :-) Thanks for all your helps.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "learn":2,
                  "abc":1,
                  "explain":1,
                  "help":1,
                  "shi":1,
                  "android":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}