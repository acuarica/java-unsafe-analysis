{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2930838,
    "title":"java PrintCompilation output: what's the meaning of &quot;made not entrant&quot; and &quot;made zombie&quot;",
    "comments":[
      
    ],
    "tags":[
      "java",
      "jit"
    ],
    "creationDate":"2010-05-28",
    "lastActivityDate":"2011-10-18",
    "lastEditDate":"2011-10-18",
    "score":25,
    "viewCount":3786,
    "owner":{
      "type":"StackOverflowUser",
      "id":315642,
      "displayName":"Joe Kearney",
      "reputation":1998
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>When running a Java 1.6 (1.6.0_03-b05) app I've added the <code>-XX:+PrintCompilation</code> flag. On the output for some methods, in particular some of those that I know are getting called a lot, I see the text <code>made not entrant</code> and <code>made zombie</code>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2930838]-[-1811116216]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>When running a Java 1.6 (1.6.0_03-b05) app I've added the <code>-XX:+PrintCompilation</code> flag. On the output for some methods, in particular some of those that I know are getting called a lot, I see the text <code>made not entrant</code> and <code>made zombie</code>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"PrintCompilation",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "print":1,
                  "run":1,
                  "text":1,
                  "code":6,
                  "entrant":1,
                  "flag":1,
                  "lot":1,
                  "app":1,
                  "ad":1,
                  "compil":1,
                  "zombi":1,
                  "output":1,
                  "call":1,
                  "made":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PrintCompilation",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What do these mean? Best guess is that it's a decompilation step before recompiling either that method or a dependency with greater optimisation. Is that true? Why &quot;zombie&quot; and &quot;entrant&quot;?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2930838]-[1220059201]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What do these mean? Best guess is that it's a decompilation step before recompiling either that method or a dependency with greater optimisation. Is that true? Why &quot;zombie&quot; and &quot;entrant&quot;?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "step":1,
                  "depend":1,
                  "optimis":1,
                  "recompil":1,
                  "entrant":1,
                  "decompil":1,
                  "true":1,
                  "quot":4,
                  "zombi":1,
                  "guess":1,
                  "greater":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Example, with quite a bit of time between some of these lines:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2930838]-[-418897414]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Example, with quite a bit of time between some of these lines:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "line":1,
                  "bit":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"[... near the beginning] 42 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... much later] 42 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) --- n sun.misc.Unsafe::compareAndSwapObject 170 jsr166y.LinkedTransferQueue::xfer (294 bytes) 170 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) 4% jsr166y.LinkedTransferQueue::xfer @ 29 (294 bytes) 171 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... even later] 42 made zombie jsr166y.LinkedTransferQueue::xfer (294 bytes) 170 made zombie jsr166y.LinkedTransferQueue::xfer (294 bytes) 171 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) 172 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... no further logs] "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[2930838]-[-891610372]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"[... near the beginning] 42 "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) [... much later] 42 made not entrant "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) --- n "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::"
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"compareAndSwapObject",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" 170 "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) 170 made not entrant "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) 4% "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer @ 29 (294 bytes) 171 "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) [... even later] 42 made zombie "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) 170 made zombie "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) 171 made not entrant "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) 172 "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jsr166y",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedTransferQueue",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"::xfer (294 bytes) [... no further logs] "
                }
              ]
            },
            "rawText":"[... near the beginning] 42 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... much later] 42 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) --- n sun.misc.Unsafe::compareAndSwapObject 170 jsr166y.LinkedTransferQueue::xfer (294 bytes) 170 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) 4% jsr166y.LinkedTransferQueue::xfer @ 29 (294 bytes) 171 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... even later] 42 made zombie jsr166y.LinkedTransferQueue::xfer (294 bytes) 170 made zombie jsr166y.LinkedTransferQueue::xfer (294 bytes) 171 made not entrant jsr166y.LinkedTransferQueue::xfer (294 bytes) 172 jsr166y.LinkedTransferQueue::xfer (294 bytes) [... no further logs] ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "begin":1,
                  "xfer":10,
                  "queue":10,
                  "jsr":10,
                  "sun":1,
                  "object":1,
                  "entrant":3,
                  "transfer":10,
                  "compar":1,
                  "link":10,
                  "misc":1,
                  "swap":1,
                  "unsaf":1,
                  "zombi":2,
                  "made":5,
                  "byte":10,
                  "log":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"jsr166y",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"LinkedTransferQueue",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><b>Addition:</b> <a href=\"http://www.unixville.com/~moazam/stories/2004/06/17/thePrintcompilationFlagAndHowToReadItsOutput.html\">some brief information</a> explaining some of the symbols in that output. Also <b>n</b> means native.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2930838]-[-461014832]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><b>Addition:</b> <a href=\"http://www.unixville.com/~moazam/stories/2004/06/17/thePrintcompilationFlagAndHowToReadItsOutput.html\">some brief information</a> explaining some of the symbols in that output. Also <b>n</b> means native.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "explain":1,
                  "addit":1,
                  "moazam":1,
                  "mean":1,
                  "stori":1,
                  "unixvill":1,
                  "symbol":1,
                  "printcompil":1,
                  "inform":1,
                  "flag":1,
                  "output":2,
                  "html":1,
                  "href":1,
                  "http":1,
                  "www":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2944077,
      "questionId":2930838,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":3025320,
          "postId":2944077,
          "creationDate":"2010-06-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":315642,
            "displayName":"Joe Kearney",
            "reputation":1998
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That's a useful start, thanks. The more I look into the code the more hotspot vocabulary I find I don't know! So do we think &quot;not_entrant&quot; simply means &quot;don't execute this compiled code again, need to de-opt/recompile first&quot;? Another link: see line 536 of http://www.google.com/codesearch/p?hl=en#aRIt9pqzOVI/src/share/vm/oops/methodOop.cpp"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2944077-cu3025320]-[-1960052384]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That's a useful start, thanks. The more I look into the code the more hotspot vocabulary I find I don't know! So do we think &quot;not_entrant&quot; simply means &quot;don't execute this compiled code again, need to de-opt/recompile first&quot;? Another link: see line 536 of http://www.google.com/codesearch/p?hl=en#aRIt9pqzOVI/src/share/vm/oops/methodOop.cpp"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"not_entrant",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"aRIt9pqzOVI",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"methodOop",
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "method":1,
                        "pqz":1,
                        "oop":2,
                        "vocabulari":1,
                        "ovi":1,
                        "opt":1,
                        "googl":1,
                        "rit":1,
                        "line":1,
                        "recompil":1,
                        "cpp":1,
                        "mean":1,
                        "hotspot":1,
                        "code":2,
                        "share":1,
                        "codesearch":1,
                        "entrant":1,
                        "simpli":1,
                        "link":1,
                        "src":1,
                        "quot":4,
                        "compil":1,
                        "start":1,
                        "http":1,
                        "execut":1,
                        "www":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3025714,
          "postId":2944077,
          "creationDate":"2010-06-03",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":228171,
            "displayName":"Mark Peters",
            "reputation":44547
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Given the meaning of &quot;entrant&quot; my *guess* would be that it flags the compiled method to not be *entered* again (though some threads may still be in it) while zombie means that it has no further use and can be disposed of. Just like a checkout counter could announce it's not accepting new customers (non-entrant) but would still have to service the queued customers before closing the till (zombie). But it's just a guess."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2944077-cu3025714]-[-33194527]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Given the meaning of &quot;entrant&quot; my *guess* would be that it flags the compiled method to not be *entered* again (though some threads may still be in it) while zombie means that it has no further use and can be disposed of. Just like a checkout counter could announce it's not accepting new customers (non-entrant) but would still have to service the queued customers before closing the till (zombie). But it's just a guess."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "till":1,
                        "accept":1,
                        "dispos":1,
                        "custom":2,
                        "enter":1,
                        "mean":2,
                        "checkout":1,
                        "thread":1,
                        "entrant":2,
                        "queu":1,
                        "flag":1,
                        "counter":1,
                        "quot":2,
                        "compil":1,
                        "zombi":2,
                        "guess":2,
                        "close":1,
                        "servic":1,
                        "announc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3025742,
          "postId":2944077,
          "creationDate":"2010-06-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":315642,
            "displayName":"Joe Kearney",
            "reputation":1998
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Nice analogy :p"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2944077-cu3025742]-[-1658479120]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Nice analogy :p"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "nice":1,
                        "analog":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-05-31",
      "lastActivityDate":"2010-05-31",
      "score":8,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":228171,
        "displayName":"Mark Peters",
        "reputation":44547
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is absolutely not an area of expertise for me, but I was interested and so did a bit of digging.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2944077]-[-593789945]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is absolutely not an area of expertise for me, but I was interested and so did a bit of digging.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "area":1,
                    "expertis":1,
                    "bit":1,
                    "interest":1,
                    "absolut":1,
                    "dig":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A couple of links you might find interesting: <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/f03d0a26bf83/src/share/vm/code/nmethod.cpp\">OpenJDK:nmethod.cpp</a>, <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9f5b60a14736/src/share/vm/code/nmethod.hpp\">OpenJDK:nmethod.hpp</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2944077]-[603557720]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A couple of links you might find interesting: <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/f03d0a26bf83/src/share/vm/code/nmethod.cpp\">OpenJDK:nmethod.cpp</a>, <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9f5b60a14736/src/share/vm/code/nmethod.hpp\">OpenJDK:nmethod.hpp</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":2,
                    "find":1,
                    "nmethod":4,
                    "cpp":2,
                    "hpp":2,
                    "open":2,
                    "net":2,
                    "hotspot":2,
                    "code":2,
                    "share":2,
                    "interest":1,
                    "coupl":1,
                    "link":1,
                    "src":2,
                    "file":2,
                    "href":2,
                    "http":2,
                    "jdk":6
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A excerpt of <code>nmethod.hpp</code>:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2944077]-[247973456]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A excerpt of <code>nmethod.hpp</code>:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hpp":1,
                    "excerpt":1,
                    "code":2,
                    "nmethod":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"// Make the nmethod non entrant. The nmethod will continue to be // alive. It is used when an uncommon trap happens. Returns true // if this thread changed the state of the nmethod or false if // another thread performed the transition. bool make_not_entrant() { return make_not_entrant_or_zombie(not_entrant); } //... "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2944077]-[-1456989145]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"// Make the nmethod non entrant. The nmethod will continue to be // alive. It is used when an uncommon trap happens. Returns true // if this thread changed the state of the nmethod or false if // another thread performed the "
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "returnType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"transition",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"make_not_entrant",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"make_not_entrant_or_zombie",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"not_entrant",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"//... \n"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"// Make the nmethod non entrant. The nmethod will continue to be // alive. It is used when an uncommon trap happens. Returns true // if this thread changed the state of the nmethod or false if // another thread performed the transition. bool make_not_entrant() { return make_not_entrant_or_zombie(not_entrant); } //... \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "aliv":1,
                    "state":1,
                    "return":1,
                    "nmethod":3,
                    "trap":1,
                    "transit":1,
                    "thread":2,
                    "entrant":4,
                    "uncommon":1,
                    "bool":1,
                    "perform":1,
                    "true":1,
                    "make":3,
                    "fals":1,
                    "zombi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"transition",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"make_not_entrant_or_zombie",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"not_entrant",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Just as a starting place.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2944077]-[-1503902971]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Just as a starting place.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "place":1,
                    "start":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7138079,
      "questionId":2930838,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10013054,
          "postId":7138079,
          "creationDate":"2011-11-16",
          "score":6,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":53974,
            "displayName":"Blaisorblade",
            "reputation":4189
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Kris Mok wrote a reply to JodaStephen, which is now linked from his blog and is even more complete in its description of -XX:+PrintCompilation; here's the link: https://gist.github.com/1165804#file_notes.md"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7138079-cu10013054]-[-1703342089]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Kris Mok wrote a reply to JodaStephen, which is now linked from his blog and is even more complete in its description of -XX:+PrintCompilation; here's the link: https://gist.github.com/1165804#file_notes.md"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JodaStephen",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"PrefixOperatorExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"PrintCompilation",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          {
                            "type":"LabelNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"XX",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"file_notes",
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "kris":1,
                        "github":1,
                        "descript":1,
                        "print":1,
                        "wrote":1,
                        "https":1,
                        "joda":1,
                        "blog":1,
                        "note":1,
                        "gist":1,
                        "repli":1,
                        "link":2,
                        "stephen":1,
                        "file":1,
                        "compil":1,
                        "complet":1,
                        "mok":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JodaStephen",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-08-21",
      "lastActivityDate":"2011-08-21",
      "score":15,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":38896,
        "displayName":"JodaStephen",
        "reputation":8652
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I've pulled together some info on this on <a href=\"http://blog.joda.org/2011/08/printcompilation-jvm-flag.html\">my blog</a>. A Cliff Click comment I found says:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7138079]-[-1376688797]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I've pulled together some info on this on <a href=\"http://blog.joda.org/2011/08/printcompilation-jvm-flag.html\">my blog</a>. A Cliff Click comment I found says:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "joda":1,
                    "info":1,
                    "found":1,
                    "printcompil":1,
                    "blog":2,
                    "click":1,
                    "comment":1,
                    "cliff":1,
                    "flag":1,
                    "pull":1,
                    "org":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Zombie methods are methods whose code has been made invalid by class loading. Generally the server compiler makes aggressive inlining decisions of non-final methods. As long as the inlined method is never overridden the code is correct. When a subclass is loaded and the method overridden, the compiled code is broken for all future calls to it. The code gets declared &quot;not entrant&quot; (no future callers to the broken code), but sometimes existing callers can keep using the code. In the case of inlining, that's not good enough; existing callers' stack frames are &quot;deoptimized&quot; when they return to the code from nested calls (or just if they are running in the code). When no more stack frames hold PC's into the broken code it's declared a &quot;zombie&quot; - ready for removal once the GC gets around to it.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7138079]-[-1228239846]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Zombie methods are methods whose code has been made invalid by class loading. Generally the server compiler makes aggressive inlining decisions of non-final methods. As long as the inlined method is never overridden the code is correct. When a subclass is loaded and the method overridden, the compiled code is broken for all future calls to it. The code gets declared &quot;not entrant&quot; (no future callers to the broken code), but sometimes existing callers can keep using the code. In the case of inlining, that's not good enough; existing callers' stack frames are &quot;deoptimized&quot; when they return to the code from nested calls (or just if they are running in the code). When no more stack frames hold PC's into the broken code it's declared a &quot;zombie&quot; - ready for removal once the GC gets around to it.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loading",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "readi":1,
                    "method":5,
                    "subclass":1,
                    "remov":1,
                    "server":1,
                    "nest":1,
                    "exist":2,
                    "good":1,
                    "overridden":2,
                    "correct":1,
                    "deoptim":1,
                    "run":1,
                    "load":2,
                    "aggress":1,
                    "blockquot":2,
                    "declar":2,
                    "frame":2,
                    "decis":1,
                    "code":9,
                    "hold":1,
                    "general":1,
                    "entrant":1,
                    "futur":2,
                    "invalid":1,
                    "stack":2,
                    "make":1,
                    "quot":6,
                    "compil":2,
                    "inlin":3,
                    "zombi":2,
                    "call":2,
                    "made":1,
                    "caller":3,
                    "broken":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}