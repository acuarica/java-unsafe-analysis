{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2735743,
    "title":"How to access memory location in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":2764975,
        "postId":2735743,
        "creationDate":"2010-04-29",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":104117,
          "displayName":"Valentin Rocher",
          "reputation":8030
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"why would you want that ?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2735743-cu2764975]-[-156277774]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"why would you want that ?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2785027,
        "postId":2735743,
        "creationDate":"2010-05-02",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"As @Valetin suggests you shouldn't need to. If you have a very specific reason to do so, e.g. writing a device driver, I suggest you use JNI with C/C++."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2735743-cu2785027]-[1348874171]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"As @Valetin suggests you shouldn't need to. If you have a very specific reason to do so, e.g. writing a device driver, I suggest you use JNI with C/C++."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Valetin",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "valetin":1,
                      "suggest":2,
                      "reason":1,
                      "jni":1,
                      "driver":1,
                      "specif":1,
                      "devic":1,
                      "shouldn":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2010-04-29",
    "lastActivityDate":"2010-04-29",
    "lastEditDate":"2010-04-29",
    "score":3,
    "viewCount":3181,
    "owner":{
      "type":"StackOverflowUser",
      "id":300829,
      "displayName":"Abhishek Jain",
      "reputation":1113
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible that we can access memory location in Java directly or indirectly?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2735743]-[1863760790]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible that we can access memory location in Java directly or indirectly?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "indirect":1,
                  "direct":1,
                  "locat":1,
                  "access":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If we tries to print a object, it will print hashcode. Does hashcode signify indirectly to memory location?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2735743]-[-301514738]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If we tries to print a object, it will print hashcode. Does hashcode signify indirectly to memory location?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "hashcod":2,
                  "indirect":1,
                  "print":2,
                  "object":1,
                  "signifi":1,
                  "locat":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For two object at different memory location but still their hashcode can varies. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2735743]-[-2049343449]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For two object at different memory location but still their hashcode can varies. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "hashcod":1,
                  "object":1,
                  "vari":1,
                  "locat":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>-Abhishek</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2735743]-[-1434131039]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>-Abhishek</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "abhishek":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2735782,
      "questionId":2735743,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8613329,
          "postId":2735782,
          "creationDate":"2011-08-24",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2453638,
            "displayName":"jgubby",
            "reputation":1795
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes: sun.misc.Unsafe"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2735782-cu8613329]-[1591950489]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes: sun.misc.Unsafe"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "unsaf":1,
                        "sun":1,
                        "misc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-29",
      "lastActivityDate":"2010-04-29",
      "score":14,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":16883,
        "displayName":"Michael Borgwardt",
        "reputation":197539
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is it possible that we can access memory location in Java directly or indirectly?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735782]-[-1734602471]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is it possible that we can access memory location in Java directly or indirectly?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "indirect":1,
                    "blockquot":2,
                    "direct":1,
                    "locat":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735782]-[635709988]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2735790,
      "questionId":2735743,
      "comments":[
        
      ],
      "creationDate":"2010-04-29",
      "lastActivityDate":"2010-04-29",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":238052,
        "displayName":"gmhk",
        "reputation":4511
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Probably not for a primitive data type. You might be able to get addresses of data areas used for object storage on a reference type, though Java Native Interface, we can access the C++ or C and from that we can get the Memory location. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735790]-[-801650042]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Probably not for a primitive data type. You might be able to get addresses of data areas used for object storage on a reference type, though Java Native Interface, we can access the C++ or C and from that we can get the Memory location. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "area":1,
                    "data":2,
                    "object":1,
                    "refer":1,
                    "address":1,
                    "type":2,
                    "primit":1,
                    "storag":1,
                    "locat":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's sort of pointless, though. Because of garbage collection, any Java object can get moved in memory any time that any thread creates a new object</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735790]-[-973197338]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's sort of pointless, though. Because of garbage collection, any Java object can get moved in memory any time that any thread creates a new object</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":1,
                    "object":2,
                    "pointless":1,
                    "thread":1,
                    "collect":1,
                    "time":1,
                    "sort":1,
                    "creat":1,
                    "garbag":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2735810,
      "questionId":2735743,
      "comments":[
        
      ],
      "creationDate":"2010-04-29",
      "lastActivityDate":"2010-04-29",
      "lastEditDate":"2010-04-29",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":59279,
        "displayName":"Joonas Pulakka",
        "reputation":21470
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, hashcode, in general, has nothing to do with memory location. The memory location of your object is the object's reference itself.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735810]-[985546005]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, hashcode, in general, has nothing to do with memory location. The memory location of your object is the object's reference itself.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hashcod":1,
                    "object":2,
                    "general":1,
                    "refer":1,
                    "locat":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, it may not be quite impossible to squeeze out the actual location. Java <code>Object</code>'s hashcode is, according to its javadoc, <em>typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java programming language.</em> And there's <code>System#identityHashCode(Object)</code>method, which will return the same hash code for the given object as would be returned by the default method hashCode() (that is, <code>Object</code>'s hashCode()). So this way you may indeed be able to get the actual memory location. But whether this works is, as said above, implementation dependent. And since you definitely won't be able to directly read/write in the memory even though you knew the location, what would you do with that information?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2735810]-[964292958]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, it may not be quite impossible to squeeze out the actual location. Java <code>Object</code>'s hashcode is, according to its javadoc, <em>typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java programming language.</em> And there's <code>System#identityHashCode(Object)</code>method, which will return the same hash code for the given object as would be returned by the default method hashCode() (that is, <code>Object</code>'s hashCode()). So this way you may indeed be able to get the actual memory location. But whether this works is, as said above, implementation dependent. And since you definitely won't be able to directly read/write in the memory even though you knew the location, what would you do with that information?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "program":1,
                    "method":2,
                    "hashcod":1,
                    "languag":1,
                    "system":1,
                    "depend":1,
                    "return":1,
                    "squeez":1,
                    "requir":1,
                    "imposs":1,
                    "knew":1,
                    "work":1,
                    "object":5,
                    "direct":1,
                    "code":10,
                    "hash":4,
                    "ident":1,
                    "typic":1,
                    "inform":1,
                    "techniqu":1,
                    "implement":3,
                    "address":1,
                    "actual":2,
                    "intern":1,
                    "convert":1,
                    "won":1,
                    "write":1,
                    "javadoc":1,
                    "locat":3,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2736790,
      "questionId":2735743,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2785023,
          "postId":2736790,
          "creationDate":"2010-05-02",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Its worth nothing that the Unsafe doesn't give you the location of an Object like pointer would in C. However, using this class incorrectly can crash the JVM, sometimes in unexpected ways. Handle with extream care."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2736790-cu2785023]-[-1558838541]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Its worth nothing that the Unsafe doesn't give you the location of an Object like pointer would in C. However, using this class incorrectly can crash the JVM, sometimes in unexpected ways. Handle with extream care."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"incorrectly",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "pointer":1,
                        "crash":1,
                        "care":1,
                        "way":1,
                        "object":1,
                        "extream":1,
                        "worth":1,
                        "incorrect":1,
                        "unexpect":1,
                        "give":1,
                        "unsaf":1,
                        "handl":1,
                        "locat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2785238,
          "postId":2736790,
          "creationDate":"2010-05-02",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Peter Lawrey: Yes, you can access memory relative to an object (to read instance fields) or access memory at an absolute location. Objects get moved around in memory, so the address of an object has limited meaning."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2736790-cu2785238]-[-299864227]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Peter Lawrey: Yes, you can access memory relative to an object (to read instance fields) or access memory at an absolute location. Objects get moved around in memory, so the address of an object has limited meaning."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Peter",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "move":1,
                        "field":1,
                        "relat":1,
                        "peter":1,
                        "mean":1,
                        "object":3,
                        "absolut":1,
                        "address":1,
                        "lawrey":1,
                        "limit":1,
                        "locat":1,
                        "instanc":1,
                        "access":2,
                        "memori":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-29",
      "lastActivityDate":"2010-04-29",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":4725,
        "displayName":"Tom Hawtin - tackline",
        "reputation":89549
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can read/write memory addresses if some API is provided to do it. On the Sun/Oracle JRE <code>sun.misc.Unsafe</code> allows you to do this, although intentionally you have to go through hoops to get hold of an instance.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2736790]-[206102209]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can read/write memory addresses if some API is provided to do it. On the Sun/Oracle JRE <code>sun.misc.Unsafe</code> allows you to do this, although intentionally you have to go through hoops to get hold of an instance.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jre":1,
                    "read":1,
                    "provid":1,
                    "hoop":1,
                    "intent":1,
                    "sun":2,
                    "oracl":1,
                    "code":2,
                    "hold":1,
                    "misc":1,
                    "address":1,
                    "api":1,
                    "unsaf":1,
                    "write":1,
                    "instanc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}