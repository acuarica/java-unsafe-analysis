{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":10593157,
    "title":"Card Deck Using ENUM, and Boolean Array to create the Deck. Java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":13721042,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":734691,
          "displayName":"Jonathan Henson",
          "reputation":4852
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"why is the deck of cards a boolean[]?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721042]-[-1315945520]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"why is the deck of cards a boolean[]?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "card":1,
                      "deck":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721048,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2913269,
          "displayName":"user2913269",
          "reputation":90
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Because thats what we have to use to make sure that the card has been dealt or not"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721048]-[1733726368]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Because thats what we have to use to make sure that the card has been dealt or not"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "card":1,
                      "make":1,
                      "dealt":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721056,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1330481,
          "displayName":"UNECS",
          "reputation":184
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"possible dup of [How to create a deck of cards](http://stackoverflow.com/q/10592817/1330481) and homework??"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721056]-[270884084]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"possible dup of [How to create a deck of cards](http://stackoverflow.com/q/10592817/1330481) and homework??"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "dup":1,
                      "deck":1,
                      "stackoverflow":1,
                      "homework":1,
                      "card":1,
                      "http":1,
                      "creat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721075,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1330481,
          "displayName":"UNECS",
          "reputation":184
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"similar question [here](http://stackoverflow.com/questions/5629130/how-do-i-write-a-constructor-that-initializes-52-card-objects)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721075]-[1322325562]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"similar question [here](http://stackoverflow.com/questions/5629130/how-do-i-write-a-constructor-that-initializes-52-card-objects)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":2,
                      "similar":1,
                      "constructor":1,
                      "object":1,
                      "stackoverflow":1,
                      "initi":1,
                      "card":1,
                      "http":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721087,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2913269,
          "displayName":"user2913269",
          "reputation":90
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I saw that thread but it doesn't help me out with my question. I want to see if you guys see something that i haven't come across."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721087]-[1655485114]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I saw that thread but it doesn't help me out with my question. I want to see if you guys see something that i haven't come across."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "thread":1,
                      "guy":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721109,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2913269,
          "displayName":"user2913269",
          "reputation":90
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't know what you're trying to say by duplicate, but i just need some guidance with this assignment. Thank you for your time guys appreciate it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721109]-[337582338]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't know what you're trying to say by duplicate, but i just need some guidance with this assignment. Thank you for your time guys appreciate it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "guy":1,
                      "guidanc":1,
                      "assign":1,
                      "time":1,
                      "duplic":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721122,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":734691,
          "displayName":"Jonathan Henson",
          "reputation":4852
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"So far, I don't understand what you are trying to do other than initialize a boolean[] which you have done. Could you clarify your question?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721122]-[-852425912]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"So far, I don't understand what you are trying to do other than initialize a boolean[] which you have done. Could you clarify your question?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "understand":1,
                      "question":1,
                      "initi":1,
                      "clarifi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721154,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2913269,
          "displayName":"user2913269",
          "reputation":90
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Im trying to get all of the cards in the deck. 2H 3H 4H... and so forth. So far i just set every single card as true in the boolean array. Which I'm going to use to determine if a card has been dealt or not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721154]-[1920808738]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Im trying to get all of the cards in the deck. 2H 3H 4H... and so forth. So far i just set every single card as true in the boolean array. Which I'm going to use to determine if a card has been dealt or not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "determin":1,
                      "set":1,
                      "deck":1,
                      "array":1,
                      "dealt":1,
                      "true":1,
                      "card":3
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721211,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":522444,
          "displayName":"Hovercraft Full Of Eels",
          "reputation":176446
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"And your specific question is... what?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721211]-[-1075359569]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"And your specific question is... what?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "specif":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721230,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1330481,
          "displayName":"UNECS",
          "reputation":184
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If your asking about using the enums try looking at this [example](http://docs.oracle.com/javase/1.5.0/docs/guide/language/enums.html) it has a card dealing example similar to your question"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721230]-[-56694556]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If your asking about using the enums try looking at this [example](http://docs.oracle.com/javase/1.5.0/docs/guide/language/enums.html) it has a card dealing example similar to your question"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "languag":1,
                      "similar":1,
                      "guid":1,
                      "oracl":1,
                      "doc":2,
                      "enum":2,
                      "javas":1,
                      "html":1,
                      "card":1,
                      "http":1,
                      "deal":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13721287,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2913269,
          "displayName":"user2913269",
          "reputation":90
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"QUESTION: How do i collect all 52 playing cards in the deck?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13721287]-[-860300551]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"QUESTION: How do i collect all 52 playing cards in the deck?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "play":1,
                      "deck":1,
                      "collect":1,
                      "card":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":13723942,
        "postId":10593157,
        "creationDate":"2012-05-15",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":977732,
          "displayName":"pavi",
          "reputation":173
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"you can create a class &quot;Card&quot; which has a boolean field to specify whether the card has been dealt or not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[10593157-cu13723942]-[-2023818136]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"you can create a class &quot;Card&quot; which has a boolean field to specify whether the card has been dealt or not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "field":1,
                      "dealt":1,
                      "quot":2,
                      "card":2,
                      "creat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2012-05-15",
    "lastActivityDate":"2013-07-15",
    "lastEditDate":"2013-07-15",
    "closedDate":"2012-12-13",
    "score":-2,
    "viewCount":1219,
    "owner":{
      "type":"StackOverflowUser",
      "id":2913269,
      "displayName":"user2913269",
      "reputation":90
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<blockquote> \n <p><strong>Possible Duplicate:</strong><br /> <a href=\"http://stackoverflow.com/questions/10592817/how-to-create-a-deck-of-cards-constructor\">how to create a deck of cards constructor</a> </p> \n</blockquote>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10593157]-[-1502944964]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<blockquote> \n <p><strong>Possible Duplicate:</strong><br /> <a href=\"http://stackoverflow.com/questions/10592817/how-to-create-a-deck-of-cards-constructor\">how to create a deck of cards constructor</a> </p> \n</blockquote>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "constructor":2,
                  "deck":2,
                  "strong":2,
                  "blockquot":2,
                  "stackoverflow":1,
                  "duplic":1,
                  "href":1,
                  "card":2,
                  "http":1,
                  "creat":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Im trying to create a &quot;deck of cards&quot; using <code>enums</code>. I already have my enum declared, but I'm stuck in how exactly to create the deck of cards using a boolean array. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10593157]-[-1544863424]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Im trying to create a &quot;deck of cards&quot; using <code>enums</code>. I already have my enum declared, but I'm stuck in how exactly to create the deck of cards using a boolean array. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "deck":2,
                  "declar":1,
                  "code":2,
                  "array":1,
                  "stuck":1,
                  "enum":1,
                  "quot":2,
                  "card":2,
                  "creat":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So far I tried to initialize my constructor, but I don't know what direction to take now. Any help would be greatly appreciated it. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10593157]-[215682704]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So far I tried to initialize my constructor, but I don't know what direction to take now. Any help would be greatly appreciated it. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "appreci":1,
                  "constructor":1,
                  "direct":1,
                  "initi":1,
                  "great":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"package Cards; //Class to represent a standard Deck of 52 Playing-Cards // The following functionality is provided // Default Constructor - creates a complete deck of cards // shuffle() - collects all 52 cards into the deck // deal() - returns a randomly selected card from the deck // import java.util.Random; public class DeckOfCards { public static final int DECK_SIZE = 52; // Instance Variables private boolean[] deck; // An implicit set of 52 Playing-Cards private int cardsInDeck;// Number of cards currently in the deck private Random dealer; // Used to randomly select a card to be dealt // Constructor public DeckOfCards() { deck = new boolean[DECK_SIZE]; for (PlayingCard.CardSuit suit : PlayingCard.CardSuit.values()) for (PlayingCard.CardRank rank : PlayingCard.CardRank.values()) deck[cardsInDeck++] = true; } // Collect all 52 Playing-Cards into the deck public void shuffle() { } // Simulate dealing a randomly selected card from the deck // Dealing from an empty deck results in a RuntimeException public PlayingCard deal() { return null; } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[10593157]-[-18782218]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"PackageDeclarationNode",
                  "annotations":[
                    
                  ],
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Cards",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    {
                      "text":"//Class to represent a standard Deck of 52 Playing-Cards // The following functionality is provided // Default Constructor - creates a complete deck of cards // shuffle() - collects all 52 cards into the deck // deal() - returns a randomly selected card from the deck // import java.util.Random; public class DeckOfCards { public static final int DECK_SIZE = 52; // Instance Variables private boolean[] deck; // An implicit set of 52 Playing-Cards private int cardsInDeck;// Number of cards currently in the deck private Random dealer; // Used to randomly select a card to be dealt // Constructor public DeckOfCards() { deck = new boolean[DECK_SIZE]; for (PlayingCard.CardSuit suit : PlayingCard.CardSuit.values()) for (PlayingCard.CardRank rank : PlayingCard.CardRank.values()) deck[cardsInDeck++] = true; } // Collect all 52 Playing-Cards into the deck public void shuffle() { } // Simulate dealing a randomly selected card from the deck // Dealing from an empty deck results in a RuntimeException public PlayingCard deal() { return null; } } \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"package Cards; //Class to represent a standard Deck of 52 Playing-Cards // The following functionality is provided // Default Constructor - creates a complete deck of cards // shuffle() - collects all 52 cards into the deck // deal() - returns a randomly selected card from the deck // import java.util.Random; public class DeckOfCards { public static final int DECK_SIZE = 52; // Instance Variables private boolean[] deck; // An implicit set of 52 Playing-Cards private int cardsInDeck;// Number of cards currently in the deck private Random dealer; // Used to randomly select a card to be dealt // Constructor public DeckOfCards() { deck = new boolean[DECK_SIZE]; for (PlayingCard.CardSuit suit : PlayingCard.CardSuit.values()) for (PlayingCard.CardRank rank : PlayingCard.CardRank.values()) deck[cardsInDeck++] = true; } // Collect all 52 Playing-Cards into the deck public void shuffle() { } // Simulate dealing a randomly selected card from the deck // Dealing from an empty deck results in a RuntimeException public PlayingCard deal() { return null; } } \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "provid":1,
                  "random":5,
                  "runtim":1,
                  "util":1,
                  "size":2,
                  "dealer":1,
                  "standard":1,
                  "return":1,
                  "play":8,
                  "result":1,
                  "set":1,
                  "rank":3,
                  "constructor":2,
                  "simul":1,
                  "deck":17,
                  "suit":3,
                  "select":3,
                  "shuffl":2,
                  "dealt":1,
                  "implicit":1,
                  "function":1,
                  "empti":1,
                  "valu":2,
                  "true":1,
                  "complet":1,
                  "collect":2,
                  "variabl":1,
                  "card":23,
                  "creat":1,
                  "repres":1,
                  "deal":4,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":10593333,
      "questionId":10593157,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13723049,
          "postId":10593333,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1357733,
            "displayName":"RoneRackal",
            "reputation":959
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You already did delcare the deck of cards array when you wrote in the constructor: deck = new boolean[ DECK_SIZE ];"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10593333-cu13723049]-[1025138751]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You already did delcare the deck of cards array when you wrote in the constructor: deck = new boolean[ DECK_SIZE ];"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"deck",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"boolean",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"DECK_SIZE",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          {
                            "type":"LabelNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"constructor",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "size":1,
                        "delcar":1,
                        "wrote":1,
                        "constructor":1,
                        "deck":3,
                        "array":1,
                        "card":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        {
                          "type":"PrimitiveTypeNode",
                          "name":"boolean",
                          "comments":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13721541,
          "postId":10593333,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2913269,
            "displayName":"user2913269",
            "reputation":90
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thank you so much for your response, I'm still a bit confused on how to initialize my constructor. Where can i declare the deck of cards array??"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10593333-cu13721541]-[112320368]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thank you so much for your response, I'm still a bit confused on how to initialize my constructor. Where can i declare the deck of cards array??"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bit":1,
                        "constructor":1,
                        "deck":1,
                        "declar":1,
                        "array":1,
                        "initi":1,
                        "confus":1,
                        "respons":1,
                        "card":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-05-15",
      "lastActivityDate":"2012-05-15",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1357733,
        "displayName":"RoneRackal",
        "reputation":959
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>My guess would be to implement shuffle() and deal().</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10593333]-[1097504944]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>My guess would be to implement shuffle() and deal().</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shuffl":1,
                    "deal":1,
                    "implement":1,
                    "guess":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Judging from the comments at the top, I'm assuming all shuffle has to do is set every card to true (loop through the boolean and set them all to true).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10593333]-[300515631]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Judging from the comments at the top, I'm assuming all shuffle has to do is set every card to true (loop through the boolean and set them all to true).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "judg":1,
                    "assum":1,
                    "loop":1,
                    "set":2,
                    "shuffl":1,
                    "comment":1,
                    "true":2,
                    "card":1,
                    "top":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Deal() says it randomly chooses a card, so you should find a way to choose a random card (one that is still true, as in, has not been dealt yet) and then deal that card, as well as setting it to false so it cannot be dealt again until the deck has been shuffled.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10593333]-[-1136518873]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Deal() says it randomly chooses a card, so you should find a way to choose a random card (one that is still true, as in, has not been dealt yet) and then deal that card, as well as setting it to false so it cannot be dealt again until the deck has been shuffled.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "random":2,
                    "set":1,
                    "deck":1,
                    "shuffl":1,
                    "dealt":2,
                    "true":1,
                    "fals":1,
                    "choos":2,
                    "card":3,
                    "deal":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This would be how I would go about it with your current code and reading what the comments want you to do.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10593333]-[1759543247]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This would be how I would go about it with your current code and reading what the comments want you to do.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "comment":1,
                    "code":1,
                    "read":1,
                    "current":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":10594362,
      "questionId":10593157,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13746547,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1118394,
            "displayName":"thagorn",
            "reputation":565
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Use an array with the options in it? Or have the enum options correspond to an integer. Look up some enum examples, I can't do all your homework for you :P"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13746547]-[1042570732]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Use an array with the options in it? Or have the enum options correspond to an integer. Look up some enum examples, I can't do all your homework for you :P"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "exampl":1,
                        "option":2,
                        "correspond":1,
                        "array":1,
                        "homework":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13737395,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2913269,
            "displayName":"user2913269",
            "reputation":90
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh okay! Appreciate your help! Im going to give it a try and see how it goes. I get the concept of it now, you store the cards implicitly, never explicitly!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13737395]-[1457312751]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh okay! Appreciate your help! Im going to give it a try and see how it goes. I get the concept of it now, you store the cards implicitly, never explicitly!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "store":1,
                        "implicit":1,
                        "give":1,
                        "concept":1,
                        "explicit":1,
                        "card":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13736369,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2913269,
            "displayName":"user2913269",
            "reputation":90
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thank you for that! So how would i be able to output the card deck?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13736369]-[-1089650886]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thank you for that! So how would i be able to output the card deck?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "card":1,
                        "output":1,
                        "deck":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13736607,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1118394,
            "displayName":"thagorn",
            "reputation":565
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Edited my response. All you need to do is iterate through the deck while matching it to the suits and ranks."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13736607]-[-865935358]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Edited my response. All you need to do is iterate through the deck while matching it to the suits and ranks."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "rank":1,
                        "deck":1,
                        "suit":1,
                        "match":1,
                        "edit":1,
                        "iter":1,
                        "respons":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13745967,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2913269,
            "displayName":"user2913269",
            "reputation":90
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"perfect, so how can i use those indices in my enum type? so i could use those values to create my card."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13745967]-[2057441219]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"perfect, so how can i use those indices in my enum type? so i could use those values to create my card."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "perfect":1,
                        "indic":1,
                        "valu":1,
                        "type":1,
                        "card":1,
                        "creat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13741505,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1118394,
            "displayName":"thagorn",
            "reputation":565
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You should be able to turn a card position into the corresponding card using modulo. Card%4 = Suit and Card%13 = Rank."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13741505]-[-1476477651]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You should be able to turn a card position into the corresponding card using modulo. Card%4 = Suit and Card%13 = Rank."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "rank":1,
                        "suit":1,
                        "modulo":1,
                        "posit":1,
                        "turn":1,
                        "card":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13739183,
          "postId":10594362,
          "creationDate":"2012-05-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2913269,
            "displayName":"user2913269",
            "reputation":90
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Im trying to output my deck with their symbols i created in their corresponding enum, for example 2H 3H 4H 5H 6H 7H 8H 2C 3C 4C... and so on, how could i do it?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10594362-cu13739183]-[-1746100550]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Im trying to output my deck with their symbols i created in their corresponding enum, for example 2H 3H 4H 5H 6H 7H 8H 2C 3C 4C... and so on, how could i do it?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "creat":1,
                        "symbol":1,
                        "output":1,
                        "deck":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-05-15",
      "lastActivityDate":"2012-05-15",
      "lastEditDate":"2012-05-15",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1118394,
        "displayName":"thagorn",
        "reputation":565
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think you don't understand your boolean array. You currently have an array with 52 trues in it: <code>[true, true, true, true, ..., true]</code> That is all that your <code>deck</code> currently is. As I understand your code the array is representing a deck of cards merely by position. Element 0 in <code>deck</code> would refer to the Ace of Spades and element 51 in <code>deck</code> would refer to the King of Hearts.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[1920979544]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think you don't understand your boolean array. You currently have an array with 52 trues in it: <code>[true, true, true, true, ..., true]</code> That is all that your <code>deck</code> currently is. As I understand your code the array is representing a deck of cards merely by position. Element 0 in <code>deck</code> would refer to the Ace of Spades and element 51 in <code>deck</code> would refer to the King of Hearts.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "understand":2,
                    "spade":1,
                    "deck":4,
                    "ace":1,
                    "element":2,
                    "code":9,
                    "array":3,
                    "refer":2,
                    "posit":1,
                    "true":6,
                    "heart":1,
                    "card":1,
                    "king":1,
                    "repres":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Each position in the array then refers to if the card is currently in the deck.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[756537986]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Each position in the array then refers to if the card is currently in the deck.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "deck":1,
                    "array":1,
                    "refer":1,
                    "posit":1,
                    "card":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"if(deck[0]) { System.out.println(&quot;This deck currently has an Ace of Spades&quot;); } if(!deck[51]) { System.out.println(&quot;This deck currently does not have a King of Hearts&quot;); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[10594362]-[1077788414]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"ArrayAccessSelectorNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"deck",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "dimExpression":{
                        "type":"DimExpressionNode",
                        "argument":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"System",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"out",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"println",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"This deck currently has an Ace of Spades\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"PrefixOperatorExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"!",
                        "comments":[
                          
                        ]
                      },
                      "argument":{
                        "type":"ArrayAccessSelectorNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"deck",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "dimExpression":{
                          "type":"DimExpressionNode",
                          "argument":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"51"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"System",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"out",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"println",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"This deck currently does not have a King of Hearts\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"if(deck[0]) { System.out.println(\"This deck currently has an Ace of Spades\"); } if(!deck[51]) { System.out.println(\"This deck currently does not have a King of Hearts\"); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "system":2,
                    "spade":1,
                    "deck":4,
                    "println":2,
                    "ace":1,
                    "heart":1,
                    "king":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"This deck currently has an Ace of Spades\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"This deck currently does not have a King of Hearts\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Shuffle is placing every card into the deck so all it has to do is set every card to true. (You already do this in the constructor, presumable shuffle resets the deck).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[-1261186717]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Shuffle is placing every card into the deck so all it has to do is set every card to true. (You already do this in the constructor, presumable shuffle resets the deck).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "set":1,
                    "constructor":1,
                    "deck":2,
                    "shuffl":2,
                    "presum":1,
                    "true":1,
                    "reset":1,
                    "place":1,
                    "card":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Deal is a little more complicated. You have to do the following:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[628220817]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Deal is a little more complicated. You have to do the following:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "deal":1,
                    "complic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Check that cardsInDeck &gt; 0</li> \n <li>Pick a random number 0 to 51 (using <code>dealer</code>)</li> \n <li>Check <code>if(deck[randomNumber])</code> if false pick a new number</li> \n <li>Set <code>deck[randomNumber] = false</code></li> \n <li>Decrease <code>cardsInDeck</code> by 1</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[390724975]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Check that cardsInDeck &gt; 0</li> \n <li>Pick a random number 0 to 51 (using <code>dealer</code>)</li> \n <li>Check <code>if(deck[randomNumber])</code> if false pick a new number</li> \n <li>Set <code>deck[randomNumber] = false</code></li> \n <li>Decrease <code>cardsInDeck</code> by 1</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"cardsInDeck",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"randomNumber",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"randomNumber",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"cardsInDeck",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":4,
                    "random":3,
                    "dealer":1,
                    "decreas":1,
                    "set":1,
                    "deck":4,
                    "code":8,
                    "check":2,
                    "pick":2,
                    "fals":2,
                    "card":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So basically you check that your deck has at least 1 card to deal. You then pick a random card from the deck. If the card doesn't exist in your deck then pick a new one. You then tell your deck that you have removed that card. Finally tell the deck that it has 1 fewer card total.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[206510231]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So basically you check that your deck has at least 1 card to deal. You then pick a random card from the deck. If the card doesn't exist in your deck then pick a new one. You then tell your deck that you have removed that card. Finally tell the deck that it has 1 fewer card total.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "random":1,
                    "remov":1,
                    "fewer":1,
                    "exist":1,
                    "deck":5,
                    "total":1,
                    "check":1,
                    "pick":2,
                    "card":5,
                    "basic":1,
                    "deal":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>EDIT: How to output the existing deck:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10594362]-[165903024]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>EDIT: How to output the existing deck:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exist":1,
                    "edit":1,
                    "output":1,
                    "deck":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"int card = 0; System.out.println(&quot;The deck contains the following: \\n&quot;); for(PlayingCard.CardSuit suit : PlayingCard.CardSuit.values()) { for(PlayingCard.CardRank rank : PlayingCard.CardRank.values()) { if(deck[ card++ ]) { System.out.println(rank + &quot; of &quot; + suit + &quot;\\n&quot;); } } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[10594362]-[-41239537]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"int "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"card",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"The deck contains the following: \\n\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ForLoopStatementNode",
                    "forControl":{
                      "type":"ForEachControlNode",
                      "variable":{
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"suit",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "expression":{
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PlayingCard",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"CardSuit",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"values",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ForLoopStatementNode",
                          "forControl":{
                            "type":"ForEachControlNode",
                            "variable":{
                              "type":"LocalVariableDeclarationStatementNode",
                              "modifiers":[
                                
                              ],
                              "declarators":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"rank",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expression":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"PlayingCard",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"CardRank",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"values",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"IfStatementNode",
                                "expression":{
                                  "type":"ArrayAccessSelectorNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"deck",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "dimExpression":{
                                    "type":"DimExpressionNode",
                                    "argument":{
                                      "type":"PostfixOperatorExpressionNode",
                                      "argument":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"card",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"++",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "statement":{
                                  "type":"BlockNode",
                                  "statements":[
                                    {
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"MethodInvocationNode",
                                        "qualifiedIdentifier":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"System",
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"IdentifierNode",
                                              "name":"out",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"println",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "args":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            {
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"+",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"BinaryExpressionNode",
                                                  "operator":{
                                                    "type":"OperatorNode",
                                                    "symbol":"+",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "left":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"rank",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "right":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"StringLiteralNode",
                                                      "valueRep":"\" of \""
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"suit",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"StringLiteralNode",
                                                  "valueRep":"\"\\n\""
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    }
                                  ],
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"int card = 0; Systemoutprintln(\"The deck contains the following: \\n\"); for(PlayingCard.CardSuit suit : PlayingCard.CardSuit.values()) { for(PlayingCard.CardRank rank : PlayingCard.CardRank.values()) { if(deck[ card++ ]) { System.out.println(rank + \" of \"+ suit + \"\\n\"); } } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "system":1,
                    "play":4,
                    "rank":4,
                    "deck":2,
                    "suit":4,
                    "println":1,
                    "valu":2,
                    "card":10,
                    "systemoutprintln":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"The deck contains the following: \\n\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PlayingCard",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"CardSuit",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"values",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PlayingCard",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"CardRank",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"values",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"+",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"+",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"rank",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\" of \""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"suit",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"\\n\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"suit",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"rank",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}