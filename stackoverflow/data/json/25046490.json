{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25046490,
    "title":"How to map in file.hbm without setting the value?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":38968940,
        "postId":25046490,
        "creationDate":"2014-07-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3851601,
          "displayName":"Natraj",
          "reputation":11
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Thank you for suggestion. I am done with my mapping."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25046490-cu38968940]-[-401405505]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Thank you for suggestion. I am done with my mapping."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "suggest":1,
                      "map":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":38968970,
        "postId":25046490,
        "creationDate":"2014-07-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1679310,
          "displayName":"Radim Köhler",
          "reputation":35754
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Great to see that, sir;) good luck with Hibernate ;)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25046490-cu38968970]-[-382078886]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Great to see that, sir;) good luck with Hibernate ;)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "good":1,
                      "hibern":1,
                      "luck":1,
                      "sir":1,
                      "great":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":38967268,
        "postId":25046490,
        "creationDate":"2014-07-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1679310,
          "displayName":"Radim Köhler",
          "reputation":35754
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Any issues with your mapping so far? I would say, just do not forget to add `insert=&quot;false&quot; update=&quot;false&quot;` for this property as well... and you are done ;)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25046490-cu38967268]-[970004297]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Any issues with your mapping so far? I would say, just do not forget to add `insert=&quot;false&quot; update=&quot;false&quot;` for this property as well... and you are done ;)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "properti":1,
                      "insert":1,
                      "map":1,
                      "updat":1,
                      "issu":1,
                      "forget":1,
                      "fals":2,
                      "quot":4,
                      "add":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "hibernate"
    ],
    "creationDate":"2014-07-30",
    "lastActivityDate":"2014-07-31",
    "lastEditDate":"2014-07-31",
    "score":0,
    "viewCount":30,
    "owner":{
      "type":"StackOverflowUser",
      "id":3851601,
      "displayName":"Natraj",
      "reputation":11
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have scenario like this where I am mapping my class variable without setting it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25046490]-[440636688]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have scenario like this where I am mapping my class variable without setting it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"variable",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "set":1,
                  "scenario":1,
                  "variabl":1,
                  "map":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"class residence{ Private Long leadOwnerId; //with getters and setters for variable } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[25046490]-[-2017833037]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"residence",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"TextFragmentNode",
                            "text":"Private "
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"leadOwnerId",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"Long",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              {
                                "text":"//with getters and setters for variable } \n"
                              }
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"class residence{ Private Long leadOwnerId; //with getters and setters for variable } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "resid":1,
                  "lead":1,
                  "setter":1,
                  "getter":1,
                  "owner":1,
                  "variabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Long",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"leadOwnerId",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Long",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>And I have a table called <strong>lead</strong>. In that I have a column called <strong>owner</strong> in lead table. My requirement is in <strong>residence.hbm</strong> file i want to map my <strong>leadOwnerId</strong> with <strong>owner</strong> column of lead without setting it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25046490]-[1427077387]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>And I have a table called <strong>lead</strong>. In that I have a column called <strong>owner</strong> in lead table. My requirement is in <strong>residence.hbm</strong> file i want to map my <strong>leadOwnerId</strong> with <strong>owner</strong> column of lead without setting it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"leadOwnerId",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "resid":1,
                  "lead":4,
                  "map":1,
                  "requir":1,
                  "set":1,
                  "strong":10,
                  "tabl":2,
                  "hbm":1,
                  "column":2,
                  "file":1,
                  "owner":3,
                  "call":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am trying like this:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25046490]-[-1400604390]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am trying like this:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" &lt;property name=&quot;leadOwnerId&quot; formula=&quot;(select owner from lead l where l.id=id)&quot;&gt; &lt;/property&gt; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[25046490]-[1811524128]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"property"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"name"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"leadOwnerId\""
                      }
                    },
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"formula"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"(select owner from lead l where l.id=id)\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" "
                }
              ]
            },
            "rawText":" <property name=\"leadOwnerId\"formula=\"(select owner from lead l where l.id=id)\"> </property> ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "properti":2,
                  "lead":2,
                  "select":1,
                  "formula":1,
                  "owner":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>correct me if i am wrong.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25046490]-[-731173468]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>correct me if i am wrong.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "wrong":1,
                  "correct":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}