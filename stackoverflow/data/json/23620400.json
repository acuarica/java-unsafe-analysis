{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23620400,
    "title":"How can I move an object on a grid?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "swing",
      "object",
      "grid",
      "move"
    ],
    "creationDate":"2014-05-12",
    "lastActivityDate":"2014-05-13",
    "lastEditDate":"2014-05-13",
    "closedDate":"2014-05-13",
    "score":0,
    "viewCount":24,
    "owner":{
      "type":"StackOverflowUser",
      "id":3605154,
      "displayName":"DualHunter",
      "reputation":6
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This is the code I have so far for the main. I want to make the guy on the upper left corner to move and act accordingly to the rest of the objects placed on the grid, for instance, what should I do to make colissions with the walls and avoid him from walking through them.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23620400]-[-784007159]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This is the code I have so far for the main. I want to make the guy on the upper left corner to move and act accordingly to the rest of the objects placed on the grid, for instance, what should I do to make colissions with the walls and avoid him from walking through them.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "move":1,
                  "guy":1,
                  "rest":1,
                  "left":1,
                  "walk":1,
                  "main":1,
                  "upper":1,
                  "avoid":1,
                  "object":1,
                  "grid":1,
                  "code":1,
                  "wall":1,
                  "coliss":1,
                  "corner":1,
                  "make":2,
                  "act":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Reference image (this is what you get if you run the code) <a href=\"http://imageshack.com/a/img845/2944/qi3q.png\"rel=\"nofollow\">http://imageshack.com/a/img845/2944/qi3q.png</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23620400]-[1393490343]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Reference image (this is what you get if you run the code) <a href=\"http://imageshack.com/a/img845/2944/qi3q.png\"rel=\"nofollow\">http://imageshack.com/a/img845/2944/qi3q.png</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "png":2,
                  "run":1,
                  "img":2,
                  "rel":1,
                  "code":1,
                  "nofollow":1,
                  "refer":1,
                  "href":1,
                  "imageshack":2,
                  "http":2,
                  "imag":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public class Table extends javax.swing.JFrame { private static int numFilas = 15; private static int numColumnas = 10; private JLabel[][] casillas; // matriz grafica private int[][] mLogica = new int[numFilas][numColumnas]; // matriz para almacenar las entidades private Entidad[][] entidades = new Entidad[numFilas][numColumnas]; //private Heroe heroe; public static final int tama&ntilde;oCuadrito = 60; private Entidad x; public Table() { initComponents(); crearMapaLogico(); DesplegarMatriz(); } public void crearMapaLogico() { int[][] mapaLogico = {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 7, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 4, 0, 1}, {1, 0, 0, 6, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 3, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 3, 0, 1}, {1, 6, 0, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 5, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 1, 0, 1}, {1, 2, 0, 0, 0, 0, 0, 3, 0, 1}, {1, 0, 0, 6, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 8, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}; mLogica = mapaLogico; } public void DesplegarMatriz() { casillas = new JLabel[numFilas][numColumnas]; // se instancia la matriz para dibujar entidades y pasto for (int i = 0; i &lt; numFilas; i++) { for (int j = 0; j &lt; numColumnas; j++) { casillas[i][j] = new JLabel(); casillas[i][j].setOpaque(true); casillas[i][j].setBounds((i * tama&ntilde;oCuadrito) + 30, (j * tama&ntilde;oCuadrito) + 30, tama&ntilde;oCuadrito, tama&ntilde;oCuadrito); casillas[i][j].setVisible(true); //casillas[i][j].setIcon(dibujar(mLogica[i][j])); casillas[i][j].setIcon(dibujar(mLogica[i][j])); panelContenedor.add(casillas[i][j]); } } } public ImageIcon dibujar(int tipo) { switch (tipo) { case 0: //return new ImageIcon(getClass().getResource(&quot;/imagenes/green.jpg&quot;)); return new ImageIcon(((new ImageIcon(getClass().getResource(&quot;/imagenes/pasto.jpg&quot;)).getImage().getScaledInstance(80, 80, java.awt.Image.SCALE_SMOOTH)))); case 1: Entidad x1 = new Muro(); return ((Muro) x1).dibujar(); case 2: Entidad x2 = new Bomba(); return ((Bomba) x2).dibujar(); case 3: Entidad x3 = new Pistola(); return ((Pistola) x3).dibujar(); case 4: Entidad x4 = new Ballesta(); return ((Ballesta) x4).dibujar(); case 5: Entidad x5 = new Espada(); return ((Espada) x5).dibujar(); case 6: Entidad x6 = new Enemigo(); return ((Enemigo) x6).dibujar(); case 7: Entidad x7 = new Heroe(); return ((Heroe) x7).dibujar(); case 8: return new ImageIcon(getClass().getResource(&quot;/imagenes/salida.jpg&quot;)); default: return new ImageIcon(getClass().getResource(&quot;/imagenes/pasto.jpg&quot;)); } } /** * This method is called from within the constructor to initialize the form. * WARNING: Do NOT modify this code. The content of this method is always * regenerated by the Form Editor. */ @SuppressWarnings(&quot;unchecked&quot;) // &lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot;Generated Code&quot;&gt; private void initComponents() { panelContenedor = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor); panelContenedor.setLayout(panelContenedorLayout); panelContenedorLayout.setHorizontalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 1000, Short.MAX_VALUE) ); panelContenedorLayout.setVerticalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 600, Short.MAX_VALUE) ); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); pack(); }// &lt;/editor-fold&gt; /** * @param args the command line arguments */ public static void main(String args[]) { /* Set the Nimbus look and feel */ //&lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot; Look and feel setting code (optional) &quot;&gt; /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html */ try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (&quot;Nimbus&quot;.equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } //&lt;/editor-fold&gt; /* Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Table().setVisible(true); } }); } // Variables declaration - do not modify private javax.swing.JPanel panelContenedor; // End of variables declaration } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23620400]-[-1533438293]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Table",
                        "comments":[
                          
                        ]
                      },
                      "superTypes":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"javax",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"swing",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JFrame",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"numFilas",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"15"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"numColumnas",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"10"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"casillas",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ArrayTypeNode",
                                    "typeNode":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"JLabel",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "depth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              {
                                "text":"// matriz grafica private int[][] mLogica = new int[numFilas][numColumnas]; // matriz para almacenar las entidades private Entidad[][] entidades = new Entidad[numFilas][numColumnas]; //private Heroe heroe; public static final int tamañoCuadrito = 60; private Entidad x; public Table() { initComponents(); crearMapaLogico(); DesplegarMatriz(); } public void crearMapaLogico() { int[][] mapaLogico = {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 7, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 4, 0, 1}, {1, 0, 0, 6, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 3, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 3, 0, 1}, {1, 6, 0, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 5, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 1, 0, 1}, {1, 2, 0, 0, 0, 0, 0, 3, 0, 1}, {1, 0, 0, 6, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 8, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}; mLogica = mapaLogico; } public void DesplegarMatriz() { casillas = new JLabel[numFilas][numColumnas]; // se instancia la matriz para dibujar entidades y pasto for (int i = 0; i < numFilas; i++) { for (int j = 0; j < numColumnas; j++) { casillas[i][j] = new JLabel(); casillas[i][j].setOpaque(true); casillas[i][j].setBounds((i * tamañoCuadrito) + 30, (j * tamañoCuadrito) + 30, tamañoCuadrito, tamañoCuadrito); casillas[i][j].setVisible(true); //casillas[i][j].setIcon(dibujar(mLogica[i][j])); casillas[i][j].setIcon(dibujar(mLogica[i][j])); panelContenedor.add(casillas[i][j]); } } } public ImageIcon dibujar(int tipo) { switch (tipo) { case 0: //return new ImageIcon(getClass().getResource(\"/imagenes/green.jpg\")); return new ImageIcon(((new ImageIcon(getClass().getResource(\"/imagenes/pasto.jpg\")).getImage().getScaledInstance(80, 80, java.awt.Image.SCALE_SMOOTH)))); case 1: Entidad x1 = new Muro(); return ((Muro) x1).dibujar(); case 2: Entidad x2 = new Bomba(); return ((Bomba) x2).dibujar(); case 3: Entidad x3 = new Pistola(); return ((Pistola) x3).dibujar(); case 4: Entidad x4 = new Ballesta(); return ((Ballesta) x4).dibujar(); case 5: Entidad x5 = new Espada(); return ((Espada) x5).dibujar(); case 6: Entidad x6 = new Enemigo(); return ((Enemigo) x6).dibujar(); case 7: Entidad x7 = new Heroe(); return ((Heroe) x7).dibujar(); case 8: return new ImageIcon(getClass().getResource(\"/imagenes/salida.jpg\")); default: return new ImageIcon(getClass().getResource(\"/imagenes/pasto.jpg\")); } } /** * This method is called from within the constructor to initialize the form. * WARNING: Do NOT modify this code. The content of this method is always * regenerated by the Form Editor. */ @SuppressWarnings(\"unchecked\") // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\"> private void initComponents() { panelContenedor = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor); panelContenedor.setLayout(panelContenedorLayout); panelContenedorLayout.setHorizontalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 1000, Short.MAX_VALUE) ); panelContenedorLayout.setVerticalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 600, Short.MAX_VALUE) ); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); pack(); }// </editor-fold> /** * @param args the command line arguments */ public static void main(String args[]) { /* Set the Nimbus look and feel */ //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \"> /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html */ try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } //</editor-fold> /* Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Table().setVisible(true); } }); } // Variables declaration - do not modify private javax.swing.JPanel panelContenedor; // End of variables declaration } \n"
                              }
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"public class Table extends javax.swing.JFrame { private static int numFilas = 15; private static int numColumnas = 10; private JLabel[][] casillas; // matriz grafica private int[][] mLogica = new int[numFilas][numColumnas]; // matriz para almacenar las entidades private Entidad[][] entidades = new Entidad[numFilas][numColumnas]; //private Heroe heroe; public static final int tamañoCuadrito = 60; private Entidad x; public Table() { initComponents(); crearMapaLogico(); DesplegarMatriz(); } public void crearMapaLogico() { int[][] mapaLogico = {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 7, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 4, 0, 1}, {1, 0, 0, 6, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 3, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 1, 1, 1, 0, 3, 0, 1}, {1, 6, 0, 0, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 5, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 1, 0, 1}, {1, 2, 0, 0, 0, 0, 0, 3, 0, 1}, {1, 0, 0, 6, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 8, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}; mLogica = mapaLogico; } public void DesplegarMatriz() { casillas = new JLabel[numFilas][numColumnas]; // se instancia la matriz para dibujar entidades y pasto for (int i = 0; i < numFilas; i++) { for (int j = 0; j < numColumnas; j++) { casillas[i][j] = new JLabel(); casillas[i][j].setOpaque(true); casillas[i][j].setBounds((i * tamañoCuadrito) + 30, (j * tamañoCuadrito) + 30, tamañoCuadrito, tamañoCuadrito); casillas[i][j].setVisible(true); //casillas[i][j].setIcon(dibujar(mLogica[i][j])); casillas[i][j].setIcon(dibujar(mLogica[i][j])); panelContenedor.add(casillas[i][j]); } } } public ImageIcon dibujar(int tipo) { switch (tipo) { case 0: //return new ImageIcon(getClass().getResource(\"/imagenes/green.jpg\")); return new ImageIcon(((new ImageIcon(getClass().getResource(\"/imagenes/pasto.jpg\")).getImage().getScaledInstance(80, 80, java.awt.Image.SCALE_SMOOTH)))); case 1: Entidad x1 = new Muro(); return ((Muro) x1).dibujar(); case 2: Entidad x2 = new Bomba(); return ((Bomba) x2).dibujar(); case 3: Entidad x3 = new Pistola(); return ((Pistola) x3).dibujar(); case 4: Entidad x4 = new Ballesta(); return ((Ballesta) x4).dibujar(); case 5: Entidad x5 = new Espada(); return ((Espada) x5).dibujar(); case 6: Entidad x6 = new Enemigo(); return ((Enemigo) x6).dibujar(); case 7: Entidad x7 = new Heroe(); return ((Heroe) x7).dibujar(); case 8: return new ImageIcon(getClass().getResource(\"/imagenes/salida.jpg\")); default: return new ImageIcon(getClass().getResource(\"/imagenes/pasto.jpg\")); } } /** * This method is called from within the constructor to initialize the form. * WARNING: Do NOT modify this code. The content of this method is always * regenerated by the Form Editor. */ @SuppressWarnings(\"unchecked\") // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\"> private void initComponents() { panelContenedor = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor); panelContenedor.setLayout(panelContenedorLayout); panelContenedorLayout.setHorizontalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 1000, Short.MAX_VALUE) ); panelContenedorLayout.setVerticalGroup( panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 600, Short.MAX_VALUE) ); javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(layout); layout.setHorizontalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); layout.setVerticalGroup( layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); pack(); }// </editor-fold> /** * @param args the command line arguments */ public static void main(String args[]) { /* Set the Nimbus look and feel */ //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \"> /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html */ try { for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) { if (\"Nimbus\".equals(info.getName())) { javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } } } catch (ClassNotFoundException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (InstantiationException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (IllegalAccessException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } catch (javax.swing.UnsupportedLookAndFeelException ex) { java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); } //</editor-fold> /* Create and display the form */ java.awt.EventQueue.invokeLater(new Runnable() { public void run() { new Table().setVisible(true); } }); } // Variables declaration - do not modify private javax.swing.JPanel panelContenedor; // End of variables declaration } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "panel":13,
                  "constant":1,
                  "fila":5,
                  "method":2,
                  "feel":7,
                  "lead":4,
                  "desc":2,
                  "jpg":4,
                  "window":1,
                  "logico":4,
                  "warn":2,
                  "util":8,
                  "size":4,
                  "logger":8,
                  "pasto":3,
                  "instanti":1,
                  "regener":1,
                  "para":2,
                  "espada":2,
                  "smooth":1,
                  "muro":2,
                  "bomba":2,
                  "lookandfeel":1,
                  "event":1,
                  "dibujar":11,
                  "queue":1,
                  "line":1,
                  "param":1,
                  "las":1,
                  "scale":2,
                  "align":4,
                  "jpanel":2,
                  "icon":8,
                  "opaqu":1,
                  "run":1,
                  "set":16,
                  "introduc":1,
                  "columna":5,
                  "option":1,
                  "collaps":2,
                  "pack":1,
                  "resourc":4,
                  "invok":1,
                  "tamaño":5,
                  "jframe":1,
                  "constructor":1,
                  "oracl":1,
                  "defaultst":2,
                  "suppress":1,
                  "fold":4,
                  "visibl":2,
                  "logica":4,
                  "swing":20,
                  "main":1,
                  "instancia":1,
                  "command":1,
                  "vertic":2,
                  "info":4,
                  "declar":2,
                  "compon":4,
                  "num":10,
                  "pane":2,
                  "green":1,
                  "code":3,
                  "oper":1,
                  "cuadrito":5,
                  "tabl":7,
                  "javax":20,
                  "editor":5,
                  "tipo":2,
                  "found":1,
                  "bound":1,
                  "sever":4,
                  "uisw":1,
                  "max":4,
                  "nimbus":3,
                  "equal":1,
                  "grafica":1,
                  "instal":1,
                  "imagen":4,
                  "plaf":1,
                  "gap":2,
                  "almacenar":1,
                  "uncheck":1,
                  "illeg":1,
                  "hero":4,
                  "uimanag":3,
                  "modifi":2,
                  "mapa":4,
                  "unsupport":1,
                  "content":3,
                  "runnabl":1,
                  "javas":1,
                  "true":3,
                  "exit":1,
                  "generat":1,
                  "ballesta":2,
                  "end":1,
                  "initi":1,
                  "stay":1,
                  "detail":1,
                  "matriz":5,
                  "pistola":2,
                  "crear":2,
                  "layout":26,
                  "form":3,
                  "salida":1,
                  "html":1,
                  "variabl":2,
                  "close":2,
                  "desplegar":2,
                  "http":1,
                  "tutori":1,
                  "creat":5,
                  "entidad":13,
                  "call":1,
                  "contenedor":13,
                  "add":5,
                  "init":2,
                  "casilla":9,
                  "argument":1,
                  "download":1,
                  "group":20,
                  "jlabel":3,
                  "awt":2,
                  "parallel":4,
                  "arg":2,
                  "horizont":2,
                  "log":12,
                  "imag":8,
                  "enemigo":2,
                  "instanc":1,
                  "display":1,
                  "access":1,
                  "level":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"javax",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"swing",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JFrame",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JLabel",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"numFilas",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"15"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"numColumnas",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"10"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"casillas",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JLabel",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}