{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":5825607,
    "title":"Location of an object in memory using Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":6688108,
        "postId":5825607,
        "creationDate":"2011-04-28",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":128397,
          "displayName":"Daniel Pryden",
          "reputation":24239
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Regarding your edit: are you trying to test if ASLR is more effective *for Java applications* in Windows 7, or just trying to test of ASLR is more effective *for applications in general*? If the former, then I posit that it is equally ineffective in all cases; if the latter, then Java is the wrong language to be using for such a test."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5825607-cu6688108]-[793874748]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Regarding your edit: are you trying to test if ASLR is more effective *for Java applications* in Windows 7, or just trying to test of ASLR is more effective *for applications in general*? If the former, then I posit that it is equally ineffective in all cases; if the latter, then Java is the wrong language to be using for such a test."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "aslr":2,
                      "ineffect":1,
                      "test":3,
                      "window":1,
                      "languag":1,
                      "wrong":1,
                      "effect":2,
                      "edit":1,
                      "general":1,
                      "equal":1,
                      "applic":2,
                      "posit":1,
                      "case":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":6688207,
        "postId":5825607,
        "creationDate":"2011-04-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":244333,
          "displayName":"redmave",
          "reputation":1773
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"For all applications in General."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5825607-cu6688207]-[-721891526]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"For all applications in General."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "general":1,
                      "applic":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":6688322,
        "postId":5825607,
        "creationDate":"2011-04-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":128397,
          "displayName":"Daniel Pryden",
          "reputation":24239
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Then you should be doing your test in C or another close-to-the-metal language, not in Java, which tries to be as far away from the actual operating system as possible."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5825607-cu6688322]-[1693815825]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Then you should be doing your test in C or another close-to-the-metal language, not in Java, which tries to be as far away from the actual operating system as possible."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "test":1,
                      "languag":1,
                      "system":1,
                      "oper":1,
                      "close":1,
                      "metal":1,
                      "actual":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2011-04-28",
    "lastActivityDate":"2011-04-29",
    "lastEditDate":"2011-04-29",
    "score":4,
    "viewCount":217,
    "owner":{
      "type":"StackOverflowUser",
      "id":244333,
      "displayName":"redmave",
      "reputation":1773
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I used a simple test code and created an object in Java.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[403792627]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I used a simple test code and created an object in Java.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":1,
                  "simpl":1,
                  "object":1,
                  "code":1,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I used the System.identityHashCode function to get the roughly equivalent address. Please see this question I asked for more context: <a href=\"http://stackoverflow.com/questions/5819651/how-to-print-the-location-of-heap-using-java-for-a-process\">Click Here</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[1174977449]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I used the System.identityHashCode function to get the roughly equivalent address. Please see this question I asked for more context: <a href=\"http://stackoverflow.com/questions/5819651/how-to-print-the-location-of-heap-using-java-for-a-process\">Click Here</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"System",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"identityHashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":2,
                  "system":1,
                  "equival":1,
                  "process":1,
                  "print":1,
                  "context":1,
                  "code":1,
                  "stackoverflow":1,
                  "hash":1,
                  "ident":1,
                  "click":1,
                  "function":1,
                  "rough":1,
                  "address":1,
                  "heap":1,
                  "ask":1,
                  "href":1,
                  "http":1,
                  "locat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Start "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5825607]-[-1808616418]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"Start "
                }
              ]
            },
            "rawText":"Start ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "start":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<pp>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[495613715]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<pp>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"End "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5825607]-[2164421]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"End "
                }
              ]
            },
            "rawText":"End ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "end":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Now the question is, how do I know the above numbers generated are caused by ASLR. I am using Windows 7 and cannot switch ASLR off.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[1903849842]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Now the question is, how do I know the above numbers generated are caused by ASLR. I am using Windows 7 and cannot switch ASLR off.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "aslr":2,
                  "number":1,
                  "question":1,
                  "window":1,
                  "caus":1,
                  "generat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In other words if ASLR is switched off do you think I will get the same number generated each time I run the code?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[-106635547]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In other words if ASLR is switched off do you think I will get the same number generated each time I run the code?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "aslr":1,
                  "number":1,
                  "switch":1,
                  "run":1,
                  "code":1,
                  "generat":1,
                  "time":1,
                  "word":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Sample code I used:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[-495262048]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Sample code I used:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1,
                  "sampl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"// public class HashCodeTest { public int hashCode() { return 0xDEADBEEF; } public static void main(String[] argv) { HashCodeTest o1 = new HashCodeTest(); System.out.println(&quot;First: &quot; + o1); System.out.println(&quot;Using System.identityHashCode():&quot;); System.out.println(&quot;First: &quot; + System.identityHashCode(o1)); } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5825607]-[-84325762]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"// "
                },
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"HashCodeTest",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"hashCode",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"ReturnStatementNode",
                                  "expression":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"0xDEADBEEF"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"void",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"main",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "parameters":{
                                "type":"FormalParameterDeclsNode",
                                "modifiers":[
                                  
                                ],
                                "parameterType":{
                                  "type":"ArrayTypeNode",
                                  "typeNode":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "depth":[
                                    {
                                      "type":"ArrayDimensionNode",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ]
                                },
                                "nextDeclarator":{
                                  "type":"AdditionalFormalParameterDeclNode",
                                  "variableDeclarator":{
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"argv",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"o1",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"ConstructorCreatorNode",
                                              "creatorType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"HashCodeTest",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "expressionArgs":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"HashCodeTest",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"out",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"println",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"+",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"First: \""
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"o1",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"out",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"println",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"StringLiteralNode",
                                            "valueRep":"\"Using System.identityHashCode():\""
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"System",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"out",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"println",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"+",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"First: \""
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"MethodInvocationNode",
                                            "qualifiedIdentifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"System",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"identityHashCode",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "args":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                {
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"o1",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"// public class HashCodeTest { public int hashCode() { return 0xDEADBEEF; } public static void main(String[] argv) { HashCodeTest o1 = new HashCodeTest(); System.out.println(\"First: \"+ o1); System.out.println(\"Using System.identityHashCode():\"); System.out.println(\"First: \"+ System.identityHashCode(o1)); } } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":3,
                  "deadbeef":1,
                  "system":5,
                  "main":1,
                  "println":3,
                  "code":6,
                  "hash":6,
                  "ident":2,
                  "argv":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HashCodeTest",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"First: \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"o1",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"Using System.identityHashCode():\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"First: \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"System",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"identityHashCode",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"o1",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"identityHashCode",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"o1",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"argv",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"o1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"HashCodeTest",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HashCodeTest",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>EDIT:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[1376224295]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>EDIT:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "edit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What am I trying to accomplish? I want to see if Address Space Layout Randomization (ASLR) is more effective in Windows 7 than in Windows Vista I want to plot a frequency distribution curve or use some other statistical tools on the data to see if it is more predictable in one OS compared to the other for ALL applications in general.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5825607]-[1862018920]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What am I trying to accomplish? I want to see if Address Space Layout Randomization (ASLR) is more effective in Windows 7 than in Windows Vista I want to plot a frequency distribution curve or use some other statistical tools on the data to see if it is more predictable in one OS compared to the other for ALL applications in general.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "aslr":1,
                  "random":1,
                  "window":2,
                  "plot":1,
                  "tool":1,
                  "data":1,
                  "effect":1,
                  "curv":1,
                  "statist":1,
                  "general":1,
                  "space":1,
                  "compar":1,
                  "applic":1,
                  "accomplish":1,
                  "address":1,
                  "predict":1,
                  "layout":1,
                  "distribut":1,
                  "vista":1,
                  "frequenc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":5825783,
      "questionId":5825607,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6687675,
          "postId":5825783,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Paulo - see my answer ..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5825783-cu6687675]-[-9794841]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Paulo - see my answer ..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Paulo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "paulo":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6710057,
          "postId":5825783,
          "creationDate":"2011-04-30",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":244333,
            "displayName":"redmave",
            "reputation":1773
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Paulo: The documentation says that it has integer mapping of memory location. &quot; As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.) &quot;"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5825783-cu6710057]-[-793855395]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Paulo: The documentation says that it has integer mapping of memory location. &quot; As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.) &quot;"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Paulo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "paulo":1,
                        "method":1,
                        "languag":1,
                        "map":1,
                        "document":1,
                        "requir":1,
                        "object":3,
                        "code":1,
                        "integ":1,
                        "hash":1,
                        "typic":1,
                        "distinct":2,
                        "techniqu":1,
                        "implement":2,
                        "address":1,
                        "quot":2,
                        "defin":1,
                        "practic":1,
                        "intern":1,
                        "convert":1,
                        "locat":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6710889,
          "postId":5825783,
          "creationDate":"2011-04-30",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":600500,
            "displayName":"Paŭlo Ebermann",
            "reputation":38879
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@redmave: have a look at the last phrase - **this implementation technique is not required by the Java programming language**. It might be, but does not have to be. In your example it might be some direct mapping of memory addresses, but as I explained in my answer, it can't always be done this way, so you should not rely on this. Of course, in a normal program you don't need this property, you only need the first sentence. For the applications in your special problem, the answer from Stephen seems good enough."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5825783-cu6710889]-[-2009188328]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@redmave: have a look at the last phrase - **this implementation technique is not required by the Java programming language**. It might be, but does not have to be. In your example it might be some direct mapping of memory addresses, but as I explained in my answer, it can't always be done this way, so you should not rely on this. Of course, in a normal program you don't need this property, you only need the first sentence. For the applications in your special problem, the answer from Stephen seems good enough."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":2,
                        "properti":1,
                        "languag":1,
                        "redmav":1,
                        "explain":1,
                        "map":1,
                        "good":1,
                        "problem":1,
                        "normal":1,
                        "requir":1,
                        "phrase":1,
                        "direct":1,
                        "sentenc":1,
                        "techniqu":1,
                        "applic":1,
                        "implement":1,
                        "address":1,
                        "answer":2,
                        "stephen":1,
                        "reli":1,
                        "special":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":600500,
        "displayName":"Paŭlo Ebermann",
        "reputation":38879
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In general, in Java the <code>identityHashCode()</code> function does not specify anything about memory addresses. The only specified thing is that <strong>these numbers are constant over the whole lifetime of an object</strong>, and that <em>they are different for different objects as much as possible</em>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825783]-[-2131770940]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In general, in Java the <code>identityHashCode()</code> function does not specify anything about memory addresses. The only specified thing is that <strong>these numbers are constant over the whole lifetime of an object</strong>, and that <em>they are different for different objects as much as possible</em>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":1,
                    "number":1,
                    "lifetim":1,
                    "thing":1,
                    "strong":2,
                    "object":2,
                    "code":3,
                    "hash":1,
                    "ident":1,
                    "general":1,
                    "function":1,
                    "address":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p>On 64-bit VMs with enough memory you can create more than 2^32 objects at once, thus even the second condition can not mean &quot;always different for different objects&quot;.</p></li> \n <li><p>Modern Sun VMs are using a generational garbage collector, which means that objects are moved during their lifetime. The memory address then changes, while the identity hash code has to be the same - thus it can't be always the memory address.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825783]-[75296888]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p>On 64-bit VMs with enough memory you can create more than 2^32 objects at once, thus even the second condition can not mean &quot;always different for different objects&quot;.</p></li> \n <li><p>Modern Sun VMs are using a generational garbage collector, which means that objects are moved during their lifetime. The memory address then changes, while the identity hash code has to be the same - thus it can't be always the memory address.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "move":1,
                    "bit":1,
                    "lifetim":1,
                    "condit":1,
                    "sun":1,
                    "mean":1,
                    "object":3,
                    "code":1,
                    "modern":1,
                    "hash":1,
                    "ident":1,
                    "vms":2,
                    "address":2,
                    "generat":1,
                    "quot":2,
                    "creat":1,
                    "garbag":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Thus, you can't rely on anything beside the condition mentioned above. On some VMs (especially old ones with non-moving garbage collectors) the number might be something which could be converted in C to the memory address (or the initial address when the object was created), but another valid implementation would be pseudo-random numbers given on object creation, or a simple counter.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825783]-[-1579592948]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Thus, you can't rely on anything beside the condition mentioned above. On some VMs (especially old ones with non-moving garbage collectors) the number might be something which could be converted in C to the memory address (or the initial address when the object was created), but another valid implementation would be pseudo-random numbers given on object creation, or a simple counter.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":2,
                    "random":1,
                    "collector":1,
                    "move":1,
                    "simpl":1,
                    "condit":1,
                    "creation":1,
                    "object":2,
                    "mention":1,
                    "vms":1,
                    "valid":1,
                    "implement":1,
                    "address":2,
                    "counter":1,
                    "initi":1,
                    "reli":1,
                    "creat":1,
                    "convert":1,
                    "garbag":1,
                    "pseudo":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5825868,
      "questionId":5825607,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":128397,
        "displayName":"Daniel Pryden",
        "reputation":24239
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Address space layout randomization (ASLR) is:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[-610466241]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Address space layout randomization (ASLR) is:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "random":1,
                    "space":1,
                    "address":1,
                    "layout":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>not necessary for Java applications</li> \n <li>unlikely to be helpful for Java applications</li> \n <li>actively defeated by the memory management techniques of many JVM implementations</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[-1025227651]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>not necessary for Java applications</li> \n <li>unlikely to be helpful for Java applications</li> \n <li>actively defeated by the memory management techniques of many JVM implementations</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "help":1,
                    "activ":1,
                    "techniqu":1,
                    "defeat":1,
                    "applic":2,
                    "implement":1,
                    "manag":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Sun's JVM, for example, will allocate a large section of virtual memory at startup time (presumably using the OS heap functions to grab a single large block), and then proceed to manage that memory as its own heap in a very well-known way. That is, the Eden, Survivor spaces, Tenured heap, and PermGen are all laid out the same way, and I'm pretty certain ASLR can't do anything about that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[-152812367]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Sun's JVM, for example, will allocate a large section of virtual memory at startup time (presumably using the OS heap functions to grab a single large block), and then proceed to manage that memory as its own heap in a very well-known way. That is, the Eden, Survivor spaces, Tenured heap, and PermGen are all laid out the same way, and I'm pretty certain ASLR can't do anything about that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PermGen",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "jvm":1,
                    "singl":1,
                    "alloc":1,
                    "tenur":1,
                    "startup":1,
                    "sun":1,
                    "laid":1,
                    "section":1,
                    "virtual":1,
                    "pretti":1,
                    "eden":1,
                    "block":1,
                    "larg":2,
                    "space":1,
                    "survivor":1,
                    "function":1,
                    "perm":1,
                    "grab":1,
                    "proceed":1,
                    "time":1,
                    "heap":3,
                    "manag":1,
                    "gen":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PermGen",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, the hacking techniques that ASLR is attempting to prevent simply aren't possible in Java anyway, for several reasons:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[-989695425]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, the hacking techniques that ASLR is attempting to prevent simply aren't possible in Java anyway, for several reasons:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "aren":1,
                    "prevent":1,
                    "reason":1,
                    "simpli":1,
                    "techniqu":1,
                    "hack":1,
                    "attempt":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li><p>Most JVM implementations frequently copy objects from one location to another in memory. Therefore, it is impossible to predict with any certainty where any object will be at any point in time.</p></li> \n <li><p>It is not possible for Java code to allocate arbitrary-sized objects on the Java stack, so stack overruns are not possible.</p></li> \n <li><p>It is impossible to subvert the Java Memory Model from within Java code; the only code for which this is possible is platform-native code invoked via JNI. (Or <code>sun.misc.Unsafe</code>, which is an unsafe wrapper for basically the same thing.) Therefore, as long as you use the Java <code>SecurityManager</code> features correctly, no rogue process is capable of writing to <em>any</em> dangerous memory location anyway.</p></li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[699006664]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li><p>Most JVM implementations frequently copy objects from one location to another in memory. Therefore, it is impossible to predict with any certainty where any object will be at any point in time.</p></li> \n <li><p>It is not possible for Java code to allocate arbitrary-sized objects on the Java stack, so stack overruns are not possible.</p></li> \n <li><p>It is impossible to subvert the Java Memory Model from within Java code; the only code for which this is possible is platform-native code invoked via JNI. (Or <code>sun.misc.Unsafe</code>, which is an unsafe wrapper for basically the same thing.) Therefore, as long as you use the Java <code>SecurityManager</code> features correctly, no rogue process is capable of writing to <em>any</em> dangerous memory location anyway.</p></li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"code",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Java",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SecurityManager",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "point":1,
                    "arbitrari":1,
                    "alloc":1,
                    "size":1,
                    "model":1,
                    "capabl":1,
                    "process":1,
                    "certainti":1,
                    "rogu":1,
                    "imposs":2,
                    "correct":1,
                    "sun":1,
                    "invok":1,
                    "thing":1,
                    "overrun":1,
                    "secur":1,
                    "object":3,
                    "code":8,
                    "jni":1,
                    "wrapper":1,
                    "stack":2,
                    "implement":1,
                    "misc":1,
                    "unsaf":2,
                    "predict":1,
                    "featur":1,
                    "time":1,
                    "manag":1,
                    "platform":1,
                    "basic":1,
                    "subvert":1,
                    "write":1,
                    "copi":1,
                    "frequent":1,
                    "locat":2,
                    "danger":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SecurityManager",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"code",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Java",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Perhaps you should describe what you are trying to accomplish and why you think that ASLR will help you accomplish it. I'm pretty sure that (a) ASLR isn't having any effect on your Java programs, and (b) that's OK, because you don't really want it anyway.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825868]-[-1197335406]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Perhaps you should describe what you are trying to accomplish and why you think that ASLR will help you accomplish it. I'm pretty sure that (a) ASLR isn't having any effect on your Java programs, and (b) that's OK, because you don't really want it anyway.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":2,
                    "program":1,
                    "effect":1,
                    "pretti":1,
                    "isn":1,
                    "accomplish":2,
                    "describ":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5825883,
      "questionId":5825607,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6688075,
          "postId":5825883,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":244333,
            "displayName":"redmave",
            "reputation":1773
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I put more data. I think there is significant randomization. See edit"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5825883-cu6688075]-[-760355161]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I put more data. I think there is significant randomization. See edit"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "random":1,
                        "data":1,
                        "edit":1,
                        "signific":1,
                        "put":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6688943,
          "postId":5825883,
          "creationDate":"2011-04-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@redmave - maybe, but I can still see a lot of repetition in the first 2 or 3 lines. You'd need to sort / count those numbers to see how much randomization is actually occurring."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5825883-cu6688943]-[1439874124]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@redmave - maybe, but I can still see a lot of repetition in the first 2 or 3 lines. You'd need to sort / count those numbers to see how much randomization is actually occurring."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":1,
                        "random":1,
                        "count":1,
                        "redmav":1,
                        "line":1,
                        "occur":1,
                        "lot":1,
                        "sort":1,
                        "repetit":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "lastEditDate":"2011-04-28",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I was the person who suggested that the OP should use <code>identityHashcode()</code> values as <strong>ersatz</strong> memory addresses. My idea is that, though they are not real memory addresses, they are based on the memory address of the object in question when <code>identityHashcode()</code> is first called ... on a typical JVM implementation. This makes them a reasonable proxy for real memory addresses, for the purposes of THIS experiment.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[-1649582498]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I was the person who suggested that the OP should use <code>identityHashcode()</code> values as <strong>ersatz</strong> memory addresses. My idea is that, though they are not real memory addresses, they are based on the memory address of the object in question when <code>identityHashcode()</code> is first called ... on a typical JVM implementation. This makes them a reasonable proxy for real memory addresses, for the purposes of THIS experiment.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashcode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashcode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "question":1,
                    "hashcod":2,
                    "real":2,
                    "suggest":1,
                    "idea":1,
                    "strong":2,
                    "reason":1,
                    "experi":1,
                    "object":1,
                    "base":1,
                    "code":4,
                    "ident":2,
                    "typic":1,
                    "valu":1,
                    "person":1,
                    "implement":1,
                    "ersatz":1,
                    "address":4,
                    "make":1,
                    "proxi":1,
                    "call":1,
                    "purpos":1,
                    "memori":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>My answer to the OP is that those results strongly suggest that ASLR is either not enabled, or it is not effective in randomizing the actual addresses of Java objects. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[149124665]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>My answer to the OP is that those results strongly suggest that ASLR is either not enabled, or it is not effective in randomizing the actual addresses of Java objects. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "random":1,
                    "suggest":1,
                    "effect":1,
                    "result":1,
                    "strong":1,
                    "object":1,
                    "address":1,
                    "enabl":1,
                    "answer":1,
                    "actual":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I would expect a certain amount of natural unpredictability in the object address because of non-deterministic factors in the JVM bootstrap sequence. That is why you are seeing 3 or 4 different hashcode values for that object in different runs. However, the fact that you are seeing certain values repeatedly strongly suggests that there is no systematic randomization happening. In other words, no ASLR.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[785734217]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I would expect a certain amount of natural unpredictability in the object address because of non-deterministic factors in the JVM bootstrap sequence. That is why you are seeing 3 or 4 different hashcode values for that object in different runs. However, the fact that you are seeing certain values repeatedly strongly suggests that there is no systematic randomization happening. In other words, no ASLR.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "jvm":1,
                    "hashcod":1,
                    "random":1,
                    "natur":1,
                    "systemat":1,
                    "happen":1,
                    "unpredict":1,
                    "suggest":1,
                    "run":1,
                    "strong":1,
                    "amount":1,
                    "object":2,
                    "factor":1,
                    "fact":1,
                    "sequenc":1,
                    "expect":1,
                    "valu":2,
                    "address":1,
                    "repeat":1,
                    "determinist":1,
                    "word":1,
                    "bootstrap":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Strictly speaking, we should examine the JVM source code to check that <code>identityHashcode</code> is really reporting something that <em>would</em> change if ASLR was effective ... but I don't have time right now.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[1845115833]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Strictly speaking, we should examine the JVM source code to check that <code>identityHashcode</code> is really reporting something that <em>would</em> change if ASLR was effective ... but I don't have time right now.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashcode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "examin":1,
                    "chang":1,
                    "jvm":1,
                    "hashcod":1,
                    "strict":1,
                    "effect":1,
                    "code":3,
                    "ident":1,
                    "check":1,
                    "report":1,
                    "time":1,
                    "sourc":1,
                    "speak":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(FWIW: I agree with other people who have answered / commented that ASLR is not needed for Java anyway. Modulo some unpatched bug in the JVM native code, a Java JVM simply does not allow a sandboxed Java program to inject executable (native) code. And even a privileged Java program could only do this via a custom native library.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5825883]-[521672295]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(FWIW: I agree with other people who have answered / commented that ASLR is not needed for Java anyway. Modulo some unpatched bug in the JVM native code, a Java JVM simply does not allow a sandboxed Java program to inject executable (native) code. And even a privileged Java program could only do this via a custom native library.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "jvm":2,
                    "program":2,
                    "custom":1,
                    "fwiw":1,
                    "privileg":1,
                    "librari":1,
                    "unpatch":1,
                    "code":2,
                    "need":1,
                    "simpli":1,
                    "modulo":1,
                    "bug":1,
                    "comment":1,
                    "sandbox":1,
                    "inject":1,
                    "agre":1,
                    "answer":1,
                    "peopl":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}