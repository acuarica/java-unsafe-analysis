{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":13860194,
    "title":"What is an &quot;internal address&quot; in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":19083318,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1286210,
          "displayName":"Neet",
          "reputation":2627
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Has been asked before, see here: http://stackoverflow.com/questions/557574/what-is-native-implementation-in-java/565416#565416"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083318]-[1233754853]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Has been asked before, see here: http://stackoverflow.com/questions/557574/what-is-native-implementation-in-java/565416#565416"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "stackoverflow":1,
                      "implement":1,
                      "ask":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083340,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":829571,
          "displayName":"assylias",
          "reputation":118960
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Neet Since the OP was one of the people answering that other question, I would tend to think he is asking something different."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083340]-[-975800874]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Neet Since the OP was one of the people answering that other question, I would tend to think he is asking something different."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Neet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "neet":1,
                      "tend":1,
                      "answer":1,
                      "peopl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083378,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1286210,
          "displayName":"Neet",
          "reputation":2627
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I changed the link to the correct answer which was not answered by the OP. It explains how `hashCode()` works."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083378]-[2040320494]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I changed the link to the correct answer which was not answered by the OP. It explains how `hashCode()` works."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "chang":1,
                      "explain":1,
                      "correct":1,
                      "work":1,
                      "code":1,
                      "hash":1,
                      "link":1,
                      "answer":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083396,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@neet The problem I had with that question is the accepted answer is IMHO incorrect. My answer says what it is not, but not what it is. The most voted for answer appears to be better."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083396]-[1404768999]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@neet The problem I had with that question is the accepted answer is IMHO incorrect. My answer says what it is not, but not what it is. The most voted for answer appears to be better."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "accept":1,
                      "problem":1,
                      "appear":1,
                      "neet":1,
                      "imho":1,
                      "incorrect":1,
                      "answer":3,
                      "vote":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083420,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":359532,
          "displayName":"Michael Ozeryansky",
          "reputation":1072
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Internal address is the address in memory. A java developer would be unfamiliar with this, since pointers do not exist in Java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083420]-[-402401269]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Internal address is the address in memory. A java developer would be unfamiliar with this, since pointers do not exist in Java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pointer":1,
                      "exist":1,
                      "unfamiliar":1,
                      "address":2,
                      "develop":1,
                      "intern":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083444,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MichaelOzeryansky My whole point is it is not the memory address. nor does it change when the address does."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083444]-[603295060]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MichaelOzeryansky My whole point is it is not the memory address. nor does it change when the address does."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MichaelOzeryansky",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "michael":1,
                      "chang":1,
                      "point":1,
                      "address":2,
                      "ozeryanski":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083454,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1286210,
          "displayName":"Neet",
          "reputation":2627
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Peter okay, then nevermind :-). @Michael every object you pass around gets passed as a `pointer` ... otherwise the `NullPointerException` won't make sense^^"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083454]-[1138089167]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Peter okay, then nevermind :-). @Michael every object you pass around gets passed as a `pointer` ... otherwise the `NullPointerException` won't make sense^^"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Peter",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Michael",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "michael":1,
                      "sens":1,
                      "pointer":2,
                      "peter":1,
                      "object":1,
                      "nevermind":1,
                      "pass":2,
                      "make":1,
                      "won":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NullPointerException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083490,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@neet or NPE was given it's name in the early days when naming wasn't as consistent as it is today. ;)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083490]-[1848045510]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@neet or NPE was given it's name in the early days when naming wasn't as consistent as it is today. ;)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "name":1,
                      "npe":1,
                      "neet":1,
                      "wasn":1,
                      "earli":1,
                      "consist":1,
                      "day":1,
                      "today":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083533,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@neet, I think there are two answers in the questions you pointed to which are basically right. It would be good to have more details as the memory addresses are reused in the eden space on every GC. This would cause a lot of collisions in hashCodes if this were the only thing used."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083533]-[538391902]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@neet, I think there are two answers in the questions you pointed to which are basically right. It would be good to have more details as the memory addresses are reused in the eden space on every GC. This would cause a lot of collisions in hashCodes if this were the only thing used."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"hashCodes",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "point":1,
                      "good":1,
                      "thing":1,
                      "neet":1,
                      "collis":1,
                      "code":1,
                      "eden":1,
                      "hash":1,
                      "space":1,
                      "lot":1,
                      "address":1,
                      "answer":1,
                      "detail":1,
                      "basic":1,
                      "reus":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19083568,
        "postId":13860194,
        "creationDate":"2012-12-13",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":359532,
          "displayName":"Michael Ozeryansky",
          "reputation":1072
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The docs says &quot;typically implemented&quot;. All the internals of the JVM don't need to make sense to the developer. It will work is all they tell you. So most likely when the object is instantiated it will have a unique identifier stored based from the address, which stays with the object wherever."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19083568]-[701645045]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The docs says &quot;typically implemented&quot;. All the internals of the JVM don't need to make sense to the developer. It will work is all they tell you. So most likely when the object is instantiated it will have a unique identifier stored based from the address, which stays with the object wherever."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "jvm":1,
                      "uniqu":1,
                      "instanti":1,
                      "store":1,
                      "doc":1,
                      "work":1,
                      "object":2,
                      "base":1,
                      "typic":1,
                      "implement":1,
                      "identifi":1,
                      "address":1,
                      "make":1,
                      "quot":2,
                      "stay":1,
                      "develop":1,
                      "intern":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19802331,
        "postId":13860194,
        "creationDate":"2013-01-10",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"*The docs says &quot;typically implemented&quot;*, no single impl. I know of does that."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19802331]-[157056641]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"*The docs says &quot;typically implemented&quot;*, no single impl. I know of does that."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "doc":1,
                      "impl":1,
                      "typic":1,
                      "implement":1,
                      "quot":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19802406,
        "postId":13860194,
        "creationDate":"2013-01-10",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"variants of this questions have been asked multiple times (usually regarding hashCode): http://stackoverflow.com/questions/4930781/how-do-hashcode-and-identityhashcode-work-at-the-back-end or this: http://stackoverflow.com/questions/10917731/does-hashcode-return-the-memory-address"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19802406]-[-1563769777]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"variants of this questions have been asked multiple times (usually regarding hashCode): http://stackoverflow.com/questions/4930781/how-do-hashcode-and-identityhashcode-work-at-the-back-end or this: http://stackoverflow.com/questions/10917731/does-hashcode-return-the-memory-address"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":3,
                      "hashcod":2,
                      "identityhashcod":1,
                      "variant":1,
                      "work":1,
                      "code":1,
                      "stackoverflow":2,
                      "hash":1,
                      "back":1,
                      "address":1,
                      "end":1,
                      "time":1,
                      "ask":1,
                      "http":2,
                      "multipl":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19816682,
        "postId":13860194,
        "creationDate":"2013-01-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@bestsss They are good answers, but I was looking for more low level details e.g NPE's answer."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19816682]-[-701160506]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@bestsss They are good answers, but I was looking for more low level details e.g NPE's answer."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "npe":1,
                      "good":1,
                      "low":1,
                      "answer":2,
                      "detail":1,
                      "bestsss":1,
                      "level":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":19819355,
        "postId":13860194,
        "creationDate":"2013-01-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Peter, in one of my answer there is a link to the impl., here is another link to explanation of the object header bits (i.e. biased locking/hashing) by Cliff Click: http://www.azulsystems.com/blog/cliff/2010-01-09-biased-locking"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13860194-cu19819355]-[69740015]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Peter, in one of my answer there is a link to the impl., here is another link to explanation of the object header bits (i.e. biased locking/hashing) by Cliff Click: http://www.azulsystems.com/blog/cliff/2010-01-09-biased-locking"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "bit":1,
                      "peter":1,
                      "lock":2,
                      "object":1,
                      "impl":1,
                      "hash":1,
                      "explan":1,
                      "blog":1,
                      "click":1,
                      "link":2,
                      "cliff":2,
                      "bias":2,
                      "azulsystem":1,
                      "answer":1,
                      "header":1,
                      "http":1,
                      "www":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "hashcode",
      "low-level"
    ],
    "creationDate":"2012-12-13",
    "lastActivityDate":"2012-12-13",
    "lastEditDate":"2012-12-13",
    "score":21,
    "viewCount":992,
    "owner":{
      "type":"StackOverflowUser",
      "id":57695,
      "displayName":"Peter Lawrey",
      "reputation":257803
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In the Javadoc for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29\">Object.hashCode()</a> it states</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[-1623244171]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In the Javadoc for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29\">Object.hashCode()</a> it states</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Object",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "state":1,
                  "oracl":1,
                  "doc":2,
                  "object":2,
                  "code":2,
                  "hash":2,
                  "javas":1,
                  "api":1,
                  "lang":1,
                  "html":1,
                  "href":1,
                  "http":1,
                  "javadoc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<blockquote> \n <p>As much as is reasonably practical, the hashCode method defined by class <code>Object</code> does return distinct integers for distinct objects. (This is typically implemented by converting the <strong>internal address</strong> of the object into an integer, but this implementation technique is not required by the Java™ programming language.) </p> \n</blockquote>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[-1769931761]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<blockquote> \n <p>As much as is reasonably practical, the hashCode method defined by class <code>Object</code> does return distinct integers for distinct objects. (This is typically implemented by converting the <strong>internal address</strong> of the object into an integer, but this implementation technique is not required by the Java™ programming language.) </p> \n</blockquote>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"Object",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "method":1,
                  "languag":1,
                  "requir":1,
                  "strong":2,
                  "blockquot":2,
                  "object":3,
                  "code":3,
                  "integ":1,
                  "hash":1,
                  "typic":1,
                  "distinct":2,
                  "techniqu":1,
                  "implement":2,
                  "address":1,
                  "defin":1,
                  "practic":1,
                  "intern":1,
                  "convert":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It's a common miconception this has something to do with the memory address but it doesn't as that can change without notice and the hashCode() does not and must not change for an object.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1192789869]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It's a common miconception this has something to do with the memory address but it doesn't as that can change without notice and the hashCode() does not and must not change for an object.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":2,
                  "miconcept":1,
                  "object":1,
                  "code":1,
                  "hash":1,
                  "common":1,
                  "address":1,
                  "notic":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>@Neet Provided a link to a good answer <a href=\"http://stackoverflow.com/a/565416/57695\">http://stackoverflow.com/a/565416/57695</a> but I am looking for more details.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1643143196]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>@Neet Provided a link to a good answer <a href=\"http://stackoverflow.com/a/565416/57695\">http://stackoverflow.com/a/565416/57695</a> but I am looking for more details.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Neet",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "provid":1,
                  "good":1,
                  "neet":1,
                  "stackoverflow":2,
                  "link":1,
                  "answer":1,
                  "detail":1,
                  "href":1,
                  "http":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<hr />"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1817223689]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<hr />"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here is an example to illustrate my concern</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[537828852]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here is an example to illustrate my concern</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "illustr":1,
                  "concern":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Field theUnsafe = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); theUnsafe.setAccessible(true); Unsafe unsafe = (Unsafe) theUnsafe.get(null); for (int t = 0; t &lt; 10; t++) { System.gc(); Object[] objects = new Object[10]; for (int i = 0; i &lt; objects.length; i++) objects[i] = new Object(); for (int i = 0; i &lt; objects.length; i++) { if (i &gt; 0) System.out.print(&quot;, &quot;); int location = unsafe.getInt(objects, Unsafe.ARRAY_OBJECT_BASE_OFFSET + Unsafe.ARRAY_OBJECT_INDEX_SCALE * i); System.out.printf(&quot;%08x: hc= %08x&quot;, location, objects[i].hashCode()); } System.out.println(); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13860194]-[-833724937]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"theUnsafe",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":".",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"ClassLiteralExpressionNode",
                                "aType":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"Unsafe",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepths":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"MethodInvocationNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"getDeclaredField",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"theUnsafe\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Field",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"theUnsafe",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"setAccessible",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"BooleanLiteralNode",
                          "valueRep":"true"
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"unsafe",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Unsafe",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"theUnsafe",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"get",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"NullLiteralNode"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ForLoopStatementNode",
                  "forControl":{
                    "type":"ForVarControlNode",
                    "variables":{
                      "type":"LocalVariableDeclarationStatementNode",
                      "modifiers":[
                        
                      ],
                      "declarators":{
                        "type":"VariableDeclaratorsNode",
                        "declarators":[
                          {
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"t",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ],
                            "assignment":{
                              "type":"VariableAssignmentNode",
                              "variableAssignment":{
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "varType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            }
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "condition":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"t",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"10"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "update":[
                      {
                        "type":"PostfixOperatorExpressionNode",
                        "argument":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"t",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"++",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"gc",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"objects",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "assignment":{
                                "type":"VariableAssignmentNode",
                                "variableAssignment":{
                                  "type":"VariableExpressionInitNode",
                                  "expression":{
                                    "type":"ArrayExpressionCreatorNode",
                                    "creatorType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Object",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "expressionDepth":[
                                      {
                                        "type":"DimExpressionNode",
                                        "argument":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"10"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "arrayDepth":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "varType":{
                                "type":"ArrayTypeNode",
                                "typeNode":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Object",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "depth":[
                                  {
                                    "type":"ArrayDimensionNode",
                                    "comments":[
                                      
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ForLoopStatementNode",
                        "forControl":{
                          "type":"ForVarControlNode",
                          "variables":{
                            "type":"LocalVariableDeclarationStatementNode",
                            "modifiers":[
                              
                            ],
                            "declarators":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "condition":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"<",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"i",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"objects",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"length",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "update":[
                            {
                              "type":"PostfixOperatorExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"++",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"=",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ArrayAccessSelectorNode",
                              "identifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"objects",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "dimExpression":{
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Object",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ForLoopStatementNode",
                        "forControl":{
                          "type":"ForVarControlNode",
                          "variables":{
                            "type":"LocalVariableDeclarationStatementNode",
                            "modifiers":[
                              
                            ],
                            "declarators":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "condition":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"<",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"i",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"objects",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"length",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "update":[
                            {
                              "type":"PostfixOperatorExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"++",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"IfStatementNode",
                              "expression":{
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":">",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "statement":{
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"System",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"out",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"print",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"StringLiteralNode",
                                          "valueRep":"\", \""
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"LocalVariableDeclarationStatementNode",
                              "modifiers":[
                                
                              ],
                              "declarators":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"location",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"MethodInvocationNode",
                                          "qualifiedIdentifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"unsafe",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"getInt",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "args":{
                                            "type":"ExpressionListNode",
                                            "arguments":[
                                              {
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"objects",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"+",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"Unsafe",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"ARRAY_OBJECT_BASE_OFFSET",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"BinaryExpressionNode",
                                                  "operator":{
                                                    "type":"OperatorNode",
                                                    "symbol":"*",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "left":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"Unsafe",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"ARRAY_OBJECT_INDEX_SCALE",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "right":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"i",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ExpressionStatement",
                              "expression":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"System",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"out",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"printf",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"%08x: hc= %08x\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"location",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":".",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"ArrayAccessSelectorNode",
                                        "identifier":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"objects",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "dimExpression":{
                                          "type":"DimExpressionNode",
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"MethodInvocationNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"hashCode",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "args":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"out",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"println",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\"); theUnsafesetAccessible(true); Unsafe unsafe = (Unsafe) theUnsafe.get(null); for (int t = 0; t < 10; t++) { System.gc(); Object[] objects = new Object[10]; for (int i = 0; i < objects.length; i++) objects[i] = new Object(); for (int i = 0; i < objects.length; i++) { if (i > 0) System.out.print(\", \"); int location = unsafe.getInt(objects, Unsafe.ARRAY_OBJECT_BASE_OFFSET + Unsafe.ARRAY_OBJECT_INDEX_SCALE * i); System.out.printf(\"%08x: hc= %08x\", location, objects[i].hashCode()); } System.out.println(); } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "unsafeset":1,
                  "system":4,
                  "field":2,
                  "scale":1,
                  "print":1,
                  "println":1,
                  "declar":1,
                  "object":11,
                  "base":1,
                  "code":1,
                  "array":2,
                  "hash":1,
                  "offset":1,
                  "printf":1,
                  "true":1,
                  "length":2,
                  "unsaf":10,
                  "locat":2,
                  "index":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Field",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"unsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getInt",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"objects",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"ARRAY_OBJECT_BASE_OFFSET",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"*",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"ARRAY_OBJECT_INDEX_SCALE",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"i",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"gc",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getDeclaredField",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"theUnsafe\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"print",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\", \""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"theUnsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setAccessible",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"true"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"theUnsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"get",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"printf",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"%08x: hc= %08x\""
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"location",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"ArrayAccessSelectorNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"objects",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "dimExpression":{
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"hashCode",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"t",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"i",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"unsafe",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"theUnsafe",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"get",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"NullLiteralNode"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"theUnsafe",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getDeclaredField",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"theUnsafe\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"objects",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ArrayExpressionCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Object",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionDepth":[
                            {
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"10"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "arrayDepth":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Object",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"location",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"unsafe",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getInt",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"objects",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"+",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"Unsafe",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"ARRAY_OBJECT_BASE_OFFSET",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"*",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Unsafe",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"ARRAY_OBJECT_INDEX_SCALE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"i",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>prints</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1561833329]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>prints</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "print":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"eac00038: hc= 4f47e0ba, eac00048: hc= 2342d884, eac00058: hc= 7994d431, eac00068: hc= 19f71b53, eac00078: hc= 2e22f376, eac00088: hc= 789ddfa3, eac00098: hc= 44c58432, eac000a8: hc= 036a11e4, eac000b8: hc= 28bc917c, eac000c8: hc= 73f378c8 eac00038: hc= 30813486, eac00048: hc= 729f624a, eac00058: hc= 3dee2310, eac00068: hc= 5d400f33, eac00078: hc= 18a60d19, eac00088: hc= 3da5f0f3, eac00098: hc= 596e0123, eac000a8: hc= 450cceb3, eac000b8: hc= 4bd66d2f, eac000c8: hc= 6a9a4f8e eac00038: hc= 711dc088, eac00048: hc= 584b5abc, eac00058: hc= 3b3219ed, eac00068: hc= 564434f7, eac00078: hc= 17f17060, eac00088: hc= 6c08bae7, eac00098: hc= 3126cb1a, eac000a8: hc= 69e0312b, eac000b8: hc= 7dbc345a, eac000c8: hc= 4f114133 eac00038: hc= 50c8c3b8, eac00048: hc= 2ca98e77, eac00058: hc= 2fc83d89, eac00068: hc= 034005e1, eac00078: hc= 6041f871, eac00088: hc= 0b1df416, eac00098: hc= 5b83d60d, eac000a8: hc= 2c5a1e6b, eac000b8: hc= 5083198c, eac000c8: hc= 4f025f9f eac00038: hc= 00c5eb8a, eac00048: hc= 41eab16b, eac00058: hc= 1726099c, eac00068: hc= 4240eca3, eac00078: hc= 346fe350, eac00088: hc= 1db4b415, eac00098: hc= 429addef, eac000a8: hc= 45609812, eac000b8: hc= 489fe953, eac000c8: hc= 7a8f6d64 eac00038: hc= 7e628e42, eac00048: hc= 7869cfe0, eac00058: hc= 6aceb8e2, eac00068: hc= 29cc3436, eac00078: hc= 1d77daaa, eac00088: hc= 27b4de03, eac00098: hc= 535bab52, eac000a8: hc= 274cbf3f, eac000b8: hc= 1f9fd541, eac000c8: hc= 3669ae9f eac00038: hc= 772a3766, eac00048: hc= 749b46a8, eac00058: hc= 7e3bfb66, eac00068: hc= 13f62649, eac00078: hc= 054b8cdc, eac00088: hc= 230cc23b, eac00098: hc= 1aa3c177, eac000a8: hc= 74f2794a, eac000b8: hc= 5af92541, eac000c8: hc= 1afcfd10 eac00038: hc= 396e1dd8, eac00048: hc= 6c696d5c, eac00058: hc= 7d8aea9e, eac00068: hc= 2b316b76, eac00078: hc= 39862621, eac00088: hc= 16315e08, eac00098: hc= 03146a9a, eac000a8: hc= 3162a60a, eac000b8: hc= 4382f3da, eac000c8: hc= 4a578fd6 eac00038: hc= 225765b0, eac00048: hc= 17d5176d, eac00058: hc= 26f50154, eac00068: hc= 1f2a45c7, eac00078: hc= 104b1bcd, eac00088: hc= 330e3816, eac00098: hc= 6a844689, eac000a8: hc= 12330301, eac000b8: hc= 530a3ffc, eac000c8: hc= 45eee3fb eac00038: hc= 3f9432e0, eac00048: hc= 1a9830bc, eac00058: hc= 7da79447, eac00068: hc= 04f801c4, eac00078: hc= 363bed68, eac00088: hc= 185f62a9, eac00098: hc= 1e4651bf, eac000a8: hc= 1aa0e220, eac000b8: hc= 385db088, eac000c8: hc= 0ef0cda1 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13860194]-[967984898]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"eac00038: hc= 4f47e0ba, eac00048: hc= 2342d884, eac00058: hc= 7994d431, eac00068: hc= 19f71b53, eac00078: hc= 2e22f376, eac00088: hc= 789ddfa3, eac00098: hc= 44c58432, eac000a8: hc= 036a11e4, eac000b8: hc= 28bc917c, eac000c8: hc= 73f378c8 eac00038: hc= 30813486, eac00048: hc= 729f624a, eac00058: hc= 3dee2310, eac00068: hc= 5d400f33, eac00078: hc= 18a60d19, eac00088: hc= 3da5f0f3, eac00098: hc= 596e0123, eac000a8: hc= 450cceb3, eac000b8: hc= 4bd66d2f, eac000c8: hc= 6a9a4f8e eac00038: hc= 711dc088, eac00048: hc= 584b5abc, eac00058: hc= 3b3219ed, eac00068: hc= 564434f7, eac00078: hc= 17f17060, eac00088: hc= 6c08bae7, eac00098: hc= 3126cb1a, eac000a8: hc= 69e0312b, eac000b8: hc= 7dbc345a, eac000c8: hc= 4f114133 eac00038: hc= 50c8c3b8, eac00048: hc= 2ca98e77, eac00058: hc= 2fc83d89, eac00068: hc= 034005e1, eac00078: hc= 6041f871, eac00088: hc= 0b1df416, eac00098: hc= 5b83d60d, eac000a8: hc= 2c5a1e6b, eac000b8: hc= 5083198c, eac000c8: hc= 4f025f9f eac00038: hc= 00c5eb8a, eac00048: hc= 41eab16b, eac00058: hc= 1726099c, eac00068: hc= 4240eca3, eac00078: hc= 346fe350, eac00088: hc= 1db4b415, eac00098: hc= 429addef, eac000a8: hc= 45609812, eac000b8: hc= 489fe953, eac000c8: hc= 7a8f6d64 eac00038: hc= 7e628e42, eac00048: hc= 7869cfe0, eac00058: hc= 6aceb8e2, eac00068: hc= 29cc3436, eac00078: hc= 1d77daaa, eac00088: hc= 27b4de03, eac00098: hc= 535bab52, eac000a8: hc= 274cbf3f, eac000b8: hc= 1f9fd541, eac000c8: hc= 3669ae9f eac00038: hc= 772a3766, eac00048: hc= 749b46a8, eac00058: hc= 7e3bfb66, eac00068: hc= 13f62649, eac00078: hc= 054b8cdc, eac00088: hc= 230cc23b, eac00098: hc= 1aa3c177, eac000a8: hc= 74f2794a, eac000b8: hc= 5af92541, eac000c8: hc= 1afcfd10 eac00038: hc= 396e1dd8, eac00048: hc= 6c696d5c, eac00058: hc= 7d8aea9e, eac00068: hc= 2b316b76, eac00078: hc= 39862621, eac00088: hc= 16315e08, eac00098: hc= 03146a9a, eac000a8: hc= 3162a60a, eac000b8: hc= 4382f3da, eac000c8: hc= 4a578fd6 eac00038: hc= 225765b0, eac00048: hc= 17d5176d, eac00058: hc= 26f50154, eac00068: hc= 1f2a45c7, eac00078: hc= 104b1bcd, eac00088: hc= 330e3816, eac00098: hc= 6a844689, eac000a8: hc= 12330301, eac000b8: hc= 530a3ffc, eac000c8: hc= 45eee3fb eac00038: hc= 3f9432e0, eac00048: hc= 1a9830bc, eac00058: hc= 7da79447, eac00068: hc= 04f801c4, eac00078: hc= 363bed68, eac00088: hc= 185f62a9, eac00098: hc= 1e4651bf, eac000a8: hc= 1aa0e220, eac000b8: hc= 385db088, eac000c8: hc= 0ef0cda1 "
                }
              ]
            },
            "rawText":"eac00038: hc= 4f47e0ba, eac00048: hc= 2342d884, eac00058: hc= 7994d431, eac00068: hc= 19f71b53, eac00078: hc= 2e22f376, eac00088: hc= 789ddfa3, eac00098: hc= 44c58432, eac000a8: hc= 036a11e4, eac000b8: hc= 28bc917c, eac000c8: hc= 73f378c8 eac00038: hc= 30813486, eac00048: hc= 729f624a, eac00058: hc= 3dee2310, eac00068: hc= 5d400f33, eac00078: hc= 18a60d19, eac00088: hc= 3da5f0f3, eac00098: hc= 596e0123, eac000a8: hc= 450cceb3, eac000b8: hc= 4bd66d2f, eac000c8: hc= 6a9a4f8e eac00038: hc= 711dc088, eac00048: hc= 584b5abc, eac00058: hc= 3b3219ed, eac00068: hc= 564434f7, eac00078: hc= 17f17060, eac00088: hc= 6c08bae7, eac00098: hc= 3126cb1a, eac000a8: hc= 69e0312b, eac000b8: hc= 7dbc345a, eac000c8: hc= 4f114133 eac00038: hc= 50c8c3b8, eac00048: hc= 2ca98e77, eac00058: hc= 2fc83d89, eac00068: hc= 034005e1, eac00078: hc= 6041f871, eac00088: hc= 0b1df416, eac00098: hc= 5b83d60d, eac000a8: hc= 2c5a1e6b, eac000b8: hc= 5083198c, eac000c8: hc= 4f025f9f eac00038: hc= 00c5eb8a, eac00048: hc= 41eab16b, eac00058: hc= 1726099c, eac00068: hc= 4240eca3, eac00078: hc= 346fe350, eac00088: hc= 1db4b415, eac00098: hc= 429addef, eac000a8: hc= 45609812, eac000b8: hc= 489fe953, eac000c8: hc= 7a8f6d64 eac00038: hc= 7e628e42, eac00048: hc= 7869cfe0, eac00058: hc= 6aceb8e2, eac00068: hc= 29cc3436, eac00078: hc= 1d77daaa, eac00088: hc= 27b4de03, eac00098: hc= 535bab52, eac000a8: hc= 274cbf3f, eac000b8: hc= 1f9fd541, eac000c8: hc= 3669ae9f eac00038: hc= 772a3766, eac00048: hc= 749b46a8, eac00058: hc= 7e3bfb66, eac00068: hc= 13f62649, eac00078: hc= 054b8cdc, eac00088: hc= 230cc23b, eac00098: hc= 1aa3c177, eac000a8: hc= 74f2794a, eac000b8: hc= 5af92541, eac000c8: hc= 1afcfd10 eac00038: hc= 396e1dd8, eac00048: hc= 6c696d5c, eac00058: hc= 7d8aea9e, eac00068: hc= 2b316b76, eac00078: hc= 39862621, eac00088: hc= 16315e08, eac00098: hc= 03146a9a, eac000a8: hc= 3162a60a, eac000b8: hc= 4382f3da, eac000c8: hc= 4a578fd6 eac00038: hc= 225765b0, eac00048: hc= 17d5176d, eac00058: hc= 26f50154, eac00068: hc= 1f2a45c7, eac00078: hc= 104b1bcd, eac00088: hc= 330e3816, eac00098: hc= 6a844689, eac000a8: hc= 12330301, eac000b8: hc= 530a3ffc, eac000c8: hc= 45eee3fb eac00038: hc= 3f9432e0, eac00048: hc= 1a9830bc, eac00058: hc= 7da79447, eac00068: hc= 04f801c4, eac00078: hc= 363bed68, eac00088: hc= 185f62a9, eac00098: hc= 1e4651bf, eac000a8: hc= 1aa0e220, eac000b8: hc= 385db088, eac000c8: hc= 0ef0cda1 ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "cfe":1,
                  "aceb":1,
                  "abc":1,
                  "cceb":1,
                  "dee":1,
                  "cdc":1,
                  "cda":1,
                  "cbf":1,
                  "eee":1,
                  "eab":1,
                  "eca":1,
                  "bed":1,
                  "bae":1,
                  "eac":100,
                  "dbc":1,
                  "addef":1,
                  "daaa":1,
                  "ddfa":1,
                  "bcd":1,
                  "bfb":1,
                  "afcfd":1,
                  "bab":1,
                  "ffc":1,
                  "aea":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<hr />"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1817223689]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<hr />"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>As a side note; If you look at this code</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[-1908858467]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>As a side note; If you look at this code</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "note":1,
                  "side":1,
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"if (value == 0) value = 0xBAD ; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13860194]-[541930933]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"IfStatementNode",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"==",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"value",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"0"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"value",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0xBAD"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"if (value == 0) value = 0xBAD; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bad":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It appears that 0xBAD is twice as likely as normal as any hashCode as 0 is mapped to this value. If you run this long enough you see</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[-1695260142]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It appears that 0xBAD is twice as likely as normal as any hashCode as 0 is mapped to this value. If you run this long enough you see</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "map":1,
                  "normal":1,
                  "appear":1,
                  "run":1,
                  "bad":1,
                  "code":1,
                  "hash":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"long count = 0, countBAD = 0; while (true) { for (int i = 0; i &lt; 200000000; i++) { int hc = new Object().hashCode(); if (hc == 0xBAD) countBAD++; count++; } System.out.println(&quot;0xBAD ratio is &quot; + (double) (countBAD &lt;&lt; 32) / count + &quot; times expected.&quot;); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13860194]-[-804289410]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"long count = 0, "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"countBAD",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"0"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"WhileStatementNode",
                  "expression":{
                    "type":"LiteralNode",
                    "node":{
                      "type":"BooleanLiteralNode",
                      "valueRep":"true"
                    },
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ForLoopStatementNode",
                        "forControl":{
                          "type":"ForVarControlNode",
                          "variables":{
                            "type":"LocalVariableDeclarationStatementNode",
                            "modifiers":[
                              
                            ],
                            "declarators":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "condition":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"<",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"i",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"200000000"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "update":[
                            {
                              "type":"PostfixOperatorExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"++",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"LocalVariableDeclarationStatementNode",
                              "modifiers":[
                                
                              ],
                              "declarators":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"hc",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":".",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"ConstructorCreatorNode",
                                            "creatorType":{
                                              "type":"ReferenceTypeNode",
                                              "ids":[
                                                {
                                                  "type":"ParameterizedTypeNode",
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"Object",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "expressionArgs":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"MethodInvocationNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"hashCode",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "args":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IfStatementNode",
                              "expression":{
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"==",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"hc",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0xBAD"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "statement":{
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"PostfixOperatorExpressionNode",
                                  "argument":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"countBAD",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"++",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ExpressionStatement",
                              "expression":{
                                "type":"PostfixOperatorExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"count",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"++",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"out",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"println",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"+",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"+",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"0xBAD ratio is \""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"/",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"CastExpressionNode",
                                      "aType":{
                                        "type":"PrimitiveTypeNode",
                                        "name":"double",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "argument":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<<",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"countBAD",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"32"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"count",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\" times expected.\""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"long count = 0, countBAD = 0; while (true) { for (int i = 0; i < 200000000; i++) { int hc = new Object().hashCode(); if (hc == 0xBAD) countBAD++; count++; } System.out.println(\"0xBAD ratio is \"+ (double) (countBAD << 32) / count + \" times expected.\"); } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "count":6,
                  "system":1,
                  "bad":5,
                  "println":1,
                  "object":1,
                  "code":1,
                  "hash":1,
                  "ratio":1,
                  "expect":1,
                  "true":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"double",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"0xBAD ratio is \""
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"/",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"CastExpressionNode",
                                "aType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"double",
                                  "comments":[
                                    
                                  ]
                                },
                                "argument":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"<<",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"countBAD",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"32"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"count",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\" times expected.\""
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"i",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hc",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Object",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"hashCode",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>prints</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13860194]-[1561833329]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>prints</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "print":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"0xBAD ratio is 2.0183116992481205 times expected. "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13860194]-[-1437353944]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"0xBAD ratio is 2.0183116992481205 times expected. "
                }
              ]
            },
            "rawText":"0xBAD ratio is 2.0183116992481205 times expected. ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bad":1,
                  "time":1,
                  "expect":1,
                  "ratio":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":13860259,
      "questionId":13860194,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":19083728,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Objects are first created in the eden space, and everytime a minor/full GC is run the eden space is reused with the same addresses. If the hashCode used the memory address they would repeat a lot."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19083728]-[1125779426]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Objects are first created in the eden space, and everytime a minor/full GC is run the eden space is reused with the same addresses. If the hashCode used the memory address they would repeat a lot."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "run":1,
                        "full":1,
                        "everytim":1,
                        "object":1,
                        "code":1,
                        "eden":2,
                        "hash":1,
                        "space":2,
                        "lot":1,
                        "address":2,
                        "repeat":1,
                        "creat":1,
                        "minor":1,
                        "reus":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19083994,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":811918,
            "displayName":"Mathias Schwarz",
            "reputation":4876
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PeterLawrey: See my edit..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19083994]-[-830439181]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PeterLawrey: See my edit..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "edit":1,
                        "peter":1,
                        "lawrey":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084031,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":390695,
            "displayName":"Damian Leszczyński - Vash",
            "reputation":16375
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MathiasSchwarz, your edit is redundant to NPE answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19084031]-[-353498461]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MathiasSchwarz, your edit is redundant to NPE answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MathiasSchwarz",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mathia":1,
                        "npe":1,
                        "redund":1,
                        "edit":1,
                        "schwarz":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084070,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you comment on my edit showing it's not the address?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19084070]-[-1905541148]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you comment on my edit showing it's not the address?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "comment":1,
                        "address":1,
                        "edit":1,
                        "show":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084220,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":811918,
            "displayName":"Mathias Schwarz",
            "reputation":4876
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Whether it is the address depends on which of the 6 hashcode algorithms is chosen. Really, all that is needed is a way to generate integers that do not overlap too much and do it fast..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19084220]-[-1969732530]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Whether it is the address depends on which of the 6 hashcode algorithms is chosen. Really, all that is needed is a way to generate integers that do not overlap too much and do it fast..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "hashcod":1,
                        "depend":1,
                        "chosen":1,
                        "integ":1,
                        "need":1,
                        "algorithm":1,
                        "overlap":1,
                        "address":1,
                        "generat":1,
                        "fast":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084297,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":811918,
            "displayName":"Mathias Schwarz",
            "reputation":4876
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't really know why so many people are voting me down for my answer. I will leave this discussion now. I have better things to do than fighting over who found some random source code first..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19084297]-[-1646956785]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't really know why so many people are voting me down for my answer. I will leave this discussion now. I have better things to do than fighting over who found some random source code first..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "random":1,
                        "thing":1,
                        "leav":1,
                        "code":1,
                        "found":1,
                        "discuss":1,
                        "fight":1,
                        "answer":1,
                        "peopl":1,
                        "vote":1,
                        "sourc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084765,
          "postId":13860259,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":390695,
            "displayName":"Damian Leszczyński - Vash",
            "reputation":16375
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MathiasSchwarz, It is possible that they decided to upvote NPE answer and remove the vote thay have given to you. It is not about who found example first but how does it added a value to it. You just posted to code NPE pointed some thing out."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860259-cu19084765]-[198402708]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MathiasSchwarz, It is possible that they decided to upvote NPE answer and remove the vote thay have given to you. It is not about who found example first but how does it added a value to it. You just posted to code NPE pointed some thing out."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MathiasSchwarz",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mathia":1,
                        "decid":1,
                        "post":1,
                        "remov":1,
                        "point":1,
                        "npe":2,
                        "upvot":1,
                        "thing":1,
                        "code":1,
                        "found":1,
                        "schwarz":1,
                        "answer":1,
                        "ad":1,
                        "vote":1,
                        "thay":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-12-13",
      "lastActivityDate":"2012-12-13",
      "lastEditDate":"2012-12-13",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":811918,
        "displayName":"Mathias Schwarz",
        "reputation":4876
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It typically <strong>is</strong> the memory address of the object. However, the first time the <code>hashcode</code> method is called on an object, the integer is stored in the header of that object so that the next invocation will return the same value (as you say, compacting garbage collection can change the address). To my knowledge that is how it is implemented in the Oracle JVM.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860259]-[804987854]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It typically <strong>is</strong> the memory address of the object. However, the first time the <code>hashcode</code> method is called on an object, the integer is stored in the header of that object so that the next invocation will return the same value (as you say, compacting garbage collection can change the address). To my knowledge that is how it is implemented in the Oracle JVM.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "jvm":1,
                    "method":1,
                    "hashcod":1,
                    "knowledg":1,
                    "invoc":1,
                    "oracl":1,
                    "store":1,
                    "strong":2,
                    "object":3,
                    "code":2,
                    "typic":1,
                    "implement":1,
                    "address":2,
                    "header":1,
                    "collect":1,
                    "time":1,
                    "call":1,
                    "garbag":1,
                    "compact":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>EDIT: digging down into the JVM source code, this is what shows up (synchronizer.cpp):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860259]-[-2136518651]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>EDIT: digging down into the JVM source code, this is what shows up (synchronizer.cpp):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "show":1,
                    "cpp":1,
                    "code":1,
                    "edit":1,
                    "dig":1,
                    "sourc":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"// hashCode() generation : // // Possibilities: // * MD5Digest of {obj,stwRandom} // * CRC32 of {obj,stwRandom} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // HashCodeValue = ((uintptr_t(obj) &gt;&gt; 3) * 2654435761) ^ GVars.stwRandom ; // * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to &quot;diffuse&quot; the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) &gt;&gt; 3 ; value = addrBits ^ (addrBits &gt;&gt; 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self-&gt;_hashStateX ; t ^= (t &lt;&lt; 11) ; Self-&gt;_hashStateX = Self-&gt;_hashStateY ; Self-&gt;_hashStateY = Self-&gt;_hashStateZ ; Self-&gt;_hashStateZ = Self-&gt;_hashStateW ; unsigned v = Self-&gt;_hashStateW ; v = (v ^ (v &gt;&gt; 19)) ^ (t ^ (t &gt;&gt; 8)) ; Self-&gt;_hashStateW = v ; value = v ; } value &amp;= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, &quot;invariant&quot;) ; TEVENT (hashCode: GENERATE) ; return value; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[13860259]-[-2146052803]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"// "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"() generation : // // Possibilities: // * MD5Digest of {obj,"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"stwRandom",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} // * CRC32 of {obj,"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"stwRandom",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HashCodeValue",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"^",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"*",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":">>",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"uintptr_t",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"obj",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"3"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"2654435761"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"GVars",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"stwRandom",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to \"diffuse\" the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) >> 3 ; value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self->_hashStateX ; t ^= (t << 11) ; Self->_hashStateX = Self->_hashStateY ; Self->_hashStateY = Self->_hashStateZ ; Self->_hashStateZ = Self->_hashStateW ; unsigned v = Self->_hashStateW ; v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ; Self->_hashStateW = v ; value = v ; } value &= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, \"invariant\") ; TEVENT (hashCode: GENERATE) ; return value; } \n"
                        }
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"// hashCode() generation : // // Possibilities: // * MD5Digest of {obj,stwRandom} // * CRC32 of {obj,stwRandom} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // HashCodeValue = ((uintptr_t(obj) >> 3) * 2654435761) ^ GVars.stwRandom ; // * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to \"diffuse\" the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) >> 3 ; value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self->_hashStateX ; t ^= (t << 11) ; Self->_hashStateX = Self->_hashStateY ; Self->_hashStateY = Self->_hashStateZ ; Self->_hashStateZ = Self->_hashStateW ; unsigned v = Self->_hashStateW ; v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ; Self->_hashStateW = v ; value = v ; } value &= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, \"invariant\") ; TEVENT (hashCode: GENERATE) ; return value; } \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hashtabl":2,
                    "des":1,
                    "intptr":5,
                    "properti":1,
                    "test":1,
                    "ae":1,
                    "desc":2,
                    "random":6,
                    "variat":2,
                    "oop":3,
                    "bit":4,
                    "simpl":1,
                    "alloc":1,
                    "mask":1,
                    "reduc":1,
                    "middl":1,
                    "system":1,
                    "digest":1,
                    "state":10,
                    "marsaglia":2,
                    "style":1,
                    "stw":6,
                    "result":2,
                    "potenti":1,
                    "adjac":1,
                    "rng":3,
                    "stabl":1,
                    "shift":3,
                    "effici":1,
                    "miller":1,
                    "regist":1,
                    "bad":1,
                    "regular":1,
                    "obj":7,
                    "sensit":1,
                    "appeal":1,
                    "diffus":1,
                    "collis":1,
                    "way":1,
                    "unsign":2,
                    "possibl":1,
                    "object":2,
                    "base":1,
                    "code":10,
                    "oper":1,
                    "idempot":1,
                    "undesir":1,
                    "feedback":1,
                    "global":2,
                    "hash":22,
                    "thread":3,
                    "releas":1,
                    "ratio":1,
                    "futur":1,
                    "linear":1,
                    "tevent":1,
                    "sequenc":1,
                    "scheme":4,
                    "xor":2,
                    "race":1,
                    "function":1,
                    "specif":1,
                    "back":2,
                    "addr":3,
                    "park":1,
                    "valu":2,
                    "mechan":2,
                    "implement":1,
                    "crc":1,
                    "traffic":1,
                    "lot":2,
                    "address":1,
                    "generat":4,
                    "make":1,
                    "invari":1,
                    "phi":2,
                    "sbox":1,
                    "unguard":1,
                    "inlin":1,
                    "form":1,
                    "mark":2,
                    "gvar":3,
                    "coher":1,
                    "uintptr":1,
                    "golden":1,
                    "induc":1,
                    "access":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"uintptr_t",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"obj",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So 6 different ways to do it in the Oracle JVM, one of them is equivalent to what I said... The value is stored in the header of the object by the method calling <code>get_next_hash</code> (that one is called <code>FastHashCode</code> and is called from the native version of <code>Object.hashCode()</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860259]-[1684289763]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So 6 different ways to do it in the Oracle JVM, one of them is equivalent to what I said... The value is stored in the header of the object by the method calling <code>get_next_hash</code> (that one is called <code>FastHashCode</code> and is called from the native version of <code>Object.hashCode()</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"get_next_hash",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"FastHashCode",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "method":1,
                    "equival":1,
                    "oracl":1,
                    "store":1,
                    "way":1,
                    "object":2,
                    "code":8,
                    "version":1,
                    "hash":3,
                    "header":1,
                    "fast":1,
                    "call":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FastHashCode",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":13860488,
      "questionId":13860194,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":19083774,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":829571,
            "displayName":"assylias",
            "reputation":118960
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I was browsing the source but could not find it - what file is that in?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19083774]-[1726464120]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I was browsing the source but could not find it - what file is that in?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "file":1,
                        "brows":1,
                        "sourc":1,
                        "find":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19083783,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`hotspot/src/share/vm/runtime/synchronizer.hpp`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19083783]-[1110154832]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`hotspot/src/share/vm/runtime/synchronizer.hpp`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "runtim":1,
                        "hpp":1,
                        "hotspot":1,
                        "share":1,
                        "src":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19083814,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":829571,
            "displayName":"assylias",
            "reputation":118960
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks - for the record, link to openjdk7: http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/share/vm/runtime/synchronizer.cpp - it does not seem to have changed much..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19083814]-[-447385154]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks - for the record, link to openjdk7: http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/9b0ca45cd756/src/share/vm/runtime/synchronizer.cpp - it does not seem to have changed much..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "openjdk":2,
                        "chang":1,
                        "runtim":1,
                        "cpp":1,
                        "net":1,
                        "hotspot":1,
                        "share":1,
                        "link":1,
                        "src":1,
                        "file":1,
                        "http":1,
                        "jdk":2,
                        "record":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19083821,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Any idea which one it uses, or how you might change it?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19083821]-[-54262120]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Any idea which one it uses, or how you might change it?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "idea":1,
                        "chang":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19083921,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PeterLawrey: It looks like `hashCode` is a runtime flags (not yet sure how to set it). The default *seems* to be 0."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19083921]-[694551709]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PeterLawrey: It looks like `hashCode` is a runtime flags (not yet sure how to set it). The default *seems* to be 0."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "runtim":1,
                        "peter":1,
                        "set":1,
                        "code":1,
                        "hash":1,
                        "flag":1,
                        "lawrey":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19084230,
          "postId":13860488,
          "creationDate":"2012-12-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Would the downvoters care to explain?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13860488-cu19084230]-[493126903]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Would the downvoters care to explain?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "care":1,
                        "explain":1,
                        "downvot":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-12-13",
      "lastActivityDate":"2012-12-13",
      "lastEditDate":"2012-12-13",
      "score":17,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":367273,
        "displayName":"NPE",
        "reputation":198024
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is clearly implementation-specific.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[-1152978810]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is clearly implementation-specific.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "specif":1,
                    "implement":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Below I include the <code>Object.hashCode()</code> implementation used in OpenJDK 7.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[60401238]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Below I include the <code>Object.hashCode()</code> implementation used in OpenJDK 7.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "open":1,
                    "object":1,
                    "includ":1,
                    "code":3,
                    "hash":1,
                    "implement":1,
                    "jdk":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The function supports six different calculation methods, only two of which take any notice of the object's address (the &quot;address&quot; being the C++ <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop\"><code>oop</code></a> cast to <code>intptr_t</code>). One of the two methods uses the address as-is, whereas the other does some bit twiddling and then mashes the result with an infrequently-updated random number.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[-32053885]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The function supports six different calculation methods, only two of which take any notice of the object's address (the &quot;address&quot; being the C++ <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html#compressedOop\"><code>oop</code></a> cast to <code>intptr_t</code>). One of the two methods uses the address as-is, whereas the other does some bit twiddling and then mashes the result with an infrequently-updated random number.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"intptr_t",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "intptr":1,
                    "support":1,
                    "method":2,
                    "random":1,
                    "infrequ":1,
                    "oop":2,
                    "bit":1,
                    "guid":1,
                    "result":1,
                    "updat":1,
                    "oracl":1,
                    "calcul":1,
                    "doc":2,
                    "object":1,
                    "technot":1,
                    "code":4,
                    "cast":1,
                    "enhanc":1,
                    "function":1,
                    "compress":1,
                    "perform":1,
                    "mash":1,
                    "javas":1,
                    "address":3,
                    "quot":2,
                    "notic":1,
                    "twiddl":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Of the remaining methods, one returns a constant (presumably for testing), one returns sequential numbers, and the rest are based on pseudo-random sequences.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[724524017]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Of the remaining methods, one returns a constant (presumably for testing), one returns sequential numbers, and the rest are based on pseudo-random sequences.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":1,
                    "number":1,
                    "method":1,
                    "test":1,
                    "random":1,
                    "return":2,
                    "rest":1,
                    "sequenti":1,
                    "base":1,
                    "remain":1,
                    "sequenc":1,
                    "pseudo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It would appear that the method can be chosen at runtime, and the default seems to be method 0, which is <code>os::random()</code>. The latter is a <a href=\"http://en.wikipedia.org/wiki/Linear_congruential_generator\">linear congruential generator</a>, with an alleged race condition thrown in. :-) The race condition is acceptable because at worst it would result in two objects sharing the same hash code; this does not break any invariants.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[1048410619]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It would appear that the method can be chosen at runtime, and the default seems to be method 0, which is <code>os::random()</code>. The latter is a <a href=\"http://en.wikipedia.org/wiki/Linear_congruential_generator\">linear congruential generator</a>, with an alleged race condition thrown in. :-) The race condition is acceptable because at worst it would result in two objects sharing the same hash code; this does not break any invariants.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "random":1,
                    "runtim":1,
                    "accept":1,
                    "worst":1,
                    "condit":2,
                    "result":1,
                    "thrown":1,
                    "object":1,
                    "chosen":1,
                    "code":3,
                    "share":1,
                    "hash":1,
                    "wikipedia":1,
                    "linear":2,
                    "race":2,
                    "generat":2,
                    "invari":1,
                    "wiki":1,
                    "org":1,
                    "href":1,
                    "congruenti":2,
                    "http":1,
                    "alleg":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The computation is performed the first time a hash code is required. To maintain consistency, the result is then stored in the object's header and is returned on subsequent calls to <code>hashCode()</code>. The caching is done outside this function.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[-1528688446]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The computation is performed the first time a hash code is required. To maintain consistency, the result is then stored in the object's header and is returned on subsequent calls to <code>hashCode()</code>. The caching is done outside this function.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cach":1,
                    "subsequ":1,
                    "return":1,
                    "requir":1,
                    "result":1,
                    "store":1,
                    "object":1,
                    "code":4,
                    "hash":2,
                    "consist":1,
                    "comput":1,
                    "function":1,
                    "perform":1,
                    "header":1,
                    "time":1,
                    "call":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>In summary, the notion that <code>Object.hashCode()</code> is based on the object's address is largely a historic artefact that has been obsoleted by the properties of modern garbage collectors.</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860488]-[592767520]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>In summary, the notion that <code>Object.hashCode()</code> is based on the object's address is largely a historic artefact that has been obsoleted by the properties of modern garbage collectors.</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "collector":1,
                    "notion":1,
                    "obsolet":1,
                    "histor":1,
                    "summari":1,
                    "artefact":1,
                    "strong":2,
                    "object":2,
                    "base":1,
                    "code":3,
                    "modern":1,
                    "hash":1,
                    "larg":1,
                    "address":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"// hotspot/src/share/vm/runtime/synchronizer.hpp // hashCode() generation : // // Possibilities: // * MD5Digest of {obj,stwRandom} // * CRC32 of {obj,stwRandom} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // HashCodeValue = ((uintptr_t(obj) &gt;&gt; 3) * 2654435761) ^ GVars.stwRandom ; // * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to &quot;diffuse&quot; the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) &gt;&gt; 3 ; value = addrBits ^ (addrBits &gt;&gt; 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self-&gt;_hashStateX ; t ^= (t &lt;&lt; 11) ; Self-&gt;_hashStateX = Self-&gt;_hashStateY ; Self-&gt;_hashStateY = Self-&gt;_hashStateZ ; Self-&gt;_hashStateZ = Self-&gt;_hashStateW ; unsigned v = Self-&gt;_hashStateW ; v = (v ^ (v &gt;&gt; 19)) ^ (t ^ (t &gt;&gt; 8)) ; Self-&gt;_hashStateW = v ; value = v ; } value &amp;= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, &quot;invariant&quot;) ; TEVENT (hashCode: GENERATE) ; return value; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[13860488]-[1412981037]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"// hotspot/src/share/vm/runtime/synchronizer.hpp // "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"() generation : // // Possibilities: // * MD5Digest of {obj,"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"stwRandom",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} // * CRC32 of {obj,"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"stwRandom",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HashCodeValue",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"^",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"*",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":">>",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"uintptr_t",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"obj",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"3"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"2654435761"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"GVars",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"stwRandom",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to \"diffuse\" the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) >> 3 ; value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self->_hashStateX ; t ^= (t << 11) ; Self->_hashStateX = Self->_hashStateY ; Self->_hashStateY = Self->_hashStateZ ; Self->_hashStateZ = Self->_hashStateW ; unsigned v = Self->_hashStateW ; v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ; Self->_hashStateW = v ; value = v ; } value &= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, \"invariant\") ; TEVENT (hashCode: GENERATE) ; return value; } \n"
                        }
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"// hotspot/src/share/vm/runtime/synchronizer.hpp // hashCode() generation : // // Possibilities: // * MD5Digest of {obj,stwRandom} // * CRC32 of {obj,stwRandom} or any linear-feedback shift register function. // * A DES- or AES-style SBox[] mechanism // * One of the Phi-based schemes, such as: // 2654435761 = 2^32 * Phi (golden ratio) // HashCodeValue = ((uintptr_t(obj) >> 3) * 2654435761) ^ GVars.stwRandom ; // * A variation of Marsaglia's shift-xor RNG scheme. // * (obj ^ stwRandom) is appealing, but can result // in undesirable regularity in the hashCode values of adjacent objects // (objects allocated back-to-back, in particular). This could potentially // result in hashtable collisions and reduced hashtable efficiency. // There are simple ways to \"diffuse\" the middle address bits over the // generated hashCode values: // static inline intptr_t get_next_hash(Thread * Self, oop obj) { intptr_t value = 0 ; if (hashCode == 0) { // This form uses an unguarded global Park-Miller RNG, // so it's possible for two threads to race and generate the same RNG. // On MP system we'll have lots of RW access to a global, so the // mechanism induces lots of coherency traffic. value = os::random() ; } else if (hashCode == 1) { // This variation has the property of being stable (idempotent) // between STW operations. This can be useful in some of the 1-0 // synchronization schemes. intptr_t addrBits = intptr_t(obj) >> 3 ; value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ; } else if (hashCode == 2) { value = 1 ; // for sensitivity testing } else if (hashCode == 3) { value = ++GVars.hcSequence ; } else if (hashCode == 4) { value = intptr_t(obj) ; } else { // Marsaglia's xor-shift scheme with thread-specific state // This is probably the best overall implementation -- we'll // likely make this the default in future releases. unsigned t = Self->_hashStateX ; t ^= (t << 11) ; Self->_hashStateX = Self->_hashStateY ; Self->_hashStateY = Self->_hashStateZ ; Self->_hashStateZ = Self->_hashStateW ; unsigned v = Self->_hashStateW ; v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ; Self->_hashStateW = v ; value = v ; } value &= markOopDesc::hash_mask; if (value == 0) value = 0xBAD ; assert (value != markOopDesc::no_hash, \"invariant\") ; TEVENT (hashCode: GENERATE) ; return value; } \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hashtabl":2,
                    "des":1,
                    "intptr":5,
                    "properti":1,
                    "test":1,
                    "ae":1,
                    "desc":2,
                    "random":6,
                    "variat":2,
                    "oop":3,
                    "runtim":1,
                    "bit":4,
                    "simpl":1,
                    "alloc":1,
                    "mask":1,
                    "reduc":1,
                    "middl":1,
                    "system":1,
                    "digest":1,
                    "state":10,
                    "marsaglia":2,
                    "style":1,
                    "stw":6,
                    "result":2,
                    "potenti":1,
                    "adjac":1,
                    "rng":3,
                    "stabl":1,
                    "shift":3,
                    "effici":1,
                    "miller":1,
                    "regist":1,
                    "bad":1,
                    "regular":1,
                    "obj":7,
                    "sensit":1,
                    "appeal":1,
                    "diffus":1,
                    "collis":1,
                    "hpp":1,
                    "way":1,
                    "unsign":2,
                    "possibl":1,
                    "hotspot":1,
                    "object":2,
                    "base":1,
                    "code":10,
                    "oper":1,
                    "share":1,
                    "idempot":1,
                    "undesir":1,
                    "feedback":1,
                    "global":2,
                    "hash":22,
                    "thread":3,
                    "releas":1,
                    "ratio":1,
                    "futur":1,
                    "linear":1,
                    "tevent":1,
                    "sequenc":1,
                    "scheme":4,
                    "xor":2,
                    "race":1,
                    "function":1,
                    "specif":1,
                    "back":2,
                    "src":1,
                    "addr":3,
                    "park":1,
                    "valu":2,
                    "mechan":2,
                    "implement":1,
                    "crc":1,
                    "traffic":1,
                    "lot":2,
                    "address":1,
                    "generat":4,
                    "make":1,
                    "invari":1,
                    "phi":2,
                    "sbox":1,
                    "unguard":1,
                    "inlin":1,
                    "form":1,
                    "mark":2,
                    "gvar":3,
                    "coher":1,
                    "uintptr":1,
                    "golden":1,
                    "induc":1,
                    "access":1,
                    "synchron":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"uintptr_t",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"obj",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":13860644,
      "questionId":13860194,
      "comments":[
        
      ],
      "creationDate":"2012-12-13",
      "lastActivityDate":"2012-12-13",
      "lastEditDate":"2012-12-13",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1858466,
        "displayName":"Subhash Bhushan",
        "reputation":604
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>IMHO, although implementation dependent, Object references in JVM are never actual memory addresses, but internal JVM references that point to actual addresses. These internal references ARE generated initially based on memory address, but they remain associated with the object until it is discarded.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860644]-[395131132]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>IMHO, although implementation dependent, Object references in JVM are never actual memory addresses, but internal JVM references that point to actual addresses. These internal references ARE generated initially based on memory address, but they remain associated with the object until it is discarded.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "point":1,
                    "depend":1,
                    "discard":1,
                    "object":2,
                    "base":1,
                    "imho":1,
                    "remain":1,
                    "refer":3,
                    "implement":1,
                    "address":3,
                    "generat":1,
                    "initi":1,
                    "actual":2,
                    "intern":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I say this because Java HotSpot GCs are copying collectors of some form or the other, and they work by traversing <code>live objects</code> and copying them from one heap to the other, destroying the <code>old heap</code> subsequently. So when GC occurs, the JVM does not have to update the references in all objects, but just change the actual memory address mapped to the internal reference.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13860644]-[1393981733]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I say this because Java HotSpot GCs are copying collectors of some form or the other, and they work by traversing <code>live objects</code> and copying them from one heap to the other, destroying the <code>old heap</code> subsequently. So when GC occurs, the JVM does not have to update the references in all objects, but just change the actual memory address mapped to the internal reference.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "jvm":1,
                    "collector":1,
                    "gcs":1,
                    "subsequ":1,
                    "map":1,
                    "occur":1,
                    "updat":1,
                    "travers":1,
                    "work":1,
                    "object":2,
                    "code":4,
                    "destroy":1,
                    "live":1,
                    "refer":2,
                    "spot":1,
                    "address":1,
                    "hot":1,
                    "heap":2,
                    "form":1,
                    "actual":1,
                    "intern":1,
                    "copi":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":13863360,
      "questionId":13860194,
      "comments":[
        
      ],
      "creationDate":"2012-12-13",
      "lastActivityDate":"2012-12-13",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":352131,
        "displayName":"Durandal",
        "reputation":10490
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Javadoc's suggestion for Object.hashCode() that it is implemented by deriving the hashcode from the memory address is simply outdated.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13863360]-[-1286352735]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Javadoc's suggestion for Object.hashCode() that it is implemented by deriving the hashcode from the memory address is simply outdated.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hashcod":1,
                    "deriv":1,
                    "suggest":1,
                    "object":1,
                    "code":1,
                    "hash":1,
                    "simpli":1,
                    "implement":1,
                    "address":1,
                    "outdat":1,
                    "javadoc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Probably nobody bothered (or noticed) that this implementation path is no longer possible whith a copying garbage collector (Since it would <em>change</em> the hashcode when the Object is copied to another memory location).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13863360]-[-1678219609]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Probably nobody bothered (or noticed) that this implementation path is no longer possible whith a copying garbage collector (Since it would <em>change</em> the hashcode when the Object is copied to another memory location).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "hashcod":1,
                    "collector":1,
                    "path":1,
                    "whith":1,
                    "bother":1,
                    "object":1,
                    "implement":1,
                    "notic":1,
                    "longer":1,
                    "copi":2,
                    "garbag":1,
                    "locat":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It made a lot of sense to implement hashcode that way <em>before</em> there was a copying garbage collector, because it would save heap space. A non-copying GC (CMS) may still implement hashcode that way today.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13863360]-[-1243707349]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It made a lot of sense to implement hashcode that way <em>before</em> there was a copying garbage collector, because it would save heap space. A non-copying GC (CMS) may still implement hashcode that way today.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "hashcod":2,
                    "collector":1,
                    "space":1,
                    "implement":2,
                    "lot":1,
                    "cms":1,
                    "heap":1,
                    "save":1,
                    "made":1,
                    "copi":2,
                    "garbag":1,
                    "today":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}