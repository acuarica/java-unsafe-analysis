{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":21702939,
    "title":"Why the bounds check doesn't get eliminated?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":32818864,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: Benchmark Mode Samples Mean Mean error Units o.o.j.s.JmhBoundsCheckBenchmark.maskedIndex avgt 20 1148.463 2.447 ns/op o.o.j.s.JmhBoundsCheckBenchmark.normalIndex avgt 20 1008.069 9.905 ns/op - I just renamed and run you benchmark and it confirms my results."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32818864]-[1105398090]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: Benchmark Mode Samples Mean Mean error Units o.o.j.s.JmhBoundsCheckBenchmark.maskedIndex avgt 20 1148.463 2.447 ns/op o.o.j.s.JmhBoundsCheckBenchmark.normalIndex avgt 20 1008.069 9.905 ns/op - I just renamed and run you benchmark and it confirms my results."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"o",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"o",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"j",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"s",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"JmhBoundsCheckBenchmark",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"maskedIndex",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"o",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"o",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"j",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"s",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"JmhBoundsCheckBenchmark",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"normalIndex",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "avgt":2,
                      "mask":1,
                      "sampl":1,
                      "normal":1,
                      "run":1,
                      "result":1,
                      "renam":1,
                      "jmh":2,
                      "bound":2,
                      "marko":1,
                      "check":2,
                      "error":1,
                      "confirm":1,
                      "topolnik":1,
                      "mode":1,
                      "unit":1,
                      "index":2,
                      "benchmark":4
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32818961,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"So we can conclude that the difference is down to a) JVM version/platform, b) difference in CPUs. Anyway, I wouldn't go much further chasing this, given that the difference is small to begin with, and unstable across configurations."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32818961]-[-966907416]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"So we can conclude that the difference is down to a) JVM version/platform, b) difference in CPUs. Anyway, I wouldn't go much further chasing this, given that the difference is small to begin with, and unstable across configurations."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "begin":1,
                      "unstabl":1,
                      "differ":3,
                      "configur":1,
                      "small":1,
                      "version":1,
                      "chase":1,
                      "conclud":1,
                      "wouldn":1,
                      "cpus":1,
                      "platform":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32819260,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":213376,
          "displayName":"SnakE",
          "reputation":788
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Have you tried `x % (table.length-1)` instead of `x &amp; (table.length-1)`? Maybe the compiler is not smart enough to figure out bounds of bitwise and at compile time."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32819260]-[193157271]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Have you tried `x % (table.length-1)` instead of `x &amp; (table.length-1)`? Maybe the compiler is not smart enough to figure out bounds of bitwise and at compile time."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "smart":1,
                      "amp":1,
                      "tabl":2,
                      "bound":1,
                      "figur":1,
                      "length":2,
                      "compil":2,
                      "time":1,
                      "bitwis":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32819441,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: Yes, once 10% faster and once 10% slower, this sounds rather boring. I guess I should update my Java first."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32819441]-[1054867183]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: Yes, once 10% faster and once 10% slower, this sounds rather boring. I guess I should update my Java first."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "faster":1,
                      "updat":1,
                      "marko":1,
                      "slower":1,
                      "sound":1,
                      "bore":1,
                      "topolnik":1,
                      "guess":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32819490,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@SnakE: No, but with `%` you have no guarantee to get a valid index as it stays negative for negative `x`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32819490]-[1359395607]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@SnakE: No, but with `%` you have no guarantee to get a valid index as it stays negative for negative `x`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"SnakE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "negat":2,
                      "guarante":1,
                      "snak":1,
                      "valid":1,
                      "stay":1,
                      "index":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32828110,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2016408,
          "displayName":"Leeor",
          "reputation":8021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Totaly agree with the `%` suggestion - did you guarantee that the array length is a power of 2? otherwise you `&amp;` doesn't make much sense, and definitely isn't enough to make your accesses sequential."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32828110]-[1919995510]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Totaly agree with the `%` suggestion - did you guarantee that the array length is a power of 2? otherwise you `&amp;` doesn't make much sense, and definitely isn't enough to make your accesses sequential."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "suggest":1,
                      "sequenti":1,
                      "amp":1,
                      "array":1,
                      "guarante":1,
                      "isn":1,
                      "make":2,
                      "agre":1,
                      "length":1,
                      "power":1,
                      "totali":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32828548,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Leeor: I totally disagree with `%`. It's such a slow operation that hardly anybody uses it for hash tables. In order to ensure a valid index, you'd need to add some branching and this would make the pattern hard for the compiler to recognize. Concerning `&amp;` I need a power of two for it to *make sense*, but I don't need it for the *index to be valid* (the only thing I need is a non-empty array)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32828548]-[316676441]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Leeor: I totally disagree with `%`. It's such a slow operation that hardly anybody uses it for hash tables. In order to ensure a valid index, you'd need to add some branching and this would make the pattern hard for the compiler to recognize. Concerning `&amp;` I need a power of two for it to *make sense*, but I don't need it for the *index to be valid* (the only thing I need is a non-empty array)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Leeor",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "slow":1,
                      "hard":1,
                      "pattern":1,
                      "leeor":1,
                      "branch":1,
                      "thing":1,
                      "total":1,
                      "amp":1,
                      "oper":1,
                      "tabl":1,
                      "array":1,
                      "hash":1,
                      "recogn":1,
                      "order":1,
                      "empti":1,
                      "valid":2,
                      "make":2,
                      "compil":1,
                      "power":1,
                      "disagre":1,
                      "add":1,
                      "index":2,
                      "ensur":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32823788,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You would have to dump the JITC-generated code to see. And even a given JITC may give different results depending on subtle differences."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32823788]-[1168500801]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You would have to dump the JITC-generated code to see. And even a given JITC may give different results depending on subtle differences."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "depend":1,
                      "jitc":2,
                      "subtl":1,
                      "differ":1,
                      "result":1,
                      "dump":1,
                      "code":1,
                      "give":1,
                      "generat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32828825,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":648955,
          "displayName":"leventov",
          "reputation":3060
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@maaartinus &quot; hardly anybody uses `%` it for hash tables&quot; -- Trove does, I [do](https://github.com/OpenHFT/UntitledCollectionsProject)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32828825]-[382796817]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@maaartinus &quot; hardly anybody uses `%` it for hash tables&quot; -- Trove does, I [do](https://github.com/OpenHFT/UntitledCollectionsProject)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"UntitledCollectionsProject",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "maaartinus":1,
                      "github":1,
                      "project":1,
                      "https":1,
                      "open":1,
                      "hft":1,
                      "tabl":1,
                      "trove":1,
                      "hash":1,
                      "quot":2,
                      "collect":1,
                      "untitl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"UntitledCollectionsProject",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32844461,
        "postId":21702939,
        "creationDate":"2014-02-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2016408,
          "displayName":"Leeor",
          "reputation":8021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Agreed, I didn't know if that's a drilled down example"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32844461]-[-664804433]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Agreed, I didn't know if that's a drilled down example"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "drill":1,
                      "agre":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32813824,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Was this famous serial performance question downvoter or someone willing to drop a note?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32813824]-[1345723257]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Was this famous serial performance question downvoter or someone willing to drop a note?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "question":1,
                      "drop":1,
                      "note":1,
                      "famous":1,
                      "downvot":1,
                      "perform":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32813982,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I see a possible reason: `table[i]` results in a sequential access pattern, whereas with `table[j]` it's more irregular. Just one or two cache misses could be enough to account for 15% difference."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32813982]-[-1723410632]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I see a possible reason: `table[i]` results in a sequential access pattern, whereas with `table[j]` it's more irregular. Just one or two cache misses could be enough to account for 15% difference."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":1,
                      "pattern":1,
                      "differ":1,
                      "result":1,
                      "sequenti":1,
                      "reason":1,
                      "miss":1,
                      "tabl":2,
                      "account":1,
                      "irregular":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32829145,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2016408,
          "displayName":"Leeor",
          "reputation":8021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@maaartinus, I didn't mean he should use it in the optimized version, just for debugging, to make sure the reason is not doing `&amp;` with some length like `100000`"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32829145]-[1143083525]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@maaartinus, I didn't mean he should use it in the optimized version, just for debugging, to make sure the reason is not doing `&amp;` with some length like `100000`"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "maaartinus":1,
                      "amp":1,
                      "reason":1,
                      "debug":1,
                      "version":1,
                      "optim":1,
                      "make":1,
                      "length":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32814088,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: I forgot to mention that the whole table surely fits in L1 (1024 entries only)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32814088]-[1460521216]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: I forgot to mention that the whole table surely fits in L1 (1024 entries only)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sure":1,
                      "fit":1,
                      "tabl":1,
                      "entri":1,
                      "mention":1,
                      "marko":1,
                      "forgot":1,
                      "topolnik":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32814148,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"There may be other low-level optimizations for sequential access, like fetching the next value before the pipeline reaches the stage where the actual index is known."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32814148]-[-868546168]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"There may be other low-level optimizations for sequential access, like fetching the next value before the pipeline reaches the stage where the actual index is known."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "reach":1,
                      "stage":1,
                      "pipelin":1,
                      "sequenti":1,
                      "optim":1,
                      "low":1,
                      "fetch":1,
                      "actual":1,
                      "index":1,
                      "access":1,
                      "level":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32814265,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You have confirmed the elimination of the bounds check?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32814265]-[-1614401204]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You have confirmed the elimination of the bounds check?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "bound":1,
                      "confirm":1,
                      "elimin":1,
                      "check":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32814351,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1466267,
          "displayName":"SpaceTrucker",
          "reputation":3494
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"How can you be sure the bounds check doesn't get eliminated when you don't compute the index with `&amp; table.length - 1`?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32814351]-[-1940539208]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"How can you be sure the bounds check doesn't get eliminated when you don't compute the index with `&amp; table.length - 1`?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "amp":1,
                      "tabl":1,
                      "bound":1,
                      "comput":1,
                      "check":1,
                      "elimin":1,
                      "length":1,
                      "index":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32814679,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: &quot;fetching the next value before the pipeline reaches&quot; - sounds interesting. &quot;confirmed the elimination&quot; - sort of... the output of `PrintAssembly` is pretty unreadable, but I can see `cmp %r13d,%edx, jae ...` present in `timeMasked` only."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32814679]-[351123401]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: &quot;fetching the next value before the pipeline reaches&quot; - sounds interesting. &quot;confirmed the elimination&quot; - sort of... the output of `PrintAssembly` is pretty unreadable, but I can see `cmp %r13d,%edx, jae ...` present in `timeMasked` only."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PrintAssembly",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"timeMasked",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jae":1,
                      "unread":1,
                      "reach":1,
                      "assembl":1,
                      "cmp":1,
                      "edx":1,
                      "mask":1,
                      "print":1,
                      "present":1,
                      "pipelin":1,
                      "pretti":1,
                      "marko":1,
                      "interest":1,
                      "sound":1,
                      "confirm":1,
                      "topolnik":1,
                      "fetch":1,
                      "elimin":1,
                      "quot":4,
                      "time":1,
                      "output":1,
                      "sort":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"PrintAssembly",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32825282,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: Didn't you confuse `ns/op` with `ops/ns` as I usually do? This is about the only explanation I can think of for bounds-checking code being faster. If not, would you mind to try my third experiment pair (a simplified version with `i==j`, just don't tell it the JVM :D)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32825282]-[-1699924417]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: Didn't you confuse `ns/op` with `ops/ns` as I usually do? This is about the only explanation I can think of for bounds-checking code being faster. If not, would you mind to try my third experiment pair (a simplified version with `i==j`, just don't tell it the JVM :D)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "faster":1,
                      "simplifi":1,
                      "experi":1,
                      "code":1,
                      "version":1,
                      "explan":1,
                      "bound":1,
                      "marko":1,
                      "mind":1,
                      "check":1,
                      "topolnik":1,
                      "confus":1,
                      "pair":1,
                      "op":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32815341,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Apart from the eliminated bounds check, I see more radical optimization in the &quot;normal index&quot; case. The loop is unrolled in both casses, but in the normal case it is also staged: first the values are bulk-loaded into various registers, then the registers are xor-ed into the accumulator."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32815341]-[-1265609919]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Apart from the eliminated bounds check, I see more radical optimization in the &quot;normal index&quot; case. The loop is unrolled in both casses, but in the normal case it is also staged: first the values are bulk-loaded into various registers, then the registers are xor-ed into the accumulator."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "stage":1,
                      "loop":1,
                      "bulk":1,
                      "normal":2,
                      "regist":2,
                      "load":1,
                      "cass":1,
                      "unrol":1,
                      "optim":1,
                      "accumul":1,
                      "bound":1,
                      "check":1,
                      "xor":1,
                      "valu":1,
                      "elimin":1,
                      "quot":2,
                      "radic":1,
                      "index":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32815546,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"BTW The option `-XX:CompileCommand=print,*Benchmark.time*`, apart from filtering out everything you're not interested in, gives a nicer printout (doesn't show placeholders for actual register names, for one)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32815546]-[684238233]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"BTW The option `-XX:CompileCommand=print,*Benchmark.time*`, apart from filtering out everything you're not interested in, gives a nicer printout (doesn't show placeholders for actual register names, for one)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"CompileCommand",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "name":1,
                      "nicer":1,
                      "show":1,
                      "btw":1,
                      "print":1,
                      "printout":1,
                      "option":1,
                      "regist":1,
                      "command":1,
                      "filter":1,
                      "interest":1,
                      "compil":1,
                      "placehold":1,
                      "time":1,
                      "actual":1,
                      "benchmark":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"CompileCommand",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32825882,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Definitely didn't confuse them. http://pastebin.com/NcC0JbwK and the results: `time3Masked 805.872 ns/op; time3Normal 945.730 ns/op`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32825882]-[-1967907569]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Definitely didn't confuse them. http://pastebin.com/NcC0JbwK and the results: `time3Masked 805.872 ns/op; time3Normal 945.730 ns/op`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"time3Masked",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ExpressionStatement",
                      "expression":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"/",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"ns",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"op",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"time3Normal",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "mask":1,
                      "normal":1,
                      "result":1,
                      "confus":1,
                      "time":2,
                      "pastebin":1,
                      "http":1,
                      "jbw":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32815895,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"To my surprise, I actually get better speed for the *masked* case! I see an 8% advantage on it (measuring for 10 seconds after 5 seconds warmup)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32815895]-[-78590313]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"To my surprise, I actually get better speed for the *masked* case! I see an 8% advantage on it (measuring for 10 seconds after 5 seconds warmup)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "warmup":1,
                      "mask":1,
                      "surpris":1,
                      "measur":1,
                      "second":2,
                      "advantag":1,
                      "speed":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32831658,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@leventov: I hope you know what you're doing. And so do the Trove guys, but this may have historical reasons. Just note that I don't know about any use of it in Guava and AFAIK the only use in JDK is in `String.intern`. Division is dead slow with tens of cycles while you can do up to four simple instructions in a single cycle."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32831658]-[595278181]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@leventov: I hope you know what you're doing. And so do the Trove guys, but this may have historical reasons. Just note that I don't know about any use of it in Guava and AFAIK the only use in JDK is in `String.intern`. Division is dead slow with tens of cycles while you can do up to four simple instructions in a single cycle."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "guy":1,
                      "slow":1,
                      "simpl":1,
                      "histor":1,
                      "dead":1,
                      "afaik":1,
                      "reason":1,
                      "trove":1,
                      "divis":1,
                      "hope":1,
                      "note":1,
                      "leventov":1,
                      "ten":1,
                      "cycl":2,
                      "intern":1,
                      "guava":1,
                      "jdk":1,
                      "instruct":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32831735,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@leventov: See e.g. the [`WhitespaceMatcherBenchmark`](http://code.google.com/p/guava-libraries/source/browse/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java) and its [results](https://microbenchmarks.appspot.com/runs/8a7f91d8-408b-4619-ae06-9091bb86f01e) for how costly division is."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32831735]-[327264570]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@leventov: See e.g. the [`WhitespaceMatcherBenchmark`](http://code.google.com/p/guava-libraries/source/browse/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java) and its [results](https://microbenchmarks.appspot.com/runs/8a7f91d8-408b-4619-ae06-9091bb86f01e) for how costly division is."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"WhitespaceMatcherBenchmark",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "whitespac":2,
                      "test":1,
                      "googl":2,
                      "microbenchmark":1,
                      "run":1,
                      "result":1,
                      "librari":1,
                      "https":1,
                      "brows":1,
                      "base":1,
                      "code":1,
                      "matcher":2,
                      "common":1,
                      "cost":1,
                      "divis":1,
                      "leventov":1,
                      "appspot":1,
                      "http":1,
                      "sourc":1,
                      "guava":2,
                      "benchmark":3
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"WhitespaceMatcherBenchmark",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32831837,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Leeor: In my benchmark linked above the length is fixed, so nothing can go wrong. And as I said, with length being no power of two, the results must stay the same (for a length like 100000, they'd change due to cache misses)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32831837]-[1560377714]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Leeor: In my benchmark linked above the length is fixed, so nothing can go wrong. And as I said, with length being no power of two, the results must stay the same (for a length like 100000, they'd change due to cache misses)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Leeor",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "chang":1,
                      "due":1,
                      "cach":1,
                      "wrong":1,
                      "result":1,
                      "leeor":1,
                      "fix":1,
                      "miss":1,
                      "link":1,
                      "stay":1,
                      "length":3,
                      "power":1,
                      "benchmark":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32837254,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2016408,
          "displayName":"Leeor",
          "reputation":8021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"They won't perform the same (except maybe if they fit in the L1 cache), because the HW prefetchers can handle sequential streams. If your array size is 1111, your `&amp;` operation would get a complicated mask with some zeros masking off parts of your dataset, so you'll get both an irregular stream, and a subset of your entire dataset"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32837254]-[1358479869]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"They won't perform the same (except maybe if they fit in the L1 cache), because the HW prefetchers can handle sequential streams. If your array size is 1111, your `&amp;` operation would get a complicated mask with some zeros masking off parts of your dataset, so you'll get both an irregular stream, and a subset of your entire dataset"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":1,
                      "mask":2,
                      "size":1,
                      "prefetch":1,
                      "zero":1,
                      "complic":1,
                      "fit":1,
                      "sequenti":1,
                      "entir":1,
                      "amp":1,
                      "oper":1,
                      "array":1,
                      "subset":1,
                      "stream":2,
                      "perform":1,
                      "dataset":2,
                      "part":1,
                      "irregular":1,
                      "handl":1,
                      "won":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32817009,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":27391,
          "displayName":"ochedru",
          "reputation":129
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This [link](https://wikis.oracle.com/display/HotSpotInternals/RangeCheckElimination) tends to suggest the check is eliminated by HotSpot only when &quot;the array is indexed by linear functions of the index variable&quot;."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32817009]-[-1758299282]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This [link](https://wikis.oracle.com/display/HotSpotInternals/RangeCheckElimination) tends to suggest the check is eliminated by HotSpot only when &quot;the array is indexed by linear functions of the index variable&quot;."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpotInternals",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RangeCheckElimination",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "rang":1,
                      "suggest":1,
                      "oracl":1,
                      "https":1,
                      "array":1,
                      "check":2,
                      "linear":1,
                      "function":1,
                      "link":1,
                      "elimin":2,
                      "spot":2,
                      "quot":2,
                      "hot":2,
                      "wiki":1,
                      "variabl":1,
                      "intern":1,
                      "index":2,
                      "display":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpotInternals",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"RangeCheckElimination",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32832784,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: I guess, I wasn't clear: This wasn't about relating cache misses to power-of-two sizes but to array length. In the benchmark above, arrays of size 1024 or 1111 must perform the same (and for both there are no cache misses as they nicely fit). For a big array there'd be cache misses and prefetching would work for `i` but (probably) not for `j` (see also your first comment here)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32832784]-[-1263256303]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: I guess, I wasn't clear: This wasn't about relating cache misses to power-of-two sizes but to array length. In the benchmark above, arrays of size 1024 or 1111 must perform the same (and for both there are no cache misses as they nicely fit). For a big array there'd be cache misses and prefetching would work for `i` but (probably) not for `j` (see also your first comment here)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":3,
                      "size":2,
                      "relat":1,
                      "big":1,
                      "prefetch":1,
                      "clear":1,
                      "fit":1,
                      "wasn":2,
                      "nice":1,
                      "work":1,
                      "miss":3,
                      "array":3,
                      "marko":1,
                      "comment":1,
                      "perform":1,
                      "topolnik":1,
                      "length":1,
                      "power":1,
                      "guess":1,
                      "benchmark":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32837904,
        "postId":21702939,
        "creationDate":"2014-02-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Leeor: But in this benchmark this doesn't matter as everything fits in L1 (and the benchmarks starts with warm cache). AFAIK, when accessing L1, the pattern doesn't matter as each L1 access takes the same time. The pattern is very important when accessing other levels because of the [prefetchers](http://software.intel.com/en-us/blogs/2009/08/24/what-you-need-to-know-about-prefetching)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32837904]-[17008349]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Leeor: But in this benchmark this doesn't matter as everything fits in L1 (and the benchmarks starts with warm cache). AFAIK, when accessing L1, the pattern doesn't matter as each L1 access takes the same time. The pattern is very important when accessing other levels because of the [prefetchers](http://software.intel.com/en-us/blogs/2009/08/24/what-you-need-to-know-about-prefetching)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Leeor",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":1,
                      "pattern":2,
                      "prefetch":2,
                      "fit":1,
                      "warm":1,
                      "leeor":1,
                      "softwar":1,
                      "afaik":1,
                      "blog":1,
                      "import":1,
                      "intel":1,
                      "take":1,
                      "matter":2,
                      "time":1,
                      "start":1,
                      "http":1,
                      "access":3,
                      "benchmark":2,
                      "level":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32817924,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@SpaceTrucker: I'm not sure, it's just my assumption. But the by ochedru suggest it's true."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32817924]-[-1557256027]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@SpaceTrucker: I'm not sure, it's just my assumption. But the by ochedru suggest it's true."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"SpaceTrucker",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "suggest":1,
                      "ochedru":1,
                      "assumpt":1,
                      "space":1,
                      "true":1,
                      "trucker":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32818156,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581205,
          "displayName":"maaartinus",
          "reputation":15638
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@MarkoTopolnik: That's pretty strange, could you post your code somewhere? Concerning &quot;fetching the next value&quot; mentioned above: I replaced `x += i` by `x += 1`, so that the access is sequential except for a single wrap around, but not much changes. I also tried to eliminate `x` and set `j = i &amp; (table.length-1)`, which is equivalent to `j = i`, but seems to prevent the bound check elimination."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32818156]-[1706565416]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@MarkoTopolnik: That's pretty strange, could you post your code somewhere? Concerning &quot;fetching the next value&quot; mentioned above: I replaced `x += i` by `x += 1`, so that the access is sequential except for a single wrap around, but not much changes. I also tried to eliminate `x` and set `j = i &amp; (table.length-1)`, which is equivalent to `j = i`, but seems to prevent the bound check elimination."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"MarkoTopolnik",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "post":1,
                      "equival":1,
                      "prevent":1,
                      "set":1,
                      "sequenti":1,
                      "amp":1,
                      "pretti":1,
                      "code":1,
                      "tabl":1,
                      "replac":1,
                      "bound":1,
                      "mention":1,
                      "wrap":1,
                      "marko":1,
                      "check":1,
                      "topolnik":1,
                      "fetch":1,
                      "elimin":2,
                      "quot":2,
                      "length":1,
                      "strang":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32818240,
        "postId":21702939,
        "creationDate":"2014-02-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1103872,
          "displayName":"Marko Topolnik",
          "reputation":88730
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Here it is: http://pastebin.com/a2qpuV1i"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21702939-cu32818240]-[1769453716]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Here it is: http://pastebin.com/a2qpuV1i"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"a2qpuV1i",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pastebin":1,
                      "qpu":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "optimization",
      "microbenchmark",
      "bounds-check-elimination"
    ],
    "creationDate":"2014-02-11",
    "lastActivityDate":"2014-02-12",
    "lastEditDate":"2014-02-12",
    "score":17,
    "viewCount":401,
    "owner":{
      "type":"StackOverflowUser",
      "id":581205,
      "displayName":"maaartinus",
      "reputation":15638
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I wrote a simple <a href=\"https://dl.dropboxusercontent.com/u/4971686/published/maaartin/so/BoundsCheckBenchmark.java\"rel=\"nofollow\">benchmark</a> in order to find out if bounds check can be eliminated when the array gets computed via bitwise and. This is basically what nearly all hash tables do: They compute </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[701976834]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I wrote a simple <a href=\"https://dl.dropboxusercontent.com/u/4971686/published/maaartin/so/BoundsCheckBenchmark.java\"rel=\"nofollow\">benchmark</a> in order to find out if bounds check can be eliminated when the array gets computed via bitwise and. This is basically what nearly all hash tables do: They compute </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "dropboxusercont":1,
                  "simpl":1,
                  "rel":1,
                  "wrote":1,
                  "https":1,
                  "publish":1,
                  "tabl":1,
                  "array":1,
                  "hash":1,
                  "bound":2,
                  "comput":2,
                  "nofollow":1,
                  "check":2,
                  "order":1,
                  "elimin":1,
                  "maaartin":1,
                  "bitwis":1,
                  "href":1,
                  "basic":1,
                  "benchmark":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"h &amp; (table.length - 1) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[21702939]-[743414897]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"h & (table.length - 1) "
                }
              ]
            },
            "rawText":"h & (table.length - 1) ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "tabl":1,
                  "length":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>as an index into the <code>table</code>, where <code>h</code> is the <code>hashCode</code> or a derived value. The <a href=\"https://microbenchmarks.appspot.com/runs/ad9f2e21-e457-4516-a2c5-769413eee4ef\"rel=\"nofollow\">results</a> shows that the bounds check don't get eliminated.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1194201009]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>as an index into the <code>table</code>, where <code>h</code> is the <code>hashCode</code> or a derived value. The <a href=\"https://microbenchmarks.appspot.com/runs/ad9f2e21-e457-4516-a2c5-769413eee4ef\"rel=\"nofollow\">results</a> shows that the bounds check don't get eliminated.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"hashCode",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "deriv":1,
                  "show":1,
                  "microbenchmark":1,
                  "eee":1,
                  "run":1,
                  "result":1,
                  "rel":1,
                  "https":1,
                  "code":7,
                  "tabl":1,
                  "hash":1,
                  "bound":1,
                  "nofollow":1,
                  "check":1,
                  "elimin":1,
                  "appspot":1,
                  "href":1,
                  "index":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The idea of my benchmark is pretty simple: Compute two values <code>i</code> and <code>j</code>, where both are guaranteed to be valid array indexes. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[709289241]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The idea of my benchmark is pretty simple: Compute two values <code>i</code> and <code>j</code>, where both are guaranteed to be valid array indexes. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "simpl":1,
                  "idea":1,
                  "pretti":1,
                  "code":4,
                  "array":1,
                  "guarante":1,
                  "comput":1,
                  "valu":1,
                  "valid":1,
                  "index":1,
                  "benchmark":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li><code>i</code> is the loop counter. When it gets used as array index, the bounds check gets eliminated.</li> \n <li><code>j</code> gets computed as <code>x &amp; (table.length - 1)</code>, where <code>x</code> is some value changing on each iteration. When it gets used as array index, the bounds check does not get eliminated.</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1280975428]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li><code>i</code> is the loop counter. When it gets used as array index, the bounds check gets eliminated.</li> \n <li><code>j</code> gets computed as <code>x &amp; (table.length - 1)</code>, where <code>x</code> is some value changing on each iteration. When it gets used as array index, the bounds check does not get eliminated.</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":1,
                  "loop":1,
                  "amp":1,
                  "code":8,
                  "tabl":1,
                  "array":2,
                  "bound":2,
                  "comput":1,
                  "check":2,
                  "iter":1,
                  "elimin":2,
                  "counter":1,
                  "length":1,
                  "index":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The relevant part is as follows:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1479152916]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The relevant part is as follows:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "part":1,
                  "relev":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"for (int i=0; i&lt;=table.length-1; ++i) { x += result; final int j = x &amp; (table.length-1); result ^= i + table[j]; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[21702939]-[158933185]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ForLoopStatementNode",
                  "forControl":{
                    "type":"ForVarControlNode",
                    "variables":{
                      "type":"LocalVariableDeclarationStatementNode",
                      "modifiers":[
                        
                      ],
                      "declarators":{
                        "type":"VariableDeclaratorsNode",
                        "declarators":[
                          {
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"i",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ],
                            "assignment":{
                              "type":"VariableAssignmentNode",
                              "variableAssignment":{
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "varType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            }
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "condition":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"i",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"-",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"table",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"length",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"1"
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "update":[
                      {
                        "type":"PrefixOperatorExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"++",
                          "comments":[
                            
                          ]
                        },
                        "argument":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"i",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"x",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"result",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"final",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"j",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "assignment":{
                                "type":"VariableAssignmentNode",
                                "variableAssignment":{
                                  "type":"VariableExpressionInitNode",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"&",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"x",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"-",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"length",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"1"
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "varType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"^=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"result",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"i",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"ArrayAccessSelectorNode",
                              "identifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"table",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "dimExpression":{
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"j",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"for (int i=0; i<=table.length-1; ++i) { x += result; final int j = x & (table.length-1); result ^= i + table[j]; } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "result":2,
                  "tabl":3,
                  "length":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"i",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"j",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"&",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"x",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"-",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"table",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"length",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"1"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The other experiment uses</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-1285120985]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The other experiment uses</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "experi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" result ^= table[i] + j; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[21702939]-[-444325767]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"^=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"result",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"+",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"ArrayAccessSelectorNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"table",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "dimExpression":{
                          "type":"DimExpressionNode",
                          "argument":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"i",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"j",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                }
              ]
            },
            "rawText":" result ^= table[i] + j; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "result":1,
                  "tabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>instead. The difference in timing is maybe 15% (pretty consistently across different variants I've tried). My questions:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1973838847]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>instead. The difference in timing is maybe 15% (pretty consistently across different variants I've tried). My questions:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "differ":1,
                  "variant":1,
                  "pretti":1,
                  "consist":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>Are there other possible reasons for this besides bound check elimination?</li> \n <li>Is there some complicated reason I can't see why there's no bound check elimination for <code>j</code>?</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-1934521498]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>Are there other possible reasons for this besides bound check elimination?</li> \n <li>Is there some complicated reason I can't see why there's no bound check elimination for <code>j</code>?</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "complic":1,
                  "reason":2,
                  "code":2,
                  "bound":2,
                  "check":2,
                  "elimin":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<h1>A summary of the answers</h1>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-981140397]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<h1>A summary of the answers</h1>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "answer":1,
                  "summari":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>MarkoTopolnik's answer shows that it's all more complicated and the elimination of the bounds checks is not guaranteed to be a win, especially on his computer the &quot;normal&quot; code is slower than &quot;masked&quot;. I guess this is because of it allowing some additional optimization which shows to be actually detrimental in this case (given the complexity of the current CPUs, the compiler hardly even knows for sure).</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-1465549111]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>MarkoTopolnik's answer shows that it's all more complicated and the elimination of the bounds checks is not guaranteed to be a win, especially on his computer the &quot;normal&quot; code is slower than &quot;masked&quot;. I guess this is because of it allowing some additional optimization which shows to be actually detrimental in this case (given the complexity of the current CPUs, the compiler hardly even knows for sure).</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"MarkoTopolnik",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "win":1,
                  "show":2,
                  "mask":1,
                  "addit":1,
                  "normal":1,
                  "complic":1,
                  "detriment":1,
                  "code":1,
                  "guarante":1,
                  "optim":1,
                  "bound":1,
                  "comput":1,
                  "marko":1,
                  "check":1,
                  "slower":1,
                  "allow":1,
                  "topolnik":1,
                  "elimin":1,
                  "answer":1,
                  "cpus":1,
                  "quot":4,
                  "compil":1,
                  "guess":1,
                  "current":1,
                  "complex":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MarkoTopolnik",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>leventov's answer shows clearly that the array bounds check gets done in &quot;masked&quot; and that it's elimination makes the code as fast as &quot;normal&quot;.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[678658143]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>leventov's answer shows clearly that the array bounds check gets done in &quot;masked&quot; and that it's elimination makes the code as fast as &quot;normal&quot;.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "show":1,
                  "mask":1,
                  "normal":1,
                  "code":1,
                  "array":1,
                  "bound":1,
                  "check":1,
                  "leventov":1,
                  "elimin":1,
                  "make":1,
                  "answer":1,
                  "quot":4,
                  "fast":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Donal Fellows points to the fact, that the masking doesn't work for a zero-length table, as <code>x &amp; (0-1)</code> equals to <code>x</code>. So the best thing the compiler can do is to replace the bound check by a zero-length check. But this is IMHO still worth it, as the zero-length check can be moved out of the loop easily.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1752628641]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Donal Fellows points to the fact, that the masking doesn't work for a zero-length table, as <code>x &amp; (0-1)</code> equals to <code>x</code>. So the best thing the compiler can do is to replace the bound check by a zero-length check. But this is IMHO still worth it, as the zero-length check can be moved out of the loop easily.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "move":1,
                  "point":1,
                  "loop":1,
                  "mask":1,
                  "thing":1,
                  "amp":1,
                  "work":1,
                  "code":4,
                  "easili":1,
                  "imho":1,
                  "fact":1,
                  "tabl":1,
                  "replac":1,
                  "fellow":1,
                  "bound":1,
                  "equal":1,
                  "check":3,
                  "worth":1,
                  "donal":1,
                  "length":3,
                  "compil":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<h2>Proposed optimization</h2>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[136561138]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<h2>Proposed optimization</h2>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "optim":1,
                  "propos":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Because of the the equivalence <code>a[x &amp; (a.length - 1)]</code> throws if and only if <code>a.length == 0</code>, the compiler can do the following:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-662730884]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Because of the the equivalence <code>a[x &amp; (a.length - 1)]</code> throws if and only if <code>a.length == 0</code>, the compiler can do the following:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "equival":1,
                  "amp":1,
                  "code":4,
                  "length":2,
                  "compil":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>For each array access, check if the index has been computed via a bitwise and.</li> \n <li>If so, check if either of the operands was computed as length minus one.</li> \n <li>If so, replace the bounds check by a zero-length check.</li> \n <li>Let the existing optimizations take care of it.</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[11297650]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>For each array access, check if the index has been computed via a bitwise and.</li> \n <li>If so, check if either of the operands was computed as length minus one.</li> \n <li>If so, replace the bounds check by a zero-length check.</li> \n <li>Let the existing optimizations take care of it.</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "operand":1,
                  "minus":1,
                  "exist":1,
                  "care":1,
                  "array":1,
                  "optim":1,
                  "replac":1,
                  "bound":1,
                  "comput":2,
                  "check":4,
                  "length":2,
                  "bitwis":1,
                  "index":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Such an optimization should be pretty simple and cheap as it only looks at the parent nodes in the <a href=\"http://en.wikipedia.org/wiki/Static_single_assignment_form\"rel=\"nofollow\">SSA</a> graph. Unlike many complex optimizations, it can never be detrimental, as it only replaces one check by a slightly simpler one; so there's no problem, not even if it can't be moved out of the loop.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[1728987569]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Such an optimization should be pretty simple and cheap as it only looks at the parent nodes in the <a href=\"http://en.wikipedia.org/wiki/Static_single_assignment_form\"rel=\"nofollow\">SSA</a> graph. Unlike many complex optimizations, it can never be detrimental, as it only replaces one check by a slightly simpler one; so there's no problem, not even if it can't be moved out of the loop.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "unlik":1,
                  "parent":1,
                  "singl":1,
                  "move":1,
                  "loop":1,
                  "simpl":1,
                  "cheap":1,
                  "problem":1,
                  "slight":1,
                  "rel":1,
                  "assign":1,
                  "detriment":1,
                  "pretti":1,
                  "optim":2,
                  "replac":1,
                  "wikipedia":1,
                  "nofollow":1,
                  "check":1,
                  "wiki":1,
                  "graph":1,
                  "node":1,
                  "form":1,
                  "org":1,
                  "href":1,
                  "http":1,
                  "ssa":1,
                  "simpler":1,
                  "complex":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'll post this to the hotspot-dev mailing lists.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[534597650]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'll post this to the hotspot-dev mailing lists.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "post":1,
                  "hotspot":1,
                  "dev":1,
                  "mail":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<h1>News</h1>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[935861878]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<h1>News</h1>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "news":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>John Rose filed an <a href=\"https://bugs.openjdk.java.net/browse/JDK-8003585\"rel=\"nofollow\">RFE</a> and there's already a &quot;quick-and-dirty&quot; <a href=\"https://gist.github.com/rednaxelafx/8964030\"rel=\"nofollow\">patch</a>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21702939]-[-493248992]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>John Rose filed an <a href=\"https://bugs.openjdk.java.net/browse/JDK-8003585\"rel=\"nofollow\">RFE</a> and there's already a &quot;quick-and-dirty&quot; <a href=\"https://gist.github.com/rednaxelafx/8964030\"rel=\"nofollow\">patch</a>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "openjdk":1,
                  "github":1,
                  "rel":2,
                  "john":1,
                  "https":2,
                  "brows":1,
                  "net":1,
                  "nofollow":2,
                  "bug":1,
                  "gist":1,
                  "rednaxelafx":1,
                  "file":1,
                  "quot":2,
                  "quick":1,
                  "href":2,
                  "patch":1,
                  "dirti":1,
                  "rfe":1,
                  "jdk":1,
                  "rose":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":21723493,
      "questionId":21702939,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":32871304,
          "postId":21723493,
          "creationDate":"2014-02-12",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You think that this &quot;the fetching from the array stage is done first for all unrolled steps&quot; is the culprit, right? Interesting!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21723493-cu32871304]-[1254227439]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You think that this &quot;the fetching from the array stage is done first for all unrolled steps&quot; is the culprit, right? Interesting!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "stage":1,
                        "step":1,
                        "culprit":1,
                        "unrol":1,
                        "array":1,
                        "interest":1,
                        "fetch":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32872674,
          "postId":21723493,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ideally, we should compare notes. The above technique isolates the effect of BCE from the effect of the additional staging optimization, so it would be interesting to see what it does on your side."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21723493-cu32872674]-[-616221397]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ideally, we should compare notes. The above technique isolates the effect of BCE from the effect of the additional staging optimization, so it would be interesting to see what it does on your side."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":1,
                        "bce":1,
                        "stage":1,
                        "ideal":1,
                        "addit":1,
                        "effect":2,
                        "optim":1,
                        "isol":1,
                        "interest":1,
                        "note":1,
                        "compar":1,
                        "techniqu":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32873937,
          "postId":21723493,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, we should. The comments here are rather unsuitable for this. I think, it could be an interesting question, would you mind posting it? Otherwise, please send me an email to \n<my_name_here>\n @gmail.com.\n</my_name_here>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21723493-cu32873937]-[-820718267]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, we should. The comments here are rather unsuitable for this. I think, it could be an interesting question, would you mind posting it? Otherwise, please send me an email to \n<my_name_here>\n @gmail.com.\n</my_name_here>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "post":1,
                        "email":1,
                        "unsuit":1,
                        "mind":1,
                        "interest":1,
                        "comment":1,
                        "gmail":1,
                        "send":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32878084,
          "postId":21723493,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I have posted it as a question: http://stackoverflow.com/questions/21738690/strange-jit-pessimization-of-a-loop-idiom"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21723493-cu32878084]-[328241149]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I have posted it as a question: http://stackoverflow.com/questions/21738690/strange-jit-pessimization-of-a-loop-idiom"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jit":1,
                        "question":2,
                        "post":1,
                        "loop":1,
                        "idiom":1,
                        "stackoverflow":1,
                        "pessim":1,
                        "http":1,
                        "strang":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-02-12",
      "lastActivityDate":"2014-02-12",
      "lastEditDate":"2014-02-12",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1103872,
        "displayName":"Marko Topolnik",
        "reputation":88730
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To start off, the main difference between your two tests is definitely in bounds check elimination; however, the way this influences the machine code is far from what the na&iuml;ve expectation would suggest.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[742612581]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To start off, the main difference between your two tests is definitely in bounds check elimination; however, the way this influences the machine code is far from what the na&iuml;ve expectation would suggest.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "iuml":1,
                    "differ":1,
                    "suggest":1,
                    "influenc":1,
                    "main":1,
                    "code":1,
                    "bound":1,
                    "check":1,
                    "machin":1,
                    "expect":1,
                    "elimin":1,
                    "start":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>My conjecture:</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[236719613]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>My conjecture:</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "conjectur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><em>The bounds check figures more strongly as a loop exit point than as additional code which introduces overhead</em>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[-1980867889]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><em>The bounds check figures more strongly as a loop exit point than as additional code which introduces overhead</em>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "loop":1,
                    "addit":1,
                    "introduc":1,
                    "strong":1,
                    "code":1,
                    "overhead":1,
                    "bound":1,
                    "check":1,
                    "exit":1,
                    "figur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The loop exit point prevents the following optimization which I have culled from the emitted machine code:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1333382432]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The loop exit point prevents the following optimization which I have culled from the emitted machine code:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "loop":1,
                    "prevent":1,
                    "emit":1,
                    "code":1,
                    "optim":1,
                    "machin":1,
                    "cull":1,
                    "exit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>the loop is unrolled (this is true in all cases);</li> \n <li>additionaly, the <em>fetching from the array</em> stage is done first for all unrolled steps, then the <em>xoring into accumulator</em> is done for all the steps.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[-1287949334]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>the loop is unrolled (this is true in all cases);</li> \n <li>additionaly, the <em>fetching from the array</em> stage is done first for all unrolled steps, then the <em>xoring into accumulator</em> is done for all the steps.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "stage":1,
                    "loop":1,
                    "step":2,
                    "unrol":2,
                    "array":1,
                    "accumul":1,
                    "additionali":1,
                    "true":1,
                    "fetch":1,
                    "case":1,
                    "xore":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the loop can break out at any step, this staging would result in work performed for loop steps which were never actually taken.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[512211756]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the loop can break out at any step, this staging would result in work performed for loop steps which were never actually taken.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "stage":1,
                    "loop":2,
                    "step":2,
                    "result":1,
                    "work":1,
                    "perform":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Consider this slight modification of your code:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1027522238]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Consider this slight modification of your code:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "slight":1,
                    "code":1,
                    "modif":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@OutputTimeUnit(TimeUnit.NANOSECONDS) @BenchmarkMode(Mode.AverageTime) @OperationsPerInvocation(Measure.N) @Warmup(iterations = 3, time = 1) @Measurement(iterations = 5, time = 1) @State(Scope.Thread) @Threads(1) @Fork(1) public class Measure { public static final int N = 1024; private final int[] table = new int[N]; @Setup public void setUp() { final Random random = new Random(); for (int i = 0; i &lt; table.length; ++i) { final int x = random.nextInt(); table[i] = x == 0? 1 : x; } } @GenerateMicroBenchmark public int normalIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i = 0; i &lt;= table.length - 1; ++i) { x += i; final int j = x &amp; (table.length - 1); final int entry = table[i]; result ^= entry + j; if (entry == 0) break; } return result; } @GenerateMicroBenchmark public int maskedIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i = 0; i &lt;= table.length - 1; ++i) { x += i; final int j = x &amp; (table.length - 1); final int entry = table[j]; result ^= i + entry; if (entry == 0) break; } return result; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21723493]-[1472938586]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OutputTimeUnit",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"TimeUnit",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"NANOSECONDS",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"BenchmarkMode",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Mode",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"AverageTime",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OperationsPerInvocation",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Measure",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"N",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Warmup",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValuePairsNode",
                              "valuePairs":[
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"iterations",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"3"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"time",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"1"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Measurement",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValuePairsNode",
                              "valuePairs":[
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"iterations",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"5"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"time",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"1"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"State",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Scope",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Thread",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Threads",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"1"
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Fork",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"1"
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Measure",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"N",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"1024"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"table",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"ArrayExpressionCreatorNode",
                                          "creatorType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "expressionDepth":[
                                            {
                                              "type":"DimExpressionNode",
                                              "argument":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"N",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "arrayDepth":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"ArrayTypeNode",
                                      "typeNode":{
                                        "type":"PrimitiveTypeNode",
                                        "name":"int",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "depth":[
                                        {
                                          "type":"ArrayDimensionNode",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Setup",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"setUp",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"random",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"ConstructorCreatorNode",
                                                "creatorType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"Random",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "expressionArgs":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Random",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"table",
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"IdentifierNode",
                                              "name":"length",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"MethodInvocationNode",
                                                      "qualifiedIdentifier":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"random",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"nextInt",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "args":{
                                                        "type":"ExpressionListNode",
                                                        "arguments":[
                                                          
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"ArrayAccessSelectorNode",
                                              "identifier":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "dimExpression":{
                                                "type":"DimExpressionNode",
                                                "argument":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"i",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"ConditionalExpressionNode",
                                              "condition":{
                                                "type":"BinaryExpressionNode",
                                                "operator":{
                                                  "type":"OperatorNode",
                                                  "symbol":"==",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "left":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"x",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "right":{
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"IntegerLiteralNode",
                                                    "valueRep":"0"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "thenExp":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"1"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "elseExp":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"x",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"GenerateMicroBenchmark",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"normalIndex",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"result",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"this",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"x",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"-",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"length",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"1"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"&",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"x",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"-",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"table",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"length",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"IntegerLiteralNode",
                                                            "valueRep":"1"
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"entry",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"ArrayAccessSelectorNode",
                                                      "identifier":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"table",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "dimExpression":{
                                                        "type":"DimExpressionNode",
                                                        "argument":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"i",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"^=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"result",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"entry",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"j",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IfStatementNode",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"==",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"entry",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"IntegerLiteralNode",
                                                "valueRep":"0"
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "statement":{
                                            "type":"BreakStatementNode",
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"result",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"GenerateMicroBenchmark",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"maskedIndex",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"result",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"this",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"x",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"-",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"length",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"1"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"&",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"x",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"-",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"table",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"length",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"IntegerLiteralNode",
                                                            "valueRep":"1"
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"entry",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"ArrayAccessSelectorNode",
                                                      "identifier":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"table",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "dimExpression":{
                                                        "type":"DimExpressionNode",
                                                        "argument":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"j",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"^=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"result",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"i",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"entry",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IfStatementNode",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"==",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"entry",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"IntegerLiteralNode",
                                                "valueRep":"0"
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "statement":{
                                            "type":"BreakStatementNode",
                                            "labels":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"result",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"@OutputTimeUnit(TimeUnit.NANOSECONDS) @BenchmarkMode(Mode.AverageTime) @OperationsPerInvocation(Measure.N) @Warmup(iterations = 3, time = 1) @Measurement(iterations = 5, time = 1) @State(Scope.Thread) @Threads(1) @Fork(1) public class Measure { public static final int N = 1024; private final int[] table = new int[N]; @Setup public void setUp() { final Random random = new Random(); for (int i = 0; i < table.length; ++i) { final int x = random.nextInt(); table[i] = x == 0? 1: x; } } @GenerateMicroBenchmark public int normalIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i = 0; i <= table.length - 1; ++i) { x += i; final int j = x & (table.length - 1); final int entry = table[i]; result ^= entry + j; if (entry == 0) break; } return result; } @GenerateMicroBenchmark public int maskedIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i = 0; i <= table.length - 1; ++i) { x += i; final int j = x & (table.length - 1); final int entry = table[j]; result ^= i + entry; if (entry == 0) break; } return result; } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "warmup":1,
                    "random":4,
                    "mask":1,
                    "state":1,
                    "invoc":1,
                    "scope":1,
                    "normal":1,
                    "result":6,
                    "set":1,
                    "averag":1,
                    "measur":3,
                    "fork":1,
                    "oper":1,
                    "tabl":13,
                    "thread":2,
                    "entri":6,
                    "micro":2,
                    "nanosecond":1,
                    "iter":2,
                    "mode":2,
                    "generat":2,
                    "length":5,
                    "unit":2,
                    "time":5,
                    "output":1,
                    "setup":1,
                    "index":2,
                    "benchmark":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Random",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"random",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"nextInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"entry",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayAccessSelectorNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"table",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "dimExpression":{
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"j",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"&",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"x",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"-",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"table",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"length",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"1"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"random",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Random",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Random",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"i",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"result",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"x",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"random",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"nextInt",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"entry",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayAccessSelectorNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"table",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "dimExpression":{
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"j",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"x",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"table",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"table",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"N",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"1024"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"table",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"N",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is just one difference: I have added the check</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[-780135878]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is just one difference: I have added the check</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "ad":1,
                    "differ":1,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"if (entry == 0) break; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21723493]-[-206048086]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"==",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"entry",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BreakStatementNode",
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"if (entry == 0) break; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "entri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>to give the loop a way to exit prematurely on any step. (I also introduced a guard to ensure no array entries are actually 0.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1077576950]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>to give the loop a way to exit prematurely on any step. (I also introduced a guard to ensure no array entries are actually 0.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "loop":1,
                    "step":1,
                    "introduc":1,
                    "array":1,
                    "entri":1,
                    "give":1,
                    "exit":1,
                    "prematur":1,
                    "guard":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>On my machine, this is the result:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[580773341]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>On my machine, this is the result:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "result":1,
                    "machin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Benchmark Mode Samples Mean Mean error Units o.s.Measure.maskedIndex avgt 5 1.378 0.229 ns/op o.s.Measure.normalIndex avgt 5 0.924 0.092 ns/op "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21723493]-[-2138197478]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"Benchmark Mode Samples Mean Mean error Units "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"o",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"s",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Measure",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"maskedIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" avgt 5 1.378 0.229 ns/op "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"o",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"s",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Measure",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"normalIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" avgt 5 0.924 0.092 ns/op "
                  }
                ]
              },
              "rawText":"Benchmark Mode Samples Mean Mean error Units osMeasuremaskedIndex avgt 5 1.378 0.229 ns/op osMeasurenormalIndex avgt 5 0.924 0.092 ns/op ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "avgt":2,
                    "sampl":1,
                    "measurenorm":1,
                    "error":1,
                    "mode":1,
                    "measuremask":1,
                    "unit":1,
                    "index":2,
                    "benchmark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>the &quot;normal index&quot; variant is substantially faster, as generally expected.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1285819429]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>the &quot;normal index&quot; variant is substantially faster, as generally expected.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "normal":1,
                    "variant":1,
                    "general":1,
                    "expect":1,
                    "substanti":1,
                    "quot":2,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, let us <em>remove the additional check</em>:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1578000979]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, let us <em>remove the additional check</em>:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "addit":1,
                    "remov":1,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"// if (entry == 0) break; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21723493]-[263075434]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"// "
                  },
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"==",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"entry",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BreakStatementNode",
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"// if (entry == 0) break; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "entri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now my results are these:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[-1958159602]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now my results are these:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "result":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Benchmark Mode Samples Mean Mean error Units o.s.Measure.maskedIndex avgt 5 1.130 0.065 ns/op o.s.Measure.normalIndex avgt 5 1.229 0.053 ns/op "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21723493]-[-1840522074]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"Benchmark Mode Samples Mean Mean error Units "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"o",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"s",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Measure",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"maskedIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" avgt 5 1.130 0.065 ns/op "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"o",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"s",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Measure",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"normalIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" avgt 5 1.229 0.053 ns/op "
                  }
                ]
              },
              "rawText":"Benchmark Mode Samples Mean Mean error Units osMeasuremaskedIndex avgt 5 1.130 0.065 ns/op osMeasurenormalIndex avgt 5 1.229 0.053 ns/op ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "avgt":2,
                    "sampl":1,
                    "measurenorm":1,
                    "error":1,
                    "mode":1,
                    "measuremask":1,
                    "unit":1,
                    "index":2,
                    "benchmark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>&quot;Masked index&quot; responded predictably (reduced overhead), but &quot;normal index&quot; is suddenly <em>much worse</em>. This is apparently due to a bad fit between the additional optimization step and my specific CPU model.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[-911823405]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>&quot;Masked index&quot; responded predictably (reduced overhead), but &quot;normal index&quot; is suddenly <em>much worse</em>. This is apparently due to a bad fit between the additional optimization step and my specific CPU model.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "due":1,
                    "step":1,
                    "mask":1,
                    "reduc":1,
                    "appar":1,
                    "model":1,
                    "addit":1,
                    "normal":1,
                    "fit":1,
                    "wors":1,
                    "bad":1,
                    "overhead":1,
                    "optim":1,
                    "specif":1,
                    "cpu":1,
                    "quot":4,
                    "predict":1,
                    "respond":1,
                    "sudden":1,
                    "index":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h3>My point:</h3>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[229108889]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h3>My point:</h3>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The performance model at such a detailed level is very unstable and, as witnessed on my CPU, even erratic.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21723493]-[1684196348]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The performance model at such a detailed level is very unstable and, as witnessed on my CPU, even erratic.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "errat":1,
                    "model":1,
                    "unstabl":1,
                    "wit":1,
                    "cpu":1,
                    "perform":1,
                    "detail":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":21722190,
      "questionId":21702939,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":32852768,
          "postId":21722190,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":301832,
            "displayName":"Donal Fellows",
            "reputation":63053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@ruakh That's technically not a safety condition, but it can produce terrible distributions. Consider the case with 17 buckets; you'll end up with everything going into either bucket 0 or (rarely) 16. The _only_ case where `h&amp;(ary.length-1)` works well is when the array is where the array's size is a power of two (&gt;=1), and the compiler isn't provided an easy proof of this."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21722190-cu32852768]-[-1676101188]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@ruakh That's technically not a safety condition, but it can produce terrible distributions. Consider the case with 17 buckets; you'll end up with everything going into either bucket 0 or (rarely) 16. The _only_ case where `h&amp;(ary.length-1)` works well is when the array is where the array's size is a power of two (&gt;=1), and the compiler isn't provided an easy proof of this."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_only_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "terribl":1,
                        "easi":1,
                        "size":1,
                        "produc":1,
                        "condit":1,
                        "ari":1,
                        "amp":1,
                        "work":1,
                        "array":2,
                        "safeti":1,
                        "rare":1,
                        "proof":1,
                        "isn":1,
                        "bucket":2,
                        "end":1,
                        "length":1,
                        "technic":1,
                        "compil":1,
                        "power":1,
                        "ruakh":1,
                        "distribut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32848439,
          "postId":21722190,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":978917,
            "displayName":"ruakh",
            "reputation":73654
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't understand your comment about powers of 2. If `h` and `k` are nonnegative integers, then `h &amp; k` is a nonnegative integer that is at most `h` and at most `k`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21722190-cu32848439]-[1754302164]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't understand your comment about powers of 2. If `h` and `k` are nonnegative integers, then `h &amp; k` is a nonnegative integer that is at most `h` and at most `k`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "nonneg":2,
                        "understand":1,
                        "amp":1,
                        "integ":1,
                        "comment":1,
                        "power":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32868859,
          "postId":21722190,
          "creationDate":"2014-02-12",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":978917,
            "displayName":"ruakh",
            "reputation":73654
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't follow. If it's &quot;technically not a safety condition&quot;, and the compiler's goal is merely &quot;to safely eliminate that bounds check&quot;, then how is it relevant to the compiler? Why does the compiler need to be able to prove it?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21722190-cu32868859]-[799877303]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't follow. If it's &quot;technically not a safety condition&quot;, and the compiler's goal is merely &quot;to safely eliminate that bounds check&quot;, then how is it relevant to the compiler? Why does the compiler need to be able to prove it?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "prove":1,
                        "condit":1,
                        "relev":1,
                        "goal":1,
                        "safe":1,
                        "safeti":1,
                        "bound":1,
                        "check":1,
                        "elimin":1,
                        "quot":4,
                        "technic":1,
                        "compil":3,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32870082,
          "postId":21722190,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@ruakh: Agreed, the compiler shouldn't care. It can replace the bounds check by the `table.length &gt; 0` check and let the worries about the distribution for the programmer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21722190-cu32870082]-[-706372395]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@ruakh: Agreed, the compiler shouldn't care. It can replace the bounds check by the `table.length &gt; 0` check and let the worries about the distribution for the programmer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "care":1,
                        "tabl":1,
                        "replac":1,
                        "bound":1,
                        "check":2,
                        "programm":1,
                        "agre":1,
                        "length":1,
                        "compil":1,
                        "ruakh":1,
                        "worri":1,
                        "shouldn":1,
                        "distribut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-02-12",
      "lastActivityDate":"2014-02-12",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":301832,
        "displayName":"Donal Fellows",
        "reputation":63053
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In order to safely eliminate that bounds check, it is <em>necessary</em> to prove that </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21722190]-[-1461998022]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In order to safely eliminate that bounds check, it is <em>necessary</em> to prove that </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "prove":1,
                    "safe":1,
                    "bound":1,
                    "check":1,
                    "order":1,
                    "elimin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"h &amp; (table.length - 1) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21722190]-[743414897]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"h & (table.length - 1) "
                  }
                ]
              },
              "rawText":"h & (table.length - 1) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tabl":1,
                    "length":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>is <em>guaranteed</em> to produce a valid index into <code>table</code>. It won't if <code>table.length</code> is zero (as you'll end up with <code>&amp; -1</code>, an effective-noop). It also won't usefully do it if <code>table.length</code> is not a power of 2 (you'll lose information; consider the case where <code>table.length</code> is 17).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21722190]-[-707700764]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>is <em>guaranteed</em> to produce a valid index into <code>table</code>. It won't if <code>table.length</code> is zero (as you'll end up with <code>&amp; -1</code>, an effective-noop). It also won't usefully do it if <code>table.length</code> is not a power of 2 (you'll lose information; consider the case where <code>table.length</code> is 17).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "produc":1,
                    "effect":1,
                    "amp":1,
                    "code":10,
                    "noop":1,
                    "tabl":4,
                    "guarante":1,
                    "inform":1,
                    "valid":1,
                    "use":1,
                    "end":1,
                    "length":3,
                    "power":1,
                    "lose":1,
                    "won":2,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How can the HotSpot compiler know that these bad conditions are not true? It has to be more conservative than a programmer can be, as the programmer can know more about the high-level constraints on the system (e.g., that the array is never empty and always as a number of elements that is a power-of-two).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21722190]-[605189540]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How can the HotSpot compiler know that these bad conditions are not true? It has to be more conservative than a programmer can be, as the programmer can know more about the high-level constraints on the system (e.g., that the array is never empty and always as a number of elements that is a power-of-two).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "system":1,
                    "condit":1,
                    "bad":1,
                    "element":1,
                    "array":1,
                    "conserv":1,
                    "empti":1,
                    "programm":2,
                    "true":1,
                    "spot":1,
                    "constraint":1,
                    "hot":1,
                    "compil":1,
                    "power":1,
                    "high":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":21708836,
      "questionId":21702939,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":32825111,
          "postId":21708836,
          "creationDate":"2014-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Except that I checked the machine code and 1) `maskedIndex` had the bounds check where `normalIndex` didn't; 2) `normalIndex` used apparently streamlined code where the loop was both unrolled and reordered into two stages; 3) `maskedIndex` was nevertheless *faster* on my machine (by 8%)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32825111]-[-114124697]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Except that I checked the machine code and 1) `maskedIndex` had the bounds check where `normalIndex` didn't; 2) `normalIndex` used apparently streamlined code where the loop was both unrolled and reordered into two stages; 3) `maskedIndex` was nevertheless *faster* on my machine (by 8%)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"maskedIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"normalIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"normalIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"maskedIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "stage":1,
                        "faster":1,
                        "loop":1,
                        "mask":2,
                        "appar":1,
                        "reorder":1,
                        "normal":2,
                        "unrol":1,
                        "streamlin":1,
                        "code":2,
                        "bound":1,
                        "check":2,
                        "machin":2,
                        "index":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32825485,
          "postId":21708836,
          "creationDate":"2014-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":648955,
            "displayName":"leventov",
            "reputation":3060
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MarkoTopolnik that is really strange, but more about pecularities of your CPU behaviour, than the subject of this question"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32825485]-[654159695]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MarkoTopolnik that is really strange, but more about pecularities of your CPU behaviour, than the subject of this question"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MarkoTopolnik",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "pecular":1,
                        "subject":1,
                        "marko":1,
                        "cpu":1,
                        "behaviour":1,
                        "topolnik":1,
                        "strang":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32825544,
          "postId":21708836,
          "creationDate":"2014-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You mean, this question can be separated from the peculiarities of CPU behavior? That's a strange thought... anyway, these are my results: `maskedIndex 1.152 ns/op; maskedUnsafeIndex 1.116 ns/op; normalIndex 1.220 ns/op.` Normal indexing is still the slowest on my machine."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32825544]-[-1347558889]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You mean, this question can be separated from the peculiarities of CPU behavior? That's a strange thought... anyway, these are my results: `maskedIndex 1.152 ns/op; maskedUnsafeIndex 1.116 ns/op; normalIndex 1.220 ns/op.` Normal indexing is still the slowest on my machine."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"maskedIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"/",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"ns",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"op",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"maskedUnsafeIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"/",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"ns",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"op",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"normalIndex",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "mask":2,
                        "thought":1,
                        "normal":2,
                        "result":1,
                        "separ":1,
                        "peculiar":1,
                        "machin":1,
                        "cpu":1,
                        "unsaf":1,
                        "behavior":1,
                        "slowest":1,
                        "strang":1,
                        "index":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32871428,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Strange that I didn't think about using `Unsafe` to check my conjecture!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32871428]-[1339713855]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Strange that I didn't think about using `Unsafe` to check my conjecture!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "strang":1,
                        "unsaf":1,
                        "conjectur":1,
                        "check":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32874135,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@maaartinus Note that introducing Unsafe doesn't really pinpoint the issue because different instructions are used to calculate the array offset (among other differences). Each just produces different machine code without a clear-cut way of comparing them."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32874135]-[-711615504]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@maaartinus Note that introducing Unsafe doesn't really pinpoint the issue because different instructions are used to calculate the array offset (among other differences). Each just produces different machine code without a clear-cut way of comparing them."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "maaartinus":1,
                        "produc":1,
                        "clear":1,
                        "differ":1,
                        "cut":1,
                        "introduc":1,
                        "issu":1,
                        "pinpoint":1,
                        "calcul":1,
                        "code":1,
                        "array":1,
                        "offset":1,
                        "machin":1,
                        "note":1,
                        "compar":1,
                        "unsaf":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32879292,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"My benchmark's results showed no difference after this change. As `INT_SCALE` is `private static final`, so I hope the JIT can do whatever it wants. I'm too lazy too. The safe way would be to set it to `4` and throw in the initializer if the JVM is too exotic. @MarkoTopolnik: Yes, but it's independent of `x` and can be moved out of the loop."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32879292]-[-38589056]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"My benchmark's results showed no difference after this change. As `INT_SCALE` is `private static final`, so I hope the JIT can do whatever it wants. I'm too lazy too. The safe way would be to set it to `4` and throw in the initializer if the JVM is too exotic. @MarkoTopolnik: Yes, but it's independent of `x` and can be moved out of the loop."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MarkoTopolnik",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jit":1,
                        "chang":1,
                        "jvm":1,
                        "move":1,
                        "loop":1,
                        "show":1,
                        "scale":1,
                        "differ":1,
                        "result":1,
                        "set":1,
                        "lazi":1,
                        "safe":1,
                        "marko":1,
                        "independ":1,
                        "hope":1,
                        "topolnik":1,
                        "exot":1,
                        "initi":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32879381,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"In `x += i * INT_SCALE`, for each `i` there is a `mul` instruction. It can't be hoisted. Note however that `mul` by 4 is executed as shift left by 2, therefore it is very fast."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32879381]-[1758930115]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"In `x += i * INT_SCALE`, for each `i` there is a `mul` instruction. It can't be hoisted. Note however that `mul` by 4 is executed as shift left by 2, therefore it is very fast."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "scale":1,
                        "left":1,
                        "shift":1,
                        "hoist":1,
                        "note":1,
                        "mul":2,
                        "fast":1,
                        "execut":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32876982,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MarkoTopolnik: That's true, but you can make it much more similar using `U.getInt(table, INT_BASE + j * INT_SCALE)` and this can be easily translated to exactly the same code. I haven't checked if it actually does."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32876982]-[-628833835]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MarkoTopolnik: That's true, but you can make it much more similar using `U.getInt(table, INT_BASE + j * INT_SCALE)` and this can be easily translated to exactly the same code. I haven't checked if it actually does."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MarkoTopolnik",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"U",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getInt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_BASE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "similar":1,
                        "scale":1,
                        "base":1,
                        "code":1,
                        "easili":1,
                        "tabl":1,
                        "marko":1,
                        "check":1,
                        "translat":1,
                        "topolnik":1,
                        "true":1,
                        "make":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32880415,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":648955,
            "displayName":"leventov",
            "reputation":3060
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@maaartinus Marko is right, my previous comment was removed due to obscene language. My assumption was that multiplying before masking lefts more flexibility for CPU to arrange instructions on arithmetic pipeline."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32880415]-[-1846405970]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@maaartinus Marko is right, my previous comment was removed due to obscene language. My assumption was that multiplying before masking lefts more flexibility for CPU to arrange instructions on arithmetic pipeline."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "maaartinus":1,
                        "due":1,
                        "languag":1,
                        "remov":1,
                        "arrang":1,
                        "mask":1,
                        "previous":1,
                        "left":1,
                        "pipelin":1,
                        "flexibl":1,
                        "multipli":1,
                        "marko":1,
                        "assumpt":1,
                        "arithmet":1,
                        "comment":1,
                        "cpu":1,
                        "obscen":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32877808,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":648955,
            "displayName":"leventov",
            "reputation":3060
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@maaartinus `U.getInt(table, INT_BASE + j * INT_SCALE)` works *slower* probably because JIT compiles array indexing into a single compute-address-and-memory-op command, where scale should be very small immediate (max 3 bits in assembly command code), but when you write `* INT_SCALE`, it doesn't know that `INT_SCALE` is smaller than 8, and compiles this construction in a couple of commands: `mul`, then offset-and-memory-op. Be careful. I didn't try `* 4L` neither to look into assembly (I'm lazy), though."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32877808]-[-246841690]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@maaartinus `U.getInt(table, INT_BASE + j * INT_SCALE)` works *slower* probably because JIT compiles array indexing into a single compute-address-and-memory-op command, where scale should be very small immediate (max 3 bits in assembly command code), but when you write `* INT_SCALE`, it doesn't know that `INT_SCALE` is smaller than 8, and compiles this construction in a couple of commands: `mul`, then offset-and-memory-op. Be careful. I didn't try `* 4L` neither to look into assembly (I'm lazy), though."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"U",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getInt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_BASE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_SCALE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jit":1,
                        "maaartinus":1,
                        "singl":1,
                        "assembl":2,
                        "bit":1,
                        "scale":4,
                        "lazi":1,
                        "care":1,
                        "command":3,
                        "work":1,
                        "base":1,
                        "code":1,
                        "small":1,
                        "tabl":1,
                        "array":1,
                        "comput":1,
                        "offset":1,
                        "max":1,
                        "slower":1,
                        "coupl":1,
                        "mul":1,
                        "address":1,
                        "smaller":1,
                        "compil":2,
                        "construct":1,
                        "write":1,
                        "index":1,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32878066,
          "postId":21708836,
          "creationDate":"2014-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@leventov The way you wrote it also ends up as a `mul`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21708836-cu32878066]-[58002839]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@leventov The way you wrote it also ends up as a `mul`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mul":1,
                        "leventov":1,
                        "wrote":1,
                        "end":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-02-11",
      "lastActivityDate":"2014-02-11",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":648955,
        "displayName":"leventov",
        "reputation":3060
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>No, this is evidently an effect of not enough smart bounds check elimination.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21708836]-[2124797602]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>No, this is evidently an effect of not enough smart bounds check elimination.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "effect":1,
                    "smart":1,
                    "bound":1,
                    "check":1,
                    "elimin":1,
                    "evid":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I've extended a benchmark by Marko Topolnik:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21708836]-[1947525110]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I've extended a benchmark by Marko Topolnik:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "extend":1,
                    "marko":1,
                    "topolnik":1,
                    "benchmark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@OutputTimeUnit(TimeUnit.NANOSECONDS) @BenchmarkMode(Mode.AverageTime) @OperationsPerInvocation(BCElimination.N) @Warmup(iterations = 5, time = 1) @Measurement(iterations = 10, time = 1) @State(Scope.Thread) @Threads(1) @Fork(2) public class BCElimination { public static final int N = 1024; private static final Unsafe U; private static final long INT_BASE; private static final long INT_SCALE; static { try { Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); f.setAccessible(true); U = (Unsafe) f.get(null); } catch (Exception e) { throw new IllegalStateException(e); } INT_BASE = U.arrayBaseOffset(int[].class); INT_SCALE = U.arrayIndexScale(int[].class); } private final int[] table = new int[BCElimination.N]; @Setup public void setUp() { final Random random = new Random(); for (int i=0; i&lt;table.length; ++i) table[i] = random.nextInt(); } @GenerateMicroBenchmark public int normalIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i=0; i&lt;=table.length-1; ++i) { x += i; final int j = x &amp; (table.length-1); result ^= table[i] + j; } return result; } @GenerateMicroBenchmark public int maskedIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i=0; i&lt;=table.length-1; ++i) { x += i; final int j = x &amp; (table.length-1); result ^= i + table[j]; } return result; } @GenerateMicroBenchmark public int maskedIndexUnsafe() { int result = 0; final int[] table = this.table; long x = 0; for (int i=0; i&lt;=table.length-1; ++i) { x += i * INT_SCALE; final long j = x &amp; ((table.length-1) * INT_SCALE); result ^= i + U.getInt(table, INT_BASE + j); } return result; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21708836]-[331138912]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OutputTimeUnit",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"TimeUnit",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"NANOSECONDS",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"BenchmarkMode",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Mode",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"AverageTime",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OperationsPerInvocation",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"BCElimination",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"N",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Warmup",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValuePairsNode",
                              "valuePairs":[
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"iterations",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"5"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"time",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"1"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Measurement",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValuePairsNode",
                              "valuePairs":[
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"iterations",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"10"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ElementValuePairNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"time",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "value":{
                                    "type":"ElementValueNode",
                                    "value":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"1"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"State",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Scope",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Thread",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Threads",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"1"
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"AnnotationNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Fork",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "element":{
                              "type":"ElementValueNode",
                              "value":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"2"
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BCElimination",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"N",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"1024"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"U",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Unsafe",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"INT_BASE",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"long",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"INT_SCALE",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"long",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"BlockDeclarationNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"TryCatchStatementNode",
                                    "block":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"f",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":".",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"ClassLiteralExpressionNode",
                                                        "aType":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"Unsafe",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "arrayDepths":[
                                                          
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"MethodInvocationNode",
                                                        "identifier":{
                                                          "type":"IdentifierNode",
                                                          "name":"getDeclaredField",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "args":{
                                                          "type":"ExpressionListNode",
                                                          "arguments":[
                                                            {
                                                              "type":"LiteralNode",
                                                              "node":{
                                                                "type":"StringLiteralNode",
                                                                "valueRep":"\"theUnsafe\""
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"Field",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"MethodInvocationNode",
                                            "qualifiedIdentifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"f",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"setAccessible",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "args":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                {
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"BooleanLiteralNode",
                                                    "valueRep":"true"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"U",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"CastExpressionNode",
                                              "aType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"Unsafe",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "argument":{
                                                "type":"MethodInvocationNode",
                                                "qualifiedIdentifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"f",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"get",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"NullLiteralNode"
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "catches":[
                                      {
                                        "type":"CatchClauseNode",
                                        "modifiers":[
                                          
                                        ],
                                        "catchType":{
                                          "type":"CatchTypeNode",
                                          "identifiers":[
                                            {
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"Exception",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"e",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "block":{
                                          "type":"BlockNode",
                                          "statements":[
                                            {
                                              "type":"ThrowStatementNode",
                                              "expression":{
                                                "type":"ConstructorCreatorNode",
                                                "creatorType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"IllegalStateException",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "expressionArgs":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"e",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "labels":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"INT_BASE",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"MethodInvocationNode",
                                        "qualifiedIdentifier":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"U",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"arrayBaseOffset",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "args":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            {
                                              "type":"ClassLiteralExpressionNode",
                                              "aType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepths":[
                                                {
                                                  "type":"ArrayDimensionNode",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"INT_SCALE",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"MethodInvocationNode",
                                        "qualifiedIdentifier":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"U",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"arrayIndexScale",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "args":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            {
                                              "type":"ClassLiteralExpressionNode",
                                              "aType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepths":[
                                                {
                                                  "type":"ArrayDimensionNode",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"table",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"ArrayExpressionCreatorNode",
                                          "creatorType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "expressionDepth":[
                                            {
                                              "type":"DimExpressionNode",
                                              "argument":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"BCElimination",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"N",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "arrayDepth":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"ArrayTypeNode",
                                      "typeNode":{
                                        "type":"PrimitiveTypeNode",
                                        "name":"int",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "depth":[
                                        {
                                          "type":"ArrayDimensionNode",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Setup",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"setUp",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"random",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"ConstructorCreatorNode",
                                                "creatorType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"Random",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "expressionArgs":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Random",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"table",
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"IdentifierNode",
                                              "name":"length",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"ArrayAccessSelectorNode",
                                          "identifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "dimExpression":{
                                            "type":"DimExpressionNode",
                                            "argument":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"MethodInvocationNode",
                                          "qualifiedIdentifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"random",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"nextInt",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "args":{
                                            "type":"ExpressionListNode",
                                            "arguments":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"GenerateMicroBenchmark",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"normalIndex",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"result",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"this",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"x",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"-",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"length",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"1"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"&",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"x",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"-",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"table",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"length",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"IntegerLiteralNode",
                                                            "valueRep":"1"
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"^=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"result",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"ArrayAccessSelectorNode",
                                                "identifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"table",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "dimExpression":{
                                                  "type":"DimExpressionNode",
                                                  "argument":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"i",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"j",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"result",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"GenerateMicroBenchmark",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"maskedIndex",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"result",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"this",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"x",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"-",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"length",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"1"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"&",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"x",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"-",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"table",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"length",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"LiteralNode",
                                                          "node":{
                                                            "type":"IntegerLiteralNode",
                                                            "valueRep":"1"
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"int",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"^=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"result",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"i",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"ArrayAccessSelectorNode",
                                                "identifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"table",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "dimExpression":{
                                                  "type":"DimExpressionNode",
                                                  "argument":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"j",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"result",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"GenerateMicroBenchmark",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"maskedIndexUnsafe",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"result",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      {
                                        "type":"KeywordModifierNode",
                                        "value":"final",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"table",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"this",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"table",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"x",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"long",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"int",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"-",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"table",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"length",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"1"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PrefixOperatorExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"x",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"*",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"i",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"INT_SCALE",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            {
                                              "type":"KeywordModifierNode",
                                              "value":"final",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"&",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"x",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"BinaryExpressionNode",
                                                        "operator":{
                                                          "type":"OperatorNode",
                                                          "symbol":"*",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "left":{
                                                          "type":"BinaryExpressionNode",
                                                          "operator":{
                                                            "type":"OperatorNode",
                                                            "symbol":"-",
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "left":{
                                                            "type":"QualifiedIdentifierNode",
                                                            "identifiers":[
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"table",
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"length",
                                                                "comments":[
                                                                  
                                                                ]
                                                              }
                                                            ],
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "right":{
                                                            "type":"LiteralNode",
                                                            "node":{
                                                              "type":"IntegerLiteralNode",
                                                              "valueRep":"1"
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "right":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"INT_SCALE",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"long",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"^=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"result",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"+",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"i",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"MethodInvocationNode",
                                                "qualifiedIdentifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"U",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"getInt",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"table",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    {
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"+",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"INT_BASE",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"j",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"result",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"@OutputTimeUnit(TimeUnit.NANOSECONDS) @BenchmarkMode(Mode.AverageTime) @OperationsPerInvocation(BCElimination.N) @Warmup(iterations = 5, time = 1) @Measurement(iterations = 10, time = 1) @State(Scope.Thread) @Threads(1) @Fork(2) public class BCElimination { public static final int N = 1024; private static final Unsafe U; private static final long INT_BASE; private static final long INT_SCALE; static { try { Field f = Unsafe.class.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); U = (Unsafe) f.get(null); } catch (Exception e) { throw new IllegalStateException(e); } INT_BASE = U.arrayBaseOffset(int[].class); INT_SCALE = U.arrayIndexScale(int[].class); } private final int[] table = new int[BCElimination.N]; @Setup public void setUp() { final Random random = new Random(); for (int i=0; i<table.length; ++i) table[i] = random.nextInt(); } @GenerateMicroBenchmark public int normalIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i=0; i<=table.length-1; ++i) { x += i; final int j = x & (table.length-1); result ^= table[i] + j; } return result; } @GenerateMicroBenchmark public int maskedIndex() { int result = 0; final int[] table = this.table; int x = 0; for (int i=0; i<=table.length-1; ++i) { x += i; final int j = x & (table.length-1); result ^= i + table[j]; } return result; } @GenerateMicroBenchmark public int maskedIndexUnsafe() { int result = 0; final int[] table = this.table; long x = 0; for (int i=0; i<=table.length-1; ++i) { x += i * INT_SCALE; final long j = x & ((table.length-1) * INT_SCALE); result ^= i + U.getInt(table, INT_BASE + j); } return result; } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "warmup":1,
                    "random":4,
                    "mask":2,
                    "field":2,
                    "state":2,
                    "invoc":1,
                    "scale":5,
                    "scope":1,
                    "normal":1,
                    "result":9,
                    "set":2,
                    "averag":1,
                    "declar":1,
                    "measur":1,
                    "base":4,
                    "fork":1,
                    "oper":1,
                    "tabl":18,
                    "array":2,
                    "thread":2,
                    "offset":1,
                    "micro":3,
                    "nanosecond":1,
                    "illeg":1,
                    "bcelimin":3,
                    "iter":2,
                    "true":1,
                    "mode":2,
                    "generat":3,
                    "length":7,
                    "unit":2,
                    "unsaf":5,
                    "time":5,
                    "output":1,
                    "setup":1,
                    "index":4,
                    "access":1,
                    "benchmark":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IllegalStateException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Random",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"long",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"U",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"arrayIndexScale",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              {
                                "type":"ArrayDimensionNode",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"f",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"get",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"random",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"nextInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"U",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"arrayBaseOffset",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              {
                                "type":"ArrayDimensionNode",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"U",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"table",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"INT_BASE",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"j",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"f",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getDeclaredField",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"theUnsafe\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"j",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"&",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"x",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"*",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"-",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"table",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"length",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"1"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"INT_SCALE",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"j",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"&",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"x",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"-",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"table",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"length",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"1"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"random",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Random",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Random",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"x",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"table",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"BCElimination",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"N",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"U",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"i",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"f",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ClassLiteralExpressionNode",
                              "aType":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Unsafe",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepths":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getDeclaredField",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"theUnsafe\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Field",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"result",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"INT_SCALE",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"x",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"table",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"table",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"N",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"1024"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"INT_BASE",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Results:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21708836]-[-327997009]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Results:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "result":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Benchmark Mean Mean error Units BCElimination.maskedIndex 1,235 0,004 ns/op BCElimination.maskedIndexUnsafe 1,092 0,007 ns/op BCElimination.normalIndex 1,071 0,008 ns/op "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[21708836]-[529038997]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"Benchmark Mean Mean error Units "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"BCElimination",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"maskedIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" 1,235 0,004 ns/op "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"BCElimination",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"maskedIndexUnsafe",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" 1,092 0,007 ns/op "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"BCElimination",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"normalIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" 1,071 0,008 ns/op "
                  }
                ]
              },
              "rawText":"Benchmark Mean Mean error Units BCEliminationmaskedIndex 1,235 0,004 ns/op BCEliminationmaskedIndexUnsafe 1,092 0,007 ns/op BCEliminationnormalIndex 1,071 0,008 ns/op ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "error":1,
                    "unit":1,
                    "unsaf":1,
                    "bceliminationmask":2,
                    "bceliminationnorm":1,
                    "index":3,
                    "benchmark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><br /> 2. The second question is for hotspot-dev mailing lists rather than StackOverflow, IMHO.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21708836]-[521913181]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><br /> 2. The second question is for hotspot-dev mailing lists rather than StackOverflow, IMHO.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"StackOverflow",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "overflow":1,
                    "hotspot":1,
                    "imho":1,
                    "dev":1,
                    "mail":1,
                    "stack":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"StackOverflow",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}