{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":296116,
    "title":"How do RESTful and SOAP Web Services differ in practice?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":143132,
        "postId":296116,
        "creationDate":"2008-11-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":10661,
          "displayName":"S.Lott",
          "reputation":220649
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't get the question. What can't you do? What problem are you having?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[296116-cu143132]-[475451396]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't get the question. What can't you do? What problem are you having?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "problem":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      ".net",
      "php",
      "web-services",
      "nusoap"
    ],
    "creationDate":"2008-11-17",
    "lastActivityDate":"2008-11-18",
    "score":7,
    "viewCount":2497,
    "owner":{
      "type":"StackOverflowUser",
      "id":4639,
      "displayName":"Edward Tanguay",
      "reputation":48174
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am implementing web services for a PHP application and am trying to understand what both standard web services and RESTful web services have to offer. My intent is to write wrapper code to abstract away the web service details so that developers can just &quot;instantiate remote objects&quot; and use them. Here are my thoughts, perhaps some of you could add your experience and expand this:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[1118341439]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am implementing web services for a PHP application and am trying to understand what both standard web services and RESTful web services have to offer. My intent is to write wrapper code to abstract away the web service details so that developers can just &quot;instantiate remote objects&quot; and use them. Here are my thoughts, perhaps some of you could add your experience and expand this:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "instanti":1,
                  "thought":1,
                  "standard":1,
                  "intent":1,
                  "rest":1,
                  "understand":1,
                  "experi":1,
                  "object":1,
                  "expand":1,
                  "code":1,
                  "web":4,
                  "php":1,
                  "wrapper":1,
                  "applic":1,
                  "implement":1,
                  "quot":2,
                  "offer":1,
                  "detail":1,
                  "develop":1,
                  "add":1,
                  "servic":4,
                  "write":1,
                  "remot":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>RESTful Web Servcies</strong></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[591047763]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>RESTful Web Servcies</strong></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "strong":2,
                  "servci":1,
                  "web":1,
                  "rest":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>are basically just &quot;XML feeds on demand&quot;, so e.g. you could write wrapper code for a client application so it could query the server application in this way:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[258721835]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>are basically just &quot;XML feeds on demand&quot;, so e.g. you could write wrapper code for a client application so it could query the server application in this way:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "server":1,
                  "code":1,
                  "queri":1,
                  "xml":1,
                  "client":1,
                  "wrapper":1,
                  "feed":1,
                  "applic":2,
                  "quot":2,
                  "basic":1,
                  "demand":1,
                  "write":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"$users = Users::getUsers(&quot;state = 'CO'&quot;); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[296116]-[-1739304953]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"$users = Users::"
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"getUsers",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"state = 'CO'\""
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"$users = Users::getUsers(\"state = 'CO'\"); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "state":1,
                  "user":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getUsers",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"state = 'CO'\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>this would in turn get an XML feed form a remote URL</li> \n <li>$users could be made into a collection of full User objects, or</li> \n <li>left as XML, or</li> \n <li>turned into an array, etc.</li> \n <li>the query script (&quot;state = 'CO'&quot;) would be translated into SQL on the server side</li> \n <li><p>RESTful Web Services are in general read-only from the view of the client, although you could write code which could use POST or GET to make changes on the server, e.g. passing an encrypted token for security, e.g.:</p> <p>$users = Users::addUser($encryptedTrustToken, 'jim',$encryptedPassword, 'James', 'Taylor');</p></li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[-740513301]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>this would in turn get an XML feed form a remote URL</li> \n <li>$users could be made into a collection of full User objects, or</li> \n <li>left as XML, or</li> \n <li>turned into an array, etc.</li> \n <li>the query script (&quot;state = 'CO'&quot;) would be translated into SQL on the server side</li> \n <li><p>RESTful Web Services are in general read-only from the view of the client, although you could write code which could use POST or GET to make changes on the server, e.g. passing an encrypted token for security, e.g.:</p> <p>$users = Users::addUser($encryptedTrustToken, 'jim',$encryptedPassword, 'James', 'Taylor');</p></li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"addUser",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"encryptedTrustToken",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"encryptedPassword",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":1,
                  "read":1,
                  "post":1,
                  "sql":1,
                  "server":2,
                  "state":1,
                  "url":1,
                  "trust":1,
                  "rest":1,
                  "full":1,
                  "left":1,
                  "encrypt":3,
                  "secur":1,
                  "object":1,
                  "jame":1,
                  "code":1,
                  "web":1,
                  "array":1,
                  "general":1,
                  "queri":1,
                  "xml":2,
                  "jim":1,
                  "client":1,
                  "translat":1,
                  "token":2,
                  "feed":1,
                  "turn":2,
                  "pass":1,
                  "make":1,
                  "quot":2,
                  "collect":1,
                  "script":1,
                  "form":1,
                  "taylor":1,
                  "made":1,
                  "add":1,
                  "user":5,
                  "servic":1,
                  "write":1,
                  "remot":1,
                  "view":1,
                  "password":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>and this would create a new user on the server application.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[1469684824]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>and this would create a new user on the server application.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "applic":1,
                  "user":1,
                  "creat":1,
                  "server":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Standard Web Services</strong></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[1320535453]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Standard Web Services</strong></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "standard":1,
                  "servic":1,
                  "strong":2,
                  "web":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Standard Web Servcies in the end basically do the same thing. The one advantage they have is that client can discover their details via WSDL. But other than that, if I want to write wrapper code which allows a developer to instantiate, edit and save objects remotely, I still need to implement the wrapper code. SOAP doesn't do any of that for me, it can do this:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[-1231054982]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Standard Web Servcies in the end basically do the same thing. The one advantage they have is that client can discover their details via WSDL. But other than that, if I want to write wrapper code which allows a developer to instantiate, edit and save objects remotely, I still need to implement the wrapper code. SOAP doesn't do any of that for me, it can do this:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "wsdl":1,
                  "instanti":1,
                  "standard":1,
                  "thing":1,
                  "object":1,
                  "code":2,
                  "web":1,
                  "edit":1,
                  "advantag":1,
                  "servci":1,
                  "soap":1,
                  "client":1,
                  "wrapper":2,
                  "discov":1,
                  "implement":1,
                  "end":1,
                  "detail":1,
                  "basic":1,
                  "develop":1,
                  "save":1,
                  "write":1,
                  "remot":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"$soap = new nusoap_client('http://localhost/test/webservice_user.php?wsdl', true); $user = $soap-&gt;getProxy(); $lastName = $user-&gt;lastName(); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[296116]-[-417613050]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"$soap = new "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"nusoap_client",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"('http://localhost/test/"
                },
                {
                  "type":"IdentifierNode",
                  "name":"webservice_user",
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":".php?wsdl', true); $user = $soap->"
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"getProxy",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"$"
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"lastName",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" = $user->"
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"lastName",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"$soap = new nusoap_client('http://localhost/test/webservice_user.php?wsdl', true); $user = $soap->getProxy(); $lastName = $user->lastName(); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":1,
                  "wsdl":1,
                  "webservic":1,
                  "localhost":1,
                  "nusoap":1,
                  "soap":2,
                  "client":1,
                  "php":1,
                  "true":1,
                  "proxi":1,
                  "http":1,
                  "user":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getProxy",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"lastName",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>but if I want to edit and save:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[932021989]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>but if I want to edit and save:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "edit":1,
                  "save":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"$user-&gt;setLastName('Jones'); $user-&gt;save(); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[296116]-[241799175]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"$user->"
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"setLastName",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"('Jones'); $user->"
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"save",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"$user->setLastName('Jones'); $user->save(); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "set":1,
                  "jone":1,
                  "user":2,
                  "save":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"save",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>then I need to e.g. handle all of the state on the server side, SOAP doesn't seem to hold that object on the server side for each client. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[-1042261010]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>then I need to e.g. handle all of the state on the server side, SOAP doesn't seem to hold that object on the server side for each client. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":2,
                  "server":2,
                  "state":1,
                  "object":1,
                  "hold":1,
                  "soap":1,
                  "client":1,
                  "handl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Perhaps there are limitations in the PHP SOAP implementation I am using (nusoap). Perhaps Java and .NET implementations do much more.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[-968103747]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Perhaps there are limitations in the PHP SOAP implementation I am using (nusoap). Perhaps Java and .NET implementations do much more.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "nusoap":1,
                  "net":1,
                  "soap":1,
                  "php":1,
                  "implement":2,
                  "limit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Will enjoy hearing your feedback to clear up some of these clouds.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[296116]-[1368703383]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Will enjoy hearing your feedback to clear up some of these clouds.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "clear":1,
                  "hear":1,
                  "feedback":1,
                  "cloud":1,
                  "enjoy":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":296178,
      "questionId":296116,
      "comments":[
        
      ],
      "creationDate":"2008-11-17",
      "lastActivityDate":"2008-11-17",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":25737,
        "displayName":"Igal Serban",
        "reputation":7406
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>My feedback is that if you want remote state, you are not talking about web services. I don't know about any contemporary model that deal with remote state. I think that if you need remote state you are on your own ( without religion to follow ). Just throw xml from here to there and don't mind the theory.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296178]-[-2104351391]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>My feedback is that if you want remote state, you are not talking about web services. I don't know about any contemporary model that deal with remote state. I think that if you need remote state you are on your own ( without religion to follow ). Just throw xml from here to there and don't mind the theory.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "model":1,
                    "state":3,
                    "talk":1,
                    "theori":1,
                    "web":1,
                    "feedback":1,
                    "mind":1,
                    "xml":1,
                    "religion":1,
                    "contemporari":1,
                    "deal":1,
                    "servic":1,
                    "remot":3,
                    "follow":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have to add that remote state is evil. Avoid it if you can.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296178]-[-1009234952]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have to add that remote state is evil. Avoid it if you can.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "state":1,
                    "avoid":1,
                    "evil":1,
                    "add":1,
                    "remot":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":296225,
      "questionId":296116,
      "comments":[
        
      ],
      "creationDate":"2008-11-17",
      "lastActivityDate":"2008-11-17",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":9711,
        "displayName":"Sixto Saez",
        "reputation":10082
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Soap is just a set of agreed upon XML schemas blessed by a standards group. It's strength is that it was designed for interoperability and it supports many enterprise-class features. Soap on any platform will not provide the operations you are looking for. You need to design &amp; implement the service contract to get those features.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296225]-[-397863963]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Soap is just a set of agreed upon XML schemas blessed by a standards group. It's strength is that it was designed for interoperability and it supports many enterprise-class features. Soap on any platform will not provide the operations you are looking for. You need to design &amp; implement the service contract to get those features.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"features",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "provid":1,
                    "design":2,
                    "standard":1,
                    "interoper":1,
                    "bless":1,
                    "set":1,
                    "strength":1,
                    "amp":1,
                    "oper":1,
                    "schema":1,
                    "xml":1,
                    "soap":2,
                    "implement":1,
                    "agre":1,
                    "featur":2,
                    "enterpris":1,
                    "platform":1,
                    "group":1,
                    "servic":1,
                    "contract":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Sounds like you want remote objects which neither Soap or REST are particularly good for. Maybe you'd be better off looking at <a href=\"http://www.xmlrpc.com/\"rel=\"nofollow\"title=\"XML-RPC\">XML-RPC</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296225]-[1913485294]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Sounds like you want remote objects which neither Soap or REST are particularly good for. Maybe you'd be better off looking at <a href=\"http://www.xmlrpc.com/\"rel=\"nofollow\"title=\"XML-RPC\">XML-RPC</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "good":1,
                    "rest":1,
                    "rel":1,
                    "titl":1,
                    "object":1,
                    "nofollow":1,
                    "xml":2,
                    "soap":1,
                    "sound":1,
                    "href":1,
                    "http":1,
                    "rpc":2,
                    "xmlrpc":1,
                    "remot":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":297796,
      "questionId":296116,
      "comments":[
        
      ],
      "creationDate":"2008-11-18",
      "lastActivityDate":"2008-11-18",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":36397,
        "displayName":"yclian",
        "reputation":1115
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm echoing what Marc Gravell mentioned. When people ask me about REST (and they usually have an idea about SOAP and SOA), I will tell them REST = ROA as it is resource/data oriented, it's a different paradigm and therefore has different design concerns.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[-575867520]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm echoing what Marc Gravell mentioned. When people ask me about REST (and they usually have an idea about SOAP and SOA), I will tell them REST = ROA as it is resource/data oriented, it's a different paradigm and therefore has different design concerns.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "gravel":1,
                    "design":1,
                    "rest":2,
                    "soa":1,
                    "data":1,
                    "idea":1,
                    "resourc":1,
                    "roa":1,
                    "concern":1,
                    "mention":1,
                    "paradigm":1,
                    "soap":1,
                    "echo":1,
                    "orient":1,
                    "marc":1,
                    "peopl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For your case, if I'm reading you correctly, you want to avoid writing the wrapper code and need a solution that can store objects and their attributes remotely (and having them completely hidden from the developers). I can't really suggest a better solution.. Umm, let me know if either of these ever come close to meet your requirements:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[295237553]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For your case, if I'm reading you correctly, you want to avoid writing the wrapper code and need a solution that can store objects and their attributes remotely (and having them completely hidden from the developers). I can't really suggest a better solution.. Umm, let me know if either of these ever come close to meet your requirements:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "requir":1,
                    "suggest":1,
                    "correct":1,
                    "hidden":1,
                    "store":1,
                    "avoid":1,
                    "object":1,
                    "code":1,
                    "attribut":1,
                    "umm":1,
                    "wrapper":1,
                    "meet":1,
                    "complet":1,
                    "close":1,
                    "develop":1,
                    "solut":2,
                    "write":1,
                    "remot":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li><a href=\"http://www.javabeat.net/articles/5-introduction-to-java-persistence-apijpa-1.html\"rel=\"nofollow\">EJB3 / JPA</a></li> \n <li><a href=\"http://wiki.apache.org/couchdb/Basics\"rel=\"nofollow\">CouchDB</a> (REST/JSON)</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[1247405891]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li><a href=\"http://www.javabeat.net/articles/5-introduction-to-java-persistence-apijpa-1.html\"rel=\"nofollow\">EJB3 / JPA</a></li> \n <li><a href=\"http://wiki.apache.org/couchdb/Basics\"rel=\"nofollow\">CouchDB</a> (REST/JSON)</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "apach":1,
                    "json":1,
                    "couchdb":1,
                    "introduct":1,
                    "rest":1,
                    "rel":2,
                    "ejb":1,
                    "jpa":1,
                    "javabeat":1,
                    "articl":1,
                    "net":1,
                    "apijpa":1,
                    "persist":1,
                    "nofollow":2,
                    "couch":1,
                    "wiki":1,
                    "org":1,
                    "html":1,
                    "href":2,
                    "basic":1,
                    "http":2,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Let me know too if I've interpreted your question wrongly.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[1316014862]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Let me know too if I've interpreted your question wrongly.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wrong":1,
                    "question":1,
                    "interpret":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If we compare XML-RPC and SOAP, the latter will give you better data types handling, for the former although you will be dealing with simpler data types but you will have to write a layer or adapter to convert them to your domain objects.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[-889156767]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If we compare XML-RPC and SOAP, the latter will give you better data types handling, for the former although you will be dealing with simpler data types but you will have to write a layer or adapter to convert them to your domain objects.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "adapt":1,
                    "domain":1,
                    "data":2,
                    "object":1,
                    "layer":1,
                    "xml":1,
                    "compar":1,
                    "soap":1,
                    "give":1,
                    "type":2,
                    "rpc":1,
                    "handl":1,
                    "deal":1,
                    "convert":1,
                    "write":1,
                    "simpler":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>yc</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[297796]-[-698778091]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>yc</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":296170,
      "questionId":296116,
      "comments":[
        
      ],
      "creationDate":"2008-11-17",
      "lastActivityDate":"2008-11-17",
      "lastEditDate":"2008-11-17",
      "score":7,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":23354,
        "displayName":"Marc Gravell",
        "reputation":525054
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>They are different models... REST is <strong>data-centric</strong>, where-as SOAP is <strong>operation-centric</strong>. i.e. with SOAP you tend to have discreet operations &quot;SubmitOrder&quot;, etc; but with REST you are typically a lot more fluid about how you are querying the data.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[-407072461]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>They are different models... REST is <strong>data-centric</strong>, where-as SOAP is <strong>operation-centric</strong>. i.e. with SOAP you tend to have discreet operations &quot;SubmitOrder&quot;, etc; but with REST you are typically a lot more fluid about how you are querying the data.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SubmitOrder",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fluid":1,
                    "model":1,
                    "rest":2,
                    "data":2,
                    "discreet":1,
                    "submit":1,
                    "strong":4,
                    "centric":2,
                    "oper":2,
                    "queri":1,
                    "typic":1,
                    "tend":1,
                    "order":1,
                    "soap":2,
                    "lot":1,
                    "quot":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SubmitOrder",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>SOAP also tends to be associated with a lot more complexity (which is sometimes necessary) - REST is back to POX etc, and YAGNI.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[-782049176]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>SOAP also tends to be associated with a lot more complexity (which is sometimes necessary) - REST is back to POX etc, and YAGNI.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "yagni":1,
                    "rest":1,
                    "pox":1,
                    "soap":1,
                    "back":1,
                    "lot":1,
                    "complex":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[681205387]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[681205387]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In terms of .NET, tools like &quot;wsdl.exe&quot; will give you a full client-side proxy library to represent a SOAP service (or &quot;svcutil.exe&quot; for a WCF service):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[935685736]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In terms of .NET, tools like &quot;wsdl.exe&quot; will give you a full client-side proxy library to represent a SOAP service (or &quot;svcutil.exe&quot; for a WCF service):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "wsdl":1,
                    "svcutil":1,
                    "tool":1,
                    "full":1,
                    "term":1,
                    "librari":1,
                    "net":1,
                    "wcf":1,
                    "soap":1,
                    "client":1,
                    "give":1,
                    "quot":4,
                    "proxi":1,
                    "repres":1,
                    "servic":2,
                    "exe":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"var someResult = proxy.SubmitOrder(...); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[296170]-[1666914955]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"var "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"someResult",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"proxy",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SubmitOrder",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"var someResult = proxy.SubmitOrder(...); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "result":1,
                    "submit":1,
                    "order":1,
                    "proxi":1,
                    "var":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"proxy",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"SubmitOrder",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For REST with .NET, I guess ADO.NET Data Services is the most obvious player. Here, the tooling (datasvcutil.exe) will give you a full client-side data-context with LINQ support. LINQ is .NET's relatively new way of forming complex queries. So something like (with strong/static type checking and intellisense):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[-483389878]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For REST with .NET, I guess ADO.NET Data Services is the most obvious player. Here, the tooling (datasvcutil.exe) will give you a full client-side data-context with LINQ support. LINQ is .NET's relatively new way of forming complex queries. So something like (with strong/static type checking and intellisense):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "support":1,
                    "linq":2,
                    "tool":1,
                    "rest":1,
                    "obvious":1,
                    "context":1,
                    "datasvcutil":1,
                    "data":2,
                    "full":1,
                    "strong":1,
                    "net":3,
                    "player":1,
                    "queri":1,
                    "check":1,
                    "ado":1,
                    "client":1,
                    "give":1,
                    "guess":1,
                    "type":1,
                    "form":1,
                    "intellisens":1,
                    "servic":1,
                    "complex":1,
                    "exe":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"var qry = from user in ctx.Users where user.State == 'CO' select user; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[296170]-[-1241145498]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"var qry = from user in ctx.Users where user.State == 'CO' select user; "
                  }
                ]
              },
              "rawText":"var qry = from user in ctx.Users where user.State == 'CO' select user; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "qri":1,
                    "ctx":1,
                    "state":1,
                    "select":1,
                    "user":4,
                    "var":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(this will be translated to/from the appropriate REST syntax for ADO.NET Data Services)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296170]-[1241566050]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(this will be translated to/from the appropriate REST syntax for ADO.NET Data Services)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rest":1,
                    "data":1,
                    "net":1,
                    "syntax":1,
                    "ado":1,
                    "translat":1,
                    "servic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":296174,
      "questionId":296116,
      "comments":[
        
      ],
      "creationDate":"2008-11-17",
      "lastActivityDate":"2008-11-17",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":13663,
        "displayName":"Will Hartung",
        "reputation":62758
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The key differences are basically tooling.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296174]-[-1720718641]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The key differences are basically tooling.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "basic":1,
                    "key":1,
                    "differ":1,
                    "tool":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Many of the high end SOAP stacks shroud the vast bulk of the SOAP infrastructure from the developer, to where you are working pretty much solely with DTO's/Documents and RPC.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296174]-[2116455659]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Many of the high end SOAP stacks shroud the vast bulk of the SOAP infrastructure from the developer, to where you are working pretty much solely with DTO's/Documents and RPC.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sole":1,
                    "dto":1,
                    "bulk":1,
                    "document":1,
                    "vast":1,
                    "work":1,
                    "infrastructur":1,
                    "pretti":1,
                    "shroud":1,
                    "soap":2,
                    "stack":1,
                    "end":1,
                    "develop":1,
                    "rpc":1,
                    "high":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>REST over HTTP puts more of that burden upon you the developer (negotiating formats [XML, JSON, HTTP POST], parsing results [DOM, maps, DTO marshalling, etc.]).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296174]-[-1528744911]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>REST over HTTP puts more of that burden upon you the developer (negotiating formats [XML, JSON, HTTP POST], parsing results [DOM, maps, DTO marshalling, etc.]).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "format":1,
                    "post":1,
                    "dto":1,
                    "negoti":1,
                    "map":1,
                    "json":1,
                    "rest":1,
                    "result":1,
                    "dom":1,
                    "burden":1,
                    "pars":1,
                    "xml":1,
                    "put":1,
                    "develop":1,
                    "http":2,
                    "marshal":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Obviously, you can write a layer of logic to make dealing with this detail easier. And some REST frameworks have arrived to make this easier, but at the moment, it's still a task on your TODO list when you wish to use or consume such services.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[296174]-[-221252318]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Obviously, you can write a layer of logic to make dealing with this detail easier. And some REST frameworks have arrived to make this easier, but at the moment, it's still a task on your TODO list when you wish to use or consume such services.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "consum":1,
                    "task":1,
                    "rest":1,
                    "arriv":1,
                    "framework":1,
                    "logic":1,
                    "layer":1,
                    "easier":2,
                    "moment":1,
                    "make":2,
                    "detail":1,
                    "todo":1,
                    "deal":1,
                    "servic":1,
                    "write":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}