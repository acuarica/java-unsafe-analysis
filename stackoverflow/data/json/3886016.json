{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":3886016,
    "title":"How to pause a Thread's Message Queue in Android?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":4138290,
        "postId":3886016,
        "creationDate":"2010-10-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":243712,
          "displayName":"poolie",
          "reputation":3381
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Why not just stop sending messages until you're ready for it to continue? Pausing the recipient seems to kind of break the message-queuing abstraction."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3886016-cu4138290]-[-811467912]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Why not just stop sending messages until you're ready for it to continue? Pausing the recipient seems to kind of break the message-queuing abstraction."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "readi":1,
                      "paus":1,
                      "abstract":1,
                      "stop":1,
                      "queu":1,
                      "messag":2,
                      "kind":1,
                      "recipi":1,
                      "send":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4138437,
        "postId":3886016,
        "creationDate":"2010-10-07",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":445348,
          "displayName":"cottonBallPaws",
          "reputation":6021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The queue is going to be used for things like downloading content from the web, writing files, etc. I want to be able to pause the queue if the user is in certain places in the application that would benefit from having less going on in the background and over the web connection."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3886016-cu4138437]-[2121681053]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The queue is going to be used for things like downloading content from the web, writing files, etc. I want to be able to pause the queue if the user is in certain places in the application that would benefit from having less going on in the background and over the web connection."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "connect":1,
                      "queue":2,
                      "background":1,
                      "paus":1,
                      "thing":1,
                      "web":2,
                      "applic":1,
                      "content":1,
                      "file":1,
                      "place":1,
                      "benefit":1,
                      "download":1,
                      "user":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4138528,
        "postId":3886016,
        "creationDate":"2010-10-08",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":445348,
          "displayName":"cottonBallPaws",
          "reputation":6021
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Maybe to clarify, it doesn't have to work the way I'm doing it. I'm trying to find a simple way to queue up a bunch of tasks on a thread and be able to add, pause and stop that queue at any time. That's really what I'm looking for."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3886016-cu4138528]-[-835953246]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Maybe to clarify, it doesn't have to work the way I'm doing it. I'm trying to find a simple way to queue up a bunch of tasks on a thread and be able to add, pause and stop that queue at any time. That's really what I'm looking for."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "task":1,
                      "simpl":1,
                      "queue":2,
                      "paus":1,
                      "bunch":1,
                      "stop":1,
                      "work":1,
                      "thread":1,
                      "time":1,
                      "add":1,
                      "clarifi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":45495359,
        "postId":3886016,
        "creationDate":"2015-02-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2228506,
          "displayName":"dangalg",
          "reputation":813
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I'm looking for tge same solution. Maybe if we used a global static boolean we could pause abd play our looper... what do you think??"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3886016-cu45495359]-[597303831]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I'm looking for tge same solution. Maybe if we used a global static boolean we could pause abd play our looper... what do you think??"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "paus":1,
                      "play":1,
                      "abd":1,
                      "global":1,
                      "tge":1,
                      "looper":1,
                      "solut":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "android",
      "multithreading",
      "message-queue"
    ],
    "creationDate":"2010-10-07",
    "lastActivityDate":"2010-10-14",
    "score":1,
    "viewCount":1134,
    "owner":{
      "type":"StackOverflowUser",
      "id":445348,
      "displayName":"cottonBallPaws",
      "reputation":6021
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am queuing up a bunch of runnables into a thread via a Handler.post(). I would like the ability to send a note to that thread that it should pause.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3886016]-[-1719101333]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am queuing up a bunch of runnables into a thread via a Handler.post(). I would like the ability to send a note to that thread that it should pause.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "post":1,
                  "paus":1,
                  "bunch":1,
                  "thread":2,
                  "note":1,
                  "queu":1,
                  "runnabl":1,
                  "abil":1,
                  "handler":1,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>By pause I mean, finish the runnable or message you are currently working on, but don't go to the next message or runnable in your message queue until I tell you to continue.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3886016]-[2086302142]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>By pause I mean, finish the runnable or message you are currently working on, but don't go to the next message or runnable in your message queue until I tell you to continue.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "queue":1,
                  "paus":1,
                  "finish":1,
                  "work":1,
                  "runnabl":2,
                  "messag":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":3886136,
      "questionId":3886016,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":4137785,
          "postId":3886136,
          "creationDate":"2010-10-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":445348,
            "displayName":"cottonBallPaws",
            "reputation":6021
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for a quick response. Is a Looper required for the thread to have a queue? If so how does that play into this picture?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3886136-cu4137785]-[-101826488]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for a quick response. Is a Looper required for the thread to have a queue? If so how does that play into this picture?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "queue":1,
                        "play":1,
                        "requir":1,
                        "thread":1,
                        "looper":1,
                        "quick":1,
                        "pictur":1,
                        "respons":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4137887,
          "postId":3886136,
          "creationDate":"2010-10-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":328227,
            "displayName":"mklfarha",
            "reputation":595
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"To only pause the thread i think so, and for the play you would call setPause(false); so it will go into the wile again, in the //work you would take out the next message or call the runnable that you need, think of it as an administrator of your queue..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3886136-cu4137887]-[-164179339]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"To only pause the thread i think so, and for the play you would call setPause(false); so it will go into the wile again, in the //work you would take out the next message or call the runnable that you need, think of it as an administrator of your queue..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"setPause",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"LiteralNode",
                              "node":{
                                "type":"BooleanLiteralNode",
                                "valueRep":"false"
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "administr":1,
                        "queue":1,
                        "paus":2,
                        "play":1,
                        "set":1,
                        "wile":1,
                        "work":1,
                        "thread":1,
                        "runnabl":1,
                        "fals":1,
                        "messag":1,
                        "call":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"setPause",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"BooleanLiteralNode",
                                  "valueRep":"false"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4137875,
          "postId":3886136,
          "creationDate":"2010-10-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":445348,
            "displayName":"cottonBallPaws",
            "reputation":6021
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"To clarify that last question, where you have // work, what is happening there? If the thread is simply there to process runnables in the message queue, there isn't anything to put in the // work space. Where are the runnables that are posted to that thread running? Would that while statement actually effect them?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3886136-cu4137875]-[1838468429]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"To clarify that last question, where you have // work, what is happening there? If the thread is simply there to process runnables in the message queue, there isn't anything to put in the // work space. Where are the runnables that are posted to that thread running? Would that while statement actually effect them?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "post":1,
                        "queue":1,
                        "happen":1,
                        "process":1,
                        "run":1,
                        "effect":1,
                        "statement":1,
                        "work":2,
                        "thread":2,
                        "simpli":1,
                        "space":1,
                        "isn":1,
                        "runnabl":2,
                        "put":1,
                        "messag":1,
                        "clarifi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4138037,
          "postId":3886136,
          "creationDate":"2010-10-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":445348,
            "displayName":"cottonBallPaws",
            "reputation":6021
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Would you be able to give some example code? I'm still not quite sure how that would all look in regards to messages, handlers, etc. Thanks again."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3886136-cu4138037]-[-1304871038]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Would you be able to give some example code? I'm still not quite sure how that would all look in regards to messages, handlers, etc. Thanks again."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "give":1,
                        "messag":1,
                        "handler":1,
                        "code":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-10-07",
      "lastActivityDate":"2010-10-07",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":328227,
        "displayName":"mklfarha",
        "reputation":595
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is no pause method for Thread implemented in Java, but you can simulate a pause with a boolean, and waiting for the last message to finish is something you could do in your setter method of the boolean,</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3886136]-[-345689399]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is no pause method for Thread implemented in Java, but you can simulate a pause with a boolean, and waiting for the last message to finish is something you could do in your setter method of the boolean,</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "wait":1,
                    "paus":2,
                    "setter":1,
                    "simul":1,
                    "finish":1,
                    "thread":1,
                    "implement":1,
                    "messag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public void run(){ while(!paused &amp;&amp; !finised){ // work } } public void setPause(boolean paused){ //wait for your last message if there is one and then this.paused = paused; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[3886136]-[1138310849]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"run",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"WhileStatementNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"&&",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"PrefixOperatorExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"!",
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"paused",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"PrefixOperatorExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"!",
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"finised",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"// work } } public void setPause(boolean paused){ //wait for your last message if there is one and then this.paused = paused; } \n"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public void run(){ while(!paused && !finised){ // work } } public void setPause(boolean paused){ //wait for your last message if there is one and then this.paused = paused; } \n...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "finis":1,
                    "wait":1,
                    "paus":5,
                    "run":1,
                    "set":1,
                    "work":1,
                    "messag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and you should use an other boolean to know if the thread has finished, to exit the while.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3886136]-[1678590163]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and you should use an other boolean to know if the thread has finished, to exit the while.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "finish":1,
                    "thread":1,
                    "exit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3929371,
      "questionId":3886016,
      "comments":[
        
      ],
      "creationDate":"2010-10-14",
      "lastActivityDate":"2010-10-14",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":445348,
        "displayName":"cottonBallPaws",
        "reputation":6021
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In case anyone else finds their way to this question, I ended up going with a ThreadPoolExecutor, using the example code in it's documentation for creating a PausableThreadPoolExecutor: <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\"rel=\"nofollow\">http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3929371]-[-2115089419]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In case anyone else finds their way to this question, I ended up going with a ThreadPoolExecutor, using the example code in it's documentation for creating a PausableThreadPoolExecutor: <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\"rel=\"nofollow\">http://download.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ThreadPoolExecutor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PausableThreadPoolExecutor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "question":1,
                    "concurr":2,
                    "util":2,
                    "document":1,
                    "rel":1,
                    "oracl":2,
                    "pausabl":1,
                    "doc":2,
                    "code":1,
                    "thread":4,
                    "nofollow":1,
                    "pool":4,
                    "javas":2,
                    "end":1,
                    "api":2,
                    "html":2,
                    "href":1,
                    "executor":4,
                    "http":2,
                    "creat":1,
                    "download":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ThreadPoolExecutor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PausableThreadPoolExecutor",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It doesn't use the Message Queue or Looper but it accomplishes what I was trying to do, which was to create a queue of Runnables that was able to be paused and/or canceled. It has the added bonus of being able to spread the queue over a specified number of threads.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3929371]-[943270477]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It doesn't use the Message Queue or Looper but it accomplishes what I was trying to do, which was to create a queue of Runnables that was able to be paused and/or canceled. It has the added bonus of being able to spread the queue over a specified number of threads.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "cancel":1,
                    "spread":1,
                    "bonus":1,
                    "queue":3,
                    "paus":1,
                    "thread":1,
                    "accomplish":1,
                    "runnabl":1,
                    "ad":1,
                    "looper":1,
                    "messag":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}