{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7602866,
    "title":"How to create a program that solves a Triangular Peg solitare - C++ / Java programming?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":9224366,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":6,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":128940,
          "displayName":"Beta",
          "reputation":41777
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You've studied C++ for a year, and don't know where to start? How about with a `board` class, and a few methods like `move` and `display`?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224366]-[-1181767938]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You've studied C++ for a year, and don't know where to start? How about with a `board` class, and a few methods like `move` and `display`?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "move":1,
                      "year":1,
                      "board":1,
                      "studi":1,
                      "start":1,
                      "display":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9224399,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":152109,
          "displayName":"Per Alexandersson",
          "reputation":1057
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Look into search algorithms, (Depth-first-search with recursion should be a good exercise to use here)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224399]-[-1769574131]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Look into search algorithms, (Depth-first-search with recursion should be a good exercise to use here)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "good":1,
                      "recurs":1,
                      "algorithm":1,
                      "exercis":1,
                      "depth":1,
                      "search":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9224439,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":225074,
          "displayName":"Thomas Matthews",
          "reputation":24295
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This may be easier not using classes and just standalone functions."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224439]-[-1898480857]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This may be easier not using classes and just standalone functions."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "easier":1,
                      "function":1,
                      "standalon":1,
                      "class":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9224446,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":37213,
          "displayName":"duffymo",
          "reputation":199962
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Smells like &quot;Please do my homework for me.&quot;"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224446]-[1522868531]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Smells like &quot;Please do my homework for me.&quot;"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "homework":1,
                      "quot":2,
                      "smell":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9224512,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":971899,
          "displayName":"user971899",
          "reputation":1
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I've been looking into some, but it sort of confuses me as to what to use where. how can I show the moving of the pegs using functions?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224512]-[-260449325]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I've been looking into some, but it sort of confuses me as to what to use where. how can I show the moving of the pegs using functions?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "move":1,
                      "peg":1,
                      "show":1,
                      "function":1,
                      "confus":1,
                      "sort":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9224525,
        "postId":7602866,
        "creationDate":"2011-09-29",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":971899,
          "displayName":"user971899",
          "reputation":1
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Im sorry im not the brightest out there"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7602866-cu9224525]-[-1073815995]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Im sorry im not the brightest out there"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "brightest":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "c++"
    ],
    "creationDate":"2011-09-29",
    "lastActivityDate":"2011-12-09",
    "lastEditDate":"2011-12-09",
    "score":0,
    "viewCount":1279,
    "owner":{
      "type":"StackOverflowUser",
      "id":971899,
      "displayName":"user971899",
      "reputation":1
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Honestly, I only knew of such a game recently and I wonder how one can create a solving algorithm using the recursive search method?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7602866]-[-338885878]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Honestly, I only knew of such a game recently and I wonder how one can create a solving algorithm using the recursive search method?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "solv":1,
                  "method":1,
                  "recent":1,
                  "knew":1,
                  "recurs":1,
                  "algorithm":1,
                  "honest":1,
                  "game":1,
                  "creat":1,
                  "search":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There are 15 holes in total in the triangular board. Making that 14 pegs with a total of 13 moves. I don't know where to start with this in C++ nor Java. I have studied C++ for an year before. So I'm familiar with the concepts of stacks, linked lists etc.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7602866]-[1413622919]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There are 15 holes in total in the triangular board. Making that 14 pegs with a total of 13 moves. I don't know where to start with this in C++ nor Java. I have studied C++ for an year before. So I'm familiar with the concepts of stacks, linked lists etc.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "move":1,
                  "peg":1,
                  "familiar":1,
                  "year":1,
                  "triangular":1,
                  "total":2,
                  "board":1,
                  "link":1,
                  "stack":1,
                  "make":1,
                  "concept":1,
                  "studi":1,
                  "start":1,
                  "hole":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I just don't know how to start the code. The program firstly asks the user where they want to start (How is this done?) Then once it solves it , a certain number of pegs more than just one will be left and the program will ask the user for a better solution (like this until the board is left to just one peg.)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7602866]-[978828023]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I just don't know how to start the code. The program firstly asks the user where they want to start (How is this done?) Then once it solves it , a certain number of pegs more than just one will be left and the program will ask the user for a better solution (like this until the board is left to just one peg.)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "solv":1,
                  "number":1,
                  "program":2,
                  "peg":2,
                  "left":2,
                  "code":1,
                  "board":1,
                  "first":1,
                  "ask":1,
                  "start":2,
                  "solut":1,
                  "user":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I certainly cannot think of how to make the moves possible ( How do I write a code that &quot;SHOWS&quot; that one peg moves over a hole ,into another?)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7602866]-[-1777823163]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I certainly cannot think of how to make the moves possible ( How do I write a code that &quot;SHOWS&quot; that one peg moves over a hole ,into another?)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "move":2,
                  "peg":1,
                  "show":1,
                  "code":1,
                  "make":1,
                  "quot":2,
                  "hole":1,
                  "write":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'd love some coding assistance here. It would really be appreciated.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7602866]-[2120796405]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'd love some coding assistance here. It would really be appreciated.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "assist":1,
                  "love":1,
                  "code":1,
                  "appreci":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7602994,
      "questionId":7602866,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":9224602,
          "postId":7602994,
          "creationDate":"2011-09-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":971899,
            "displayName":"user971899",
            "reputation":1
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Okay so using linked lists. How would I iterate over possible links when moving the peg?I'm sort of rusty over the topic"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7602994-cu9224602]-[-1985086219]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Okay so using linked lists. How would I iterate over possible links when moving the peg?I'm sort of rusty over the topic"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "move":1,
                        "peg":1,
                        "rusti":1,
                        "link":2,
                        "iter":1,
                        "topic":1,
                        "sort":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-09-29",
      "lastActivityDate":"2011-09-29",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":225074,
        "displayName":"Thomas Matthews",
        "reputation":24295
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Try treating the board a linked list of holes or positions. Each data field in a node would represent a hole. Each node would have a vector of links to other holes, depending on its position relative to the edge of the board. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7602994]-[-1742504088]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Try treating the board a linked list of holes or positions. Each data field in a node would represent a hole. Each node would have a vector of links to other holes, depending on its position relative to the edge of the board. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "depend":1,
                    "field":1,
                    "relat":1,
                    "data":1,
                    "vector":1,
                    "board":2,
                    "link":2,
                    "posit":2,
                    "treat":1,
                    "node":2,
                    "hole":3,
                    "repres":1,
                    "edg":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To move a peg, iterate over the possible links.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7602994]-[-552927261]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To move a peg, iterate over the possible links.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":1,
                    "iter":1,
                    "link":1,
                    "peg":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is just one method, there are probably better ones out there.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7602994]-[1880666064]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is just one method, there are probably better ones out there.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7603080,
      "questionId":7602866,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":9224987,
          "postId":7603080,
          "creationDate":"2011-09-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":971899,
            "displayName":"user971899",
            "reputation":1
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh boy i tried reading it .I really can't understand most of the code that answerer wrote!I mean how does that concept of &quot;triplets&quot; even work?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7603080-cu9224987]-[-258193874]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh boy i tried reading it .I really can't understand most of the code that answerer wrote!I mean how does that concept of &quot;triplets&quot; even work?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "understand":1,
                        "wrote":1,
                        "work":1,
                        "code":1,
                        "boy":1,
                        "answer":1,
                        "concept":1,
                        "quot":2,
                        "triplet":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9225120,
          "postId":7603080,
          "creationDate":"2011-09-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":602323,
            "displayName":"Kevin",
            "reputation":10930
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"see my updated answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7603080-cu9225120]-[133937220]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"see my updated answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "updat":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9226236,
          "postId":7603080,
          "creationDate":"2011-09-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":971899,
            "displayName":"user971899",
            "reputation":1
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"the terms bits lost me again. I know about loops,if statements,arrays ,stacks ,linked lists etc. Where do I use these , is where Im confused."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7603080-cu9226236]-[1698768787]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"the terms bits lost me again. I know about loops,if statements,arrays ,stacks ,linked lists etc. Where do I use these , is where Im confused."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "loop":1,
                        "bit":1,
                        "term":1,
                        "statement":1,
                        "lost":1,
                        "array":1,
                        "link":1,
                        "stack":1,
                        "confus":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9226574,
          "postId":7603080,
          "creationDate":"2011-09-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":602323,
            "displayName":"Kevin",
            "reputation":10930
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Maybe start here: http://www.cprogramming.com/tutorial/bitwise_operators.html. But keep in mind the basic depth first search algorithm will work, and if you aren't comfortable with bitwise operations, you can replace my make_move, undo_move, end_state, and generate_moves with your own functions (and data structures) and it will work as well."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7603080-cu9226574]-[-1598218482]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Maybe start here: http://www.cprogramming.com/tutorial/bitwise_operators.html. But keep in mind the basic depth first search algorithm will work, and if you aren't comfortable with bitwise operations, you can replace my make_move, undo_move, end_state, and generate_moves with your own functions (and data structures) and it will work as well."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"IdentifierNode",
                        "name":"bitwise_operators",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"make_move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"undo_move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"end_state",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"generate_moves",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "move":3,
                        "undo":1,
                        "state":1,
                        "aren":1,
                        "data":1,
                        "cprogram":1,
                        "comfort":1,
                        "work":2,
                        "structur":1,
                        "oper":2,
                        "replac":1,
                        "mind":1,
                        "algorithm":1,
                        "function":1,
                        "generat":1,
                        "make":1,
                        "end":1,
                        "depth":1,
                        "bitwis":2,
                        "html":1,
                        "start":1,
                        "basic":1,
                        "http":1,
                        "tutori":1,
                        "www":1,
                        "search":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-09-29",
      "lastActivityDate":"2011-09-29",
      "lastEditDate":"2011-09-29",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":602323,
        "displayName":"Kevin",
        "reputation":10930
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Take a look at my answer here: <a href=\"http://stackoverflow.com/questions/6393391/timeout-on-a-php-peg-puzzle-solver\">Timeout on a php Peg Puzzle solver</a>. The 15-peg puzzle was the first program that I ever wrote (over 10 years ago), after just learning c++. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7603080]-[15681622]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Take a look at my answer here: <a href=\"http://stackoverflow.com/questions/6393391/timeout-on-a-php-peg-puzzle-solver\">Timeout on a php Peg Puzzle solver</a>. The 15-peg puzzle was the first program that I ever wrote (over 10 years ago), after just learning c++. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "puzzl":3,
                    "program":1,
                    "question":1,
                    "peg":3,
                    "learn":1,
                    "wrote":1,
                    "year":1,
                    "stackoverflow":1,
                    "solver":2,
                    "php":2,
                    "ago":1,
                    "answer":1,
                    "href":1,
                    "http":1,
                    "timeout":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The posted solution is a re-write that I did several years later.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7603080]-[1342242653]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The posted solution is a re-write that I did several years later.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "year":1,
                    "write":1,
                    "post":1,
                    "solut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Since I was the answerer I can tell you that a triplet is a term that I made up for a move. There are three pegs involved in a move (a triplet). Each peg is represented by a bit. In order for a move to be legal two consecutive pegs (bits) need to be set and the other (the target location) needs to be clear. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7603080]-[897982877]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Since I was the answerer I can tell you that a triplet is a term that I made up for a move. There are three pegs involved in a move (a triplet). Each peg is represented by a bit. In order for a move to be legal two consecutive pegs (bits) need to be set and the other (the target location) needs to be clear. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "involv":1,
                    "move":3,
                    "peg":3,
                    "bit":2,
                    "clear":1,
                    "set":1,
                    "term":1,
                    "legal":1,
                    "order":1,
                    "consecut":1,
                    "answer":1,
                    "target":1,
                    "made":1,
                    "repres":1,
                    "triplet":2,
                    "locat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The entire solution involves a depth first search using a 16-bit integer to represent the board. Simple bit manipulation can be used to update the board state. For example if you xor the current state with a move (triplet) it will make the move against the board. The same operation applied a second time against the board is an undo of the move.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7603080]-[-184590708]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The entire solution involves a depth first search using a 16-bit integer to represent the board. Simple bit manipulation can be used to update the board state. For example if you xor the current state with a move (triplet) it will make the move against the board. The same operation applied a second time against the board is an undo of the move.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "involv":1,
                    "move":3,
                    "bit":2,
                    "simpl":1,
                    "undo":1,
                    "state":2,
                    "updat":1,
                    "manipul":1,
                    "entir":1,
                    "oper":1,
                    "board":4,
                    "xor":1,
                    "make":1,
                    "depth":1,
                    "time":1,
                    "appli":1,
                    "current":1,
                    "repres":1,
                    "triplet":1,
                    "solut":1,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7616129,
      "questionId":7602866,
      "comments":[
        
      ],
      "creationDate":"2011-09-30",
      "lastActivityDate":"2011-09-30",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":409611,
        "displayName":"Jeff Grigg",
        "reputation":588
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To be successful as a programmer, you need to develop the skill of examining a problem, figuring out how it can be solved, and come up with a reasonable in-program representation that enables you to solve it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-107075067]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To be successful as a programmer, you need to develop the skill of examining a problem, figuring out how it can be solved, and come up with a reasonable in-program representation that enables you to solve it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":2,
                    "examin":1,
                    "program":1,
                    "success":1,
                    "represent":1,
                    "problem":1,
                    "reason":1,
                    "programm":1,
                    "enabl":1,
                    "figur":1,
                    "skill":1,
                    "develop":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For problems like this, I find it helpful to have the puzzle in front of me, so I can try it out by hand. Failing that, at least having a picture of the thing will help: <a href=\"http://www.obsidiandesigns.com/pyramidsol.jpg\"rel=\"nofollow\">http://www.obsidiandesigns.com/pyramidsol.jpg</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[1470865199]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For problems like this, I find it helpful to have the puzzle in front of me, so I can try it out by hand. Failing that, at least having a picture of the thing will help: <a href=\"http://www.obsidiandesigns.com/pyramidsol.jpg\"rel=\"nofollow\">http://www.obsidiandesigns.com/pyramidsol.jpg</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "puzzl":1,
                    "find":1,
                    "fail":1,
                    "jpg":2,
                    "front":1,
                    "problem":1,
                    "hand":1,
                    "rel":1,
                    "pyramidsol":2,
                    "thing":1,
                    "help":1,
                    "nofollow":1,
                    "pictur":1,
                    "href":1,
                    "http":2,
                    "obsidiandesign":2,
                    "www":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's another way to look at it, and possibly consider representing it in memory like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-23152668]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's another way to look at it, and possibly consider representing it in memory like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "possibl":1,
                    "repres":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"OXXXX XXXX XXX XX X "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[7616129]-[1433399921]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"OXXXX XXXX XXX XX X "
                  }
                ]
              },
              "rawText":"OXXXX XXXX XXX XX X ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "xxx":1,
                    "xxxx":1,
                    "oxxxx":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Each &quot;X&quot; is a peg. The &quot;O&quot; is a hole. One can change &quot;OXX&quot; to &quot;XOO&quot; by jumping the 3rd X over the middle one, into the hole. Also consider vertical and diagonal jumps.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[1484345245]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Each &quot;X&quot; is a peg. The &quot;O&quot; is a hole. One can change &quot;OXX&quot; to &quot;XOO&quot; by jumping the 3rd X over the middle one, into the hole. Also consider vertical and diagonal jumps.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "peg":1,
                    "oxx":1,
                    "middl":1,
                    "diagon":1,
                    "jump":2,
                    "vertic":1,
                    "xoo":1,
                    "quot":8,
                    "hole":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Linked lists could make a lot of sense. You might actually want &quot;2D&quot; links, instead of the usual &quot;1D&quot; links. That is each &quot;hole&quot; instance could contain pointers to the two or three holes next to it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-1656084580]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Linked lists could make a lot of sense. You might actually want &quot;2D&quot; links, instead of the usual &quot;1D&quot; links. That is each &quot;hole&quot; instance could contain pointers to the two or three holes next to it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "pointer":1,
                    "usual":1,
                    "link":3,
                    "lot":1,
                    "make":1,
                    "quot":6,
                    "hole":2,
                    "list":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Once you have a representation, you need a way to find valid moves. And to make valid moves.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-1542112098]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Once you have a representation, you need a way to find valid moves. And to make valid moves.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "move":2,
                    "represent":1,
                    "valid":2,
                    "make":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For this &quot;game,&quot; you may want to search the whole space of possible moves, so you'll probably want to either have each move produce a new board, or to have a way to &quot;undo&quot; moves.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-630276450]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For this &quot;game,&quot; you may want to search the whole space of possible moves, so you'll probably want to either have each move produce a new board, or to have a way to &quot;undo&quot; moves.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":3,
                    "undo":1,
                    "produc":1,
                    "space":1,
                    "board":1,
                    "quot":4,
                    "game":1,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A valid move is where one peg jumps over another peg, into an empty hole. The jumped peg is removed. You can't jump from &quot;just anywhere&quot; to anywhere, over any peg you wish -- the three holes have to be next to each other and in line.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[-1557874894]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A valid move is where one peg jumps over another peg, into an empty hole. The jumped peg is removed. You can't jump from &quot;just anywhere&quot; to anywhere, over any peg you wish -- the three holes have to be next to each other and in line.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":1,
                    "remov":1,
                    "peg":4,
                    "jump":3,
                    "line":1,
                    "empti":1,
                    "valid":1,
                    "quot":2,
                    "hole":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The above should give you some hints that will help you get started.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7616129]-[528254850]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The above should give you some hints that will help you get started.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "give":1,
                    "hint":1,
                    "start":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}