{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8340614,
    "title":"Java avoid race condition WITHOUT synchronized/lock",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":10284639,
        "postId":8340614,
        "creationDate":"2011-12-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":324851,
          "displayName":"Geoff",
          "reputation":1726
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Those are both good alternatives. There are many alternatives which can be used. The applicability of each will depend on your circumstances and exactly what you are trying to achieve. Could you give a little more detail?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8340614-cu10284639]-[-739017243]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Those are both good alternatives. There are many alternatives which can be used. The applicability of each will depend on your circumstances and exactly what you are trying to achieve. Could you give a little more detail?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "circumst":1,
                      "depend":1,
                      "good":1,
                      "altern":2,
                      "achiev":1,
                      "applic":1,
                      "give":1,
                      "detail":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "multithreading",
      "concurrency",
      "race-condition",
      "synchronized"
    ],
    "creationDate":"2011-12-01",
    "lastActivityDate":"2011-12-01",
    "score":3,
    "viewCount":3363,
    "owner":{
      "type":"StackOverflowUser",
      "id":883541,
      "displayName":"cn1h",
      "reputation":353
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In order to avoid race condition, we can synchronize the write and access methods on the shared variables, to lock these variables to other threads.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[1782884113]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In order to avoid race condition, we can synchronize the write and access methods on the shared variables, to lock these variables to other threads.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "condit":1,
                  "lock":1,
                  "avoid":1,
                  "share":1,
                  "thread":1,
                  "order":1,
                  "race":1,
                  "variabl":2,
                  "write":1,
                  "access":1,
                  "synchron":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My question is if there are other (better) ways to avoid race condition? Lock make the program slow.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[1574533163]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My question is if there are other (better) ways to avoid race condition? Lock make the program slow.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "question":1,
                  "slow":1,
                  "condit":1,
                  "lock":1,
                  "way":1,
                  "avoid":1,
                  "race":1,
                  "make":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What I found are:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[-1770399122]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What I found are:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "found":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>using Atomic classes, if there is only one shared variable.</li> \n <li>using a immutable container for multi shared variables and declare this container object with volatile. (I found this method from book &quot;Java Concurrency in Practice&quot;)</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[369929996]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>using Atomic classes, if there is only one shared variable.</li> \n <li>using a immutable container for multi shared variables and declare this container object with volatile. (I found this method from book &quot;Java Concurrency in Practice&quot;)</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "concurr":1,
                  "book":1,
                  "immut":1,
                  "contain":2,
                  "declar":1,
                  "object":1,
                  "share":2,
                  "found":1,
                  "class":1,
                  "quot":2,
                  "atom":1,
                  "variabl":2,
                  "practic":1,
                  "multi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm not sure if they perform faster than syncnronized way, is there any other better methods?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[-1874090856]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm not sure if they perform faster than syncnronized way, is there any other better methods?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "syncnron":1,
                  "method":1,
                  "faster":1,
                  "perform":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>thanks</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8340614]-[355211604]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>thanks</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":8340714,
      "questionId":8340614,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10303139,
          "postId":8340714,
          "creationDate":"2011-12-02",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":883541,
            "displayName":"cn1h",
            "reputation":353
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"about &quot;make the application stateless&quot;, if I don't have shared data between threads, but i have something shared between functions in the same thread, I should use ThreadLocal class, right?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8340714-cu10303139]-[1623189539]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"about &quot;make the application stateless&quot;, if I don't have shared data between threads, but i have something shared between functions in the same thread, I should use ThreadLocal class, right?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ThreadLocal",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "data":1,
                        "local":1,
                        "share":2,
                        "thread":3,
                        "stateless":1,
                        "function":1,
                        "applic":1,
                        "make":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ThreadLocal",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10284865,
          "postId":8340714,
          "creationDate":"2011-12-01",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":939023,
            "displayName":"Shivan Dragon",
            "reputation":9069
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't think replacing Java's internal monitor locking with external queues/even-driven-mechanisms will improve on performance. Making the application completly stateless might not be an option here either, as the asker already states that it has data to share between the threads. The Actor model might be useful as far as code cleanliness is concerned but again, I think the added overhead will not benefit towards performance."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8340714-cu10284865]-[877198919]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't think replacing Java's internal monitor locking with external queues/even-driven-mechanisms will improve on performance. Making the application completly stateless might not be an option here either, as the asker already states that it has data to share between the threads. The Actor model might be useful as far as code cleanliness is concerned but again, I think the added overhead will not benefit towards performance."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "actor":1,
                        "monitor":1,
                        "model":1,
                        "state":1,
                        "queue":1,
                        "data":1,
                        "option":1,
                        "lock":1,
                        "improv":1,
                        "concern":1,
                        "code":1,
                        "overhead":1,
                        "driven":1,
                        "share":1,
                        "thread":1,
                        "replac":1,
                        "asker":1,
                        "stateless":1,
                        "extern":1,
                        "perform":2,
                        "applic":1,
                        "mechan":1,
                        "make":1,
                        "ad":1,
                        "complet":1,
                        "benefit":1,
                        "intern":1,
                        "cleanli":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10285037,
          "postId":8340714,
          "creationDate":"2011-12-01",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":478399,
            "displayName":"AlexR",
            "reputation":68143
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Andrei Bodnarescu, I absolutely agree with you. I probably expressed myself not exactly. Performance here is not the main issue. Code clearness, modularity and managebility are much more important. I just wanted to say that using event drive approach will not decrease performance as some people afraid."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8340714-cu10285037]-[-391207915]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Andrei Bodnarescu, I absolutely agree with you. I probably expressed myself not exactly. Performance here is not the main issue. Code clearness, modularity and managebility are much more important. I just wanted to say that using event drive approach will not decrease performance as some people afraid."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Andrei",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "drive":1,
                        "andrei":1,
                        "want":1,
                        "event":1,
                        "decreas":1,
                        "modular":1,
                        "clear":1,
                        "afraid":1,
                        "issu":1,
                        "main":1,
                        "code":1,
                        "import":1,
                        "perform":2,
                        "bodnarescu":1,
                        "express":1,
                        "absolut":1,
                        "agre":1,
                        "approach":1,
                        "managebl":1,
                        "peopl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10285074,
          "postId":8340714,
          "creationDate":"2011-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":939023,
            "displayName":"Shivan Dragon",
            "reputation":9069
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Agreed, and if I may add, Scala's Actors model implementation is quite nice. And since Scala is one step away from Java for a Java developer, that might be an option."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8340714-cu10285074]-[1594745677]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Agreed, and if I may add, Scala's Actors model implementation is quite nice. And since Scala is one step away from Java for a Java developer, that might be an option."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "actor":1,
                        "step":1,
                        "model":1,
                        "option":1,
                        "nice":1,
                        "scala":2,
                        "implement":1,
                        "agre":1,
                        "develop":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-01",
      "lastActivityDate":"2011-12-01",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":478399,
        "displayName":"AlexR",
        "reputation":68143
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Avoid state. Make your application as stateless as it is possible. Each thread (sequence of actions) should take a context in the beginning and use this context passing it from method to method as a parameters. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340714]-[-1489250527]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Avoid state. Make your application as stateless as it is possible. Each thread (sequence of actions) should take a context in the beginning and use this context passing it from method to method as a parameters. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "begin":1,
                    "state":1,
                    "context":2,
                    "avoid":1,
                    "thread":1,
                    "paramet":1,
                    "sequenc":1,
                    "stateless":1,
                    "applic":1,
                    "pass":1,
                    "make":1,
                    "action":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When this technique does not solve all your problems use event driven mechanism. When your code has to share something with other components it throws event (message) to some kind of bus (topic, queue, whatever). Components can register listeners to listen for events and react appropriately. In this case there are not race conditions (except inserting events to the queue). If you are using ready-to-use queue and not coding it yourself it should be efficient enough. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340714]-[1683786539]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When this technique does not solve all your problems use event driven mechanism. When your code has to share something with other components it throws event (message) to some kind of bus (topic, queue, whatever). Components can register listeners to listen for events and react appropriately. In this case there are not race conditions (except inserting events to the queue). If you are using ready-to-use queue and not coding it yourself it should be efficient enough. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "readi":1,
                    "solv":1,
                    "bus":1,
                    "insert":1,
                    "event":4,
                    "queue":3,
                    "problem":1,
                    "condit":1,
                    "react":1,
                    "effici":1,
                    "regist":1,
                    "compon":2,
                    "code":2,
                    "driven":1,
                    "share":1,
                    "listen":2,
                    "race":1,
                    "techniqu":1,
                    "mechan":1,
                    "topic":1,
                    "messag":1,
                    "kind":1,
                    "appropri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Also take a look on Actors model. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340714]-[516193411]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Also take a look on Actors model. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "actor":1,
                    "model":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8340930,
      "questionId":8340614,
      "comments":[
        
      ],
      "creationDate":"2011-12-01",
      "lastActivityDate":"2011-12-01",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can perform up to 50 million lock/unlocks per second. If you want this to be more efficient I suggest using more course grain locking. i.e. don't lock every little thing, but have locks for larger objects. Once you have much more locks than threads, you are less likely to have contention and having more locks may just add overhead.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340930]-[1334912149]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can perform up to 50 million lock/unlocks per second. If you want this to be more efficient I suggest using more course grain locking. i.e. don't lock every little thing, but have locks for larger objects. Once you have much more locks than threads, you are less likely to have contention and having more locks may just add overhead.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "suggest":1,
                    "effici":1,
                    "thing":1,
                    "lock":6,
                    "unlock":1,
                    "object":1,
                    "overhead":1,
                    "larger":1,
                    "thread":1,
                    "perform":1,
                    "content":1,
                    "grain":1,
                    "million":1,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8340882,
      "questionId":8340614,
      "comments":[
        
      ],
      "creationDate":"2011-12-01",
      "lastActivityDate":"2011-12-01",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":750040,
        "displayName":"Santosh",
        "reputation":10249
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>One of the alternatives is to make shared <a href=\"http://en.wikipedia.org/wiki/Immutable_object\"rel=\"nofollow\">objects immutable</a>. Check out <a href=\"http://stackoverflow.com/questions/8245329/java-immutable-classes/8245437#8245437\">this post</a> for more details. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340882]-[-451988403]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>One of the alternatives is to make shared <a href=\"http://en.wikipedia.org/wiki/Immutable_object\"rel=\"nofollow\">objects immutable</a>. Check out <a href=\"http://stackoverflow.com/questions/8245329/java-immutable-classes/8245437#8245437\">this post</a> for more details. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "post":1,
                    "rel":1,
                    "immut":3,
                    "altern":1,
                    "object":2,
                    "share":1,
                    "stackoverflow":1,
                    "wikipedia":1,
                    "nofollow":1,
                    "check":1,
                    "make":1,
                    "class":1,
                    "wiki":1,
                    "detail":1,
                    "org":1,
                    "href":2,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8342252,
      "questionId":8340614,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10288542,
          "postId":8342252,
          "creationDate":"2011-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":883541,
            "displayName":"cn1h",
            "reputation":353
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;3. Use atomics when updating a single variable.&quot; If there are more variables, but they are independent (nerver be used in same function), can I use atomics as well?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8342252-cu10288542]-[776465198]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;3. Use atomics when updating a single variable.&quot; If there are more variables, but they are independent (nerver be used in same function), can I use atomics as well?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "singl":1,
                        "updat":1,
                        "independ":1,
                        "function":1,
                        "quot":2,
                        "atom":2,
                        "variabl":2,
                        "nerver":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10288937,
          "postId":8342252,
          "creationDate":"2011-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":808486,
            "displayName":"Tudor",
            "reputation":40429
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, of course. But you will need to use atomics for each of them."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8342252-cu10288937]-[-773964974]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, of course. But you will need to use atomics for each of them."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "atom":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-01",
      "lastActivityDate":"2011-12-01",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":808486,
        "displayName":"Tudor",
        "reputation":40429
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Atomics are indeed more efficient than classic locks due to their non-blocking behavior i.e. a thread waiting to access the memory location will not be context switched, which saves a lot of time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8342252]-[1027870418]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Atomics are indeed more efficient than classic locks due to their non-blocking behavior i.e. a thread waiting to access the memory location will not be context switched, which saves a lot of time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "due":1,
                    "switch":1,
                    "wait":1,
                    "context":1,
                    "effici":1,
                    "classic":1,
                    "lock":1,
                    "block":1,
                    "thread":1,
                    "lot":1,
                    "atom":1,
                    "time":1,
                    "behavior":1,
                    "save":1,
                    "locat":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Probably the best guideline when synchronization is needed is to see how you can reduce the critical section size as much as possible. General ideas include:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8342252]-[-935328195]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Probably the best guideline when synchronization is needed is to see how you can reduce the critical section size as much as possible. General ideas include:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "critic":1,
                    "reduc":1,
                    "size":1,
                    "idea":1,
                    "section":1,
                    "includ":1,
                    "need":1,
                    "general":1,
                    "guidelin":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Use read-write locks instead of full locks when only a part of the threads need to write.</li> \n <li>Find ways to restructure code in order to reduce the size of critical sections.</li> \n <li>Use atomics when updating a single variable.</li> \n <li>Note that some algorithms and data structures that traditionally need locks have lock-free versions (they are more complicated however).</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8342252]-[-359733389]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Use read-write locks instead of full locks when only a part of the threads need to write.</li> \n <li>Find ways to restructure code in order to reduce the size of critical sections.</li> \n <li>Use atomics when updating a single variable.</li> \n <li>Note that some algorithms and data structures that traditionally need locks have lock-free versions (they are more complicated however).</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "find":1,
                    "singl":1,
                    "critic":1,
                    "reduc":1,
                    "size":1,
                    "tradit":1,
                    "complic":1,
                    "data":1,
                    "full":1,
                    "updat":1,
                    "restructur":1,
                    "lock":4,
                    "way":1,
                    "section":1,
                    "structur":1,
                    "code":1,
                    "version":1,
                    "thread":1,
                    "algorithm":1,
                    "note":1,
                    "order":1,
                    "atom":1,
                    "part":1,
                    "variabl":1,
                    "write":2,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8340765,
      "questionId":8340614,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10287349,
          "postId":8340765,
          "creationDate":"2011-12-01",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":602119,
            "displayName":"Boris",
            "reputation":1038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Atomic-classes don't (generally) use synchronized. Their values are volatile, that's correct. Instead of synchronized the sun.misc.Unsafe-Class is used which does CAS-operations as native code. So if the platform your running on supports atomic CAS-operations in assembler, its most likely that the are used instead of synchronizing."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8340765-cu10287349]-[2092375658]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Atomic-classes don't (generally) use synchronized. Their values are volatile, that's correct. Instead of synchronized the sun.misc.Unsafe-Class is used which does CAS-operations as native code. So if the platform your running on supports atomic CAS-operations in assembler, its most likely that the are used instead of synchronizing."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "support":1,
                        "assembl":1,
                        "correct":1,
                        "run":1,
                        "sun":1,
                        "cas":2,
                        "code":1,
                        "oper":2,
                        "general":1,
                        "valu":1,
                        "misc":1,
                        "class":1,
                        "atom":2,
                        "unsaf":1,
                        "platform":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-01",
      "lastActivityDate":"2011-12-01",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":939023,
        "displayName":"Shivan Dragon",
        "reputation":9069
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Well, first off Atomic classes uses locking (via synchronized and volatile keywords) just as you'd do if you did it yourself by hand. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340765]-[-1759202526]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Well, first off Atomic classes uses locking (via synchronized and volatile keywords) just as you'd do if you did it yourself by hand. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hand":1,
                    "lock":1,
                    "keyword":1,
                    "class":1,
                    "atom":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Second, immutability works great for multi-threading, you no longer need monitor locks and such, but that's because you can only read your immutables, you cand modify them.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340765]-[-1410824378]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Second, immutability works great for multi-threading, you no longer need monitor locks and such, but that's because you can only read your immutables, you cand modify them.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "monitor":1,
                    "cand":1,
                    "immut":2,
                    "lock":1,
                    "work":1,
                    "thread":1,
                    "modifi":1,
                    "longer":1,
                    "multi":1,
                    "great":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can't get rid of synchronized/volatile if you want to avoid race conditions in a multithreaded Java program (i.e. if the multiple threads cand read AND WRITE the same data). Your best bet is, if you want better performance, to avoid at least some of the built in thread safe classes which do sort of a more generic locking, and make your own implementation which is more tied to your context and thus might allow you to use more granullar synchronization &amp; lock aquisition.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340765]-[-1738742249]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can't get rid of synchronized/volatile if you want to avoid race conditions in a multithreaded Java program (i.e. if the multiple threads cand read AND WRITE the same data). Your best bet is, if you want better performance, to avoid at least some of the built in thread safe classes which do sort of a more generic locking, and make your own implementation which is more tied to your context and thus might allow you to use more granullar synchronization &amp; lock aquisition.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "program":1,
                    "rid":1,
                    "tie":1,
                    "built":1,
                    "granullar":1,
                    "bet":1,
                    "cand":1,
                    "condit":1,
                    "context":1,
                    "data":1,
                    "lock":2,
                    "safe":1,
                    "amp":1,
                    "avoid":2,
                    "generic":1,
                    "thread":2,
                    "aquisit":1,
                    "multithread":1,
                    "race":1,
                    "perform":1,
                    "implement":1,
                    "make":1,
                    "class":1,
                    "sort":1,
                    "multipl":1,
                    "write":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Check out this implementation of BlockingCache done by the Ehcache guys;</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340765]-[-1576911267]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Check out this implementation of BlockingCache done by the Ehcache guys;</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BlockingCache",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"guys",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Ehcache",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "guy":1,
                    "cach":1,
                    "ehcach":1,
                    "block":1,
                    "check":1,
                    "implement":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BlockingCache",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Ehcache",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"guys",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Ehcache",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://www.massapi.com/source/ehcache-2.4.3/src/net/sf/ehcache/constructs/blocking/BlockingCache.java.html\"rel=\"nofollow\">http://www.massapi.com/source/ehcache-2.4.3/src/net/sf/ehcache/constructs/blocking/BlockingCache.java.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8340765]-[1495508006]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://www.massapi.com/source/ehcache-2.4.3/src/net/sf/ehcache/constructs/blocking/BlockingCache.java.html\"rel=\"nofollow\">http://www.massapi.com/source/ehcache-2.4.3/src/net/sf/ehcache/constructs/blocking/BlockingCache.java.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cach":2,
                    "rel":1,
                    "net":2,
                    "ehcach":4,
                    "block":4,
                    "massapi":2,
                    "nofollow":1,
                    "src":2,
                    "html":2,
                    "href":1,
                    "http":2,
                    "sourc":2,
                    "construct":2,
                    "www":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}