{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9606064,
    "title":"Efficiently cloning an unknown Object that does not supports clone",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":12199061,
        "postId":9606064,
        "creationDate":"2012-03-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":203907,
          "displayName":"Bozho",
          "reputation":301603
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"possible duplicate of [Java: recommended solution for deep cloning/copying an instance](http://stackoverflow.com/questions/2156120/java-recommended-solution-for-deep-cloning-copying-an-instance)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9606064-cu12199061]-[-652274663]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"possible duplicate of [Java: recommended solution for deep cloning/copying an instance](http://stackoverflow.com/questions/2156120/java-recommended-solution-for-deep-cloning-copying-an-instance)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "recommend":2,
                      "stackoverflow":1,
                      "deep":2,
                      "clone":2,
                      "duplic":1,
                      "http":1,
                      "solut":2,
                      "copi":2,
                      "instanc":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12187252,
        "postId":9606064,
        "creationDate":"2012-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1140754,
          "displayName":"Miguel Gamboa",
          "reputation":911
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I am trying to copy an object at runtime and I do not have any previous information about that object at compile-time. I cannot neither force it to implement any Interface, nor provide any Factory or anything else."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9606064-cu12187252]-[1126730043]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I am trying to copy an object at runtime and I do not have any previous information about that object at compile-time. I cannot neither force it to implement any Interface, nor provide any Factory or anything else."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "provid":1,
                      "runtim":1,
                      "previous":1,
                      "factori":1,
                      "object":2,
                      "inform":1,
                      "implement":1,
                      "compil":1,
                      "time":1,
                      "forc":1,
                      "copi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12186236,
        "postId":9606064,
        "creationDate":"2012-03-07",
        "score":4,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":34397,
          "displayName":"SLaks",
          "reputation":434359
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You cannot copy an arbitrary object. Doing so can be dangerous. What are you trying to do?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9606064-cu12186236]-[864078918]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You cannot copy an arbitrary object. Doing so can be dangerous. What are you trying to do?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "arbitrari":1,
                      "danger":1,
                      "object":1,
                      "copi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":12186392,
        "postId":9606064,
        "creationDate":"2012-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":100836,
          "displayName":"Zaki",
          "reputation":3654
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You could hurt yourself!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9606064-cu12186392]-[346329585]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You could hurt yourself!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "hurt":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2012-03-07",
    "lastActivityDate":"2012-03-08",
    "lastEditDate":"2012-03-07",
    "score":1,
    "viewCount":218,
    "owner":{
      "type":"StackOverflowUser",
      "id":1140754,
      "displayName":"Miguel Gamboa",
      "reputation":911
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am constructing a framework where I need to make copies of objects at runtime and I do not want to force those object classes to implement any interface, like Cloneable, or Prototype pattern, or anything else.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9606064]-[-1859819538]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am constructing a framework where I need to make copies of objects at runtime and I do not want to force those object classes to implement any interface, like Cloneable, or Prototype pattern, or anything else.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "runtim":1,
                  "pattern":1,
                  "framework":1,
                  "cloneabl":1,
                  "object":2,
                  "prototyp":1,
                  "implement":1,
                  "make":1,
                  "class":1,
                  "forc":1,
                  "construct":1,
                  "copi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So, for that purpose I was planning to efficiently clone those objects using the functionality of <code>sun.misc.Unsafe</code> and its methods: <code>allocateInstance(Class cls)</code> and <code>copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes)</code>. But I cannot find any way to get the size of an object in bytes in the heap space.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9606064]-[-65016899]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So, for that purpose I was planning to efficiently clone those objects using the functionality of <code>sun.misc.Unsafe</code> and its methods: <code>allocateInstance(Class cls)</code> and <code>copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes)</code>. But I cannot find any way to get the size of an object in bytes in the heap space.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"allocateInstance",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"copyMemory",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"srcBase",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"srcOffset",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"destBase",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"destOffset",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "dest":2,
                  "method":1,
                  "alloc":1,
                  "size":1,
                  "sun":1,
                  "effici":1,
                  "object":4,
                  "base":2,
                  "code":6,
                  "offset":2,
                  "space":1,
                  "clone":1,
                  "function":1,
                  "src":2,
                  "cls":1,
                  "misc":1,
                  "unsaf":1,
                  "heap":1,
                  "byte":2,
                  "purpos":1,
                  "copi":1,
                  "plan":1,
                  "instanc":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know that I can use reflection and copy from field to field. But that is not no efficient. Do you know any manner of getting the size of an object in the heap? Or any other way of efficiently copying an object?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9606064]-[-1702477517]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know that I can use reflection and copy from field to field. But that is not no efficient. Do you know any manner of getting the size of an object in the heap? Or any other way of efficiently copying an object?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "manner":1,
                  "size":1,
                  "field":2,
                  "effici":2,
                  "object":2,
                  "heap":1,
                  "reflect":1,
                  "copi":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":9606086,
      "questionId":9606064,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":12187170,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1140754,
            "displayName":"Miguel Gamboa",
            "reputation":911
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Maybe I did not explain myself clear, but I am talking about an &quot;unkown object&quot;. Some object, which you do not have any information at compile-time and that you cannot force to implement any specific interface."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12187170]-[1817862837]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Maybe I did not explain myself clear, but I am talking about an &quot;unkown object&quot;. Some object, which you do not have any information at compile-time and that you cannot force to implement any specific interface."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explain":1,
                        "clear":1,
                        "talk":1,
                        "object":2,
                        "inform":1,
                        "unkown":1,
                        "specif":1,
                        "implement":1,
                        "quot":2,
                        "compil":1,
                        "time":1,
                        "forc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12189559,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I would be absolutely shocked if that still didn't break anything. Many types depend on being able to control all instances of that type -- for example, enums, singleton types, and the like all _depend_ on knowing all instances of that type at compile time, and you'll break them all. Find some other way. Please."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12189559]-[1338059428]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I would be absolutely shocked if that still didn't break anything. Many types depend on being able to control all instances of that type -- for example, enums, singleton types, and the like all _depend_ on knowing all instances of that type at compile time, and you'll break them all. Find some other way. Please."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_depend_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "depend":2,
                        "shock":1,
                        "know":1,
                        "enum":1,
                        "absolut":1,
                        "control":1,
                        "singleton":1,
                        "compil":1,
                        "time":1,
                        "type":4,
                        "instanc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12187994,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Refactor your code until you _do_ have that information at compile time. There isn't really another option -- certainly there's _no_ way of doing this I would trust to work on an arbitrary `Object`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12187994]-[635350900]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Refactor your code until you _do_ have that information at compile time. There isn't really another option -- certainly there's _no_ way of doing this I would trust to work on an arbitrary `Object`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_do_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_no_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "arbitrari":1,
                        "trust":1,
                        "option":1,
                        "work":1,
                        "object":1,
                        "code":1,
                        "inform":1,
                        "refactor":1,
                        "isn":1,
                        "compil":1,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12235784,
          "postId":9606086,
          "creationDate":"2012-03-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"As long as you're okay with potentially breaking their code, that's all right then."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12235784]-[70185045]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"As long as you're okay with potentially breaking their code, that's all right then."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "potenti":1,
                        "break":1,
                        "code":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12186416,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":930207,
            "displayName":"mcfinnigan",
            "reputation":6009
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Clones are there to be abused... O:-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12186416]-[-672739423]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Clones are there to be abused... O:-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "abus":1,
                        "clone":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12210416,
          "postId":9606086,
          "creationDate":"2012-03-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You _rewrite your project so you get a more specific type._ Would you like an example? Suppose you get a value of some `enum` type, and you clone it. Enum types use `==` for equality, so now your new value isn't actually equal to the original value. Sets, maps, and so on all break."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12210416]-[-2061396821]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You _rewrite your project so you get a more specific type._ Would you like an example? Suppose you get a value of some `enum` type, and you clone it. Enum types use `==` for equality, so now your new value isn't actually equal to the original value. Sets, maps, and so on all break."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_rewrite",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "map":1,
                        "project":1,
                        "set":1,
                        "equal":2,
                        "origin":1,
                        "clone":1,
                        "specif":1,
                        "isn":1,
                        "type":3,
                        "rewrit":1,
                        "suppos":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12210571,
          "postId":9606086,
          "creationDate":"2012-03-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":869736,
            "displayName":"Louis Wasserman",
            "reputation":77769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"http://stackoverflow.com/a/2326801/869736"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12210571]-[-1400545460]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"http://stackoverflow.com/a/2326801/869736"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "stackoverflow":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12186727,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you really want abusive, take an innocent class, subclass it implementing `Cloneable`. &gt;:)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12186727]-[894721792]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you really want abusive, take an innocent class, subclass it implementing `Cloneable`. &gt;:)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "subclass":1,
                        "innoc":1,
                        "abus":1,
                        "cloneabl":1,
                        "implement":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12189088,
          "postId":9606086,
          "creationDate":"2012-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1140754,
            "displayName":"Miguel Gamboa",
            "reputation":911
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Once I am using the ASM bytecode instrumentation tool, then I can get the size of an Object trough the method `getObjectSize(Object objectToSize)` from the class `java.lang.instrument.Instrumentation`. Problem solved."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12189088]-[87126510]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Once I am using the ASM bytecode instrumentation tool, then I can get the size of an Object trough the method `getObjectSize(Object objectToSize)` from the class `java.lang.instrument.Instrumentation`. Problem solved."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"getObjectSize",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"objectToSize",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"java",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"instrument",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Instrumentation",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "method":1,
                        "size":3,
                        "tool":1,
                        "problem":1,
                        "bytecod":1,
                        "trough":1,
                        "object":4,
                        "asm":1,
                        "lang":1,
                        "instrument":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"java",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"lang",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"instrument",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Instrumentation",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12205340,
          "postId":9606086,
          "creationDate":"2012-03-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1140754,
            "displayName":"Miguel Gamboa",
            "reputation":911
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"There is nothing to break! And, if you receive `Object` as an argument how can you determine its fields at compile time?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12205340]-[-676360066]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"There is nothing to break! And, if you receive `Object` as an argument how can you determine its fields at compile time?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "determin":1,
                        "receiv":1,
                        "field":1,
                        "object":1,
                        "compil":1,
                        "time":1,
                        "argument":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12234082,
          "postId":9606086,
          "creationDate":"2012-03-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1140754,
            "displayName":"Miguel Gamboa",
            "reputation":911
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I am developing a java instrumentation tool with ASM and I do not want to force users to implement or extend a specific type. So, the response to: \u201cYou rewrite your project so you get a more specific type.\u201d is: I do not want to get a more specific type."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9606086-cu12234082]-[439169656]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I am developing a java instrumentation tool with ASM and I do not want to force users to implement or extend a specific type. So, the response to: \u201cYou rewrite your project so you get a more specific type.\u201d is: I do not want to get a more specific type."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "project":1,
                        "tool":1,
                        "extend":1,
                        "specif":3,
                        "asm":1,
                        "implement":1,
                        "forc":1,
                        "type":3,
                        "rewrit":1,
                        "respons":1,
                        "develop":1,
                        "user":1,
                        "instrument":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-03-07",
      "lastActivityDate":"2012-03-07",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":869736,
        "displayName":"Louis Wasserman",
        "reputation":77769
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The right way to do this is really, honestly, to use the object's own methods, constructors, and factories to do the copy. <code>clone</code> is broken badly enough without abusing it like this.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9606086]-[-369975650]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The right way to do this is really, honestly, to use the object's own methods, constructors, and factories to do the copy. <code>clone</code> is broken badly enough without abusing it like this.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "abus":1,
                    "bad":1,
                    "constructor":1,
                    "factori":1,
                    "object":1,
                    "code":2,
                    "clone":1,
                    "honest":1,
                    "copi":1,
                    "broken":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9618803,
      "questionId":9606064,
      "comments":[
        
      ],
      "creationDate":"2012-03-08",
      "lastActivityDate":"2012-03-08",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1140754,
        "displayName":"Miguel Gamboa",
        "reputation":911
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Once I am using the ASM bytecode instrumentation tool, then I can get the size of an Object trough the method <code>getObjectSize(Object objectToSize)</code> from the class <code>java.lang.instrument.Instrumentation</code>. Problem solved.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9618803]-[1477340769]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Once I am using the ASM bytecode instrumentation tool, then I can get the size of an Object trough the method <code>getObjectSize(Object objectToSize)</code> from the class <code>java.lang.instrument.Instrumentation</code>. Problem solved.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getObjectSize",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"objectToSize",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"java",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "method":1,
                    "size":3,
                    "tool":1,
                    "problem":1,
                    "bytecod":1,
                    "trough":1,
                    "object":4,
                    "code":4,
                    "asm":1,
                    "lang":1,
                    "instrument":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}