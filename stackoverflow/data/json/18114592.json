{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18114592,
    "title":"Is there a delete like function in Java similar to c++ such that setting an item to null hints the GC?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":26522666,
        "postId":18114592,
        "creationDate":"2013-08-07",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":616460,
          "displayName":"Jason C",
          "reputation":18187
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I think you will find http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html to be a very informative read."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18114592-cu26522666]-[-318509599]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I think you will find http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html to be a very informative read."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "find":1,
                      "blogspot":1,
                      "inform":1,
                      "collect":1,
                      "html":1,
                      "javarevisit":1,
                      "http":1,
                      "garbag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26522911,
        "postId":18114592,
        "creationDate":"2013-08-07",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"headTmp is about to go out of scope at the point you are nulling it, so nulling it is just a waste of time and space."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18114592-cu26522911]-[-424021577]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"headTmp is about to go out of scope at the point you are nulling it, so nulling it is just a waste of time and space."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"headTmp",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "point":1,
                      "wast":1,
                      "scope":1,
                      "head":1,
                      "tmp":1,
                      "null":2,
                      "space":1,
                      "time":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "garbage-collection",
      "copy",
      "variable-assignment"
    ],
    "creationDate":"2013-08-07",
    "lastActivityDate":"2013-08-08",
    "lastEditDate":"2013-08-07",
    "score":2,
    "viewCount":122,
    "owner":{
      "type":"StackOverflowUser",
      "id":708803,
      "displayName":"bjackfly",
      "reputation":968
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>When creating my own singly linked list class I noticed that the push and pop functions seems to work as expected. Although in the <code>pop_back()</code> method I set <code>headTmp = null</code> to indicate that this is no longer required. Also, can this potentially screw up the assignment to tmp since it is assigned to headTmp.data? Is this assignment a copy or a reference assignment to headTmp.data? I am unsure if Java does copies outside of arguments to functions. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18114592]-[-976251986]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>When creating my own singly linked list class I noticed that the push and pop functions seems to work as expected. Although in the <code>pop_back()</code> method I set <code>headTmp = null</code> to indicate that this is no longer required. Also, can this potentially screw up the assignment to tmp since it is assigned to headTmp.data? Is this assignment a copy or a reference assignment to headTmp.data? I am unsure if Java does copies outside of arguments to functions. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"I",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"pop_back",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"headTmp",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"IdentifierNode",
                  "name":"headTmp",
                  "comments":[
                    
                  ]
                },
                {
                  "type":"IdentifierNode",
                  "name":"headTmp",
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "singl":1,
                  "method":1,
                  "pop":2,
                  "head":3,
                  "requir":1,
                  "data":2,
                  "potenti":1,
                  "set":1,
                  "push":1,
                  "assign":4,
                  "tmp":4,
                  "work":1,
                  "code":4,
                  "function":2,
                  "expect":1,
                  "link":1,
                  "back":1,
                  "refer":1,
                  "notic":1,
                  "longer":1,
                  "unsur":1,
                  "creat":1,
                  "argument":1,
                  "copi":2,
                  "list":1,
                  "screw":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In C++ the assignment would be a copy and then I would have a pointer and just delete the headTmp item. Do I need to have <code>headTmp = null</code> in this code or does this not help anything or potentially hurt the assignment of the data and is just setting the <code>prev.next = null</code> enough and will the GC will handle this clean up? Should I think about garbage collection similar to a shared pointer in C++ where reference counting is used such that when nothing is pointing to this object it gets cleaned up? I am used to cleaning up my own garbage</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18114592]-[-146081188]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In C++ the assignment would be a copy and then I would have a pointer and just delete the headTmp item. Do I need to have <code>headTmp = null</code> in this code or does this not help anything or potentially hurt the assignment of the data and is just setting the <code>prev.next = null</code> enough and will the GC will handle this clean up? Should I think about garbage collection similar to a shared pointer in C++ where reference counting is used such that when nothing is pointing to this object it gets cleaned up? I am used to cleaning up my own garbage</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"headTmp",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"headTmp",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "count":1,
                  "hurt":1,
                  "point":1,
                  "delet":1,
                  "pointer":2,
                  "similar":1,
                  "head":2,
                  "data":1,
                  "potenti":1,
                  "set":1,
                  "clean":3,
                  "prev":1,
                  "assign":2,
                  "tmp":2,
                  "object":1,
                  "code":5,
                  "share":1,
                  "refer":1,
                  "collect":1,
                  "handl":1,
                  "copi":1,
                  "garbag":2,
                  "item":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"package dynamiclist; public class LinkedList&lt;T&gt; { public T pop_back() { Node&lt;T&gt; prev = null; Node&lt;T&gt; headTmp = head; while ( headTmp.next != null) { prev = headTmp; headTmp = headTmp.next; } T tmp = headTmp.data; headTmp = null; // does this help in GC at all? Does it effect previous assignment of tmp? prev.next = null; return tmp; } public void push_back(T t) { if (head == null) { head = new Node&lt;T&gt;(t); return; } Node&lt;T&gt; headTmp = head; while (headTmp.next != null) { headTmp= headTmp.next; } headTmp.next = new Node&lt;T&gt;(t); headTmp.next.next=null; } public void printList() { Node&lt;T&gt; headTmp = head; while ( headTmp!=null) { headTmp.printNode(); headTmp = headTmp.next; } System.out.println(); } private Node&lt;T&gt; head; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[18114592]-[2005264357]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "packageDeclaration":{
                    "type":"PackageDeclarationNode",
                    "annotations":[
                      
                    ],
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"dynamiclist",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LinkedList",
                        "comments":[
                          
                        ]
                      },
                      "typeParameters":{
                        "type":"TypeParametersNode",
                        "typeParameters":[
                          {
                            "type":"TypeParameterNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"T",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"T",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"pop_back",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"=",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":">",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"Node",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"T",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"prev",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"NullLiteralNode"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"=",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":">",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"<",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"Node",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"T",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"headTmp",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"head",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"WhileStatementNode",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"!=",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"headTmp",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"next",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"NullLiteralNode"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "statement":{
                                    "type":"BlockNode",
                                    "statements":[
                                      {
                                        "type":"ExpressionStatement",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"=",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"prev",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"headTmp",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"ExpressionStatement",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"=",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"headTmp",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"headTmp",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"next",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"tmp",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"headTmp",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"data",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"T",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"=",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"headTmp",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"NullLiteralNode"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      {
                                        "text":"// does this help in GC at all? Does it effect previous assignment of tmp? prev.next = null; return tmp; } public void push_back(T t) { if (head == null) { head = new Node<T>(t); return; } Node<T> headTmp = head; while (headTmp.next != null) { headTmp= headTmp.next; } headTmp.next = new Node<T>(t); headTmp.next.next=null; } public void printList() { Node<T> headTmp = head; while ( headTmp!=null) { headTmp.printNode(); headTmp = headTmp.next; } System.out.println(); } private Node<T> head; } \n"
                                      }
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"package dynamiclist; public class LinkedList<T> { public T pop_back() { Node<T> prev = null; Node<T> headTmp = head; while ( headTmp.next != null) { prev = headTmp; headTmp = headTmp.next; } T tmp = headTmp.data; headTmp = null; // does this help in GC at all? Does it effect previous assignment of tmp? prev.next = null; return tmp; } public void push_back(T t) { if (head == null) { head = new Node<T>(t); return; } Node<T> headTmp = head; while (headTmp.next != null) { headTmp= headTmp.next; } headTmp.next = new Node<T>(t); headTmp.next.next=null; } public void printList() { Node<T> headTmp = head; while ( headTmp!=null) { headTmp.printNode(); headTmp = headTmp.next; } System.out.println(); } private Node<T> head; } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "dynamiclist":1,
                  "system":1,
                  "pop":1,
                  "head":24,
                  "print":2,
                  "previous":1,
                  "data":1,
                  "effect":1,
                  "push":1,
                  "prev":3,
                  "assign":1,
                  "tmp":21,
                  "println":1,
                  "link":1,
                  "back":2,
                  "node":8,
                  "list":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"T",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"tmp",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"headTmp",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"data",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"T",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18114638,
      "questionId":18114592,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26542613,
          "postId":18114638,
          "creationDate":"2013-08-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1076640,
            "displayName":"yshavit",
            "reputation":16769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@bjackfly Since it's a local variable, setting it to `null` has exactly zero effect. All it does is lower the reference count by 1, which would happen anyway when the local variable goes out of scope."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26542613]-[1580780240]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@bjackfly Since it's a local variable, setting it to `null` has exactly zero effect. All it does is lower the reference count by 1, which would happen anyway when the local variable goes out of scope."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "count":1,
                        "bjackfli":1,
                        "happen":1,
                        "scope":1,
                        "effect":1,
                        "set":1,
                        "local":2,
                        "lower":1,
                        "refer":1,
                        "variabl":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26524482,
          "postId":18114638,
          "creationDate":"2013-08-08",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":616460,
            "displayName":"Jason C",
            "reputation":18187
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Keep in mind, compilers are extremely smart, and will generally do a very good job of removing unnecessary assignments, unused variables, etc."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26524482]-[-1218940323]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Keep in mind, compilers are extremely smart, and will generally do a very good job of removing unnecessary assignments, unused variables, etc."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "unus":1,
                        "remov":1,
                        "good":1,
                        "smart":1,
                        "job":1,
                        "assign":1,
                        "general":1,
                        "mind":1,
                        "extrem":1,
                        "compil":1,
                        "variabl":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522704,
          "postId":18114638,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":708803,
            "displayName":"bjackfly",
            "reputation":968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"bas can you check out my comment above to Jason C about the assignment? This is where I am getting a little confused."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26522704]-[1634130792]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"bas can you check out my comment above to Jason C about the assignment? This is where I am getting a little confused."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jason":1,
                        "assign":1,
                        "check":1,
                        "comment":1,
                        "confus":1,
                        "bas":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522745,
          "postId":18114638,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1243985,
            "displayName":"bas",
            "reputation":1475
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"which part is confusing?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26522745]-[1175694987]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"which part is confusing?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "part":1,
                        "confus":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522845,
          "postId":18114638,
          "creationDate":"2013-08-07",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":616460,
            "displayName":"Jason C",
            "reputation":18187
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Philosophical comment on &quot;it won't hurt&quot;: It certainly doesn't negatively affect the code, but it *is* detrimental in a bigger picture sense if the programmer does not understand why it's unnecessary."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26522845]-[-1974323435]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Philosophical comment on &quot;it won't hurt&quot;: It certainly doesn't negatively affect the code, but it *is* detrimental in a bigger picture sense if the programmer does not understand why it's unnecessary."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sens":1,
                        "negat":1,
                        "hurt":1,
                        "understand":1,
                        "detriment":1,
                        "affect":1,
                        "code":1,
                        "philosoph":1,
                        "comment":1,
                        "programm":1,
                        "quot":2,
                        "bigger":1,
                        "pictur":1,
                        "won":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26523185,
          "postId":18114638,
          "creationDate":"2013-08-07",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1076640,
            "displayName":"yshavit",
            "reputation":16769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It actually _can_ hurt performance -- not of the object being GC'ed, but of the object that used to &quot;own&quot; it. Some JVMs keep track of which objects have been modified, and modifying the owner class can put more strain on the GC (if it hasn't been modified, the GC can fast-path its GC). If you're creating something like a collection class, whose lifecycle is expected to outlive its elements, you should definitely null them out on removal. Otherwise, you probably shouldn't. And of course, none of this applies to local variables, which was the OP's question (but +1 to @JasonC's point)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26523185]-[1057934311]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It actually _can_ hurt performance -- not of the object being GC'ed, but of the object that used to &quot;own&quot; it. Some JVMs keep track of which objects have been modified, and modifying the owner class can put more strain on the GC (if it hasn't been modified, the GC can fast-path its GC). If you're creating something like a collection class, whose lifecycle is expected to outlive its elements, you should definitely null them out on removal. Otherwise, you probably shouldn't. And of course, none of this applies to local variables, which was the OP's question (but +1 to @JasonC's point)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_can_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"can",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JasonC",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "hurt":1,
                        "remov":1,
                        "jason":1,
                        "point":1,
                        "strain":1,
                        "path":1,
                        "track":1,
                        "local":1,
                        "jvms":1,
                        "lifecycl":1,
                        "object":3,
                        "element":1,
                        "expect":1,
                        "perform":1,
                        "modifi":3,
                        "outliv":1,
                        "put":1,
                        "quot":2,
                        "fast":1,
                        "owner":1,
                        "collect":1,
                        "appli":1,
                        "variabl":1,
                        "shouldn":1,
                        "creat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26523375,
          "postId":18114638,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":708803,
            "displayName":"bjackfly",
            "reputation":968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"yshavit so are you saying that in this case since this is a deletion on the collection that I should null it out? Also, headTmp in this case is a local variable but it is referring to the collection item at the end of the list. So does setting this to null effect the collection item or just change the local variable to point to null"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114638-cu26523375]-[-1949297120]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"yshavit so are you saying that in this case since this is a deletion on the collection that I should null it out? Also, headTmp in this case is a local variable but it is referring to the collection item at the end of the list. So does setting this to null effect the collection item or just change the local variable to point to null"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "point":1,
                        "delet":1,
                        "head":1,
                        "effect":1,
                        "set":1,
                        "local":2,
                        "tmp":1,
                        "refer":1,
                        "yshavit":1,
                        "end":1,
                        "collect":3,
                        "variabl":2,
                        "list":1,
                        "item":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-07",
      "lastActivityDate":"2013-08-07",
      "lastEditDate":"2013-08-07",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1243985,
        "displayName":"bas",
        "reputation":1475
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You don't need to set it to <code>null</code>. As soon as the reference is broken (no more instances refer to the object) it will automatically be cleaned by the garbage collector.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[-1711608166]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You don't need to set it to <code>null</code>. As soon as the reference is broken (no more instances refer to the object) it will automatically be cleaned by the garbage collector.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "set":1,
                    "clean":1,
                    "object":1,
                    "code":2,
                    "automat":1,
                    "refer":2,
                    "garbag":1,
                    "instanc":1,
                    "broken":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Althrough it is not a bad thing to set something to <code>null</code> (basically omitting the former link), it is not a guarantee that the object will be cleaned. If some other instance is still referring to the pointer, than the garbage collector will not clean it until all instances that refer to the original object have omitted their relation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[-252245290]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Althrough it is not a bad thing to set something to <code>null</code> (basically omitting the former link), it is not a guarantee that the object will be cleaned. If some other instance is still referring to the pointer, than the garbage collector will not clean it until all instances that refer to the original object have omitted their relation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "pointer":1,
                    "relat":1,
                    "set":1,
                    "clean":2,
                    "bad":1,
                    "thing":1,
                    "object":2,
                    "code":2,
                    "guarante":1,
                    "omit":2,
                    "origin":1,
                    "link":1,
                    "refer":2,
                    "althrough":1,
                    "basic":1,
                    "garbag":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Long story short, it's not necessary, but it won't hurt.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[-229442971]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Long story short, it's not necessary, but it won't hurt.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hurt":1,
                    "won":1,
                    "stori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a short reference to <a href=\"http://javarevisited.blogspot.nl/2011/04/garbage-collection-in-java.html\"rel=\"nofollow\">http://javarevisited.blogspot.nl/2011/04/garbage-collection-in-java.html</a>:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[-2096253653]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a short reference to <a href=\"http://javarevisited.blogspot.nl/2011/04/garbage-collection-in-java.html\"rel=\"nofollow\">http://javarevisited.blogspot.nl/2011/04/garbage-collection-in-java.html</a>:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "blogspot":2,
                    "nofollow":1,
                    "refer":1,
                    "collect":2,
                    "html":2,
                    "href":1,
                    "javarevisit":2,
                    "http":2,
                    "garbag":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>You as Java programmer can not force Garbage collection in Java; it will only trigger if JVM thinks it needs a garbage collection based on Java heap size.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[1126732281]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>You as Java programmer can not force Garbage collection in Java; it will only trigger if JVM thinks it needs a garbage collection based on Java heap size.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "size":1,
                    "base":1,
                    "think":1,
                    "programm":1,
                    "collect":2,
                    "heap":1,
                    "forc":1,
                    "garbag":2,
                    "trigger":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you assign <code>null</code> to an object, you are omitting its link. This is done automatically at the end of a scope. Since the garbage-collector is only run when Java needs memory, it is hardly useful.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[1207973591]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you assign <code>null</code> to an object, you are omitting its link. This is done automatically at the end of a scope. Since the garbage-collector is only run when Java needs memory, it is hardly useful.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "scope":1,
                    "run":1,
                    "assign":1,
                    "object":1,
                    "code":2,
                    "automat":1,
                    "omit":1,
                    "link":1,
                    "end":1,
                    "garbag":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And on a quick side-note (if you are used to C++):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[934466291]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And on a quick side-note (if you are used to C++):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "note":1,
                    "side":1,
                    "quick":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java handles all objects and arrays as pointers. If you want to duplicate them, you will have to deep-copy them.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114638]-[-1907210464]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java handles all objects and arrays as pointers. If you want to duplicate them, you will have to deep-copy them.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "object":1,
                    "array":1,
                    "deep":1,
                    "duplic":1,
                    "handl":1,
                    "copi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18114657,
      "questionId":18114592,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26522673,
          "postId":18114657,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":708803,
            "displayName":"bjackfly",
            "reputation":968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Sounds good. What about the assignment though for T tmp = headTmp.data? Is this a reference or a copy? When I set the headTmp to null afterwards what happens?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114657-cu26522673]-[-64859984]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Sounds good. What about the assignment though for T tmp = headTmp.data? Is this a reference or a copy? When I set the headTmp to null afterwards what happens?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"IdentifierNode",
                        "name":"headTmp",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "good":1,
                        "head":2,
                        "data":1,
                        "set":1,
                        "assign":1,
                        "tmp":3,
                        "sound":1,
                        "refer":1,
                        "copi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522781,
          "postId":18114657,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":616460,
            "displayName":"Jason C",
            "reputation":18187
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Basically, every object variable in Java is a pointer. So tmp now refers to the same object as headTmp.data. As for setting headTmp to null, the only thing that happens is headTmp is set to null. The general rule holds: If the object previously referred to by headTmp no longer has any references, it will be up for GC. Setting headTmp to null is unnecessary here (headTmp is local and the ref goes away on return anyways). The real magic is in the next line, prev.next = null, because up to that point, the item is still referenced in the list (prev.next referred to the same object as headTmp)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114657-cu26522781]-[-441997810]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Basically, every object variable in Java is a pointer. So tmp now refers to the same object as headTmp.data. As for setting headTmp to null, the only thing that happens is headTmp is set to null. The general rule holds: If the object previously referred to by headTmp no longer has any references, it will be up for GC. Setting headTmp to null is unnecessary here (headTmp is local and the ref goes away on return anyways). The real magic is in the next line, prev.next = null, because up to that point, the item is still referenced in the list (prev.next referred to the same object as headTmp)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"IdentifierNode",
                        "name":"headTmp",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "real":1,
                        "pointer":1,
                        "line":1,
                        "head":7,
                        "previous":1,
                        "data":1,
                        "set":3,
                        "local":1,
                        "prev":2,
                        "thing":1,
                        "rule":1,
                        "ref":1,
                        "tmp":8,
                        "object":4,
                        "hold":1,
                        "general":1,
                        "refer":4,
                        "magic":1,
                        "longer":1,
                        "variabl":1,
                        "basic":1,
                        "referenc":1,
                        "unnecessari":1,
                        "list":1,
                        "item":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522812,
          "postId":18114657,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":616460,
            "displayName":"Jason C",
            "reputation":18187
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Continued: prev.next is likely the last remaining reference to the item, so at that point, the item that was referred to by prev.next is up for collection."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114657-cu26522812]-[569370471]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Continued: prev.next is likely the last remaining reference to the item, so at that point, the item that was referred to by prev.next is up for collection."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "continu":1,
                        "prev":2,
                        "remain":1,
                        "refer":2,
                        "collect":1,
                        "item":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522891,
          "postId":18114657,
          "creationDate":"2013-08-07",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":708803,
            "displayName":"bjackfly",
            "reputation":968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think I got it now so just because the headTmp object had a member named data doesn't matter because when I do the assignment of tmp = headTmp.data this is saying that tmp points to that object independently and that the assignment of headTmp = null doesn't effect this."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114657-cu26522891]-[1630755381]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think I got it now so just because the headTmp object had a member named data doesn't matter because when I do the assignment of tmp = headTmp.data this is saying that tmp points to that object independently and that the assignment of headTmp = null doesn't effect this."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"headTmp",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"headTmp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "name":1,
                        "point":1,
                        "head":3,
                        "data":2,
                        "effect":1,
                        "assign":2,
                        "tmp":5,
                        "object":2,
                        "independ":1,
                        "member":1,
                        "matter":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26522927,
          "postId":18114657,
          "creationDate":"2013-08-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":616460,
            "displayName":"Jason C",
            "reputation":18187
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, that is correct."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18114657-cu26522927]-[-1745382724]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, that is correct."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "correct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-07",
      "lastActivityDate":"2013-08-07",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":616460,
        "displayName":"Jason C",
        "reputation":18187
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When the GC determines that no more references exist to an object (weak references do not affect this, see <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html\"rel=\"nofollow\">WeakReference</a>), that object is marked for deletion, and deletion can happen at any time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114657]-[2033978231]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When the GC determines that no more references exist to an object (weak references do not affect this, see <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html\"rel=\"nofollow\">WeakReference</a>), that object is marked for deletion, and deletion can happen at any time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WeakReference",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "determin":1,
                    "delet":2,
                    "exist":1,
                    "happen":1,
                    "weak":3,
                    "rel":1,
                    "oracl":1,
                    "ref":1,
                    "affect":1,
                    "doc":2,
                    "object":2,
                    "nofollow":1,
                    "refer":4,
                    "javas":1,
                    "api":1,
                    "time":1,
                    "lang":1,
                    "html":1,
                    "mark":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"WeakReference",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Setting a field to null will mark that object as discardable presuming no other references exist, which means it's a candidate for deletion at a later time. You don't <em>have</em> to set the field to null although it's frequently appropriate with respect to your application's logic (GC aside). Even if you don't set fields to null, when the last reference to the enclosing object disappears, so do the references to the objects its fields refer to (unless of course they are referred to in other places).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114657]-[375826161]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Setting a field to null will mark that object as discardable presuming no other references exist, which means it's a candidate for deletion at a later time. You don't <em>have</em> to set the field to null although it's frequently appropriate with respect to your application's logic (GC aside). Even if you don't set fields to null, when the last reference to the enclosing object disappears, so do the references to the objects its fields refer to (unless of course they are referred to in other places).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "delet":1,
                    "disappear":1,
                    "field":4,
                    "exist":1,
                    "set":3,
                    "mean":1,
                    "discard":1,
                    "candid":1,
                    "logic":1,
                    "object":3,
                    "presum":1,
                    "enclos":1,
                    "refer":5,
                    "applic":1,
                    "place":1,
                    "respect":1,
                    "time":1,
                    "mark":1,
                    "frequent":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You may wish to check out the following two articles:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114657]-[1357973040]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You may wish to check out the following two articles:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "articl":1,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html\"rel=\"nofollow\">How the garbage collector works</a></li> \n <li><a href=\"http://neverfear.org/blog/view/150/Strong_Soft_Weak_and_Phantom_References_Java\"rel=\"nofollow\">Reference types</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18114657]-[1387491625]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://javarevisited.blogspot.com/2011/04/garbage-collection-in-java.html\"rel=\"nofollow\">How the garbage collector works</a></li> \n <li><a href=\"http://neverfear.org/blog/view/150/Strong_Soft_Weak_and_Phantom_References_Java\"rel=\"nofollow\">Reference types</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "neverfear":1,
                    "weak":1,
                    "rel":2,
                    "strong":1,
                    "blogspot":1,
                    "work":1,
                    "soft":1,
                    "blog":1,
                    "nofollow":2,
                    "refer":2,
                    "collect":1,
                    "type":1,
                    "org":1,
                    "html":1,
                    "href":2,
                    "javarevisit":1,
                    "http":2,
                    "garbag":2,
                    "phantom":1,
                    "view":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18137648,
      "questionId":18114592,
      "comments":[
        
      ],
      "creationDate":"2013-08-08",
      "lastActivityDate":"2013-08-08",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":859774,
        "displayName":"Matt",
        "reputation":313
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can use the <code>sun.misc.Unsafe</code> class -- in particular, <code>allocateMemory</code> and <code>freeMemory</code> methods are akin to <code>malloc</code> and <code>free</code> in C:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18137648]-[-1979542948]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can use the <code>sun.misc.Unsafe</code> class -- in particular, <code>allocateMemory</code> and <code>freeMemory</code> methods are akin to <code>malloc</code> and <code>free</code> in C:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"freeMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "alloc":1,
                    "malloc":1,
                    "sun":1,
                    "code":10,
                    "misc":1,
                    "unsaf":1,
                    "akin":1,
                    "free":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a></li> \n <li><a href=\"http://stackoverflow.com/questions/9323416/using-memory-allocated-by-sun-misc-unsafe-allocatememory-in-native-code\">Using memory allocated by sun.misc.Unsafe.allocateMemory() in native code</a></li> \n <li><a href=\"http://mechanical-sympathy.blogspot.com/2012/10/compact-off-heap-structurestuples-in.html\"rel=\"nofollow\">http://mechanical-sympathy.blogspot.com/2012/10/compact-off-heap-structurestuples-in.html</a></li> \n <li><a href=\"http://java-performance.info/memory-allocation-in-java/\"rel=\"nofollow\">http://java-performance.info/memory-allocation-in-java/</a></li> \n <li><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18137648]-[391184213]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a></li> \n <li><a href=\"http://stackoverflow.com/questions/9323416/using-memory-allocated-by-sun-misc-unsafe-allocatememory-in-native-code\">Using memory allocated by sun.misc.Unsafe.allocateMemory() in native code</a></li> \n <li><a href=\"http://mechanical-sympathy.blogspot.com/2012/10/compact-off-heap-structurestuples-in.html\"rel=\"nofollow\">http://mechanical-sympathy.blogspot.com/2012/10/compact-off-heap-structurestuples-in.html</a></li> \n <li><a href=\"http://java-performance.info/memory-allocation-in-java/\"rel=\"nofollow\">http://java-performance.info/memory-allocation-in-java/</a></li> \n <li><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":4,
                    "github":2,
                    "question":1,
                    "alloc":5,
                    "highlyscal":2,
                    "structurestupl":2,
                    "wordpress":2,
                    "allocatememori":1,
                    "sun":4,
                    "rel":4,
                    "blogspot":2,
                    "info":2,
                    "sympathi":2,
                    "direct":2,
                    "code":2,
                    "stackoverflow":1,
                    "blog":2,
                    "nofollow":4,
                    "perform":2,
                    "mechan":2,
                    "misc":4,
                    "magic":2,
                    "unsaf":4,
                    "part":2,
                    "heap":2,
                    "html":2,
                    "href":5,
                    "http":9,
                    "mishadoff":2,
                    "compact":2,
                    "access":2,
                    "memori":7
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Although don't expect this to be necessarily faster -- in fact, it may even slow things down:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18137648]-[-1243046948]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Although don't expect this to be necessarily faster -- in fact, it may even slow things down:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "slow":1,
                    "thing":1,
                    "fact":1,
                    "expect":1,
                    "necessarili":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://mentablog.soliveirajr.com/2012/11/which-one-is-faster-java-heap-or-native-memory/\"rel=\"nofollow\">http://mentablog.soliveirajr.com/2012/11/which-one-is-faster-java-heap-or-native-memory/</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18137648]-[-1578432643]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://mentablog.soliveirajr.com/2012/11/which-one-is-faster-java-heap-or-native-memory/\"rel=\"nofollow\">http://mentablog.soliveirajr.com/2012/11/which-one-is-faster-java-heap-or-native-memory/</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":2,
                    "rel":1,
                    "mentablog":2,
                    "nofollow":1,
                    "heap":2,
                    "soliveirajr":2,
                    "href":1,
                    "http":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You may also be interested in the alternative(s) discussed in the following thread: <a href=\"https://groups.google.com/forum/#!topic/mechanical-sympathy/l4zPzatmhtU\"rel=\"nofollow\">https://groups.google.com/forum/#!topic/mechanical-sympathy/l4zPzatmhtU</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18137648]-[1211487228]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You may also be interested in the alternative(s) discussed in the following thread: <a href=\"https://groups.google.com/forum/#!topic/mechanical-sympathy/l4zPzatmhtU\"rel=\"nofollow\">https://groups.google.com/forum/#!topic/mechanical-sympathy/l4zPzatmhtU</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"l4zPzatmhtU",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "googl":2,
                    "pzatmht":2,
                    "rel":1,
                    "altern":1,
                    "https":2,
                    "sympathi":2,
                    "discuss":1,
                    "thread":1,
                    "nofollow":1,
                    "interest":1,
                    "forum":2,
                    "mechan":2,
                    "topic":2,
                    "href":1,
                    "group":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}