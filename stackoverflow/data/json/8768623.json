{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8768623,
    "title":"AtomicInteger is implemented base on JNI?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":10929810,
        "postId":8768623,
        "creationDate":"2012-01-07",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":22656,
          "displayName":"Jon Skeet",
          "reputation":757598
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Did they actually say &quot;JNI&quot; or did they say &quot;native code&quot;? There's a big difference."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8768623-cu10929810]-[1231752088]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Did they actually say &quot;JNI&quot; or did they say &quot;native code&quot;? There's a big difference."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "big":1,
                      "differ":1,
                      "code":1,
                      "jni":1,
                      "quot":4
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10930061,
        "postId":8768623,
        "creationDate":"2012-01-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":705414,
          "displayName":"user705414",
          "reputation":3872
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"what's the difference?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8768623-cu10930061]-[-6936509]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"what's the difference?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "differ":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10930074,
        "postId":8768623,
        "creationDate":"2012-01-07",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":22656,
          "displayName":"Jon Skeet",
          "reputation":757598
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"JNI is a way of interoperating with *external* native code. In this case I'd expect the code to be part of the JVM, so it doesn't need to go through nearly as many hoops."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8768623-cu10930074]-[-196765532]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"JNI is a way of interoperating with *external* native code. In this case I'd expect the code to be part of the JVM, so it doesn't need to go through nearly as many hoops."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "hoop":1,
                      "interoper":1,
                      "code":2,
                      "jni":1,
                      "expect":1,
                      "extern":1,
                      "part":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "multithreading",
      "jvm",
      "jni"
    ],
    "creationDate":"2012-01-07",
    "lastActivityDate":"2012-01-07",
    "lastEditDate":"2012-01-07",
    "score":3,
    "viewCount":261,
    "owner":{
      "type":"StackOverflowUser",
      "id":705414,
      "displayName":"user705414",
      "reputation":3872
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Soneone told me that <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicInteger.html\"rel=\"nofollow\"><code>AtomicInteger</code></a> is implemented using JNI, so it is much faster than synchonization. Is this true?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8768623]-[-194287784]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Soneone told me that <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicInteger.html\"rel=\"nofollow\"><code>AtomicInteger</code></a> is implemented using JNI, so it is much faster than synchonization. Is this true?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicInteger",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "synchon":1,
                  "faster":1,
                  "concurr":1,
                  "util":1,
                  "rel":1,
                  "oracl":1,
                  "told":1,
                  "doc":2,
                  "code":2,
                  "jni":1,
                  "nofollow":1,
                  "implement":1,
                  "javas":1,
                  "true":1,
                  "atom":3,
                  "api":1,
                  "soneon":1,
                  "html":1,
                  "href":1,
                  "http":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":8768644,
      "questionId":8768623,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10929883,
          "postId":8768644,
          "creationDate":"2012-01-07",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1: I think its called JVM intrinsics. Many &quot;native&quot; methods in Unsafe are effectively inlined when compiled to native code."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8768644-cu10929883]-[-1957271855]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1: I think its called JVM intrinsics. Many &quot;native&quot; methods in Unsafe are effectively inlined when compiled to native code."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "method":1,
                        "effect":1,
                        "code":1,
                        "quot":2,
                        "intrins":1,
                        "compil":1,
                        "unsaf":1,
                        "inlin":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10932370,
          "postId":8768644,
          "creationDate":"2012-01-07",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":589259,
            "displayName":"Maarten Bodewes",
            "reputation":29452
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"A rather important note is that it is not defined (in the API) to use sun.misc.Unsafe, so other VM's than the Sun/Oracle/OpenJDK may implement AtomicInteger in an entirely different way. It's probably a good idea to use AtomicInteger if you don't have to shoehorn it in, as it is likely to perform well on any VM."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8768644-cu10932370]-[-1062448061]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"A rather important note is that it is not defined (in the API) to use sun.misc.Unsafe, so other VM's than the Sun/Oracle/OpenJDK may implement AtomicInteger in an entirely different way. It's probably a good idea to use AtomicInteger if you don't have to shoehorn it in, as it is likely to perform well on any VM."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "good":1,
                        "shoehorn":1,
                        "idea":1,
                        "sun":2,
                        "oracl":1,
                        "open":1,
                        "import":1,
                        "note":1,
                        "perform":1,
                        "implement":1,
                        "misc":1,
                        "atom":2,
                        "api":1,
                        "unsaf":1,
                        "defin":1,
                        "jdk":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicInteger",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-07",
      "lastActivityDate":"2012-01-07",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":199288,
        "displayName":"Ramon",
        "reputation":3810
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It is unlikely to be implemented based on JNI as this would imply significant overhead. Last time I looked the OpenJDK implementation is based on methods in <code>sun.misc.Unsafe</code> which are mostly implemented as JVM primitives (method calls that are implemented specially with native code in the JVM).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8768644]-[-1208756342]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It is unlikely to be implemented based on JNI as this would imply significant overhead. Last time I looked the OpenJDK implementation is based on methods in <code>sun.misc.Unsafe</code> which are mostly implemented as JVM primitives (method calls that are implemented specially with native code in the JVM).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "method":2,
                    "impli":1,
                    "look":1,
                    "sun":1,
                    "open":1,
                    "base":2,
                    "code":3,
                    "overhead":1,
                    "jni":1,
                    "signific":1,
                    "implement":4,
                    "misc":1,
                    "unsaf":1,
                    "time":1,
                    "special":1,
                    "primit":1,
                    "call":1,
                    "jdk":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8768973,
      "questionId":8768623,
      "comments":[
        
      ],
      "creationDate":"2012-01-07",
      "lastActivityDate":"2012-01-07",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":949147,
        "displayName":"Per",
        "reputation":451
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Getting to the point of the question, AtomicInteger does not invoke the lock mechanism of synchronization, so could offer performance benefits in suitable circumstances.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8768973]-[1164927977]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Getting to the point of the question, AtomicInteger does not invoke the lock mechanism of synchronization, so could offer performance benefits in suitable circumstances.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "point":1,
                    "circumst":1,
                    "invok":1,
                    "lock":1,
                    "perform":1,
                    "suitabl":1,
                    "mechan":1,
                    "atom":1,
                    "offer":1,
                    "benefit":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicInteger",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}