{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":4909438,
    "title":"Create JTree of objects and their declared fields with reflection",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":5466840,
        "postId":4909438,
        "creationDate":"2011-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":416564,
          "displayName":"Johan Sjöberg",
          "reputation":22728
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What's the motivation behind using reflection for this? Perhaps _architechture_ can solve these problems naturally for you instead."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4909438-cu5466840]-[-41033966]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What's the motivation behind using reflection for this? Perhaps _architechture_ can solve these problems naturally for you instead."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_architechture_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "motiv":1,
                      "natur":1,
                      "problem":1,
                      "architechtur":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5466887,
        "postId":4909438,
        "creationDate":"2011-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":203543,
          "displayName":"Julia",
          "reputation":571
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Johan Sj&ouml;berg: the reason for using reflection is that jtree will have checkboxes, and when checkbox on some node / leaf is clicked, field name will be used in dynamic query generation. I am sorry can you explain &quot;architecture&quot;?? I am not familiar with it. Thanx"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4909438-cu5466887]-[-772665810]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Johan Sj&ouml;berg: the reason for using reflection is that jtree will have checkboxes, and when checkbox on some node / leaf is clicked, field name will be used in dynamic query generation. I am sorry can you explain &quot;architecture&quot;?? I am not familiar with it. Thanx"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Johan",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "familiar":1,
                      "field":1,
                      "explain":1,
                      "berg":1,
                      "dynam":1,
                      "johan":1,
                      "checkbox":2,
                      "reason":1,
                      "queri":1,
                      "click":1,
                      "ouml":1,
                      "architectur":1,
                      "leaf":1,
                      "generat":1,
                      "quot":2,
                      "node":1,
                      "reflect":1,
                      "jtree":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5466932,
        "postId":4909438,
        "creationDate":"2011-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":416564,
          "displayName":"Johan Sjöberg",
          "reputation":22728
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What I'm trying to imply here is that you can perhaps find a solution using regular instation logic if you design your program for it, rather than using reflection."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4909438-cu5466932]-[-127677066]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What I'm trying to imply here is that you can perhaps find a solution using regular instation logic if you design your program for it, rather than using reflection."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "find":1,
                      "design":1,
                      "instat":1,
                      "impli":1,
                      "regular":1,
                      "logic":1,
                      "reflect":1,
                      "solut":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5466999,
        "postId":4909438,
        "creationDate":"2011-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":203543,
          "displayName":"Julia",
          "reputation":571
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Johan Sj&ouml;berg: ok, excuse if im totally missing the point, but I see no other way of getting the fields of each Object/Class, and then to repeat that process recursively for each non-primitive field, without using reflection?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4909438-cu5466999]-[-469585745]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Johan Sj&ouml;berg: ok, excuse if im totally missing the point, but I see no other way of getting the fields of each Object/Class, and then to repeat that process recursively for each non-primitive field, without using reflection?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Johan",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "point":1,
                      "field":2,
                      "excus":1,
                      "process":1,
                      "berg":1,
                      "johan":1,
                      "total":1,
                      "object":1,
                      "miss":1,
                      "recurs":1,
                      "ouml":1,
                      "repeat":1,
                      "primit":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5467062,
        "postId":4909438,
        "creationDate":"2011-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":416564,
          "displayName":"Johan Sjöberg",
          "reputation":22728
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You say you need a field name when a checkbox is clicked? Put a getter for it, or make use of the listener pattern allowing your end-objects to communicate necessary information back to your dynamic query generator. If you need to instantiation logic, try to use the [factory](http://en.wikipedia.org/wiki/Factory_method_pattern) pattern"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4909438-cu5467062]-[848149874]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You say you need a field name when a checkbox is clicked? Put a getter for it, or make use of the listener pattern allowing your end-objects to communicate necessary information back to your dynamic query generator. If you need to instantiation logic, try to use the [factory](http://en.wikipedia.org/wiki/Factory_method_pattern) pattern"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_method_pattern",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "instanti":1,
                      "pattern":3,
                      "field":1,
                      "dynam":1,
                      "checkbox":1,
                      "factori":2,
                      "logic":1,
                      "object":1,
                      "getter":1,
                      "wikipedia":1,
                      "listen":1,
                      "queri":1,
                      "click":1,
                      "inform":1,
                      "allow":1,
                      "back":1,
                      "generat":1,
                      "make":1,
                      "put":1,
                      "communic":1,
                      "end":1,
                      "wiki":1,
                      "org":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "reflection",
      "jtree"
    ],
    "creationDate":"2011-02-05",
    "lastActivityDate":"2011-02-06",
    "score":0,
    "viewCount":345,
    "owner":{
      "type":"StackOverflowUser",
      "id":203543,
      "displayName":"Julia",
      "reputation":571
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need dynamic JTree where nodes would be objects and when node is expanded i would use reflection to get the declared fields. All non - primitive fields would again be nodes, and so on, recursively.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[-599573975]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need dynamic JTree where nodes would be objects and when node is expanded i would use reflection to get the declared fields. All non - primitive fields would again be nodes, and so on, recursively.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "field":2,
                  "dynam":1,
                  "declar":1,
                  "object":1,
                  "expand":1,
                  "recurs":1,
                  "node":3,
                  "primit":1,
                  "reflect":1,
                  "jtree":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So here is short desc of my TreeNode class:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[1151915437]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So here is short desc of my TreeNode class:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"TreeNode",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "node":1,
                  "tree":1,
                  "desc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"TreeNode",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" public TreeNode(Object o){ this.name = o.getClass().getSimpleName(); this.treeobjectclass = o.getClass(); this.isbranch = isBranchObject(); this.properties = initializePropertiesMap(); this.children = //here i will get children with getDeclared fields and //instantiate new TreeNode for nonprimitive ones } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[4909438]-[-425123813]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" "
                },
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"TreeNode",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Object",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"o",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"name",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"o",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getClass",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getSimpleName",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"treeobjectclass",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"o",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getClass",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"isbranch",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"isBranchObject",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"properties",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"initializePropertiesMap",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"this"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"."
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"children"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"="
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"/"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"/"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"here"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"i"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"will"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"get"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"children"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"with"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"getDeclared"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"fields"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"and"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"/"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"/"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"instantiate"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"new"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"TreeNode"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"for"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"nonprimitive"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":"ones"
                      },
                      {
                        "type":"TextFragmentNode",
                        "text":" "
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":" public TreeNode(Object o){ this.name = o.getClass().getSimpleName(); this.treeobjectclass = o.getClass(); this.isbranch = isBranchObject(); this.properties = initializePropertiesMap(); this.children = //here i will get children with getDeclared fields and //instantiate new TreeNode for nonprimitive ones } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "properti":2,
                  "children":2,
                  "simpl":1,
                  "instanti":1,
                  "treeobjectclass":1,
                  "field":1,
                  "map":1,
                  "branch":1,
                  "declar":1,
                  "object":2,
                  "isbranch":1,
                  "nonprimit":1,
                  "tree":2,
                  "initi":1,
                  "node":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"o",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getClass",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getSimpleName",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"isBranchObject",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"initializePropertiesMap",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"o",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Questions: </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[-208605238]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Questions: </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li><p>When doing recursive instantiation through children, how can I avoid a problem when I run into one of children classes whose constructor asks for arguments? </p></li> \n <li><p>Should I maybe be passing the Class parameter instead of Object into constructor?</p></li> \n <li>If i do this, what if later i need to get the object of this class, and i try it with class.getConstructor - again, I dont have parameters.</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[-827635785]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li><p>When doing recursive instantiation through children, how can I avoid a problem when I run into one of children classes whose constructor asks for arguments? </p></li> \n <li><p>Should I maybe be passing the Class parameter instead of Object into constructor?</p></li> \n <li>If i do this, what if later i need to get the object of this class, and i try it with class.getConstructor - again, I dont have parameters.</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"getConstructor",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "children":2,
                  "instanti":1,
                  "problem":1,
                  "run":1,
                  "dont":1,
                  "constructor":3,
                  "avoid":1,
                  "object":2,
                  "paramet":2,
                  "recurs":1,
                  "pass":1,
                  "class":1,
                  "ask":1,
                  "argument":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>How to get out of this cursed loop ? Im totally new with reflection. Any examples of similar work?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[548612921]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>How to get out of this cursed loop ? Im totally new with reflection. Any examples of similar work?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "loop":1,
                  "similar":1,
                  "exampl":1,
                  "total":1,
                  "work":1,
                  "curs":1,
                  "reflect":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thank you</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4909438]-[1624091392]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thank you</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":4909494,
      "questionId":4909438,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5468357,
          "postId":4909494,
          "creationDate":"2011-02-05",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":600500,
            "displayName":"Paŭlo Ebermann",
            "reputation":38879
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Point 1 would not work if there is no no-argument constructor. It is only auto-generated when you give no other constructors. Point 3 would not work, too, since constructors are not inherited."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4909494-cu5468357]-[2141566769]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Point 1 would not work if there is no no-argument constructor. It is only auto-generated when you give no other constructors. Point 3 would not work, too, since constructors are not inherited."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "auto":1,
                        "point":2,
                        "constructor":3,
                        "work":2,
                        "inherit":1,
                        "give":1,
                        "generat":1,
                        "argument":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5471471,
          "postId":4909494,
          "creationDate":"2011-02-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":416564,
            "displayName":"Johan Sjöberg",
            "reputation":22728
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ah, you are right, that only works for non-default constructors, I'll edit."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4909494-cu5471471]-[-707947482]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ah, you are right, that only works for non-default constructors, I'll edit."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "work":1,
                        "edit":1,
                        "constructor":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5468947,
          "postId":4909494,
          "creationDate":"2011-02-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":203543,
            "displayName":"Julia",
            "reputation":571
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Paŭlo Ebermann: other ideas? thanx"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4909494-cu5468947]-[1161474543]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Paŭlo Ebermann: other ideas? thanx"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Pa",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ebermann":1,
                        "idea":1,
                        "paŭlo":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5469070,
          "postId":4909494,
          "creationDate":"2011-02-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":600500,
            "displayName":"Paŭlo Ebermann",
            "reputation":38879
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you only want to create a tree for type introspection, the `Class` objects are enough. If you want to show an existing object, then you have already your objects (don't need to create). If you want to dynamically create objects, I'm now out of ideas. I think you should explain (by editing the question) what you need your class tree for."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4909494-cu5469070]-[-622285775]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you only want to create a tree for type introspection, the `Class` objects are enough. If you want to show an existing object, then you have already your objects (don't need to create). If you want to dynamically create objects, I'm now out of ideas. I think you should explain (by editing the question) what you need your class tree for."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"tree",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "show":1,
                        "introspect":1,
                        "explain":1,
                        "exist":1,
                        "idea":1,
                        "dynam":1,
                        "object":4,
                        "edit":1,
                        "tree":2,
                        "type":1,
                        "creat":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-05",
      "lastActivityDate":"2011-02-06",
      "lastEditDate":"2011-02-06",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":416564,
        "displayName":"Johan Sjöberg",
        "reputation":22728
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'd say this doesn't look like a typical use case for reflection. Anyway, to try and answer your questions:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4909494]-[-349767448]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'd say this doesn't look like a typical use case for reflection. Anyway, to try and answer your questions:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "reflect":1,
                    "typic":1,
                    "answer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li><p>What you can do is that you enable the default constructor regardless of whether it's private or not, using <code>ctor.setAccessible(true)</code>, and instantiate it using e.g., <code>clazz.newInstance()</code>. If it is however nonexistant, you're into a guessing game of constructor parameters or into the <code>sun.misc.Unsafe.allocateInstance(clazz)</code>, neither of which is to prefer. </p></li> \n <li><p>What you're using it for, it looks like it should suffice with the class reference. Passing an object would imply that it's used, which it's not really. </p></li> \n <li><p>If you need to pass an object only to get it's constructor arguments, then I'd say your better of passing a <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\"rel=\"nofollow\">factory</a> for that object to avoid reflection completely. This is also a recommendation from the Oracle <a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#4-0\"rel=\"nofollow\">Secure Coding Guideline</a>. </p></li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4909494]-[-797371285]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li><p>What you can do is that you enable the default constructor regardless of whether it's private or not, using <code>ctor.setAccessible(true)</code>, and instantiate it using e.g., <code>clazz.newInstance()</code>. If it is however nonexistant, you're into a guessing game of constructor parameters or into the <code>sun.misc.Unsafe.allocateInstance(clazz)</code>, neither of which is to prefer. </p></li> \n <li><p>What you're using it for, it looks like it should suffice with the class reference. Passing an object would imply that it's used, which it's not really. </p></li> \n <li><p>If you need to pass an object only to get it's constructor arguments, then I'd say your better of passing a <a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\"rel=\"nofollow\">factory</a> for that object to avoid reflection completely. This is also a recommendation from the Oracle <a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#4-0\"rel=\"nofollow\">Secure Coding Guideline</a>. </p></li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ctor",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"clazz",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"newInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"reference",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "recommend":1,
                    "method":1,
                    "nonexist":1,
                    "alloc":1,
                    "instanti":1,
                    "pattern":1,
                    "suffic":1,
                    "clazz":2,
                    "impli":1,
                    "set":1,
                    "sun":1,
                    "rel":2,
                    "constructor":3,
                    "oracl":2,
                    "secur":1,
                    "avoid":1,
                    "factori":2,
                    "ctor":1,
                    "object":3,
                    "code":7,
                    "seccodeguid":1,
                    "paramet":1,
                    "wikipedia":1,
                    "nofollow":2,
                    "refer":1,
                    "misc":1,
                    "true":1,
                    "pass":3,
                    "enabl":1,
                    "wiki":1,
                    "technetwork":1,
                    "unsaf":1,
                    "complet":1,
                    "guess":1,
                    "org":1,
                    "html":1,
                    "href":2,
                    "game":1,
                    "http":2,
                    "reflect":1,
                    "argument":1,
                    "prefer":1,
                    "instanc":2,
                    "guidelin":1,
                    "www":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A modification to passing a factory would be to let each class that you wish to instantiate provide its own factory logic, e.g.,</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4909494]-[1874450637]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A modification to passing a factory would be to let each class that you wish to instantiate provide its own factory logic, e.g.,</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "instanti":1,
                    "modif":1,
                    "factori":2,
                    "logic":1,
                    "pass":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"interface FactoryProvider&lt;T&gt; { public T getInstance(); } class Concrete implements FactoryProvider&lt;Concrete&gt; { @Override public Concrete getInstance() { return new Concrete(); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[4909494]-[-1002160542]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"InterfaceDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"FactoryProvider",
                          "comments":[
                            
                          ]
                        },
                        "typeParameters":{
                          "type":"TypeParametersNode",
                          "typeParameters":[
                            {
                              "type":"TypeParameterNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"T",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"T",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getInstance",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Concrete",
                          "comments":[
                            
                          ]
                        },
                        "implementedInterfaces":{
                          "type":"TypeListNode",
                          "types":[
                            {
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"FactoryProvider",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "typeArguments":{
                                    "type":"TypeArgumentsNode",
                                    "types":[
                                      {
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"Concrete",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Override",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Concrete",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getInstance",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"ConstructorCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"Concrete",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionArgs":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"interface FactoryProvider<T> { public T getInstance(); } class Concrete implements FactoryProvider<Concrete> { @Override public Concrete getInstance() { return new Concrete(); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":2,
                    "concret":4,
                    "overrid":1,
                    "factori":2,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"T",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FactoryProvider",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Concrete",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Concrete",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But then again, if you have complete control of the source code of all objects created this way you can yourself enforce that they all have default constructor. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4909494]-[-283769167]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But then again, if you have complete control of the source code of all objects created this way you can yourself enforce that they all have default constructor. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "enforc":1,
                    "constructor":1,
                    "object":1,
                    "code":1,
                    "control":1,
                    "complet":1,
                    "creat":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}