{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25439091,
    "title":"Java matrix library using direct memory access",
    "comments":[
      
    ],
    "tags":[
      "java",
      "blas"
    ],
    "creationDate":"2014-08-22",
    "lastActivityDate":"2014-08-22",
    "closedDate":"2014-08-22",
    "score":2,
    "viewCount":45,
    "owner":{
      "type":"StackOverflowUser",
      "id":165845,
      "displayName":"leftshoe",
      "reputation":73
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Are there any matrix libraries for Java/Scala that wrap blas/lapack and that use direct memory access, either ByteBuffers or unsafe.getFloat access? It seems like this approach would avoid all the copying of arrays that occurs when crossing the JNI boundary. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25439091]-[-653150729]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Are there any matrix libraries for Java/Scala that wrap blas/lapack and that use direct memory access, either ByteBuffers or unsafe.getFloat access? It seems like this approach would avoid all the copying of arrays that occurs when crossing the JNI boundary. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ByteBuffers",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"unsafe",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getFloat",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "occur":1,
                  "matrix":1,
                  "buffer":1,
                  "librari":1,
                  "avoid":1,
                  "direct":1,
                  "jni":1,
                  "array":1,
                  "boundari":1,
                  "wrap":1,
                  "scala":1,
                  "cross":1,
                  "lapack":1,
                  "approach":1,
                  "unsaf":1,
                  "blas":1,
                  "copi":1,
                  "access":2,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ByteBuffers",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":25439206,
      "questionId":25439091,
      "comments":[
        
      ],
      "creationDate":"2014-08-22",
      "lastActivityDate":"2014-08-22",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2109526,
        "displayName":"Alex Suo",
        "reputation":1537
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I am not aware of any such libraries except for some unsafe based serialization framework like kryo; but I doubt if you would need it at all. From all my experience, this wouldn't be a bottleneck of your system.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25439206]-[-1695777753]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I am not aware of any such libraries except for some unsafe based serialization framework like kryo; but I doubt if you would need it at all. From all my experience, this wouldn't be a bottleneck of your system.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "system":1,
                    "librari":1,
                    "framework":1,
                    "experi":1,
                    "base":1,
                    "awar":1,
                    "doubt":1,
                    "wouldn":1,
                    "kryo":1,
                    "bottleneck":1,
                    "unsaf":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For normal serialization and messaging purpose, you would always serialize your matrix into a byte buffer and that's where the unsafe access could occur. Even with the copy from Java memory into unsafe memory, you could safely achieve very high message throughput and very low latency, talking about easily into gigabyte throughput and microsecond delay. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25439206]-[399692690]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For normal serialization and messaging purpose, you would always serialize your matrix into a byte buffer and that's where the unsafe access could occur. Even with the copy from Java memory into unsafe memory, you could safely achieve very high message throughput and very low latency, talking about easily into gigabyte throughput and microsecond delay. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":2,
                    "delay":1,
                    "latenc":1,
                    "normal":1,
                    "occur":1,
                    "talk":1,
                    "matrix":1,
                    "buffer":1,
                    "safe":1,
                    "easili":1,
                    "low":1,
                    "achiev":1,
                    "gigabyt":1,
                    "unsaf":2,
                    "messag":2,
                    "throughput":2,
                    "purpos":1,
                    "copi":1,
                    "high":1,
                    "access":1,
                    "microsecond":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For computational purpose, it sounds very unlikely you have a constantly changing large matrix and you would feed it freshly into the C++ computational layer every time. Such big matrix is usually correlation or sparse based and updating the matrix itself takes probably much longer time than feeding it to C++ side.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25439206]-[902912078]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For computational purpose, it sounds very unlikely you have a constantly changing large matrix and you would feed it freshly into the C++ computational layer every time. Such big matrix is usually correlation or sparse based and updating the matrix itself takes probably much longer time than feeding it to C++ side.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "spars":1,
                    "side":1,
                    "constant":1,
                    "chang":1,
                    "fresh":1,
                    "big":1,
                    "updat":1,
                    "matrix":3,
                    "base":1,
                    "layer":1,
                    "correl":1,
                    "larg":1,
                    "comput":2,
                    "take":1,
                    "sound":1,
                    "feed":2,
                    "longer":1,
                    "time":2,
                    "purpos":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The only use might be when you are trying to achieve a system with ~1 microseconds delay from end to end; but if that's your purpose, you probably shouldn't start with Java or even C++ anyway.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25439206]-[-1888458839]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The only use might be when you are trying to achieve a system with ~1 microseconds delay from end to end; but if that's your purpose, you probably shouldn't start with Java or even C++ anyway.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "delay":1,
                    "system":1,
                    "achiev":1,
                    "end":2,
                    "start":1,
                    "shouldn":1,
                    "purpos":1,
                    "microsecond":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}