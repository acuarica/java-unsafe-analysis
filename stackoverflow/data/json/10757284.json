{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":10757284,
    "title":"Is AtomicInteger fair?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "integer",
      "atomic"
    ],
    "creationDate":"2012-05-25",
    "lastActivityDate":"2012-05-25",
    "score":3,
    "viewCount":195,
    "owner":{
      "type":"StackOverflowUser",
      "id":127592,
      "displayName":"Rohan Grover",
      "reputation":451
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Does <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicInteger.html\"rel=\"nofollow\">AtomicInteger</a> provide any kind of fairness guarantee? like first-come-first-serve execution order of threads on it? The animated example at <a href=\"http://sourceforge.net/projects/javaconcurrenta/\"rel=\"nofollow\">Victor Grazi's concurrent animated</a> definitely does not show any such fairness. I've searched and haven't found anything conclusive.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10757284]-[-617903729]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Does <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicInteger.html\"rel=\"nofollow\">AtomicInteger</a> provide any kind of fairness guarantee? like first-come-first-serve execution order of threads on it? The animated example at <a href=\"http://sourceforge.net/projects/javaconcurrenta/\"rel=\"nofollow\">Victor Grazi's concurrent animated</a> definitely does not show any such fairness. I've searched and haven't found anything conclusive.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicInteger",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sourceforg":1,
                  "provid":1,
                  "anim":2,
                  "fair":2,
                  "show":1,
                  "concurr":2,
                  "util":1,
                  "serv":1,
                  "project":1,
                  "victor":1,
                  "rel":2,
                  "oracl":1,
                  "doc":2,
                  "net":1,
                  "guarante":1,
                  "found":1,
                  "thread":1,
                  "conclus":1,
                  "nofollow":2,
                  "javaconcurrenta":1,
                  "order":1,
                  "javas":1,
                  "grazi":1,
                  "atom":3,
                  "api":1,
                  "kind":1,
                  "html":1,
                  "href":2,
                  "http":2,
                  "execut":1,
                  "search":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":10757328,
      "questionId":10757284,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13981341,
          "postId":10757328,
          "creationDate":"2012-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":702638,
            "displayName":"Hunter McMillen",
            "reputation":18859
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"very nice wordplay"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757328-cu13981341]-[-1182398153]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"very nice wordplay"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wordplay":1,
                        "nice":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13981597,
          "postId":10757328,
          "creationDate":"2012-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":177800,
            "displayName":"Jarrod Roberson",
            "reputation":35344
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`.compareAndSet()` supports order guarantee ( via `unsafe.compareAndSwapInt()` ), so this answer isn't correct. It **is** spelled out in the JavaDoc of `.weakCompareAndSet()` which says to use the previous method if you want order guarantee."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757328-cu13981597]-[760774348]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`.compareAndSet()` supports order guarantee ( via `unsafe.compareAndSwapInt()` ), so this answer isn't correct. It **is** spelled out in the JavaDoc of `.weakCompareAndSet()` which says to use the previous method if you want order guarantee."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSwapInt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JavaDoc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"weakCompareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "support":1,
                        "method":1,
                        "previous":1,
                        "correct":1,
                        "spell":1,
                        "weak":1,
                        "set":2,
                        "doc":1,
                        "guarante":2,
                        "compar":3,
                        "order":2,
                        "isn":1,
                        "swap":1,
                        "answer":1,
                        "unsaf":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"JavaDoc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13981660,
          "postId":10757328,
          "creationDate":"2012-05-25",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JarrodRoberson: *Ordering guarantee* refers to happens-before relations. This has absolutely nothing to do with *first-come-first-served* resolution of races."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757328-cu13981660]-[-749758104]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JarrodRoberson: *Ordering guarantee* refers to happens-before relations. This has absolutely nothing to do with *first-come-first-served* resolution of races."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JarrodRoberson",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jarrod":1,
                        "roberson":1,
                        "relat":1,
                        "serv":1,
                        "resolut":1,
                        "guarante":1,
                        "order":1,
                        "race":1,
                        "refer":1,
                        "absolut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-05-25",
      "lastActivityDate":"2012-05-25",
      "lastEditDate":"2012-05-25",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":367273,
        "displayName":"NPE",
        "reputation":198024
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, there is no such guarantee. If there was one, it would be spelled out in the documentation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757328]-[281870702]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, there is no such guarantee. If there was one, it would be spelled out in the documentation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "spell":1,
                    "document":1,
                    "guarante":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When you think about it, <code>AtomicInteger</code> is basically a thin wrapper around <a href=\"http://en.wikipedia.org/wiki/Compare-and-swap\">compare-and-swap</a> (or similar). Guaranteeing first-come-first-served semantics would require synchronization between threads, which is costly, and contrary to the very idea of <code>AtomicInteger</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757328]-[-590467270]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When you think about it, <code>AtomicInteger</code> is basically a thin wrapper around <a href=\"http://en.wikipedia.org/wiki/Compare-and-swap\">compare-and-swap</a> (or similar). Guaranteeing first-come-first-served semantics would require synchronization between threads, which is costly, and contrary to the very idea of <code>AtomicInteger</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serv":1,
                    "similar":1,
                    "requir":1,
                    "idea":1,
                    "code":4,
                    "guarante":1,
                    "thread":1,
                    "wikipedia":1,
                    "contrari":1,
                    "cost":1,
                    "compar":2,
                    "wrapper":1,
                    "semant":1,
                    "swap":2,
                    "wiki":1,
                    "atom":2,
                    "org":1,
                    "href":1,
                    "basic":1,
                    "http":1,
                    "thin":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicInteger",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The way things are is that if there are multiple threads wanting to, say, <code>incrementAndGet()</code> the same atomic integer concurrently, the order in which they finish the race is unspecified.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757328]-[-26874170]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The way things are is that if there are multiple threads wanting to, say, <code>incrementAndGet()</code> the same atomic integer concurrently, the order in which they finish the race is unspecified.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"incrementAndGet",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":1,
                    "want":1,
                    "thing":1,
                    "finish":1,
                    "code":2,
                    "thread":1,
                    "order":1,
                    "race":1,
                    "atom":1,
                    "unspecifi":1,
                    "multipl":1,
                    "increment":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":10757493,
      "questionId":10757284,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13981694,
          "postId":10757493,
          "creationDate":"2012-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":367273,
            "displayName":"NPE",
            "reputation":198024
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"*Ordering guarantee* refers to happens-before relations. This has absolutely nothing to do with *first-come-first-served* resolution of races."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757493-cu13981694]-[1731902294]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"*Ordering guarantee* refers to happens-before relations. This has absolutely nothing to do with *first-come-first-served* resolution of races."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "relat":1,
                        "serv":1,
                        "resolut":1,
                        "guarante":1,
                        "order":1,
                        "race":1,
                        "refer":1,
                        "absolut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-05-25",
      "lastActivityDate":"2012-05-25",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":177800,
        "displayName":"Jarrod Roberson",
        "reputation":35344
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you look at the source you will get the correct answer, which is <strong>YES</strong> and <strong>NO</strong> about ordering guarantees. <strong>It depends on which method is being called.</strong> Some support ordering guarantees, some don't. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757493]-[308585479]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you look at the source you will get the correct answer, which is <strong>YES</strong> and <strong>NO</strong> about ordering guarantees. <strong>It depends on which method is being called.</strong> Some support ordering guarantees, some don't. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "method":1,
                    "depend":1,
                    "correct":1,
                    "strong":6,
                    "guarante":2,
                    "order":2,
                    "answer":1,
                    "call":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The following source shows that it supports both modes depending on which method is called. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757493]-[-1639346997]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The following source shows that it supports both modes depending on which method is called. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "method":1,
                    "show":1,
                    "depend":1,
                    "mode":1,
                    "call":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" 138 /** 139 * Atomically sets the value to the given updated value 140 * if the current value {@code ==} the expected value. 141 * 142 * &lt;p&gt;May &lt;a href=&quot;package-summary.html#Spurious&quot;&gt;fail spuriously&lt;/a&gt; 143 * and does not provide ordering guarantees, so is only rarely an 144 * appropriate alternative to {@code compareAndSet}. 145 * 146 * @param expect the expected value 147 * @param update the new value 148 * @return true if successful. 149 */ 150 public final boolean weakCompareAndSet(int expect, int update) { 151 return unsafe.compareAndSwapInt(this, valueOffset, expect, update); 152 } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[10757493]-[-1584673017]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" 138 /** 139 * Atomically sets the value to the given updated value 140 * if the current value {@code ==} the expected value. 141 * 142 * "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"p"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"May "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"a"
                    },
                    "attributes":[
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"href"
                        },
                        "value":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"package-summary.html#Spurious\""
                        }
                      }
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":"fail spuriously"
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" 143 * and does not provide ordering guarantees, so is only rarely an 144 * appropriate alternative to {@code "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"compareAndSet",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"}. 145 * 146 * @param expect the expected value 147 * @param update the new value 148 * @return true if successful. 149 */ 150 "
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"KeywordModifierNode",
                        "value":"final",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"weakCompareAndSet",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"expect",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "formalParameterDeclarator":{
                            "type":"FormalParameterDeclsNode",
                            "modifiers":[
                              
                            ],
                            "parameterType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "nextDeclarator":{
                              "type":"AdditionalFormalParameterDeclNode",
                              "variableDeclarator":{
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"update",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"{ 151 "
                  },
                  {
                    "type":"ReturnStatementNode",
                    "expression":{
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"unsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"compareAndSwapInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"valueOffset",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"expect",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"update",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"152 } "
                  }
                ]
              },
              "rawText":" 138 /** 139 * Atomically sets the value to the given updated value 140 * if the current value {@code ==} the expected value. 141 * 142 * <p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a> 143 * and does not provide ordering guarantees, so is only rarely an 144 * appropriate alternative to {@code compareAndSet}. 145 * 146 * @param expect the expected value 147 * @param update the new value 148 * @return true if successful. 149 */ 150 public final boolean weakCompareAndSet(int expect, int update) { 151 return unsafe.compareAndSwapInt(this, valueOffset, expect, update); 152 } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "fail":1,
                    "success":1,
                    "spurious":2,
                    "param":2,
                    "summari":1,
                    "weak":1,
                    "set":3,
                    "updat":4,
                    "altern":1,
                    "code":2,
                    "guarante":1,
                    "offset":1,
                    "rare":1,
                    "compar":3,
                    "order":1,
                    "expect":5,
                    "true":1,
                    "swap":1,
                    "atom":1,
                    "unsaf":1,
                    "html":1,
                    "href":1,
                    "current":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"unsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"compareAndSwapInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"this",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"valueOffset",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"expect",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"update",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"expect",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"update",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When in doubt read the JavaDoc, and if still not clear read the source.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757493]-[231641593]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When in doubt read the JavaDoc, and if still not clear read the source.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JavaDoc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "clear":1,
                    "doc":1,
                    "doubt":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JavaDoc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":10757696,
      "questionId":10757284,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13984939,
          "postId":10757696,
          "creationDate":"2012-05-25",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1076640,
            "displayName":"yshavit",
            "reputation":16769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That's true -- I think the warning against high-contention CAS is more relevant for when you use the `AtomicFoo.compareAndSet` methods &quot;raw&quot;, where the body of the loop is non-trivial (where adding 1 to a local variable is definitely considered trivial)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757696-cu13984939]-[2070600066]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That's true -- I think the warning against high-contention CAS is more relevant for when you use the `AtomicFoo.compareAndSet` methods &quot;raw&quot;, where the body of the loop is non-trivial (where adding 1 to a local variable is definitely considered trivial)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"AtomicFoo",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "loop":1,
                        "warn":1,
                        "set":1,
                        "local":1,
                        "relev":1,
                        "cas":1,
                        "raw":1,
                        "consid":1,
                        "compar":1,
                        "content":1,
                        "true":1,
                        "ad":1,
                        "quot":2,
                        "atom":1,
                        "bodi":1,
                        "variabl":1,
                        "trivial":2,
                        "high":1,
                        "foo":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13982004,
          "postId":10757696,
          "creationDate":"2012-05-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1076640,
            "displayName":"yshavit",
            "reputation":16769
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"In fact, the material I've read (including JCIP, iirc) says that AtomicInteger et al are best suited for when you have low to moderate contention. If you have very high contention, such that the CAS operations frequently fail, then you should start looking at synchronization; you'll be trading off some speed in the best/uncontested case, for less &quot;useless&quot; work in the CAS."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757696-cu13982004]-[-273825335]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"In fact, the material I've read (including JCIP, iirc) says that AtomicInteger et al are best suited for when you have low to moderate contention. If you have very high contention, such that the CAS operations frequently fail, then you should start looking at synchronization; you'll be trading off some speed in the best/uncontested case, for less &quot;useless&quot; work in the CAS."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "fail":1,
                        "useless":1,
                        "moder":1,
                        "trade":1,
                        "cas":2,
                        "suit":1,
                        "work":1,
                        "uncontest":1,
                        "includ":1,
                        "oper":1,
                        "fact":1,
                        "low":1,
                        "jcip":1,
                        "iirc":1,
                        "content":2,
                        "quot":2,
                        "atom":1,
                        "start":1,
                        "materi":1,
                        "frequent":1,
                        "high":1,
                        "speed":1,
                        "synchron":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicInteger",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":13982146,
          "postId":10757696,
          "creationDate":"2012-05-25",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@yshavit That is true, but my point is that you have to have a number of thread which are just incrementing the counter and very little else. IMHO, Any real program which has a high contention on a counter and does not do much else has a design issue."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10757696-cu13982146]-[-7640107]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@yshavit That is true, but my point is that you have to have a number of thread which are just incrementing the counter and very little else. IMHO, Any real program which has a high contention on a counter and does not do much else has a design issue."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":1,
                        "program":1,
                        "design":1,
                        "point":1,
                        "real":1,
                        "issu":1,
                        "imho":1,
                        "thread":1,
                        "yshavit":1,
                        "content":1,
                        "true":1,
                        "counter":2,
                        "increment":1,
                        "high":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-05-25",
      "lastActivityDate":"2012-05-25",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Its worth nothing that its operation is very fast compared to anything else you are likely to do. This means you are highly unlikely to get contension so fairness is unlikely to be an issue.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757696]-[-1060030468]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Its worth nothing that its operation is very fast compared to anything else you are likely to do. This means you are highly unlikely to get contension so fairness is unlikely to be an issue.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fair":1,
                    "mean":1,
                    "issu":1,
                    "oper":1,
                    "worth":1,
                    "compar":1,
                    "fast":1,
                    "high":1,
                    "contens":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you call it 2 billion times (which you can do in seconds) it will over flow anyway. If this is a concern I would use AtomicLong.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10757696]-[121253747]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you call it 2 billion times (which you can do in seconds) it will over flow anyway. If this is a concern I would use AtomicLong.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicLong",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concern":1,
                    "second":1,
                    "billion":1,
                    "flow":1,
                    "atom":1,
                    "time":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicLong",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}