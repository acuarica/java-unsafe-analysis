{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":24305788,
    "title":"Appending perforce permission table through java results in blank permission table",
    "comments":[
      
    ],
    "tags":[
      "java",
      "perforce",
      "p4java"
    ],
    "creationDate":"2014-06-19",
    "lastActivityDate":"2014-06-20",
    "lastEditDate":"2014-06-19",
    "score":1,
    "viewCount":54,
    "owner":{
      "type":"StackOverflowUser",
      "id":1373711,
      "displayName":"JHS",
      "reputation":4542
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am trying to grant permission to a group on a folder in Perforce. However, the permission table that is created/updated from Java in Perforce is empty.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24305788]-[1889663596]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am trying to grant permission to a group on a folder in Perforce. However, the permission table that is created/updated from Java in Perforce is empty.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "permiss":2,
                  "updat":1,
                  "tabl":1,
                  "folder":1,
                  "empti":1,
                  "grant":1,
                  "perforc":2,
                  "creat":1,
                  "group":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Following are the steps that I do -</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24305788]-[-1485218692]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Following are the steps that I do -</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "step":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"//Get the server object. IOptionsServer server = ServerFactory.getOptionsServer(&quot;p4java://&lt;ip&gt;:1666&quot;, null); server.connect(); server.setUserName(&quot;&lt;username&gt;&quot;); // this is a super user server.login(&quot;&lt;password&gt;&quot;); //Create a user group and add users. IUserGroup ug = new UserGroup(); String groupName = &quot;&lt;usergroup_somename&gt;; ug.setName(groupName); List&lt;String&gt; userList = new ArrayList&lt;&gt;(); userList.add(&quot;&lt;username1&gt;&quot;); userList.add(&quot;&lt;username2&gt;&quot;); userList.add(&quot;&lt;username3&gt;&quot;); ug.setUsers(userList); server.createUserGroup(ug); //Get the permission table. GetProtectionEntriesOptions gpo = new GetProtectionEntriesOptions(); gpo.setAllUsers(true); List&lt;IProtectionEntry&gt; peList = server.getProtectionEntries(null, gpo); //Create a new Protection entry IProtectionEntry pe = new ProtectionEntry(); pe.setGroup(true); pe.setName(groupName); depotFilePath = &quot;//depottest/Level1/Level2/...&quot;; // the folders exist in Perforce pe.setPath(depotFilePath); pe.setMode(&quot;write&quot;); pe.setHost(&quot;*&quot;); pe.setPathExcluded(false); pe.setOrder(peList.size()); pe.setType(EntryType.INCLUDE); //Add the new created permission into the fetched Permission table list. peList.add(pe); //Create/Update the Permission table using either of the following methods separately or in combination creates a blank permission table. server.createProtectionEntries(peList); server.updateProtectionEntries(peList); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[24305788]-[-1258285387]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"//Get the server object. "
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"server",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"ServerFactory",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getOptionsServer",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"p4java://<ip>:1666\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"NullLiteralNode"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"IOptionsServer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"server",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"connect",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"server",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"setUserName",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"<username>\""
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    {
                      "text":"// this is a super user server.login(\"<password>\"); //Create a user group and add users. IUserGroup ug = new UserGroup(); String groupName = \"<usergroup_somename>; ug.setName(groupName); List<String> userList = new ArrayList<>(); userList.add(\"<username1>\"); userList.add(\"<username2>\"); userList.add(\"<username3>\"); ug.setUsers(userList); server.createUserGroup(ug); //Get the permission table. GetProtectionEntriesOptions gpo = new GetProtectionEntriesOptions(); gpo.setAllUsers(true); List<IProtectionEntry> peList = server.getProtectionEntries(null, gpo); //Create a new Protection entry IProtectionEntry pe = new ProtectionEntry(); pe.setGroup(true); pe.setName(groupName); depotFilePath = \"//depottest/Level1/Level2/...\"; // the folders exist in Perforce pe.setPath(depotFilePath); pe.setMode(\"write\"); pe.setHost(\"*\"); pe.setPathExcluded(false); pe.setOrder(peList.size()); pe.setType(EntryType.INCLUDE); //Add the new created permission into the fetched Permission table list. peList.add(pe); //Create/Update the Permission table using either of the following methods separately or in combination creates a blank permission table. server.createProtectionEntries(peList); server.updateProtectionEntries(peList); \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"//Get the server object. IOptionsServer server = ServerFactory.getOptionsServer(\"p4java://<ip>:1666\", null); serverconnect(); serversetUserName(\"<username>\"); // this is a super user server.login(\"<password>\"); //Create a user group and add users. IUserGroup ug = new UserGroup(); String groupName = \"<usergroup_somename>; ug.setName(groupName); List<String> userList = new ArrayList<>(); userList.add(\"<username1>\"); userList.add(\"<username2>\"); userList.add(\"<username3>\"); ug.setUsers(userList); server.createUserGroup(ug); //Get the permission table. GetProtectionEntriesOptions gpo = new GetProtectionEntriesOptions(); gpo.setAllUsers(true); List<IProtectionEntry> peList = server.getProtectionEntries(null, gpo); //Create a new Protection entry IProtectionEntry pe = new ProtectionEntry(); pe.setGroup(true); pe.setName(groupName); depotFilePath = \"//depottest/Level1/Level2/...\"; // the folders exist in Perforce pe.setPath(depotFilePath); pe.setMode(\"write\"); pe.setHost(\"*\"); pe.setPathExcluded(false); pe.setOrder(peList.size()); pe.setType(EntryType.INCLUDE); //Add the new created permission into the fetched Permission table list. peList.add(pe); //Create/Update the Permission table using either of the following methods separately or in combination creates a blank permission table. server.createProtectionEntries(peList); server.updateProtectionEntries(peList); \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "permiss":5,
                  "serverconnect":1,
                  "server":10,
                  "path":4,
                  "size":1,
                  "exist":1,
                  "depot":2,
                  "iprotect":2,
                  "host":1,
                  "usergroup":1,
                  "set":11,
                  "updat":2,
                  "option":3,
                  "separ":1,
                  "iuser":1,
                  "depottest":1,
                  "blank":1,
                  "factori":1,
                  "gpo":3,
                  "object":1,
                  "somenam":1,
                  "includ":1,
                  "tabl":4,
                  "array":1,
                  "entri":10,
                  "folder":1,
                  "combin":1,
                  "order":1,
                  "perforc":1,
                  "true":2,
                  "fetch":1,
                  "mode":1,
                  "serverset":1,
                  "fals":1,
                  "file":2,
                  "protect":7,
                  "login":1,
                  "type":2,
                  "creat":7,
                  "usernam":4,
                  "add":6,
                  "group":8,
                  "ioption":1,
                  "user":13,
                  "write":1,
                  "list":14,
                  "exclud":1,
                  "level":2,
                  "password":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"IOptionsServer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"ServerFactory",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getOptionsServer",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"p4java://<ip>:1666\""
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"server",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"connect",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"server",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setUserName",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"<username>\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// this is a super user server.login(\"<password>\"); //Create a user group and add users. IUserGroup ug = new UserGroup(); String groupName = \"<usergroup_somename>; ug.setName(groupName); List<String> userList = new ArrayList<>(); userList.add(\"<username1>\"); userList.add(\"<username2>\"); userList.add(\"<username3>\"); ug.setUsers(userList); server.createUserGroup(ug); //Get the permission table. GetProtectionEntriesOptions gpo = new GetProtectionEntriesOptions(); gpo.setAllUsers(true); List<IProtectionEntry> peList = server.getProtectionEntries(null, gpo); //Create a new Protection entry IProtectionEntry pe = new ProtectionEntry(); pe.setGroup(true); pe.setName(groupName); depotFilePath = \"//depottest/Level1/Level2/...\"; // the folders exist in Perforce pe.setPath(depotFilePath); pe.setMode(\"write\"); pe.setHost(\"*\"); pe.setPathExcluded(false); pe.setOrder(peList.size()); pe.setType(EntryType.INCLUDE); //Add the new created permission into the fetched Permission table list. peList.add(pe); //Create/Update the Permission table using either of the following methods separately or in combination creates a blank permission table. server.createProtectionEntries(peList); server.updateProtectionEntries(peList); \n"
                      }
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"server",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"ServerFactory",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getOptionsServer",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"p4java://<ip>:1666\""
                                },
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"NullLiteralNode"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IOptionsServer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>According to the <a href=\"http://www.perforce.com/perforce/doc.current/manuals/p4java-javadoc/com/perforce/p4java/server/IOptionsServer.html#createProtectionEntries%28java.util.List%29\"rel=\"nofollow\">documentation</a> the methods in the end should create/replace/update the Permission table, however, this does not happen and instead the permission table in the Perforce server is deleted/blank.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24305788]-[114824758]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>According to the <a href=\"http://www.perforce.com/perforce/doc.current/manuals/p4java-javadoc/com/perforce/p4java/server/IOptionsServer.html#createProtectionEntries%28java.util.List%29\"rel=\"nofollow\">documentation</a> the methods in the end should create/replace/update the Permission table, however, this does not happen and instead the permission table in the Perforce server is deleted/blank.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "permiss":2,
                  "delet":1,
                  "server":3,
                  "util":1,
                  "happen":1,
                  "document":1,
                  "updat":1,
                  "rel":1,
                  "blank":1,
                  "doc":1,
                  "tabl":2,
                  "replac":1,
                  "entri":1,
                  "nofollow":1,
                  "perforc":4,
                  "end":1,
                  "protect":1,
                  "html":1,
                  "href":1,
                  "manual":1,
                  "current":1,
                  "http":1,
                  "creat":2,
                  "ioption":1,
                  "javadoc":1,
                  "list":1,
                  "www":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I may be missing something. Can someone please give some suggestions on how to fix this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24305788]-[-760493170]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I may be missing something. Can someone please give some suggestions on how to fix this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "suggest":1,
                  "give":1,
                  "miss":1,
                  "fix":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>P.S. I have tried using only the <code>updateProtectionEntries(peList)</code> method or the <code>server.createProtectionEntries(peList)</code> method and both together and still the pemission table in the Perforce server is blank.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24305788]-[375782584]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>P.S. I have tried using only the <code>updateProtectionEntries(peList)</code> method or the <code>server.createProtectionEntries(peList)</code> method and both together and still the pemission table in the Perforce server is blank.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"updateProtectionEntries",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"peList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"server",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"createProtectionEntries",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"peList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "pemiss":1,
                  "server":2,
                  "updat":1,
                  "blank":1,
                  "code":4,
                  "tabl":1,
                  "entri":2,
                  "perforc":1,
                  "protect":2,
                  "creat":1,
                  "list":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":24336726,
      "questionId":24305788,
      "comments":[
        
      ],
      "creationDate":"2014-06-20",
      "lastActivityDate":"2014-06-20",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":3761774,
        "displayName":"J B",
        "reputation":26
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Perforce has forums where you can ask questions: forums.perforce.com</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24336726]-[1853981852]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Perforce has forums where you can ask questions: forums.perforce.com</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "forum":2,
                    "perforc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>At one time (depends on P4Java and server versions) incorrect order values could lose data. There's also a spaces-in-path problem.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24336726]-[-1436894732]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>At one time (depends on P4Java and server versions) incorrect order values could lose data. There's also a spaces-in-path problem.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "server":1,
                    "path":1,
                    "depend":1,
                    "problem":1,
                    "data":1,
                    "version":1,
                    "space":1,
                    "incorrect":1,
                    "order":1,
                    "valu":1,
                    "time":1,
                    "lose":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This works for me:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24336726]-[-1205687338]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This works for me:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "work":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"peList.add(pe); // fix order values and spaces-in-path quoting int i = 0; for (IProtectionEntry pe : peList) { pe.setOrder(i++); if (pe.getPath().indexOf(&quot; &quot;) &gt;= 0) { // this bug should be fixed in 2014.X (no promises) if (pe.isPathExcluded()) { pe.setPath(&quot;\\&quot;-&quot; + pe.getPath() + &quot;\\&quot;&quot;); pe.setPathExcluded(false); } else { pe.setPath(&quot;\\&quot;&quot; + pe.getPath() + &quot;\\&quot;&quot;); } } } try { String createProtectionEntries = server.createProtectionEntries(peList); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[24336726]-[-715616071]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"peList",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"add",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"pe",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// fix order values and spaces-in-path quoting int i = 0; for (IProtectionEntry pe : peList) { pe.setOrder(i++); if (pe.getPath().indexOf(\" \") >= 0) { // this bug should be fixed in 2014.X (no promises) if (pe.isPathExcluded()) { pe.setPath(\"\\\"-\" + pe.getPath() + \"\\\"\"); pe.setPathExcluded(false); } else { pe.setPath(\"\\\"\" + pe.getPath() + \"\\\"\"); } } } try { String createProtectionEntries = server.createProtectionEntries(peList); \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":"peListadd(pe); // fix order values and spaces-in-path quoting int i = 0; for (IProtectionEntry pe : peList) { pe.setOrder(i++); if (pe.getPath().indexOf(\" \") >= 0) { // this bug should be fixed in 2014.X (no promises) if (pe.isPathExcluded()) { pe.setPath(\"\\\"-\" + pe.getPath() + \"\\\"\"); pe.setPathExcluded(false); } else { pe.setPath(\"\\\"\" + pe.getPath() + \"\\\"\"); } } } try { String createProtectionEntries = server.createProtectionEntries(peList); \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "server":1,
                    "path":8,
                    "listadd":1,
                    "iprotect":1,
                    "promis":1,
                    "set":4,
                    "fix":2,
                    "entri":3,
                    "space":1,
                    "bug":1,
                    "order":2,
                    "valu":1,
                    "fals":1,
                    "quot":1,
                    "protect":2,
                    "creat":2,
                    "list":2,
                    "exclud":2,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"peList",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"add",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"pe",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// fix order values and spaces-in-path quoting int i = 0; for (IProtectionEntry pe : peList) { pe.setOrder(i++); if (pe.getPath().indexOf(\" \") >= 0) { // this bug should be fixed in 2014.X (no promises) if (pe.isPathExcluded()) { pe.setPath(\"\\\"-\" + pe.getPath() + \"\\\"\"); pe.setPathExcluded(false); } else { pe.setPath(\"\\\"\" + pe.getPath() + \"\\\"\"); } } } try { String createProtectionEntries = server.createProtectionEntries(peList); \n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}