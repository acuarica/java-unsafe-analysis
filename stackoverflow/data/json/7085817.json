{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7085817,
    "title":"Generate Java Externalizable readExternal() / writeExternal() blocks automatically",
    "comments":[
      
    ],
    "tags":[
      "java",
      "serialization",
      "code-generation",
      "lombok"
    ],
    "creationDate":"2011-08-16",
    "lastActivityDate":"2011-08-17",
    "lastEditDate":"2011-08-16",
    "score":8,
    "viewCount":1378,
    "owner":{
      "type":"StackOverflowUser",
      "id":897618,
      "displayName":"MrLebowski",
      "reputation":41
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am working on a project where Java's native serialization is slow, so we want to move to implementing Externalize interface on the classes for superior performance. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7085817]-[-997274667]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am working on a project where Java's native serialization is slow, so we want to move to implementing Externalize interface on the classes for superior performance. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "move":1,
                  "slow":1,
                  "project":1,
                  "superior":1,
                  "work":1,
                  "extern":1,
                  "perform":1,
                  "implement":1,
                  "class":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>However, these classes have lots of data members, and we have realized its easy to make mistakes while writing these two methods. We are just reading/writing all of the members of the class in these functions, nothing fancy. Is there some way of generating the <code>readExternal()</code> <code>writeExternal()</code> blocks for externalize automatically in an offline process, or at compile time?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7085817]-[-660677071]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>However, these classes have lots of data members, and we have realized its easy to make mistakes while writing these two methods. We are just reading/writing all of the members of the class in these functions, nothing fancy. Is there some way of generating the <code>readExternal()</code> <code>writeExternal()</code> blocks for externalize automatically in an offline process, or at compile time?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"in",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"readExternal",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"writeExternal",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "fanci":1,
                  "read":2,
                  "method":1,
                  "easi":1,
                  "process":1,
                  "data":1,
                  "code":4,
                  "mistak":1,
                  "offlin":1,
                  "automat":1,
                  "block":1,
                  "member":2,
                  "function":1,
                  "extern":3,
                  "lot":1,
                  "generat":1,
                  "make":1,
                  "class":1,
                  "compil":1,
                  "time":1,
                  "write":3,
                  "realiz":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I had a look at <a href=\"http://projectlombok.org/\">http://projectlombok.org/</a>, and something like that would have been ideal.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7085817]-[-268665006]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I had a look at <a href=\"http://projectlombok.org/\">http://projectlombok.org/</a>, and something like that would have been ideal.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ideal":1,
                  "projectlombok":2,
                  "org":2,
                  "href":1,
                  "http":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Similarly, we would like to keep these classes immutable, but immutable classes can not implement the externalizable interface - we want to use the proxy class pattern from effective java - having that generated would be useful too.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7085817]-[-1135603852]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Similarly, we would like to keep these classes immutable, but immutable classes can not implement the externalizable interface - we want to use the proxy class pattern from effective java - having that generated would be useful too.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"pattern",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pattern":1,
                  "similar":1,
                  "effect":1,
                  "immut":2,
                  "externaliz":1,
                  "implement":1,
                  "generat":1,
                  "class":2,
                  "proxi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7089792,
      "questionId":7085817,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8498489,
          "postId":7089792,
          "creationDate":"2011-08-17",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":897618,
            "displayName":"MrLebowski",
            "reputation":41
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It uses reflection at run time for serialization, which is always going to be slower. Check out http://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking for comparison of different serialization methods."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu8498489]-[-210499081]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It uses reflection at run time for serialization, which is always going to be slower. Check out http://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking for comparison of different serialization methods."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":2,
                        "method":1,
                        "googl":1,
                        "comparison":1,
                        "run":1,
                        "protobuf":1,
                        "code":1,
                        "check":1,
                        "slower":1,
                        "compar":1,
                        "thrift":1,
                        "wiki":1,
                        "time":1,
                        "http":1,
                        "reflect":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8504001,
          "postId":7089792,
          "creationDate":"2011-08-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":207421,
            "displayName":"EJP",
            "reputation":133851
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MrLebowski I'm aware of its use of Reflection but in practice does that really dominate network &amp; disk bandwidths? and did they include that in the tests? or just serialize to ByteArrayOutputStreams for example? You may well find that all this is completely academic."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu8504001]-[-1477466514]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MrLebowski I'm aware of its use of Reflection but in practice does that really dominate network &amp; disk bandwidths? and did they include that in the tests? or just serialize to ByteArrayOutputStreams for example? You may well find that all this is completely academic."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MrLebowski",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ByteArrayOutputStreams",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "network":1,
                        "find":1,
                        "test":1,
                        "disk":1,
                        "academ":1,
                        "bandwidth":1,
                        "amp":1,
                        "includ":1,
                        "domin":1,
                        "awar":1,
                        "array":1,
                        "lebowski":1,
                        "stream":1,
                        "complet":1,
                        "output":1,
                        "practic":1,
                        "reflect":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ByteArrayOutputStreams",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8545247,
          "postId":7089792,
          "creationDate":"2011-08-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":897618,
            "displayName":"MrLebowski",
            "reputation":41
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for pointing that out. Check stats here: http://pastebin.com/yi4JhhVb --- So total serialization related time increase moving from externalizable to serializable is just around 1ms - it is the increase in network time that is bad. I am trying out compressed stream and see if it helps. Still automated externalizable or some better automated serialization will be best."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu8545247]-[93578527]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for pointing that out. Check stats here: http://pastebin.com/yi4JhhVb --- So total serialization related time increase moving from externalizable to serializable is just around 1ms - it is the increase in network time that is bad. I am trying out compressed stream and see if it helps. Still automated externalizable or some better automated serialization will be best."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"yi4JhhVb",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":2,
                        "network":1,
                        "autom":2,
                        "jhh":1,
                        "move":1,
                        "point":1,
                        "relat":1,
                        "stat":1,
                        "serializ":1,
                        "bad":1,
                        "total":1,
                        "help":1,
                        "externaliz":2,
                        "check":1,
                        "stream":1,
                        "compress":1,
                        "increas":2,
                        "time":2,
                        "pastebin":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8545379,
          "postId":7089792,
          "creationDate":"2011-08-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":897618,
            "displayName":"MrLebowski",
            "reputation":41
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Tried out some compression - Network time goes down by 11.2ms, but serialization time goes up by 9.31ms. We gain only about 1ms overall. Still 3ms slower than manual Externalizable method."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu8545379]-[1529149819]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Tried out some compression - Network time goes down by 11.2ms, but serialization time goes up by 9.31ms. We gain only about 1ms overall. Still 3ms slower than manual Externalizable method."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "network":1,
                        "method":1,
                        "externaliz":1,
                        "gain":1,
                        "slower":1,
                        "compress":1,
                        "time":2,
                        "manual":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":14595760,
          "postId":7089792,
          "creationDate":"2012-06-21",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MrLebowski Such a difference is most probably much smaller than the measurement error. Unless you used something like [caliper](http://code.google.com/p/caliper)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu14595760]-[136703710]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MrLebowski Such a difference is most probably much smaller than the measurement error. Unless you used something like [caliper](http://code.google.com/p/caliper)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MrLebowski",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "googl":1,
                        "differ":1,
                        "measur":1,
                        "code":1,
                        "calip":2,
                        "error":1,
                        "lebowski":1,
                        "smaller":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":14595904,
          "postId":7089792,
          "creationDate":"2012-06-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":207421,
            "displayName":"EJP",
            "reputation":133851
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MrLebowski The link you cited contains nothing beyond what you have quoted here. It is neither authoritative nor useful."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu14595904]-[1403994808]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MrLebowski The link you cited contains nothing beyond what you have quoted here. It is neither authoritative nor useful."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MrLebowski",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "cite":1,
                        "lebowski":1,
                        "link":1,
                        "quot":1,
                        "authorit":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":20285880,
          "postId":7089792,
          "creationDate":"2013-01-27",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@maaartinus, serialization does not use reflection actually, it uses `sun.misc.Unsafe` and it's quite good at that (storing field offsets). However it's an order of magnitude slower than manual serialization most of the time, the default serialization has to write the field names, class names, field types and so on. It uses recursion to scan the object-graph. There are some bottlenecks w/ concurrent invocation as well(i.e. multicore, etc). If the serialization is identified to be bottleneck, it should be replaced -- bottom line, while convenient it's not exactly fast."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7089792-cu20285880]-[465109565]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@maaartinus, serialization does not use reflection actually, it uses `sun.misc.Unsafe` and it's quite good at that (storing field offsets). However it's an order of magnitude slower than manual serialization most of the time, the default serialization has to write the field names, class names, field types and so on. It uses recursion to scan the object-graph. There are some bottlenecks w/ concurrent invocation as well(i.e. multicore, etc). If the serialization is identified to be bottleneck, it should be replaced -- bottom line, while convenient it's not exactly fast."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"names",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":4,
                        "maaartinus":1,
                        "name":2,
                        "concurr":1,
                        "field":3,
                        "invoc":1,
                        "line":1,
                        "good":1,
                        "bottom":1,
                        "multicor":1,
                        "magnitud":1,
                        "sun":1,
                        "store":1,
                        "scan":1,
                        "object":1,
                        "conveni":1,
                        "replac":1,
                        "recurs":1,
                        "offset":1,
                        "slower":1,
                        "order":1,
                        "misc":1,
                        "identifi":1,
                        "fast":1,
                        "graph":1,
                        "bottleneck":2,
                        "unsaf":1,
                        "time":1,
                        "type":1,
                        "manual":1,
                        "reflect":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-08-17",
      "lastActivityDate":"2011-08-17",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":207421,
        "displayName":"EJP",
        "reputation":133851
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>I am working on a project where Java's native serialization is slow</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7089792]-[-949941124]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>I am working on a project where Java's native serialization is slow</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "slow":1,
                    "project":1,
                    "work":1,
                    "blockquot":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How slow? Why? Making it faster with lots of hand coding is most unlikely to be either economically feasible or maintainable in the long run. Serialization overheads should really come down to time and space bounds in transmisssion. There's no particular reason why Java's default serialziation should be startlingly slower than the result of all the hand coding you are planning. You would be better off investigating causes. You might find for example that a well-placed BufferedOutputStream would solve all your problems.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7089792]-[-866551303]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How slow? Why? Making it faster with lots of hand coding is most unlikely to be either economically feasible or maintainable in the long run. Serialization overheads should really come down to time and space bounds in transmisssion. There's no particular reason why Java's default serialziation should be startlingly slower than the result of all the hand coding you are planning. You would be better off investigating causes. You might find for example that a well-placed BufferedOutputStream would solve all your problems.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BufferedOutputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "solv":1,
                    "find":1,
                    "faster":1,
                    "slow":1,
                    "problem":1,
                    "hand":2,
                    "startl":1,
                    "run":1,
                    "result":1,
                    "transmisss":1,
                    "buffer":1,
                    "investig":1,
                    "feasibl":1,
                    "reason":1,
                    "code":2,
                    "overhead":1,
                    "bound":1,
                    "space":1,
                    "slower":1,
                    "stream":1,
                    "serialzi":1,
                    "lot":1,
                    "make":1,
                    "time":1,
                    "output":1,
                    "econom":1,
                    "plan":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BufferedOutputStream",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}