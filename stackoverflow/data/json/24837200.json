{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":24837200,
    "title":"How to create C style union in java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":38562751,
        "postId":24837200,
        "creationDate":"2014-07-19",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2357112,
          "displayName":"user2357112",
          "reputation":39031
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Well, if you really want to do this with C constructs that Java deliberately doesn't provide, you could write C code and call it through the [Java Native Interface](http://en.wikipedia.org/wiki/Java_Native_Interface). I wouldn't recommend it, though. Why not write helper methods to extract each part of `commndStr`?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24837200-cu38562751]-[1419911414]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Well, if you really want to do this with C constructs that Java deliberately doesn't provide, you could write C code and call it through the [Java Native Interface](http://en.wikipedia.org/wiki/Java_Native_Interface). I wouldn't recommend it, though. Why not write helper methods to extract each part of `commndStr`?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_Native_Interface",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"commndStr",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "provid":1,
                      "recommend":1,
                      "method":1,
                      "commnd":1,
                      "deliber":1,
                      "code":1,
                      "str":1,
                      "wikipedia":1,
                      "wouldn":1,
                      "helper":1,
                      "wiki":1,
                      "part":1,
                      "org":1,
                      "http":1,
                      "call":1,
                      "construct":1,
                      "write":2,
                      "extract":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":38562804,
        "postId":24837200,
        "creationDate":"2014-07-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3855139,
          "displayName":"Saikat",
          "reputation":11
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I have managed to make it work. But out of curiosity I asked this question, whether there is a way."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24837200-cu38562804]-[-1967158882]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I have managed to make it work. But out of curiosity I asked this question, whether there is a way."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "work":1,
                      "make":1,
                      "ask":1,
                      "manag":1,
                      "curios":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":38563017,
        "postId":24837200,
        "creationDate":"2014-07-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1899640,
          "displayName":"that other guy",
          "reputation":29583
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Directly translating idioms from one language to another is a donkey thing. Instead of writing C in Java you should be asking what the best way of parsing a string in your format is."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24837200-cu38563017]-[908672574]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Directly translating idioms from one language to another is a donkey thing. Instead of writing C in Java you should be asking what the best way of parsing a string in your format is."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "format":1,
                      "languag":1,
                      "idiom":1,
                      "donkey":1,
                      "thing":1,
                      "direct":1,
                      "pars":1,
                      "translat":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":38563197,
        "postId":24837200,
        "creationDate":"2014-07-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3855139,
          "displayName":"Saikat",
          "reputation":11
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"&quot;Directly translating idioms from one language to another is a donkey thing. Instead of writing C in Java you should be asking what the best way of parsing a string in your format is.&quot; I asked this out of curiosity, I said."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24837200-cu38563197]-[-1935412649]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"&quot;Directly translating idioms from one language to another is a donkey thing. Instead of writing C in Java you should be asking what the best way of parsing a string in your format is.&quot; I asked this out of curiosity, I said."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "format":1,
                      "languag":1,
                      "idiom":1,
                      "donkey":1,
                      "thing":1,
                      "direct":1,
                      "pars":1,
                      "translat":1,
                      "quot":2,
                      "ask":1,
                      "write":1,
                      "curios":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "c"
    ],
    "creationDate":"2014-07-19",
    "lastActivityDate":"2014-07-19",
    "score":2,
    "viewCount":72,
    "owner":{
      "type":"StackOverflowUser",
      "id":3855139,
      "displayName":"Saikat",
      "reputation":11
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have to convert one of my code segment from C to java. Code is given below. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24837200]-[315225432]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have to convert one of my code segment from C to java. Code is given below. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "convert":1,
                  "code":2,
                  "segment":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"union commandString{ char commndStr[20]; struct{ char commnd[4]; char separator1; char agr1[5]; char separator2; char arg2[3]; char separator3; char additionalArg[5]; }; }; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[24837200]-[-928537241]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"union "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"commandString",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"{ char "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"commndStr",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"20"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"struct{ char "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"commnd",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"4"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"char separator1; char "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"agr1",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"5"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"char separator2; char "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"arg2",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"3"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"char separator3; char "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"additionalArg",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"5"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"}; }; "
                }
              ]
            },
            "rawText":"union commandString{ char commndStr[20]; struct{ char commnd[4]; char separator1; char agr1[5]; char separator2; char arg2[3]; char separator3; char additionalArg[5]; }; }; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "union":1,
                  "addit":1,
                  "separ":3,
                  "commnd":2,
                  "agr":1,
                  "command":1,
                  "str":1,
                  "struct":1,
                  "arg":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I don't want to use any explicit parser or I do not want to use</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24837200]-[-274486243]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I don't want to use any explicit parser or I do not want to use</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "parser":1,
                  "explicit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"System.arraycopy "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[24837200]-[1416848785]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"System.arraycopy "
                }
              ]
            },
            "rawText":"System.arraycopy ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "arraycopi":1,
                  "system":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>method. Is there any way to do that in my preferred way? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24837200]-[229309930]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>method. Is there any way to do that in my preferred way? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "prefer":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":24837252,
      "questionId":24837200,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":38562947,
          "postId":24837252,
          "creationDate":"2014-07-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ughhh ... I wouldn't use Unsafe for that. Too many ways to shoot your feet off ..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24837252-cu38562947]-[1545036867]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ughhh ... I wouldn't use Unsafe for that. Too many ways to shoot your feet off ..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "shoot":1,
                        "ughhh":1,
                        "feet":1,
                        "way":1,
                        "wouldn":1,
                        "unsaf":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":38563333,
          "postId":24837252,
          "creationDate":"2014-07-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"No need to use Unsafe directly. The closest thing to C Structs is the Structs library from Javolution. http://javolution.org/apidocs/javolution/io/Struct.html which also supports http://javolution.org/apidocs/javolution/io/Union.html"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24837252-cu38563333]-[258338200]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"No need to use Unsafe directly. The closest thing to C Structs is the Structs library from Javolution. http://javolution.org/apidocs/javolution/io/Struct.html which also supports http://javolution.org/apidocs/javolution/io/Union.html"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "javolut":5,
                        "support":1,
                        "union":1,
                        "thing":1,
                        "librari":1,
                        "direct":1,
                        "struct":3,
                        "unsaf":1,
                        "org":2,
                        "html":2,
                        "apidoc":2,
                        "http":2,
                        "closest":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":38563422,
          "postId":24837252,
          "creationDate":"2014-07-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3855139,
            "displayName":"Saikat",
            "reputation":11
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PeterLawrey, It seems Javolution in pretty appealing, Let me check, Thanks anyway."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24837252-cu38563422]-[859195178]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PeterLawrey, It seems Javolution in pretty appealing, Let me check, Thanks anyway."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "javolut":1,
                        "peter":1,
                        "appeal":1,
                        "pretti":1,
                        "check":1,
                        "lawrey":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":38564328,
          "postId":24837252,
          "creationDate":"2014-07-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2111035,
            "displayName":"Chris K",
            "reputation":5861
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@stephen, every time one uses the Jdk the odds are that unsafe is being used under the hood. For example atomicboolean or readwritelock. If one takes the time to learn how to use unsafe, and accepts its risks then there is little reason to avoid it. There are debates going on to move parts of unsafe into the core language and Apis. However PeterLawrey said it well, put it behind an abstraction and reuse. Peter has done some excellent work in this area, and I second his recommendation of looking at javolition and his own java lang."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24837252-cu38564328]-[-1438885570]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@stephen, every time one uses the Jdk the odds are that unsafe is being used under the hood. For example atomicboolean or readwritelock. If one takes the time to learn how to use unsafe, and accepts its risks then there is little reason to avoid it. There are debates going on to move parts of unsafe into the core language and Apis. However PeterLawrey said it well, put it behind an abstraction and reuse. Peter has done some excellent work in this area, and I second his recommendation of looking at javolition and his own java lang."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "recommend":1,
                        "area":1,
                        "languag":1,
                        "move":1,
                        "learn":1,
                        "accept":1,
                        "odd":1,
                        "peter":2,
                        "javolit":1,
                        "abstract":1,
                        "risk":1,
                        "reason":1,
                        "avoid":1,
                        "work":1,
                        "excel":1,
                        "hood":1,
                        "readwritelock":1,
                        "take":1,
                        "debat":1,
                        "put":1,
                        "stephen":1,
                        "api":1,
                        "unsaf":3,
                        "time":2,
                        "part":1,
                        "lang":1,
                        "core":1,
                        "lawrey":1,
                        "jdk":1,
                        "atomicboolean":1,
                        "reus":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"PeterLawrey",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-07-19",
      "lastActivityDate":"2014-07-19",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2111035,
        "displayName":"Chris K",
        "reputation":5861
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Java language does not support unions or direct control memory layout the way that languages like C do directly. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837252]-[1073053960]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Java language does not support unions or direct control memory layout the way that languages like C do directly. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "languag":2,
                    "union":1,
                    "direct":2,
                    "control":1,
                    "layout":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However Oracle does offer a backdoor that was added in Java 5 that can be used by using the class sun.misc.Unsafe. It takes a bit of work, the full details have been documented by Martin Thompson on his <a href=\"http://mechanical-sympathy.blogspot.co.uk/2012/10/compact-off-heap-structurestuples-in.html\">blog</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837252]-[-307548899]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However Oracle does offer a backdoor that was added in Java 5 that can be used by using the class sun.misc.Unsafe. It takes a bit of work, the full details have been documented by Martin Thompson on his <a href=\"http://mechanical-sympathy.blogspot.co.uk/2012/10/compact-off-heap-structurestuples-in.html\">blog</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"sun",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "martin":1,
                    "bit":1,
                    "structurestupl":1,
                    "thompson":1,
                    "document":1,
                    "full":1,
                    "sun":1,
                    "oracl":1,
                    "blogspot":1,
                    "work":1,
                    "sympathi":1,
                    "blog":1,
                    "take":1,
                    "mechan":1,
                    "misc":1,
                    "ad":1,
                    "offer":1,
                    "detail":1,
                    "unsaf":1,
                    "backdoor":1,
                    "heap":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "compact":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The other option would be to write it in C and access it from Java as native functions via <a href=\"http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html\">JNI</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837252]-[-1942386643]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The other option would be to write it in C and access it from Java as native functions via <a href=\"http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html\">JNI</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "option":1,
                    "ehchua":1,
                    "jni":1,
                    "home":1,
                    "function":1,
                    "ntu":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "write":1,
                    "www":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24837761,
      "questionId":24837200,
      "comments":[
        
      ],
      "creationDate":"2014-07-19",
      "lastActivityDate":"2014-07-19",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The best library for doing <a href=\"http://javolution.org/\"rel=\"nofollow\">Struct and Union</a> would be Javolutions which has been around for many years. These were designed to do this.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837761]-[-1118566468]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The best library for doing <a href=\"http://javolution.org/\"rel=\"nofollow\">Struct and Union</a> would be Javolutions which has been around for many years. These were designed to do this.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "javolut":2,
                    "design":1,
                    "union":1,
                    "rel":1,
                    "year":1,
                    "librari":1,
                    "nofollow":1,
                    "struct":1,
                    "org":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I suggest if you are going to use these Unsafe you wrap it up in a library which abstracts it away. This can avoid continuously running into bugs which crash your JVM (and I mean crash in the sense a C programmer would understand)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837761]-[534006253]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I suggest if you are going to use these Unsafe you wrap it up in a library which abstracts it away. This can avoid continuously running into bugs which crash your JVM (and I mean crash in the sense a C programmer would understand)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "jvm":1,
                    "continu":1,
                    "crash":2,
                    "suggest":1,
                    "run":1,
                    "understand":1,
                    "abstract":1,
                    "librari":1,
                    "avoid":1,
                    "wrap":1,
                    "bug":1,
                    "programm":1,
                    "unsaf":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have a library called Java-Lang which allows you to do the sort of things Java doesn't normally allow such as 63 bit sized off heap and memory mapped, thread safe off heap operations, sharing of memory between JVM on the same machine. And as I said, I use my own library to abstract away use of Unsafe.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24837761]-[-1194473937]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have a library called Java-Lang which allows you to do the sort of things Java doesn't normally allow such as 63 bit sized off heap and memory mapped, thread safe off heap operations, sharing of memory between JVM on the same machine. And as I said, I use my own library to abstract away use of Unsafe.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "bit":1,
                    "size":1,
                    "map":1,
                    "thing":1,
                    "librari":2,
                    "safe":1,
                    "oper":1,
                    "share":1,
                    "thread":1,
                    "machin":1,
                    "unsaf":1,
                    "heap":2,
                    "lang":1,
                    "sort":1,
                    "call":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}