{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":14210426,
    "title":"Exploring user specific data in webapps",
    "comments":[
      
    ],
    "tags":[
      "java",
      "spring",
      "database-design",
      "web-applications",
      "data"
    ],
    "creationDate":"2013-01-08",
    "lastActivityDate":"2013-01-08",
    "lastEditDate":"2013-01-08",
    "score":0,
    "viewCount":70,
    "owner":{
      "type":"StackOverflowUser",
      "id":761035,
      "displayName":"Shiraaz.M",
      "reputation":562
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am busy practicing on designing a simple todo list webapp whereby a user can authenticate into the app and save todo list items. The user is also only able to to view/edit the todo list items that they added. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[-381018456]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am busy practicing on designing a simple todo list webapp whereby a user can authenticate into the app and save todo list items. The user is also only able to to view/edit the todo list items that they added. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "simpl":1,
                  "authent":1,
                  "edit":1,
                  "webapp":1,
                  "busi":1,
                  "app":1,
                  "ad":1,
                  "todo":3,
                  "practic":1,
                  "save":1,
                  "user":2,
                  "list":3,
                  "view":1,
                  "item":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This seems to be a general feature (authenticated user only views their own data) in most web applications (or applications in general).</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[1088323487]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This seems to be a general feature (authenticated user only views their own data) in most web applications (or applications in general).</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "authent":1,
                  "data":1,
                  "web":1,
                  "general":2,
                  "applic":2,
                  "featur":1,
                  "user":1,
                  "view":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>To me what is important is having knowledge of the different options for accomplishing this. What I would like to achieve is a solution that can handle lots of users' data effectively. At the moment I am doing this using a Relational Database, but noSQL answers would be useful to me as well.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[427879423]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>To me what is important is having knowledge of the different options for accomplishing this. What I would like to achieve is a solution that can handle lots of users' data effectively. At the moment I am doing this using a Relational Database, but noSQL answers would be useful to me as well.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"noSQL",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sql":1,
                  "knowledg":1,
                  "relat":1,
                  "data":1,
                  "effect":1,
                  "option":1,
                  "import":1,
                  "achiev":1,
                  "moment":1,
                  "accomplish":1,
                  "lot":1,
                  "answer":1,
                  "databas":1,
                  "handl":1,
                  "solut":1,
                  "user":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The following ideas came to mind:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[908830850]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The following ideas came to mind:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "mind":1,
                  "idea":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[681205387]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<li> Add a user_id column each time this &quot;feature&quot; is needed. </li>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[270356425]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<li> Add a user_id column each time this &quot;feature&quot; is needed. </li>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_id",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "need":1,
                  "column":1,
                  "quot":2,
                  "featur":1,
                  "time":1,
                  "add":1,
                  "user":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<li> Add an association table (in the example above a user_todo_list_item table) that associates the data. </li>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[-1202072639]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<li> Add an association table (in the example above a user_todo_list_item table) that associates the data. </li>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_todo_list_item",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "data":1,
                  "tabl":2,
                  "todo":1,
                  "add":1,
                  "user":1,
                  "associ":2,
                  "list":1,
                  "item":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<li> Design in such a way that you have a table per user per &quot;feature&quot; ... so you would have a todolist_userABC table. It's an option but I do not like it much since a thousand user's means a thousand tables?! </li>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[1934100174]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<li> Design in such a way that you have a table per user per &quot;feature&quot; ... so you would have a todolist_userABC table. It's an option but I do not like it much since a thousand user's means a thousand tables?! </li>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"todolist_userABC",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "abc":1,
                  "option":1,
                  "mean":1,
                  "tabl":3,
                  "todolist":1,
                  "thousand":2,
                  "quot":2,
                  "featur":1,
                  "user":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<li>Add row level security to the specific &quot;feature&quot;. I am not familiar on how this works but it seems to be a valid option. I am also not sure whether this is database vendor specific.<p></p> <p>Of my choices I went with the user_id column on the todolist_item table. Although it can do the job, I feel that a user_id column might be problematic when reading data if the data within the table gets large enough. One could add an index I guess but I am not sure of the index's effectiveness.</p> <p>What I don't like about it is that I need to have a user_id for every table where I desire this type of feature which doesn't seem correct to me? It also seems that when I implement the database layer I would have to add this to my queries for every feature (unless I use some AOP)?</p> <p>I had a look around (<a href=\"http://stackoverflow.com/questions/12969344/how-does-trello-store-data-in-mongodb-collection-per-board\">How does Trello store data in MongoDB? (Collection per board?)</a>), but it does not speak about the techniques regarding user_id columns or things like that. I also tried reading about this in some security frameworks (Spring Security to be specific) but it seems that it only goes into privileges/permissions on a table level and not a row level?</p> <p>So the question is whether my choice was appropriate and if there are better techniques to do this?</p></li>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[14210426]-[2092352980]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<li>Add row level security to the specific &quot;feature&quot;. I am not familiar on how this works but it seems to be a valid option. I am also not sure whether this is database vendor specific.<p></p> <p>Of my choices I went with the user_id column on the todolist_item table. Although it can do the job, I feel that a user_id column might be problematic when reading data if the data within the table gets large enough. One could add an index I guess but I am not sure of the index's effectiveness.</p> <p>What I don't like about it is that I need to have a user_id for every table where I desire this type of feature which doesn't seem correct to me? It also seems that when I implement the database layer I would have to add this to my queries for every feature (unless I use some AOP)?</p> <p>I had a look around (<a href=\"http://stackoverflow.com/questions/12969344/how-does-trello-store-data-in-mongodb-collection-per-board\">How does Trello store data in MongoDB? (Collection per board?)</a>), but it does not speak about the techniques regarding user_id columns or things like that. I also tried reading about this in some security frameworks (Spring Security to be specific) but it seems that it only goes into privileges/permissions on a table level and not a row level?</p> <p>So the question is whether my choice was appropriate and if there are better techniques to do this?</p></li>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_id",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"todolist_item",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_id",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_id",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"user_id",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":2,
                  "question":2,
                  "feel":1,
                  "permiss":1,
                  "familiar":1,
                  "correct":1,
                  "data":4,
                  "effect":1,
                  "option":1,
                  "privileg":1,
                  "job":1,
                  "spring":1,
                  "thing":1,
                  "store":2,
                  "row":2,
                  "secur":3,
                  "framework":1,
                  "work":1,
                  "layer":1,
                  "tabl":4,
                  "stackoverflow":1,
                  "larg":1,
                  "queri":1,
                  "board":2,
                  "techniqu":2,
                  "specif":3,
                  "todolist":1,
                  "choic":2,
                  "valid":1,
                  "implement":1,
                  "column":3,
                  "quot":2,
                  "databas":2,
                  "desir":1,
                  "featur":3,
                  "collect":2,
                  "mongodb":1,
                  "guess":1,
                  "type":1,
                  "href":1,
                  "vendor":1,
                  "mongo":1,
                  "http":1,
                  "add":3,
                  "aop":1,
                  "user":4,
                  "speak":1,
                  "problemat":1,
                  "index":2,
                  "trello":2,
                  "level":3,
                  "item":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":14223059,
      "questionId":14210426,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":19778376,
          "postId":14223059,
          "creationDate":"2013-01-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":761035,
            "displayName":"Shiraaz.M",
            "reputation":562
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It's not that the user_id column is wrong, it's just that if one adds more tables that require this then this seems cumbersome. The idea of only having the root in the object graph contain the user_id is useful though."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[14223059-cu19778376]-[382784412]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It's not that the user_id column is wrong, it's just that if one adds more tables that require this then this seems cumbersome. The idea of only having the root in the object graph contain the user_id is useful though."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"user_id",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"user_id",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wrong":1,
                        "root":1,
                        "requir":1,
                        "idea":1,
                        "object":1,
                        "tabl":1,
                        "column":1,
                        "graph":1,
                        "add":1,
                        "user":2,
                        "cumbersom":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-01-08",
      "lastActivityDate":"2013-01-08",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":512535,
        "displayName":"Dmitri",
        "reputation":4465
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Your choice is the natural thing to do.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14223059]-[-985768559]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Your choice is the natural thing to do.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "choic":1,
                    "natur":1,
                    "thing":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The table-per-user is a non-starter (anything that modifies the database structure in response to user action is usually suspect).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14223059]-[-1862440345]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The table-per-user is a non-starter (anything that modifies the database structure in response to user action is usually suspect).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "structur":1,
                    "tabl":1,
                    "modifi":1,
                    "suspect":1,
                    "databas":1,
                    "respons":1,
                    "starter":1,
                    "action":1,
                    "user":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Row-level security isn't really an option for webapps - it requires each user session to have a separate, persistent connection to the database, which is rarely practical. And yes, it is vendor-specific.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14223059]-[-800848437]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Row-level security isn't really an option for webapps - it requires each user session to have a separate, persistent connection to the database, which is rarely practical. And yes, it is vendor-specific.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "connect":1,
                    "requir":1,
                    "option":1,
                    "separ":1,
                    "row":1,
                    "secur":1,
                    "webapp":1,
                    "persist":1,
                    "rare":1,
                    "specif":1,
                    "isn":1,
                    "session":1,
                    "databas":1,
                    "practic":1,
                    "vendor":1,
                    "user":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How you index your tables depends entirely on your usage patterns and types of queries you want to run. Is 'show all TODOs for a user' a query you want to support (seems like it would be)? Then and index on the user id is obviously needed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14223059]-[646059399]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How you index your tables depends entirely on your usage patterns and types of queries you want to run. Is 'show all TODOs for a user' a query you want to support (seems like it would be)? Then and index on the user id is obviously needed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "show":1,
                    "depend":1,
                    "pattern":1,
                    "run":1,
                    "tabl":1,
                    "need":1,
                    "queri":2,
                    "usag":1,
                    "todo":1,
                    "type":1,
                    "user":2,
                    "index":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Why does having a user_id column seem wrong to you? If you want to restrict access by user, you need to be able to identify which user the record belongs to. Doesn't actually mean that <em>every</em> table needs it - for example, if one record composes another (say, your TODOs have 'steps', each step belongs to a single TODO), only the root of the object graph needs the user id.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14223059]-[-1094602440]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Why does having a user_id column seem wrong to you? If you want to restrict access by user, you need to be able to identify which user the record belongs to. Doesn't actually mean that <em>every</em> table needs it - for example, if one record composes another (say, your TODOs have 'steps', each step belongs to a single TODO), only the root of the object graph needs the user id.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"user_id",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "step":2,
                    "wrong":1,
                    "root":1,
                    "compos":1,
                    "belong":2,
                    "object":1,
                    "tabl":1,
                    "identifi":1,
                    "column":1,
                    "graph":1,
                    "todo":2,
                    "user":4,
                    "restrict":1,
                    "record":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}