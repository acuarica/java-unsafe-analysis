{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20059314,
    "title":"How to get sub image from a sprite sheet into an array Java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29879112,
        "postId":20059314,
        "creationDate":"2013-11-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":39622,
          "displayName":"Cyrille Ka",
          "reputation":9344
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What is the error that you get? Is it an error at compile time, or does it fail when you run the program?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20059314-cu29879112]-[-208419102]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What is the error that you get? Is it an error at compile time, or does it fail when you run the program?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "fail":1,
                      "run":1,
                      "error":2,
                      "compil":1,
                      "time":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29879149,
        "postId":20059314,
        "creationDate":"2013-11-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2655012,
          "displayName":"SolidCloudinc",
          "reputation":47
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@CyrilleKa Compile time. When I re size the screen more errors pop up too."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20059314-cu29879149]-[990746162]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@CyrilleKa Compile time. When I re size the screen more errors pop up too."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"CyrilleKa",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "size":1,
                      "pop":1,
                      "cyrill":1,
                      "error":1,
                      "screen":1,
                      "compil":1,
                      "time":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29879183,
        "postId":20059314,
        "creationDate":"2013-11-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":39622,
          "displayName":"Cyrille Ka",
          "reputation":9344
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What does the error says? I mean the text of the error."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20059314-cu29879183]-[881749155]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What does the error says? I mean the text of the error."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "text":1,
                      "error":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29879212,
        "postId":20059314,
        "creationDate":"2013-11-18",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2655012,
          "displayName":"SolidCloudinc",
          "reputation":47
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@CyrilleKa I updated the post"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20059314-cu29879212]-[-369441955]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@CyrilleKa I updated the post"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"CyrilleKa",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cyrill":1,
                      "post":1,
                      "updat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "arrays",
      "image",
      "sprite",
      "sheet"
    ],
    "creationDate":"2013-11-18",
    "lastActivityDate":"2013-11-18",
    "lastEditDate":"2013-11-18",
    "score":1,
    "viewCount":815,
    "owner":{
      "type":"StackOverflowUser",
      "id":2655012,
      "displayName":"SolidCloudinc",
      "reputation":47
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Okay so I have a sprite sheet that will be 5x5 and each sprite is 20x20 pixels. I need to get each item of that sprite sheet into an array. I made a for loop but got an error. So I tried defining one of the sub images in the array myself but still get an error. I do not get an error when I don't print an item of that array. I now can not figure out the for loop problem.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20059314]-[1125527087]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Okay so I have a sprite sheet that will be 5x5 and each sprite is 20x20 pixels. I need to get each item of that sprite sheet into an array. I made a for loop but got an error. So I tried defining one of the sub images in the array myself but still get an error. I do not get an error when I don't print an item of that array. I now can not figure out the for loop problem.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "loop":2,
                  "problem":1,
                  "print":1,
                  "sheet":2,
                  "pixel":1,
                  "array":3,
                  "sprite":3,
                  "error":3,
                  "figur":1,
                  "defin":1,
                  "made":1,
                  "imag":1,
                  "item":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here's my code so far</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20059314]-[-1553575539]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here's my code so far</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"import java.awt.*; import java.awt.event.*; import java.awt.image.*; import java.io.*; import javax.imageio.*; import javax.swing.*; public class LoopSub extends Component { BufferedImage img; BufferedImage img2; BufferedImage bigImg; BufferedImage[] sprites; public void paint(Graphics g) { g.drawImage(img, 0, 0, null); g.drawImage(img2, 18, 0, null); //letter size 20x20 ; set lower to overlap g.drawImage(sprites[0], 36, 0, null); //this is whats causing the error } public LoopSub() { try { img = ImageIO.read(new File(&quot;res/a.png&quot;)); img2 = ImageIO.read(new File(&quot;res/b.png&quot;)); ///////////////////////////// bigImg = ImageIO.read(new File(&quot;sheet.png&quot;)); final int width = 20; final int height = 20; final int rows = 5; final int cols = 5; sprites = new BufferedImage[rows * cols]; for (int i = 0; i &lt; rows; i++) { for (int j = 0; j &lt; cols; j++) { sprites[(i * cols) + j] = bigImg.getSubimage( j * width, i * height, width, height ); } } sprites[0] = bigImg.getSubimage(1,1,1,1); //where I tried to define the array myself ///////////////////////////////////////////// } catch (IOException e) { } } public Dimension getPreferredSize() { //sets size of screen if (img == null) { return new Dimension(100,100); } else { return new Dimension(img.getWidth(null), img.getHeight(null)); //sets size to one image //// change to all images } } public static void main(String[] args) { JFrame f = new JFrame(&quot;Load Image Sample&quot;); f.addWindowListener(new WindowAdapter(){ public void windowClosing(WindowEvent e) { System.exit(0); } }); f.add(new LoopSub()); f.pack(); f.setVisible(true); } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[20059314]-[-614672912]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"awt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"awt",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"event",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"awt",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"image",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"io",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"javax",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"imageio",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ImportDeclarationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"javax",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"swing",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "isStatic":false,
                      "isOnDemand":true,
                      "comments":[
                        
                      ]
                    }
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"LoopSub",
                        "comments":[
                          
                        ]
                      },
                      "superTypes":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Component",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"img",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"BufferedImage",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"img2",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"BufferedImage",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"bigImg",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"BufferedImage",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"sprites",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ArrayTypeNode",
                                    "typeNode":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"BufferedImage",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "depth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"void",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"paint",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "parameters":{
                                "type":"FormalParameterDeclsNode",
                                "modifiers":[
                                  
                                ],
                                "parameterType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Graphics",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "nextDeclarator":{
                                  "type":"AdditionalFormalParameterDeclNode",
                                  "variableDeclarator":{
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"g",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"g",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"drawImage",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"img",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"0"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"0"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"NullLiteralNode"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                },
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"g",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"drawImage",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"img2",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"18"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"0"
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"NullLiteralNode"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      {
                                        "text":"//letter size 20x20 ; set lower to overlap g.drawImage(sprites[0], 36, 0, null); //this is whats causing the error } public LoopSub() { try { img = ImageIO.read(new File(\"res/a.png\")); img2 = ImageIO.read(new File(\"res/b.png\")); ///////////////////////////// bigImg = ImageIO.read(new File(\"sheet.png\")); final int width = 20; final int height = 20; final int rows = 5; final int cols = 5; sprites = new BufferedImage[rows * cols]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { sprites[(i * cols) + j] = bigImg.getSubimage( j * width, i * height, width, height ); } } sprites[0] = bigImg.getSubimage(1,1,1,1); //where I tried to define the array myself ///////////////////////////////////////////// } catch (IOException e) { } } public Dimension getPreferredSize() { //sets size of screen if (img == null) { return new Dimension(100,100); } else { return new Dimension(img.getWidth(null), img.getHeight(null)); //sets size to one image //// change to all images } } public static void main(String[] args) { JFrame f = new JFrame(\"Load Image Sample\"); f.addWindowListener(new WindowAdapter(){ public void windowClosing(WindowEvent e) { System.exit(0); } }); f.add(new LoopSub()); f.pack(); f.setVisible(true); } } \n"
                                      }
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"import java.awt.*; import java.awt.event.*; import java.awt.image.*; import java.io.*; import javax.imageio.*; import javax.swing.*; public class LoopSub extends Component { BufferedImage img; BufferedImage img2; BufferedImage bigImg; BufferedImage[] sprites; public void paint(Graphics g) { g.drawImage(img, 0, 0, null); g.drawImage(img2, 18, 0, null); //letter size 20x20 ; set lower to overlap g.drawImage(sprites[0], 36, 0, null); //this is whats causing the error } public LoopSub() { try { img = ImageIO.read(new File(\"res/a.png\")); img2 = ImageIO.read(new File(\"res/b.png\")); ///////////////////////////// bigImg = ImageIO.read(new File(\"sheet.png\")); final int width = 20; final int height = 20; final int rows = 5; final int cols = 5; sprites = new BufferedImage[rows * cols]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { sprites[(i * cols) + j] = bigImg.getSubimage( j * width, i * height, width, height ); } } sprites[0] = bigImg.getSubimage(1,1,1,1); //where I tried to define the array myself ///////////////////////////////////////////// } catch (IOException e) { } } public Dimension getPreferredSize() { //sets size of screen if (img == null) { return new Dimension(100,100); } else { return new Dimension(img.getWidth(null), img.getHeight(null)); //sets size to one image //// change to all images } } public static void main(String[] args) { JFrame f = new JFrame(\"Load Image Sample\"); f.addWindowListener(new WindowAdapter(){ public void windowClosing(WindowEvent e) { System.exit(0); } }); f.add(new LoopSub()); f.pack(); f.setVisible(true); } } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "adapt":1,
                  "read":3,
                  "chang":1,
                  "paint":1,
                  "window":4,
                  "loop":3,
                  "png":3,
                  "size":4,
                  "system":1,
                  "graphic":1,
                  "what":1,
                  "event":2,
                  "big":4,
                  "sampl":1,
                  "img":13,
                  "set":4,
                  "sheet":1,
                  "pack":1,
                  "jframe":2,
                  "height":4,
                  "load":1,
                  "buffer":5,
                  "lower":1,
                  "visibl":1,
                  "row":3,
                  "swing":1,
                  "main":1,
                  "compon":1,
                  "letter":1,
                  "javax":2,
                  "array":1,
                  "sprite":5,
                  "res":2,
                  "draw":3,
                  "listen":1,
                  "error":1,
                  "overlap":1,
                  "col":4,
                  "screen":1,
                  "dimens":3,
                  "true":1,
                  "caus":1,
                  "exit":1,
                  "file":3,
                  "ioexcept":1,
                  "defin":1,
                  "close":1,
                  "subimag":2,
                  "add":2,
                  "width":4,
                  "awt":3,
                  "imageio":1,
                  "arg":1,
                  "imag":15,
                  "prefer":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"awt",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"image",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"javax",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"imageio",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"awt",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"event",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"javax",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"swing",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"awt",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"io",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Component",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BufferedImage",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Graphics",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"g",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"drawImage",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"img",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"g",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"drawImage",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"img2",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"18"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"//letter size 20x20 ; set lower to overlap g.drawImage(sprites[0], 36, 0, null); //this is whats causing the error } public LoopSub() { try { img = ImageIO.read(new File(\"res/a.png\")); img2 = ImageIO.read(new File(\"res/b.png\")); ///////////////////////////// bigImg = ImageIO.read(new File(\"sheet.png\")); final int width = 20; final int height = 20; final int rows = 5; final int cols = 5; sprites = new BufferedImage[rows * cols]; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { sprites[(i * cols) + j] = bigImg.getSubimage( j * width, i * height, width, height ); } } sprites[0] = bigImg.getSubimage(1,1,1,1); //where I tried to define the array myself ///////////////////////////////////////////// } catch (IOException e) { } } public Dimension getPreferredSize() { //sets size of screen if (img == null) { return new Dimension(100,100); } else { return new Dimension(img.getWidth(null), img.getHeight(null)); //sets size to one image //// change to all images } } public static void main(String[] args) { JFrame f = new JFrame(\"Load Image Sample\"); f.addWindowListener(new WindowAdapter(){ public void windowClosing(WindowEvent e) { System.exit(0); } }); f.add(new LoopSub()); f.pack(); f.setVisible(true); } } \n"
                      }
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"g",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"img",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BufferedImage",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"bigImg",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BufferedImage",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"img2",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BufferedImage",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"sprites",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"BufferedImage",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>New error message</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20059314]-[-1314378874]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>New error message</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "messag":1,
                  "error":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Exception in thread &quot;main&quot; java.awt.image.RasterFormatException: (x + width) is outside of Raster at sun.awt.image.ByteInterleavedRaster.createWritableChild(Unknown Source) at java.awt.image.BufferedImage.getSubimage(Unknown Source) at LoopSub.&lt;init&gt;(LoopSub.java:48) at LoopSub.main(LoopSub.java:85) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[20059314]-[1309159827]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"StackTraceNode",
                  "threadName":{
                    "type":"StackTraceThreadNameNode",
                    "threadName":"\"main\""
                  },
                  "exceptionName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"awt",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"image",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"RasterFormatException",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "message":"(x + width) is outside of Raster at sun.awt.image.ByteInterleavedRaster.createWritableChild(Unknown Source) at java.awt.image.BufferedImage.getSubimage(Unknown Source) at LoopSub.<init>(LoopSub.java:48) at LoopSub.main(LoopSub.java:85) ",
                  "lines":[
                    
                  ],
                  "causedByTraces":[
                    
                  ]
                }
              ]
            },
            "rawText":"Exception in thread \"main\" java.awt.image.RasterFormatException:(x + width) is outside of Raster at sun.awt.image.ByteInterleavedRaster.createWritableChild(Unknown Source) at java.awt.image.BufferedImage.getSubimage(Unknown Source) at LoopSub.<init>(LoopSub.java:48) at LoopSub.main(LoopSub.java:85) ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "format":1,
                  "interleav":1,
                  "loop":4,
                  "writabl":1,
                  "raster":3,
                  "sun":1,
                  "unknown":2,
                  "buffer":1,
                  "main":2,
                  "child":1,
                  "thread":1,
                  "subimag":1,
                  "creat":1,
                  "width":1,
                  "sourc":2,
                  "init":1,
                  "awt":3,
                  "imag":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>When changing j*width to 1 it works fine. So that's the problem. Just don't know why.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20059314]-[-406192811]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>When changing j*width to 1 it works fine. So that's the problem. Just don't know why.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":1,
                  "problem":1,
                  "work":1,
                  "fine":1,
                  "width":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":20059531,
      "questionId":20059314,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29879400,
          "postId":20059531,
          "creationDate":"2013-11-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2655012,
            "displayName":"SolidCloudinc",
            "reputation":47
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ahh okay very interesting thank you!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20059531-cu29879400]-[-1722193315]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ahh okay very interesting thank you!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ahh":1,
                        "interest":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29879506,
          "postId":20059531,
          "creationDate":"2013-11-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2655012,
            "displayName":"SolidCloudinc",
            "reputation":47
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I still have a problem with the for loop. I'll update the post"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20059531-cu29879506]-[779026289]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I still have a problem with the for loop. I'll update the post"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "loop":1,
                        "post":1,
                        "updat":1,
                        "problem":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29879586,
          "postId":20059531,
          "creationDate":"2013-11-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":39622,
            "displayName":"Cyrille Ka",
            "reputation":9344
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What is the size of `sheet.png`? It should be 100x100 or larger."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20059531-cu29879586]-[-1244753663]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What is the size of `sheet.png`? It should be 100x100 or larger."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "png":1,
                        "sheet":1,
                        "size":1,
                        "larger":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29881483,
          "postId":20059531,
          "creationDate":"2013-11-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2655012,
            "displayName":"SolidCloudinc",
            "reputation":47
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Stupid mistakes by me. But I learned a lot, thanks!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[20059531-cu29881483]-[1411668950]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Stupid mistakes by me. But I learned a lot, thanks!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "stupid":1,
                        "mistak":1,
                        "learn":1,
                        "lot":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-11-18",
      "lastActivityDate":"2013-11-18",
      "lastEditDate":"2013-11-18",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":39622,
        "displayName":"Cyrille Ka",
        "reputation":9344
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You have a <code>NullPointerException</code>, which means that either <code>sprites</code> or <code>sprites[0]</code> is <code>null</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[-1117921791]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You have a <code>NullPointerException</code>, which means that either <code>sprites</code> or <code>sprites[0]</code> is <code>null</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "mean":1,
                    "pointer":1,
                    "code":8,
                    "sprite":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Given that you initialize them in the constructor, it can happens only if there is an <code>IOException</code> occuring in the constructor, because you are catching it, so it doesn't terminate the program.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[-919952374]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Given that you initialize them in the constructor, it can happens only if there is an <code>IOException</code> occuring in the constructor, because you are catching it, so it doesn't terminate the program.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "occur":1,
                    "constructor":2,
                    "code":2,
                    "initi":1,
                    "ioexcept":1,
                    "catch":1,
                    "termin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You should:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[93959933]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You should:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p><strong>Never</strong> silently ignore an exception, like you are doing here. if you don't do anything useful, at least put a message to print the error like this:</p> <pre><code> } catch (IOException e) { e.printStackTrace(); } </code></pre></li> \n <li><p>Look what is the content of the exception, which contains the root of the problem. Probably the program can not find one of your files for some reason.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[-538142619]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p><strong>Never</strong> silently ignore an exception, like you are doing here. if you don't do anything useful, at least put a message to print the error like this:</p> <pre><code> } catch (IOException e) { e.printStackTrace(); } </code></pre></li> \n <li><p>Look what is the content of the exception, which contains the root of the problem. Probably the program can not find one of your files for some reason.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"e",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"printStackTrace",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pre":2,
                    "program":1,
                    "find":1,
                    "ignor":1,
                    "trace":1,
                    "silent":1,
                    "root":1,
                    "problem":1,
                    "print":2,
                    "strong":2,
                    "reason":1,
                    "code":2,
                    "error":1,
                    "stack":1,
                    "content":1,
                    "put":1,
                    "file":1,
                    "ioexcept":1,
                    "messag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"e",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"printStackTrace",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Edit</strong>: for the <code>RasterFormatException</code>, it means that you are getting out of the limits of the image. More specifically, <code>j * width + width</code> is apparently larger than the width of the image.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[-743988389]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Edit</strong>: for the <code>RasterFormatException</code>, it means that you are getting out of the limits of the image. More specifically, <code>j * width + width</code> is apparently larger than the width of the image.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"RasterFormatException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "format":1,
                    "appar":1,
                    "raster":1,
                    "mean":1,
                    "strong":2,
                    "code":4,
                    "edit":1,
                    "larger":1,
                    "specif":1,
                    "limit":1,
                    "width":3,
                    "imag":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RasterFormatException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Since j is at most 4 and <code>width</code> is 20, then the maximum value that <code>j * width + width</code> can have is 100. Your original image should then be at least 100px wide (and also 100px tall). Check that it is indeed the case.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[-1992432773]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Since j is at most 4 and <code>width</code> is 20, then the maximum value that <code>j * width + width</code> can have is 100. Your original image should then be at least 100px wide (and also 100px tall). Check that it is indeed the case.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":4,
                    "maximum":1,
                    "check":1,
                    "origin":1,
                    "tall":1,
                    "wide":1,
                    "width":3,
                    "imag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can for example print the width this way before the loop:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20059531]-[1238928726]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can for example print the width this way before the loop:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "loop":1,
                    "width":1,
                    "print":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"System.out.println(&quot;bigImg width: &quot; + bigImg.getWidth()); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20059531]-[-780030480]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"bigImg width: \""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"bigImg",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getWidth",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"Systemoutprintln(\"bigImg width: \"+ bigImg.getWidth()); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "systemoutprintln":1,
                    "width":2,
                    "big":2,
                    "img":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"bigImg width: \""
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"bigImg",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getWidth",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"bigImg",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getWidth",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}