{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18172790,
    "title":"Does Java Allow Direct Memory Access",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":26624553,
        "postId":18172790,
        "creationDate":"2013-08-11",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":16076,
          "displayName":"Mitch Wheat",
          "reputation":182162
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"well if java doesn't have pointers, direct memory addressing is going to be impossible..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18172790-cu26624553]-[327505560]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"well if java doesn't have pointers, direct memory addressing is going to be impossible..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pointer":1,
                      "imposs":1,
                      "direct":1,
                      "address":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "c#",
      "java",
      "pointers",
      "memory-management"
    ],
    "creationDate":"2013-08-11",
    "lastActivityDate":"2013-08-11",
    "score":0,
    "viewCount":392,
    "owner":{
      "type":"StackOverflowUser",
      "id":2656822,
      "displayName":"inixsoftware",
      "reputation":314
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know C# allows you to use pointers in the <code>unsafe</code> context. But does Java have some similar memory access method?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18172790]-[2083505266]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know C# allows you to use pointers in the <code>unsafe</code> context. But does Java have some similar memory access method?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "pointer":1,
                  "similar":1,
                  "context":1,
                  "code":2,
                  "unsaf":1,
                  "access":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Java does not have pointers (for good reasons), so if there is a similar memory access method, what would it be exactly?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18172790]-[-1861885754]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Java does not have pointers (for good reasons), so if there is a similar memory access method, what would it be exactly?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "pointer":1,
                  "similar":1,
                  "good":1,
                  "reason":1,
                  "access":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18172811,
      "questionId":18172790,
      "comments":[
        
      ],
      "creationDate":"2013-08-11",
      "lastActivityDate":"2013-08-11",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2662475,
        "displayName":"Xabster",
        "reputation":2701
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, you can't.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172811]-[1722753106]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, you can't.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The closest you can get is to use JNI and call a C function that returns the data at a given memory location.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172811]-[1569767112]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The closest you can get is to use JNI and call a C function that returns the data at a given memory location.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "data":1,
                    "jni":1,
                    "function":1,
                    "call":1,
                    "closest":1,
                    "locat":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18172817,
      "questionId":18172790,
      "comments":[
        
      ],
      "creationDate":"2013-08-11",
      "lastActivityDate":"2013-08-11",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1189885,
        "displayName":"chrylis",
        "reputation":24837
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, Java does not have any in-language mechanism for accessing arbitrary memory locations. JNI can perform whatever (unsafe and unmanaged) operations the OS allows, but that's as close as you get.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172817]-[314097413]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, Java does not have any in-language mechanism for accessing arbitrary memory locations. JNI can perform whatever (unsafe and unmanaged) operations the OS allows, but that's as close as you get.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "arbitrari":1,
                    "jni":1,
                    "oper":1,
                    "perform":1,
                    "unmanag":1,
                    "mechan":1,
                    "unsaf":1,
                    "close":1,
                    "locat":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18172856,
      "questionId":18172790,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26624728,
          "postId":18172856,
          "creationDate":"2013-08-11",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1189885,
            "displayName":"chrylis",
            "reputation":24837
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Note that this is a JVM internal and isn't guaranteed to be present on the particular JVM your code happens to be running on."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18172856-cu26624728]-[-1971641788]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Note that this is a JVM internal and isn't guaranteed to be present on the particular JVM your code happens to be running on."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "present":1,
                        "run":1,
                        "code":1,
                        "guarante":1,
                        "note":1,
                        "isn":1,
                        "intern":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26624772,
          "postId":18172856,
          "creationDate":"2013-08-11",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1196603,
            "displayName":"Jk1",
            "reputation":4271
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Indeed, that is why I'm warning against any production usage of this method. But still I know a couple of mature products using this approach internaly."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18172856-cu26624772]-[1551826523]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Indeed, that is why I'm warning against any production usage of this method. But still I know a couple of mature products using this approach internaly."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "warn":1,
                        "matur":1,
                        "coupl":1,
                        "approach":1,
                        "usag":1,
                        "product":2,
                        "internali":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26625200,
          "postId":18172856,
          "creationDate":"2013-08-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"These mature products are in danger of finding themselves irreversibly incompatible with a future version of OpenJDK."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18172856-cu26625200]-[-1417630014]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"These mature products are in danger of finding themselves irreversibly incompatible with a future version of OpenJDK."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "matur":1,
                        "incompat":1,
                        "open":1,
                        "irrevers":1,
                        "version":1,
                        "futur":1,
                        "jdk":1,
                        "product":1,
                        "danger":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-11",
      "lastActivityDate":"2013-08-11",
      "lastEditDate":"2013-08-11",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1196603,
        "displayName":"Jk1",
        "reputation":4271
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Well, there is a sun.misc.Unsafe class. It allows direct memory access, so you can implement some magic like reinterpret casts and so on. The thing is you need to use hacky reflection approach to get the instance and this class is not realy well documented. In general you need a very good reason to use this kind of tool in production code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172856]-[-1928550618]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Well, there is a sun.misc.Unsafe class. It allows direct memory access, so you can implement some magic like reinterpret casts and so on. The thing is you need to use hacky reflection approach to get the instance and this class is not realy well documented. In general you need a very good reason to use this kind of tool in production code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "good":1,
                    "tool":1,
                    "document":1,
                    "sun":1,
                    "thing":1,
                    "reason":1,
                    "direct":1,
                    "code":1,
                    "reinterpret":1,
                    "cast":1,
                    "general":1,
                    "reali":1,
                    "implement":1,
                    "misc":1,
                    "approach":1,
                    "magic":1,
                    "hacki":1,
                    "unsaf":1,
                    "kind":1,
                    "reflect":1,
                    "instanc":1,
                    "product":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's an example how to get it:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172856]-[-1206934848]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's an example how to get it:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); f.setAccessible(true); Unsafe unsafe = (Unsafe) f.get(null); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[18172856]-[1618740601]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"f",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"BinaryExpressionNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":".",
                                  "comments":[
                                    
                                  ]
                                },
                                "left":{
                                  "type":"ClassLiteralExpressionNode",
                                  "aType":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Unsafe",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepths":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "right":{
                                  "type":"MethodInvocationNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"getDeclaredField",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"StringLiteralNode",
                                          "valueRep":"\"theUnsafe\""
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Field",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"f",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setAccessible",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"true"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"unsafe",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"CastExpressionNode",
                                "aType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Unsafe",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "argument":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"f",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"get",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"NullLiteralNode"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"Field f = Unsafe.class.getDeclaredField(\"theUnsafe\"); fsetAccessible(true); Unsafe unsafe = (Unsafe) f.get(null); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":2,
                    "fset":1,
                    "declar":1,
                    "true":1,
                    "unsaf":5,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getDeclaredField",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"theUnsafe\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"f",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"f",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"get",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"f",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ClassLiteralExpressionNode",
                              "aType":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Unsafe",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepths":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getDeclaredField",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"theUnsafe\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Field",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"unsafe",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"CastExpressionNode",
                            "aType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Unsafe",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"f",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"get",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"NullLiteralNode"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are 105 methods, allowing different low-level stuff. These methods are devoted to direct memory access:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172856]-[1120858933]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are 105 methods, allowing different low-level stuff. These methods are devoted to direct memory access:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "devot":1,
                    "method":2,
                    "direct":1,
                    "low":1,
                    "allow":1,
                    "stuff":1,
                    "access":1,
                    "level":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>allocateMemory</li> \n <li>copyMemory</li> \n <li>freeMemory</li> \n <li>getAddress</li> \n <li>getInt</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172856]-[-371207976]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>allocateMemory</li> \n <li>copyMemory</li> \n <li>freeMemory</li> \n <li>getAddress</li> \n <li>getInt</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"copyMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"freeMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getAddress",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getInt",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "address":1,
                    "copi":1,
                    "free":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Edit:</strong> this method may be incompatible with future versions of OpenJDK or any other JVM implementation, as it is not a part of the public API. Although a lot of OpenJDK code uses Unsafe, it's implementation still is a subject of change without any notice. Thanks to all who point this out in comments. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172856]-[-234879997]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Edit:</strong> this method may be incompatible with future versions of OpenJDK or any other JVM implementation, as it is not a part of the public API. Although a lot of OpenJDK code uses Unsafe, it's implementation still is a subject of change without any notice. Thanks to all who point this out in comments. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "jvm":1,
                    "method":1,
                    "point":1,
                    "subject":1,
                    "incompat":1,
                    "strong":2,
                    "open":2,
                    "code":1,
                    "edit":1,
                    "version":1,
                    "futur":1,
                    "comment":1,
                    "implement":2,
                    "lot":1,
                    "notic":1,
                    "api":1,
                    "unsaf":1,
                    "part":1,
                    "jdk":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18172942,
      "questionId":18172790,
      "comments":[
        
      ],
      "creationDate":"2013-08-11",
      "lastActivityDate":"2013-08-11",
      "lastEditDate":"2013-08-11",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":318758,
        "displayName":"Joni",
        "reputation":50612
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Standard Java gives you direct memory address to unmanaged memory using direct memory buffers. You can allocate a direct memory buffer in Java with the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#allocateDirect%28int%29\"rel=\"nofollow\"><code>ByteBuffer.allocateDirect</code></a> method, or in C or C++ with the <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/jni-14.html#NewDirectByteBuffer\"rel=\"nofollow\"><code>NewDirectByteBuffer</code></a> JNI function. You cannot access arbitrary memory locations, but access to direct memory buffers is enough for most purposes, especially since the <code>NewDirectByteBuffer</code> function permits wrapping a completely arbitrary memory region in a <code>ByteBuffer</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18172942]-[29887911]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Standard Java gives you direct memory address to unmanaged memory using direct memory buffers. You can allocate a direct memory buffer in Java with the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#allocateDirect%28int%29\"rel=\"nofollow\"><code>ByteBuffer.allocateDirect</code></a> method, or in C or C++ with the <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/jni-14.html#NewDirectByteBuffer\"rel=\"nofollow\"><code>NewDirectByteBuffer</code></a> JNI function. You cannot access arbitrary memory locations, but access to direct memory buffers is enough for most purposes, especially since the <code>NewDirectByteBuffer</code> function permits wrapping a completely arbitrary memory region in a <code>ByteBuffer</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ByteBuffer",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateDirect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NewDirectByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NewDirectByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "arbitrari":2,
                    "alloc":3,
                    "standard":1,
                    "guid":1,
                    "rel":2,
                    "oracl":2,
                    "nio":1,
                    "buffer":9,
                    "doc":4,
                    "direct":9,
                    "technot":1,
                    "code":8,
                    "jni":3,
                    "wrap":1,
                    "nofollow":2,
                    "permit":1,
                    "function":2,
                    "unmanag":1,
                    "javas":2,
                    "region":1,
                    "address":1,
                    "api":1,
                    "complet":1,
                    "html":2,
                    "href":2,
                    "http":2,
                    "purpos":1,
                    "locat":1,
                    "access":2,
                    "memori":7
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NewDirectByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}