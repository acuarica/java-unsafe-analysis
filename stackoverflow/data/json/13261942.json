{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":13261942,
    "title":"How do I order a string by frequency and then by alphabetical order in java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":18074688,
        "postId":13261942,
        "creationDate":"2012-11-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":870248,
          "displayName":"Paul Vargas",
          "reputation":14851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Can you look the `Comparable` interface?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13261942-cu18074688]-[-524884511]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Can you look the `Comparable` interface?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "compar":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2012-11-07",
    "lastActivityDate":"2012-11-07",
    "score":0,
    "viewCount":259,
    "owner":{
      "type":"StackOverflowUser",
      "id":795319,
      "displayName":"David Faux",
      "reputation":5330
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For practice, I want to order an ASCII string in by frequency and then by alphabetical order in java, so 'banana' should become 'bnnaaa', and 'grammar' should become 'gaammrr'. Here's what I have so far.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13261942]-[148390537]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For practice, I want to order an ASCII string in by frequency and then by alphabetical order in java, so 'banana' should become 'bnnaaa', and 'grammar' should become 'gaammrr'. Here's what I have so far.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "banana":1,
                  "gaammrr":1,
                  "grammar":1,
                  "alphabet":1,
                  "ascii":1,
                  "order":2,
                  "practic":1,
                  "frequenc":1,
                  "bnnaaa":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public static orderByFrequencyAndThenAlphabet(String str) { // 128 ASCII characters possible. int[] charCount = new int[128] // Get the counts. str = str.toCharArray(); for (char c : str) { charCount[int(c)] += 1; } // Sort by frequency... } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[13261942]-[32645998]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"KeywordModifierNode",
                      "value":"static",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"orderByFrequencyAndThenAlphabet",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"str",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// 128 ASCII characters possible. int[] charCount = new int[128] // Get the counts. str = str.toCharArray(); for (char c : str) { charCount[int(c)] += 1; } // Sort by frequency... } \n"
                      }
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public static orderByFrequencyAndThenAlphabet(String str) { // 128 ASCII characters possible. int[] charCount = new int[128] // Get the counts. str = str.toCharArray(); for (char c : str) { charCount[int(c)] += 1; } // Sort by frequency... } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "count":3,
                  "charact":1,
                  "alphabet":1,
                  "ascii":1,
                  "array":1,
                  "str":4,
                  "order":1,
                  "sort":1,
                  "frequenc":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"str",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>As you see, I made a data structure store the counts for each character in the input string. However, how do I now use the data structure to sort the characters by frequency? Should I look into using a priority queue?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13261942]-[-1716189644]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>As you see, I made a data structure store the counts for each character in the input string. However, how do I now use the data structure to sort the characters by frequency? Should I look into using a priority queue?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "count":1,
                  "charact":2,
                  "queue":1,
                  "data":2,
                  "store":1,
                  "structur":2,
                  "sort":1,
                  "prioriti":1,
                  "made":1,
                  "input":1,
                  "frequenc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":13262008,
      "questionId":13261942,
      "comments":[
        
      ],
      "creationDate":"2012-11-07",
      "lastActivityDate":"2012-11-07",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1550073,
        "displayName":"Mario Dennis",
        "reputation":726
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>All you have to do is create an character array to store all characters in the string (Note the size of the character array must be the length of the string). Then you apply a sort to the character array(bubble sort of whatever you are comfortable with) then you construct a new string with the sorted character array (Note ensure proper character casing when sorting the array). This is inefficient but it gets the job done. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13262008]-[1328955640]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>All you have to do is create an character array to store all characters in the string (Note the size of the character array must be the length of the string). Then you apply a sort to the character array(bubble sort of whatever you are comfortable with) then you construct a new string with the sorted character array (Note ensure proper character casing when sorting the array). This is inefficient but it gets the job done. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "charact":6,
                    "size":1,
                    "proper":1,
                    "bubbl":1,
                    "job":1,
                    "store":1,
                    "comfort":1,
                    "array":5,
                    "note":2,
                    "ineffici":1,
                    "length":1,
                    "case":1,
                    "sort":4,
                    "appli":1,
                    "creat":1,
                    "construct":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}