{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9523258,
    "title":"Is model driven architecture worth it and what is the state of the art in the tooling?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":12063052,
        "postId":9523258,
        "creationDate":"2012-03-01",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":699224,
          "displayName":"DNA",
          "reputation":19349
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"See also http://stackoverflow.com/questions/4479883/mda-model-driven-architecture and http://stackoverflow.com/questions/696021/are-you-doing-mda-model-driven-architecture-right-now-if-so-what-tools-do-yo and http://stackoverflow.com/questions/21091/do-you-use-mda-mdd-mdsd-any-kind-of-model-driven-approach-will-it-be-the-futur and http://stackoverflow.com/questions/70781/what-do-you-think-of-model-driven-software-development"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9523258-cu12063052]-[1962009855]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"See also http://stackoverflow.com/questions/4479883/mda-model-driven-architecture and http://stackoverflow.com/questions/696021/are-you-doing-mda-model-driven-architecture-right-now-if-so-what-tools-do-yo and http://stackoverflow.com/questions/21091/do-you-use-mda-mdd-mdsd-any-kind-of-model-driven-approach-will-it-be-the-futur and http://stackoverflow.com/questions/70781/what-do-you-think-of-model-driven-software-development"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":4,
                      "model":4,
                      "mda":3,
                      "tool":1,
                      "softwar":1,
                      "mdsd":1,
                      "driven":4,
                      "stackoverflow":4,
                      "mdd":1,
                      "futur":1,
                      "architectur":2,
                      "approach":1,
                      "kind":1,
                      "develop":1,
                      "http":4
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "architecture",
      "metaprogramming",
      "mda"
    ],
    "creationDate":"2012-03-01",
    "lastActivityDate":"2013-02-02",
    "score":5,
    "viewCount":578,
    "owner":{
      "type":"StackOverflowUser",
      "id":356011,
      "displayName":"marathon",
      "reputation":1062
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>We have a recurring problem in our shop where we end up with 3 or 4 different representations of the same class/entity. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[2001337767]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>We have a recurring problem in our shop where we end up with 3 or 4 different representations of the same class/entity. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "shop":1,
                  "represent":1,
                  "problem":1,
                  "recur":1,
                  "end":1,
                  "entiti":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>A java version, an xml version, a hibernate version, a json version... you get the point. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[-779405952]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>A java version, an xml version, a hibernate version, a json version... you get the point. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "point":1,
                  "json":1,
                  "hibern":1,
                  "version":4,
                  "xml":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Obviously this creates maintenance problems.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[-1071363975]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Obviously this creates maintenance problems.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "mainten":1,
                  "creat":1,
                  "problem":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Model driven architecture is probably more than this, but what I'd really like is a system that lets me define a class or an entity once, in one way, and then generate various representations. (maybe I am not using the correct terminology for this)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[1340014138]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Model driven architecture is probably more than this, but what I'd really like is a system that lets me define a class or an entity once, in one way, and then generate various representations. (maybe I am not using the correct terminology for this)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"or",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "represent":1,
                  "terminolog":1,
                  "system":1,
                  "model":1,
                  "correct":1,
                  "driven":1,
                  "architectur":1,
                  "generat":1,
                  "entiti":1,
                  "defin":1,
                  "let":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It really isn't that straight forward, of course, because let's say we have a java object that we want to turn into JSON for sending over the wire - there might not be an exact 1-1 correspondence between the members in the java object to the fields in JSON - there might be some optimizations, or whatever.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[1464904158]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It really isn't that straight forward, of course, because let's say we have a java object that we want to turn into JSON for sending over the wire - there might not be an exact 1-1 correspondence between the members in the java object to the fields in JSON - there might be some optimizations, or whatever.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "field":1,
                  "json":2,
                  "forward":1,
                  "correspond":1,
                  "wire":1,
                  "object":2,
                  "exact":1,
                  "optim":1,
                  "member":1,
                  "isn":1,
                  "turn":1,
                  "straight":1,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I've looked at things like AndroMDA and EMF in the past, and found them either lacking or clumsy. I do not know how they stack up these days, or what other systems there are.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[1353735673]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I've looked at things like AndroMDA and EMF in the past, and found them either lacking or clumsy. I do not know how they stack up these days, or what other systems there are.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "clumsi":1,
                  "system":1,
                  "mda":1,
                  "look":1,
                  "thing":1,
                  "andro":1,
                  "emf":1,
                  "found":1,
                  "lack":1,
                  "stack":1,
                  "past":1,
                  "day":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What are SO's opinions on MDA and or meta-data driven programming? Have the tools become mature enough for serious consideration?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[-513589030]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What are SO's opinions on MDA and or meta-data driven programming? Have the tools become mature enough for serious consideration?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "consider":1,
                  "mda":1,
                  "tool":1,
                  "data":1,
                  "matur":1,
                  "driven":1,
                  "meta":1,
                  "opinion":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9523258]-[-218076388]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":9523407,
      "questionId":9523258,
      "comments":[
        
      ],
      "creationDate":"2012-03-01",
      "lastActivityDate":"2012-03-01",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1230853,
        "displayName":"Peter Cetinski",
        "reputation":1757
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To address your core concern, you can define a Java class for your domain object. Then, you can annotate the class with JAXB and Hibernate annotations. This way you have a single definition of your entity(the Java class) that can be output in various representations, JAXB for JSON and XML, Hibernate for persistence.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9523407]-[-872586795]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To address your core concern, you can define a Java class for your domain object. Then, you can annotate the class with JAXB and Hibernate annotations. This way you have a single definition of your entity(the Java class) that can be output in various representations, JAXB for JSON and XML, Hibernate for persistence.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"with",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "represent":1,
                    "json":1,
                    "hibern":2,
                    "domain":1,
                    "object":1,
                    "concern":1,
                    "jaxb":2,
                    "persist":1,
                    "annot":2,
                    "xml":1,
                    "definit":1,
                    "address":1,
                    "entiti":1,
                    "output":1,
                    "defin":1,
                    "core":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9525269,
      "questionId":9523258,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":18408085,
          "postId":9525269,
          "creationDate":"2012-11-19",
          "score":3,
          "isEdited":false,
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This answer hinges on an unsupported argument."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9525269-cu18408085]-[802720156]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This answer hinges on an unsupported argument."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "argument":1,
                        "unsupport":1,
                        "hing":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-03-01",
      "lastActivityDate":"2013-02-02",
      "lastEditDate":"2013-02-02",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":695302,
        "displayName":"dnellis74",
        "reputation":64
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Check out Naked Objects</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9525269]-[-984954472]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Check out Naked Objects</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "object":1,
                    "nake":1,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://nakedobjects.codeplex.com/\"rel=\"nofollow\">http://nakedobjects.codeplex.com/</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9525269]-[-1928417848]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://nakedobjects.codeplex.com/\"rel=\"nofollow\">http://nakedobjects.codeplex.com/</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "codeplex":2,
                    "rel":1,
                    "nakedobject":2,
                    "nofollow":1,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and it's apache equivalent</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9525269]-[-692749145]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and it's apache equivalent</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "equival":1,
                    "apach":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://isis.apache.org/index.html\"rel=\"nofollow\">http://isis.apache.org/index.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9525269]-[-563259160]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://isis.apache.org/index.html\"rel=\"nofollow\">http://isis.apache.org/index.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "apach":2,
                    "isi":2,
                    "rel":1,
                    "nofollow":1,
                    "org":2,
                    "html":2,
                    "href":1,
                    "http":2,
                    "index":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The fact that both of these frameworks are almost unheard of should answer your question IMHO. I think ending up with inconsistent representations of the same objects indicates a flaw in your process, which isn't something you should try and solve with a framework.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9525269]-[1521700966]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The fact that both of these frameworks are almost unheard of should answer your question IMHO. I think ending up with inconsistent representations of the same objects indicates a flaw in your process, which isn't something you should try and solve with a framework.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "question":1,
                    "represent":1,
                    "process":1,
                    "framework":2,
                    "object":1,
                    "flaw":1,
                    "imho":1,
                    "fact":1,
                    "unheard":1,
                    "isn":1,
                    "answer":1,
                    "end":1,
                    "inconsist":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9609055,
      "questionId":9523258,
      "comments":[
        
      ],
      "creationDate":"2012-03-07",
      "lastActivityDate":"2012-03-07",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":56880,
        "displayName":"Dan Haywood",
        "reputation":675
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a contributor to both <a href=\"http://nakedobjects.codeplex.com\">Naked Objects</a> and <a href=\"http://incubator.apache.org/isis\">Apache Isis</a>, I can confirm the other answer from @dnellis74 given that these both address the issue of having multiple representations of the same thing; with these frameworks you write your domain object once, and then it is reflected automatically to the user as a persistence layer.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9609055]-[-1387714919]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a contributor to both <a href=\"http://nakedobjects.codeplex.com\">Naked Objects</a> and <a href=\"http://incubator.apache.org/isis\">Apache Isis</a>, I can confirm the other answer from @dnellis74 given that these both address the issue of having multiple representations of the same thing; with these frameworks you write your domain object once, and then it is reflected automatically to the user as a persistence layer.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "represent":1,
                    "contributor":1,
                    "apach":2,
                    "isi":2,
                    "codeplex":1,
                    "domain":1,
                    "thing":1,
                    "issu":1,
                    "dnelli":1,
                    "framework":1,
                    "object":2,
                    "nakedobject":1,
                    "layer":1,
                    "persist":1,
                    "automat":1,
                    "nake":1,
                    "confirm":1,
                    "address":1,
                    "answer":1,
                    "incub":1,
                    "org":1,
                    "href":2,
                    "http":2,
                    "multipl":1,
                    "reflect":1,
                    "user":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Of course, (and I would say this, wouldn't I?) I don't agree with @dnellis74 that the fact that these frameworks are little known means that they should be dismissed out of hand; you should decide for yourself.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9609055]-[-272369478]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Of course, (and I would say this, wouldn't I?) I don't agree with @dnellis74 that the fact that these frameworks are little known means that they should be dismissed out of hand; you should decide for yourself.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "decid":1,
                    "hand":1,
                    "mean":1,
                    "dnelli":1,
                    "framework":1,
                    "fact":1,
                    "wouldn":1,
                    "dismiss":1,
                    "agre":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>One other point that might be of interest; both these frameworks are in the process of implementing the <a href=\"http://restfulobjects.org\">Restful Objects spec</a>, which aims to expose your domain objects automatically via a RESTful API, and let you skin it or integrate with it as you see fit. The .NET impl is pretty complete, the Java impl is lagging a bit but even so has a demo that you can <a href=\"http://mmyco.co.uk:8180/isis-onlinedemo/doc/index.html\">check out</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9609055]-[-997503514]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>One other point that might be of interest; both these frameworks are in the process of implementing the <a href=\"http://restfulobjects.org\">Restful Objects spec</a>, which aims to expose your domain objects automatically via a RESTful API, and let you skin it or integrate with it as you see fit. The .NET impl is pretty complete, the Java impl is lagging a bit but even so has a demo that you can <a href=\"http://mmyco.co.uk:8180/isis-onlinedemo/doc/index.html\">check out</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "demo":1,
                    "point":1,
                    "isi":1,
                    "bit":1,
                    "mmyco":1,
                    "process":1,
                    "rest":2,
                    "fit":1,
                    "domain":1,
                    "lag":1,
                    "restfulobject":1,
                    "integr":1,
                    "framework":1,
                    "expos":1,
                    "doc":1,
                    "net":1,
                    "object":2,
                    "pretti":1,
                    "impl":2,
                    "automat":1,
                    "onlinedemo":1,
                    "check":1,
                    "interest":1,
                    "implement":1,
                    "spec":1,
                    "api":1,
                    "complet":1,
                    "org":1,
                    "html":1,
                    "href":2,
                    "aim":1,
                    "http":2,
                    "skin":1,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As for MDA, I was sceptical from the outset when it was first being tauted by the OMG, to the extent that I wrote an <a href=\"http://www.theserverside.com/news/1365166/MDA-Nice-idea-shame-about-the\">article</a> about it on TheServerSide. I think I called it right.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9609055]-[-1611623485]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As for MDA, I was sceptical from the outset when it was first being tauted by the OMG, to the extent that I wrote an <a href=\"http://www.theserverside.com/news/1365166/MDA-Nice-idea-shame-about-the\">article</a> about it on TheServerSide. I think I called it right.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "server":1,
                    "extent":1,
                    "mda":2,
                    "idea":1,
                    "wrote":1,
                    "sceptic":1,
                    "omg":1,
                    "nice":1,
                    "articl":1,
                    "theserversid":1,
                    "taut":1,
                    "shame":1,
                    "outset":1,
                    "news":1,
                    "href":1,
                    "http":1,
                    "call":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Dan</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9609055]-[8905000]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Dan</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dan":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}