{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8564896,
    "title":"Fastest way to check if a String can be parsed to Double in Java",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":10618056,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":7382,
          "displayName":"JHollanti",
          "reputation":739
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@OliverWeiler that's a definite nope, has to be the fastest ;)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10618056]-[1176533418]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@OliverWeiler that's a definite nope, has to be the fastest ;)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"OliverWeiler",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "oliv":1,
                      "fastest":1,
                      "nope":1,
                      "definit":1,
                      "weiler":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10618236,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@JHollanti, unless you have a specific idea of how fast it really needs to be I suspect that Double.parseDouble is fast enough. If it really has to be the fastest, you need to write your own custom parser to parser exactly what you want. iT can be 10x faster than a regex but a lot more code esp if you don't really need this. Can you say exact how fast it needs it be? e.g. how many nano-seconds?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10618236]-[1166598480]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@JHollanti, unless you have a specific idea of how fast it really needs to be I suspect that Double.parseDouble is fast enough. If it really has to be the fastest, you need to write your own custom parser to parser exactly what you want. iT can be 10x faster than a regex but a lot more code esp if you don't really need this. Can you say exact how fast it needs it be? e.g. how many nano-seconds?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"JHollanti",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Double",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"parseDouble",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "regex":1,
                      "faster":1,
                      "custom":1,
                      "parser":2,
                      "idea":1,
                      "fastest":1,
                      "nano":1,
                      "exact":1,
                      "code":1,
                      "second":1,
                      "pars":1,
                      "jhollanti":1,
                      "specif":1,
                      "suspect":1,
                      "lot":1,
                      "fast":3,
                      "esp":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10618378,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":7382,
          "displayName":"JHollanti",
          "reputation":739
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@PeterLawrey it has to be as fast as a DeLorean traveling back through time."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10618378]-[1260351757]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@PeterLawrey it has to be as fast as a DeLorean traveling back through time."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PeterLawrey",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DeLorean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "peter":1,
                      "travel":1,
                      "back":1,
                      "fast":1,
                      "time":1,
                      "lorean":1,
                      "lawrey":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"DeLorean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10618533,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"88 MPH, cool. Its getting the two flaming lines that will be tricky. ;) BTW: I have written double parsers and formatters which work with direct ByteBuffers and sun.misc.Unsafe memory access to minimise latency and IMHO its OTT for 99% of projects, even those which need to be fast."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10618533]-[894546310]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"88 MPH, cool. Its getting the two flaming lines that will be tricky. ;) BTW: I have written double parsers and formatters which work with direct ByteBuffers and sun.misc.Unsafe memory access to minimise latency and IMHO its OTT for 99% of projects, even those which need to be fast."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ByteBuffers",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "latenc":1,
                      "tricki":1,
                      "ott":1,
                      "line":1,
                      "project":1,
                      "btw":1,
                      "parser":1,
                      "sun":1,
                      "buffer":1,
                      "minimis":1,
                      "work":1,
                      "direct":1,
                      "imho":1,
                      "mph":1,
                      "cool":1,
                      "written":1,
                      "misc":1,
                      "flame":1,
                      "fast":1,
                      "unsaf":1,
                      "formatt":1,
                      "access":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ByteBuffers",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10619687,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":7382,
          "displayName":"JHollanti",
          "reputation":739
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@PeterLawrey yeah, i'm not aiming for ridiculous. It's enough that it's close to the previous implementation which, before anyone pries, i can't share with you guys. Basically it's enough that i avoid the most obvious pitfalls but i just thought that this'd be a fun couple of lines to drop in here. You know, just 'cause i haven't been that active as of late."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10619687]-[-2076190242]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@PeterLawrey yeah, i'm not aiming for ridiculous. It's enough that it's close to the previous implementation which, before anyone pries, i can't share with you guys. Basically it's enough that i avoid the most obvious pitfalls but i just thought that this'd be a fun couple of lines to drop in here. You know, just 'cause i haven't been that active as of late."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"PeterLawrey",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "guy":1,
                      "late":1,
                      "thought":1,
                      "pri":1,
                      "line":1,
                      "obvious":1,
                      "previous":1,
                      "peter":1,
                      "avoid":1,
                      "drop":1,
                      "share":1,
                      "activ":1,
                      "yeah":1,
                      "coupl":1,
                      "pitfal":1,
                      "ridicul":1,
                      "fun":1,
                      "implement":1,
                      "aim":1,
                      "basic":1,
                      "close":1,
                      "lawrey":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617293,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":555122,
          "displayName":"Rcunn87",
          "reputation":107
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"AFAIK, do a Double.parseDouble(String) on it and it throws an exception if it doesn't start with numbers. (Generalizing here). If you want to do regExs and strip out leading non-number chars that's a different story."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617293]-[-487213987]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"AFAIK, do a Double.parseDouble(String) on it and it throws an exception if it doesn't start with numbers. (Generalizing here). If you want to do regExs and strip out leading non-number chars that's a different story."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Double",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"parseDouble",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"regExs",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "number":2,
                      "lead":1,
                      "reg":1,
                      "afaik":1,
                      "strip":1,
                      "char":1,
                      "stori":1,
                      "pars":1,
                      "ex":1,
                      "general":1,
                      "start":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617371,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":7382,
          "displayName":"JHollanti",
          "reputation":739
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Well, AFAIK, try-catch tends to be rather slow."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617371]-[507220752]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Well, AFAIK, try-catch tends to be rather slow."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "slow":1,
                      "afaik":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617386,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":615740,
          "displayName":"Tom Dignan",
          "reputation":4553
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I'm going to second Rcunn87 on the regex idea, but make sure you compile it and store it statically so that you can re-use it again and again."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617386]-[1108376578]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I'm going to second Rcunn87 on the regex idea, but make sure you compile it and store it statically so that you can re-use it again and again."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "static":1,
                      "regex":1,
                      "idea":1,
                      "store":1,
                      "make":1,
                      "rcunn":1,
                      "compil":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617393,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":615740,
          "displayName":"Tom Dignan",
          "reputation":4553
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@JHollanti certainly is, I wonder if some here are thinking &quot;developer time&quot; rather than CPU time."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617393]-[-493308476]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@JHollanti certainly is, I wonder if some here are thinking &quot;developer time&quot; rather than CPU time."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"JHollanti",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jhollanti":1,
                      "think":1,
                      "cpu":1,
                      "quot":2,
                      "time":2,
                      "develop":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617394,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1178669,
          "displayName":"helpermethod",
          "reputation":11824
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@JHollanti Rather slow could still be fast enough."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617394]-[-1233712028]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@JHollanti Rather slow could still be fast enough."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"JHollanti",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "fast":1,
                      "jhollanti":1,
                      "slow":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10617646,
        "postId":8564896,
        "creationDate":"2011-12-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":555122,
          "displayName":"Rcunn87",
          "reputation":107
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yea, I don't know if parseDouble() handles scientific notation though. So in that case a RegEx is the only thing that will work for you. Or some other library."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8564896-cu10617646]-[-739764485]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yea, I don't know if parseDouble() handles scientific notation though. So in that case a RegEx is the only thing that will work for you. Or some other library."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"parseDouble",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RegEx",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "reg":1,
                      "scientif":1,
                      "thing":1,
                      "librari":1,
                      "work":1,
                      "pars":1,
                      "notat":1,
                      "yea":1,
                      "handl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"RegEx",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "string",
      "double"
    ],
    "creationDate":"2011-12-19",
    "lastActivityDate":"2013-12-06",
    "lastEditDate":"2013-12-06",
    "score":9,
    "viewCount":12073,
    "owner":{
      "type":"StackOverflowUser",
      "id":7382,
      "displayName":"JHollanti",
      "reputation":739
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know there's a million ways of doing this but what is the fastest? This should include scientific notation. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8564896]-[-45883429]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know there's a million ways of doing this but what is the fastest? This should include scientific notation. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "scientif":1,
                  "fastest":1,
                  "way":1,
                  "includ":1,
                  "notat":1,
                  "million":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>NOTE: I'm not interested in converting the value to Double, i'm only interested in knowing if it's possible. i.e. <code>private boolean isDouble(String value)</code>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8564896]-[-1254589523]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>NOTE: I'm not interested in converting the value to Double, i'm only interested in knowing if it's possible. i.e. <code>private boolean isDouble(String value)</code>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"boolean",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"isDouble",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"value",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":2,
                  "know":1,
                  "interest":2,
                  "note":1,
                  "convert":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"boolean",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"value",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":8565054,
      "questionId":8564896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10619292,
          "postId":8565054,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":7382,
            "displayName":"JHollanti",
            "reputation":739
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Actually in my case the fastest solution was to just if-else through the whole String using flags and whatnots. But that's because in my case the String is most often really, small (like 3 or 4 characters). As a general solution though, i think this is the best."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565054-cu10619292]-[182460948]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Actually in my case the fastest solution was to just if-else through the whole String using flags and whatnots. But that's because in my case the String is most often really, small (like 3 or 4 characters). As a general solution though, i think this is the best."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "charact":1,
                        "fastest":1,
                        "small":1,
                        "whatnot":1,
                        "general":1,
                        "flag":1,
                        "solut":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-19",
      "lastActivityDate":"2011-12-19",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":460761,
        "displayName":"pablosaraiva",
        "reputation":1233
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can check it using the same regular expression the Double class uses. It's well documented here:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565054]-[55543869]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can check it using the same regular expression the Double class uses. It's well documented here:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"uses",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "regular":1,
                    "document":1,
                    "express":1,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#valueOf%28java.lang.String%29\"rel=\"nofollow\">http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#valueOf%28java.lang.String%29</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565054]-[2010498434]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#valueOf%28java.lang.String%29\"rel=\"nofollow\">http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#valueOf%28java.lang.String%29</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"valueOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "oracl":2,
                    "doc":4,
                    "nofollow":1,
                    "javas":2,
                    "api":2,
                    "lang":4,
                    "html":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here is the code part:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565054]-[-2076954124]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here is the code part:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "part":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>To avoid calling this method on an invalid string and having a NumberFormatException be thrown, the regular expression below can be used to screen the input string:</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565054]-[-97461523]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>To avoid calling this method on an invalid string and having a NumberFormatException be thrown, the regular expression below can be used to screen the input string:</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NumberFormatException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "format":1,
                    "method":1,
                    "thrown":1,
                    "regular":1,
                    "avoid":1,
                    "blockquot":2,
                    "invalid":1,
                    "screen":1,
                    "express":1,
                    "call":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NumberFormatException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" final String Digits = &quot;(\\\\p{Digit}+)&quot;; final String HexDigits = &quot;(\\\\p{XDigit}+)&quot;; // an exponent is 'e' or 'E' followed by an optionally // signed decimal integer. final String Exp = &quot;[eE][+-]?&quot;+Digits; final String fpRegex = (&quot;[\\\\x00-\\\\x20]*&quot;+ // Optional leading &quot;whitespace&quot; &quot;[+-]?(&quot; + // Optional sign character &quot;NaN|&quot; + // &quot;NaN&quot; string &quot;Infinity|&quot; + // &quot;Infinity&quot; string // A decimal floating-point string representing a finite positive // number without a leading sign has at most five basic pieces: // Digits . Digits ExponentPart FloatTypeSuffix // // Since this method allows integer-only strings as input // in addition to strings of floating-point literals, the // two sub-patterns below are simplifications of the grammar // productions from the Java Language Specification, 2nd // edition, section 3.10.2. // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt &quot;(((&quot;+Digits+&quot;(\\\\.)?(&quot;+Digits+&quot;?)(&quot;+Exp+&quot;)?)|&quot;+ // . Digits ExponentPart_opt FloatTypeSuffix_opt &quot;(\\\\.(&quot;+Digits+&quot;)(&quot;+Exp+&quot;)?)|&quot;+ // Hexadecimal strings &quot;((&quot; + // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt &quot;(0[xX]&quot; + HexDigits + &quot;(\\\\.)?)|&quot; + // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt &quot;(0[xX]&quot; + HexDigits + &quot;?(\\\\.)&quot; + HexDigits + &quot;)&quot; + &quot;)[pP][+-]?&quot; + Digits + &quot;))&quot; + &quot;[fFdD]?))&quot; + &quot;[\\\\x00-\\\\x20]*&quot;);// Optional trailing &quot;whitespace&quot; if (Pattern.matches(fpRegex, myString)) Double.valueOf(myString); // Will not throw NumberFormatException else { // Perform suitable alternative action } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8565054]-[340955650]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"final",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Digits",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"(\\\\p{Digit}+)\""
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"final",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HexDigits",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"(\\\\p{XDigit}+)\""
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// an exponent is 'e' or 'E' followed by an optionally // signed decimal integer. final String Exp = \"[eE][+-]?\"+Digits; final String fpRegex = (\"[\\\\x00-\\\\x20]*\"+ // Optional leading \"whitespace\" \"[+-]?(\" + // Optional sign character \"NaN|\" + // \"NaN\" string \"Infinity|\" + // \"Infinity\" string // A decimal floating-point string representing a finite positive // number without a leading sign has at most five basic pieces: // Digits . Digits ExponentPart FloatTypeSuffix // // Since this method allows integer-only strings as input // in addition to strings of floating-point literals, the // two sub-patterns below are simplifications of the grammar // productions from the Java Language Specification, 2nd // edition, section 3.10.2. // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt \"(((\"+Digits+\"(\\\\.)?(\"+Digits+\"?)(\"+Exp+\")?)|\"+ // . Digits ExponentPart_opt FloatTypeSuffix_opt \"(\\\\.(\"+Digits+\")(\"+Exp+\")?)|\"+ // Hexadecimal strings \"((\" + // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt \"(0[xX]\" + HexDigits + \"(\\\\.)?)|\" + // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt \"(0[xX]\" + HexDigits + \"?(\\\\.)\" + HexDigits + \")\" + \")[pP][+-]?\" + Digits + \"))\" + \"[fFdD]?))\" + \"[\\\\x00-\\\\x20]*\");// Optional trailing \"whitespace\" if (Pattern.matches(fpRegex, myString)) Double.valueOf(myString); // Will not throw NumberFormatException else { // Perform suitable alternative action } \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":" final String Digits = \"(\\\\p{Digit}+)\"; final String HexDigits = \"(\\\\p{XDigit}+)\"; // an exponent is 'e' or 'E' followed by an optionally // signed decimal integer. final String Exp = \"[eE][+-]?\"+Digits; final String fpRegex = (\"[\\\\x00-\\\\x20]*\"+ // Optional leading \"whitespace\" \"[+-]?(\" + // Optional sign character \"NaN|\" + // \"NaN\" string \"Infinity|\" + // \"Infinity\" string // A decimal floating-point string representing a finite positive // number without a leading sign has at most five basic pieces: // Digits . Digits ExponentPart FloatTypeSuffix // // Since this method allows integer-only strings as input // in addition to strings of floating-point literals, the // two sub-patterns below are simplifications of the grammar // productions from the Java Language Specification, 2nd // edition, section 3.10.2. // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt \"(((\"+Digits+\"(\\\\.)?(\"+Digits+\"?)(\"+Exp+\")?)|\"+ // . Digits ExponentPart_opt FloatTypeSuffix_opt \"(\\\\.(\"+Digits+\")(\"+Exp+\")?)|\"+ // Hexadecimal strings \"((\" + // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt \"(0[xX]\" + HexDigits + \"(\\\\.)?)|\" + // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt \"(0[xX]\" + HexDigits + \"?(\\\\.)\" + HexDigits + \")\" + \")[pP][+-]?\" + Digits + \"))\" + \"[fFdD]?))\" + \"[\\\\x00-\\\\x20]*\");// Optional trailing \"whitespace\" if (Pattern.matches(fpRegex, myString)) Double.valueOf(myString); // Will not throw NumberFormatException else { // Perform suitable alternative action } \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "whitespac":2,
                    "number":2,
                    "format":1,
                    "regex":2,
                    "method":1,
                    "lead":2,
                    "infin":2,
                    "hex":7,
                    "languag":1,
                    "charact":1,
                    "point":2,
                    "opt":10,
                    "pattern":2,
                    "addit":1,
                    "float":2,
                    "trail":1,
                    "grammar":1,
                    "liter":1,
                    "binari":2,
                    "option":4,
                    "finit":1,
                    "suffix":5,
                    "string":3,
                    "altern":1,
                    "section":1,
                    "exp":3,
                    "match":1,
                    "edit":1,
                    "sign":3,
                    "simplif":1,
                    "xdigit":1,
                    "decim":2,
                    "specif":1,
                    "perform":1,
                    "suitabl":1,
                    "posit":1,
                    "piec":1,
                    "part":3,
                    "type":5,
                    "basic":1,
                    "digit":19,
                    "repres":1,
                    "expon":6,
                    "hexadecim":1,
                    "action":1,
                    "input":1,
                    "product":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Digits",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"(\\\\p{Digit}+)\""
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"HexDigits",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"(\\\\p{XDigit}+)\""
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8565018,
      "questionId":8564896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10618005,
          "postId":8565018,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":605744,
            "displayName":"Tomasz Nurkiewicz",
            "reputation":156155
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Paul: I had a quick look there (I regret now ;-)) but as long as it works, I don't care. I also don't know whether it will be faster than a regular expression. Remember that regex is a dynamically generated state-machine (although probably *very* optimized)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565018-cu10618005]-[-1622129918]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Paul: I had a quick look there (I regret now ;-)) but as long as it works, I don't care. I also don't know whether it will be faster than a regular expression. Remember that regex is a dynamically generated state-machine (although probably *very* optimized)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Paul",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "regex":1,
                        "paul":1,
                        "regret":1,
                        "faster":1,
                        "state":1,
                        "dynam":1,
                        "regular":1,
                        "care":1,
                        "work":1,
                        "rememb":1,
                        "optim":1,
                        "machin":1,
                        "express":1,
                        "generat":1,
                        "quick":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617752,
          "postId":8565018,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":185034,
            "displayName":"Paul",
            "reputation":7992
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Have you looked at the source code for that method? I don't see why it would be any faster than a regular expression - it's a jumble of loops, comparisons, flags...probably what goes on under the hood with a regex but it's sure ugly to look at."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565018-cu10617752]-[-473321482]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Have you looked at the source code for that method? I don't see why it would be any faster than a regular expression - it's a jumble of loops, comparisons, flags...probably what goes on under the hood with a regex but it's sure ugly to look at."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "regex":1,
                        "method":1,
                        "faster":1,
                        "loop":1,
                        "comparison":1,
                        "jumbl":1,
                        "look":1,
                        "regular":1,
                        "code":1,
                        "hood":1,
                        "express":1,
                        "flag":1,
                        "ugli":1,
                        "sourc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-19",
      "lastActivityDate":"2011-12-19",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":605744,
        "displayName":"Tomasz Nurkiewicz",
        "reputation":156155
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is a handy <a href=\"http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/math/NumberUtils.html#isNumber%28java.lang.String%29\"rel=\"nofollow\"><code>NumberUtils#isNumber</code></a> in <a href=\"http://commons.apache.org/lang/\"rel=\"nofollow\">Apache Commons Lang</a>. It is a bit far fetched:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565018]-[-855776161]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is a handy <a href=\"http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/math/NumberUtils.html#isNumber%28java.lang.String%29\"rel=\"nofollow\"><code>NumberUtils#isNumber</code></a> in <a href=\"http://commons.apache.org/lang/\"rel=\"nofollow\">Apache Commons Lang</a>. It is a bit far fetched:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NumberUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"isNumber",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":4,
                    "handi":1,
                    "apach":4,
                    "bit":1,
                    "util":2,
                    "rel":2,
                    "code":2,
                    "nofollow":2,
                    "math":1,
                    "common":4,
                    "fetch":1,
                    "api":1,
                    "lang":5,
                    "org":3,
                    "html":1,
                    "href":2,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NumberUtils",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565018]-[-761874494]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":2,
                    "scientif":1,
                    "blockquot":2,
                    "includ":1,
                    "qualifi":2,
                    "notat":1,
                    "valid":1,
                    "type":1,
                    "mark":2,
                    "hexadecim":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>but I guess it might be faster than regular expressions or throwing and catching an exception.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565018]-[-720059293]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>but I guess it might be faster than regular expressions or throwing and catching an exception.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "regular":1,
                    "express":1,
                    "guess":1,
                    "catch":1,
                    "throw":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8565196,
      "questionId":8564896,
      "comments":[
        
      ],
      "creationDate":"2011-12-19",
      "lastActivityDate":"2011-12-19",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":185034,
        "displayName":"Paul",
        "reputation":7992
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Exceptions shouldn't be used for flow control, though Java's authors made it difficult to not use <code>NumberFormatException</code> that way.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565196]-[1330954257]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Exceptions shouldn't be used for flow control, though Java's authors made it difficult to not use <code>NumberFormatException</code> that way.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NumberFormatException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "format":1,
                    "author":1,
                    "code":2,
                    "difficult":1,
                    "flow":1,
                    "control":1,
                    "shouldn":1,
                    "except":1,
                    "made":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NumberFormatException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The class <code>java.util.Scanner</code> has a method <code>hasNextDouble</code> to check whether a <code>String</code> can be read as a double.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565196]-[-1141258974]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The class <code>java.util.Scanner</code> has a method <code>hasNextDouble</code> to check whether a <code>String</code> can be read as a double.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"java",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hasNextDouble",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "method":1,
                    "scanner":1,
                    "util":1,
                    "code":6,
                    "check":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Under the hood <code>Scanner</code> uses regular expressions (via pre-compiled patterns) to determine if a <code>String</code> can be converted to a integer or floating point number. The patterns are compiled in the method <code>buildFloatAndDecimalPattern</code> which you can view at <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Scanner.java#Scanner.buildFloatAndDecimalPattern%28%29\"rel=\"nofollow\">GrepCode here</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565196]-[-328082451]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Under the hood <code>Scanner</code> uses regular expressions (via pre-compiled patterns) to determine if a <code>String</code> can be converted to a integer or floating point number. The patterns are compiled in the method <code>buildFloatAndDecimalPattern</code> which you can view at <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Scanner.java#Scanner.buildFloatAndDecimalPattern%28%29\"rel=\"nofollow\">GrepCode here</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"buildFloatAndDecimalPattern",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"GrepCode",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pre":1,
                    "openjdk":1,
                    "number":1,
                    "method":1,
                    "determin":1,
                    "point":1,
                    "scanner":3,
                    "util":1,
                    "pattern":4,
                    "root":1,
                    "float":1,
                    "rel":1,
                    "build":2,
                    "regular":1,
                    "repositori":1,
                    "grep":1,
                    "grepcod":2,
                    "code":7,
                    "hood":1,
                    "nofollow":1,
                    "decim":2,
                    "express":1,
                    "file":1,
                    "compil":2,
                    "href":1,
                    "http":1,
                    "jdk":1,
                    "convert":1,
                    "view":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"GrepCode",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A pre-compiled pattern has the added benefit of being faster than using a try/catch block.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565196]-[-1466719554]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A pre-compiled pattern has the added benefit of being faster than using a try/catch block.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pre":1,
                    "faster":1,
                    "pattern":1,
                    "block":1,
                    "ad":1,
                    "compil":1,
                    "benefit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's the method referenced above, in case GrepCode disappears one day:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565196]-[-482894815]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's the method referenced above, in case GrepCode disappears one day:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"GrepCode",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "disappear":1,
                    "grep":1,
                    "code":1,
                    "referenc":1,
                    "day":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"GrepCode",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"private void buildFloatAndDecimalPattern() { // \\\\p{javaDigit} may not be perfect, see above String digit = &quot;([0-9]|(\\\\p{javaDigit}))&quot;; String exponent = &quot;([eE][+-]?&quot;+digit+&quot;+)?&quot;; String groupedNumeral = &quot;(&quot;+non0Digit+digit+&quot;?&quot;+digit+&quot;?(&quot;+ groupSeparator+digit+digit+digit+&quot;)+)&quot;; // Once again digit++ is used for performance, as above String numeral = &quot;((&quot;+digit+&quot;++)|&quot;+groupedNumeral+&quot;)&quot;; String decimalNumeral = &quot;(&quot;+numeral+&quot;|&quot;+numeral + decimalSeparator + digit + &quot;*+|&quot;+ decimalSeparator + digit + &quot;++)&quot;; String nonNumber = &quot;(NaN|&quot;+nanString+&quot;|Infinity|&quot;+ infinityString+&quot;)&quot;; String positiveFloat = &quot;(&quot; + positivePrefix + decimalNumeral + positiveSuffix + exponent + &quot;)&quot;; String negativeFloat = &quot;(&quot; + negativePrefix + decimalNumeral + negativeSuffix + exponent + &quot;)&quot;; String decimal = &quot;(([-+]?&quot; + decimalNumeral + exponent + &quot;)|&quot;+ positiveFloat + &quot;|&quot; + negativeFloat + &quot;)&quot;; String hexFloat = &quot;[-+]?0[xX][0-9a-fA-F]*\\\\.[0-9a-fA-F]+([pP][-+]?[0-9]+)?&quot;; String positiveNonNumber = &quot;(&quot; + positivePrefix + nonNumber + positiveSuffix + &quot;)&quot;; String negativeNonNumber = &quot;(&quot; + negativePrefix + nonNumber + negativeSuffix + &quot;)&quot;; String signedNonNumber = &quot;(([-+]?&quot;+nonNumber+&quot;)|&quot; + positiveNonNumber + &quot;|&quot; + negativeNonNumber + &quot;)&quot;; floatPattern = Pattern.compile(decimal + &quot;|&quot; + hexFloat + &quot;|&quot; + signedNonNumber); decimalPattern = Pattern.compile(decimal); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8565196]-[-1061346431]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"private",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"buildFloatAndDecimalPattern",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"// \\\\p{javaDigit} may not be perfect, see above String digit = \"([0-9]|(\\\\p{javaDigit}))\"; String exponent = \"([eE][+-]?\"+digit+\"+)?\"; String groupedNumeral = \"(\"+non0Digit+digit+\"?\"+digit+\"?(\"+ groupSeparator+digit+digit+digit+\")+)\"; // Once again digit++ is used for performance, as above String numeral = \"((\"+digit+\"++)|\"+groupedNumeral+\")\"; String decimalNumeral = \"(\"+numeral+\"|\"+numeral + decimalSeparator + digit + \"*+|\"+ decimalSeparator + digit + \"++)\"; String nonNumber = \"(NaN|\"+nanString+\"|Infinity|\"+ infinityString+\")\"; String positiveFloat = \"(\" + positivePrefix + decimalNumeral + positiveSuffix + exponent + \")\"; String negativeFloat = \"(\" + negativePrefix + decimalNumeral + negativeSuffix + exponent + \")\"; String decimal = \"(([-+]?\" + decimalNumeral + exponent + \")|\"+ positiveFloat + \"|\" + negativeFloat + \")\"; String hexFloat = \"[-+]?0[xX][0-9a-fA-F]*\\\\.[0-9a-fA-F]+([pP][-+]?[0-9]+)?\"; String positiveNonNumber = \"(\" + positivePrefix + nonNumber + positiveSuffix + \")\"; String negativeNonNumber = \"(\" + negativePrefix + nonNumber + negativeSuffix + \")\"; String signedNonNumber = \"(([-+]?\"+nonNumber+\")|\" + positiveNonNumber + \"|\" + negativeNonNumber + \")\"; floatPattern = Pattern.compile(decimal + \"|\" + hexFloat + \"|\" + signedNonNumber); decimalPattern = Pattern.compile(decimal); } \n"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"private void buildFloatAndDecimalPattern() { // \\\\p{javaDigit} may not be perfect, see above String digit = \"([0-9]|(\\\\p{javaDigit}))\"; String exponent = \"([eE][+-]?\"+digit+\"+)?\"; String groupedNumeral = \"(\"+non0Digit+digit+\"?\"+digit+\"?(\"+ groupSeparator+digit+digit+digit+\")+)\"; // Once again digit++ is used for performance, as above String numeral = \"((\"+digit+\"++)|\"+groupedNumeral+\")\"; String decimalNumeral = \"(\"+numeral+\"|\"+numeral + decimalSeparator + digit + \"*+|\"+ decimalSeparator + digit + \"++)\"; String nonNumber = \"(NaN|\"+nanString+\"|Infinity|\"+ infinityString+\")\"; String positiveFloat = \"(\" + positivePrefix + decimalNumeral + positiveSuffix + exponent + \")\"; String negativeFloat = \"(\" + negativePrefix + decimalNumeral + negativeSuffix + exponent + \")\"; String decimal = \"(([-+]?\" + decimalNumeral + exponent + \")|\"+ positiveFloat + \"|\" + negativeFloat + \")\"; String hexFloat = \"[-+]?0[xX][0-9a-fA-F]*\\\\.[0-9a-fA-F]+([pP][-+]?[0-9]+)?\"; String positiveNonNumber = \"(\" + positivePrefix + nonNumber + positiveSuffix + \")\"; String negativeNonNumber = \"(\" + negativePrefix + nonNumber + negativeSuffix + \")\"; String signedNonNumber = \"(([-+]?\"+nonNumber+\")|\" + positiveNonNumber + \"|\" + negativeNonNumber + \")\"; floatPattern = Pattern.compile(decimal + \"|\" + hexFloat + \"|\" + signedNonNumber); decimalPattern = Pattern.compile(decimal); } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":10,
                    "infin":2,
                    "negat":8,
                    "hex":2,
                    "pattern":5,
                    "prefix":4,
                    "suffix":4,
                    "separ":3,
                    "build":1,
                    "perfect":1,
                    "numer":9,
                    "nan":1,
                    "sign":2,
                    "decim":11,
                    "perform":1,
                    "posit":8,
                    "compil":2,
                    "digit":14,
                    "expon":4,
                    "group":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8564972,
      "questionId":8564896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":21525127,
          "postId":8564972,
          "creationDate":"2013-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":7382,
            "displayName":"JHollanti",
            "reputation":739
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"How is throwing and catching fast? Not to mention bad practice? And using a period is not locale safe."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8564972-cu21525127]-[1078078649]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"How is throwing and catching fast? Not to mention bad practice? And using a period is not locale safe."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "local":1,
                        "bad":1,
                        "safe":1,
                        "mention":1,
                        "fast":1,
                        "practic":1,
                        "catch":1,
                        "throw":1,
                        "period":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-19",
      "lastActivityDate":"2011-12-19",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":655696,
        "displayName":"PTBG",
        "reputation":400
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think trying to convert it to a double and catching the exception would be the fastest way to check...another way I can think of, is splitting the string up by the period ('.') and then checking that each part of the split array contains only integers...but i think the first way would be faster</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8564972]-[795340812]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think trying to convert it to a double and catching the exception would be the fastest way to check...another way I can think of, is splitting the string up by the period ('.') and then checking that each part of the split array contains only integers...but i think the first way would be faster</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "fastest":1,
                    "array":1,
                    "integ":1,
                    "check":2,
                    "split":2,
                    "part":1,
                    "catch":1,
                    "convert":1,
                    "period":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8565112,
      "questionId":8564896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":10622675,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":706695,
            "displayName":"HRgiger",
            "reputation":1241
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@glowcoder @ Paul yep clear now:) sorry for misunderstanding, it would be another topic. also thank you for the new information!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10622675]-[-415127079]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@glowcoder @ Paul yep clear now:) sorry for misunderstanding, it would be another topic. also thank you for the new information!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Paul",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "glowcod":1,
                        "paul":1,
                        "misunderstand":1,
                        "clear":1,
                        "yep":1,
                        "inform":1,
                        "topic":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617610,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":330057,
            "displayName":"corsiKa",
            "reputation":43147
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can't rely on doing it once to determine a benchmark. There's just too much variation that could happen, and you don't know the resolution of the milli's clock."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10617610]-[-1525176659]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can't rely on doing it once to determine a benchmark. There's just too much variation that could happen, and you don't know the resolution of the milli's clock."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "variat":1,
                        "determin":1,
                        "happen":1,
                        "milli":1,
                        "resolut":1,
                        "clock":1,
                        "reli":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617753,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":706695,
            "displayName":"HRgiger",
            "reputation":1241
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@glowcoder You are right too many possible variation, also maybe hardware. About milli`s: isnt it a long value including all millis since 1.1.1970?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10617753]-[2042472785]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@glowcoder You are right too many possible variation, also maybe hardware. About milli`s: isnt it a long value including all millis since 1.1.1970?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "glowcod":1,
                        "variat":1,
                        "milli":2,
                        "isnt":1,
                        "includ":1,
                        "hardwar":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617785,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":185034,
            "displayName":"Paul",
            "reputation":7992
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What @glowcoder said - do it a million times with a pre-compiled pattern and get back to us."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10617785]-[-233800342]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What @glowcoder said - do it a million times with a pre-compiled pattern and get back to us."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pre":1,
                        "glowcod":1,
                        "pattern":1,
                        "back":1,
                        "compil":1,
                        "time":1,
                        "million":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617799,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":185034,
            "displayName":"Paul",
            "reputation":7992
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Try using `System.nanoTime()` instead of `currentTimeMillis()`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10617799]-[2044747012]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Try using `System.nanoTime()` instead of `currentTimeMillis()`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"nanoTime",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"currentTimeMillis",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "system":1,
                        "milli":1,
                        "nano":1,
                        "time":2,
                        "current":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":10617904,
          "postId":8565112,
          "creationDate":"2011-12-19",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":330057,
            "displayName":"corsiKa",
            "reputation":43147
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes in Java it's milli's from epoch. But that's not what I mean by resolution. Consider the following: http://ideone.com/KOOP3 Notice how the time milli's go up by 1? Now copy that code and run it on your machine. On mine they go up by between 15-16 per tick."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8565112-cu10617904]-[-1407295286]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes in Java it's milli's from epoch. But that's not what I mean by resolution. Consider the following: http://ideone.com/KOOP3 Notice how the time milli's go up by 1? Now copy that code and run it on your machine. On mine they go up by between 15-16 per tick."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "koop":1,
                        "epoch":1,
                        "ideon":1,
                        "mine":1,
                        "run":1,
                        "milli":2,
                        "resolut":1,
                        "tick":1,
                        "code":1,
                        "machin":1,
                        "notic":1,
                        "time":1,
                        "http":1,
                        "copi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-19",
      "lastActivityDate":"2011-12-19",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":706695,
        "displayName":"HRgiger",
        "reputation":1241
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have tried below code block and seems like throwing exception more faster</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565112]-[36116591]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have tried below code block and seems like throwing exception more faster</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "block":1,
                    "faster":1,
                    "throw":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"String a = &quot;123f15512551&quot;; System.out.println(System.currentTimeMillis()); a.matches(&quot;^\\\\d+\\\\.\\\\d+$&quot;); System.out.println(System.currentTimeMillis()); try{ Double.valueOf(a); }catch(Exception e){ System.out.println(System.currentTimeMillis()); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8565112]-[-1708047948]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"a",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"123f15512551\""
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"currentTimeMillis",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"matches",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"^\\\\d+\\\\.\\\\d+$\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"System",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"currentTimeMillis",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TryCatchStatementNode",
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Double",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"valueOf",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"a",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "catches":[
                      {
                        "type":"CatchClauseNode",
                        "modifiers":[
                          
                        ],
                        "catchType":{
                          "type":"CatchTypeNode",
                          "identifiers":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Exception",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"e",
                          "comments":[
                            
                          ]
                        },
                        "block":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"ExpressionStatement",
                              "expression":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"System",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"out",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"println",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"currentTimeMillis",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"String a = \"123f15512551\"; Systemoutprintln(System.currentTimeMillis()); amatches(\"^\\\\d+\\\\.\\\\d+$\"); Systemoutprintln(System.currentTimeMillis()); try{ Double.valueOf(a); }catch(Exception e){ System.out.println(System.currentTimeMillis()); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "amatch":1,
                    "system":4,
                    "milli":3,
                    "println":1,
                    "time":3,
                    "systemoutprintln":2,
                    "current":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"System",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"currentTimeMillis",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"currentTimeMillis",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"a",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"matches",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"^\\\\d+\\\\.\\\\d+$\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Double",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"valueOf",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"a",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"a",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"123f15512551\""
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Output:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8565112]-[1450608112]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Output:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "output":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"1324316024735 1324316024737 1324316024737 "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8565112]-[235585579]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"1324316024735 1324316024737 1324316024737 "
                  }
                ]
              },
              "rawText":"1324316024735 1324316024737 1324316024737 ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9531483,
      "questionId":8564896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":17784447,
          "postId":9531483,
          "creationDate":"2012-10-26",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1127892,
            "displayName":"joergl",
            "reputation":2032
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you provide a benchmark that replaces this guess with hard facts?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9531483-cu17784447]-[-770546460]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you provide a benchmark that replaces this guess with hard facts?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "hard":1,
                        "fact":1,
                        "replac":1,
                        "guess":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":18801407,
          "postId":9531483,
          "creationDate":"2012-12-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":387927,
            "displayName":"David Dossot",
            "reputation":23671
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Also I see `isDigits` and `isNumber` in `org.apache.commons.lang.math.NumberUtils`, but nothing to check for `isDouble`. So what method were you suggesting to use?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9531483-cu18801407]-[-523205317]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Also I see `isDigits` and `isNumber` in `org.apache.commons.lang.math.NumberUtils`, but nothing to check for `isDouble`. So what method were you suggesting to use?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"isDigits",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"isNumber",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"org",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"apache",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"commons",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"math",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NumberUtils",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"isDouble",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":2,
                        "method":1,
                        "apach":1,
                        "util":1,
                        "suggest":1,
                        "math":1,
                        "common":1,
                        "check":1,
                        "lang":1,
                        "org":1,
                        "digit":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"org",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"apache",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"commons",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"lang",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"math",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"NumberUtils",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":30670392,
          "postId":9531483,
          "creationDate":"2013-12-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":626639,
            "displayName":"Seega",
            "reputation":1792
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"isNumber checks for all numbers (look at the docu...) `Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L)`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9531483-cu30670392]-[-2131294815]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"isNumber checks for all numbers (look at the docu...) `Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L)`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"isNumber",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":4,
                        "scientif":1,
                        "includ":1,
                        "qualifi":2,
                        "check":1,
                        "notat":1,
                        "valid":1,
                        "type":1,
                        "mark":2,
                        "docu":1,
                        "hexadecim":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-03-02",
      "lastActivityDate":"2012-03-02",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1244823,
        "displayName":"Bjørn",
        "reputation":21
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Apache Commons NumberUtil is actually quite fast. I'm guessing it's way faster than any regexp implementation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9531483]-[1862384003]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Apache Commons NumberUtil is actually quite fast. I'm guessing it's way faster than any regexp implementation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NumberUtil",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "faster":1,
                    "apach":1,
                    "util":1,
                    "regexp":1,
                    "common":1,
                    "implement":1,
                    "fast":1,
                    "guess":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NumberUtil",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}