{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7411896,
    "title":"what is placement new operator in C++ and does java has it?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":8958578,
        "postId":7411896,
        "creationDate":"2011-09-14",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":40342,
          "displayName":"Joachim Sauer",
          "reputation":145645
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@amod0017: it **exactly** answers 1 part of your question, leaving only the &quot;Does Java have it&quot; part to be answered. You should edit your question and link to this question."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7411896-cu8958578]-[-577346205]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@amod0017: it **exactly** answers 1 part of your question, leaving only the &quot;Does Java have it&quot; part to be answered. You should edit your question and link to this question."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":3,
                      "leav":1,
                      "edit":1,
                      "amod":1,
                      "link":1,
                      "answer":2,
                      "quot":2,
                      "part":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8956788,
        "postId":7411896,
        "creationDate":"2011-09-14",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":788109,
          "displayName":"Scorpion",
          "reputation":2494
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"related http://stackoverflow.com/questions/222557/cs-placement-new"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7411896-cu8956788]-[-993725420]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"related http://stackoverflow.com/questions/222557/cs-placement-new"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "relat":1,
                      "stackoverflow":1,
                      "placement":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8956800,
        "postId":7411896,
        "creationDate":"2011-09-14",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":396458,
          "displayName":"NullUserException",
          "reputation":44918
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"No, Java does not have it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7411896-cu8956800]-[-1798020714]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"No, Java does not have it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8956818,
        "postId":7411896,
        "creationDate":"2011-09-14",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":789214,
          "displayName":"amod0017",
          "reputation":1247
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Scoprpion... It might be related but is not same please dont flag it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7411896-cu8956818]-[372278109]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Scoprpion... It might be related but is not same please dont flag it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Scoprpion",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "dont":1,
                      "flag":1,
                      "relat":1,
                      "scoprpion":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8956926,
        "postId":7411896,
        "creationDate":"2011-09-14",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":505088,
          "displayName":"David Heffernan",
          "reputation":334242
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"no pointers in java!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7411896-cu8956926]-[-1975364113]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"no pointers in java!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pointer":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "c++",
      "placement-new"
    ],
    "creationDate":"2011-09-14",
    "lastActivityDate":"2011-09-14",
    "lastEditDate":"2011-09-14",
    "score":1,
    "viewCount":500,
    "owner":{
      "type":"StackOverflowUser",
      "id":789214,
      "displayName":"amod0017",
      "reputation":1247
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I heard about placement new operator of C++. I am confused what it is. However, I can see where it can be used under a question in stackoverflow. I am also confused whether we have this in java or not. So my question is very precise: What is placement new operator and do we have something like it in java? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7411896]-[1064386964]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I heard about placement new operator of C++. I am confused what it is. However, I can see where it can be used under a question in stackoverflow. I am also confused whether we have this in java or not. So my question is very precise: What is placement new operator and do we have something like it in java? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "precis":1,
                  "question":2,
                  "heard":1,
                  "oper":2,
                  "stackoverflow":1,
                  "placement":2,
                  "confus":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Note please, don't be confused with other questions on stackoverflow: they are not duplicate of this question.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7411896]-[890193602]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Note please, don't be confused with other questions on stackoverflow: they are not duplicate of this question.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":2,
                  "stackoverflow":1,
                  "note":1,
                  "confus":1,
                  "duplic":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7413236,
      "questionId":7411896,
      "comments":[
        
      ],
      "creationDate":"2011-09-14",
      "lastActivityDate":"2011-09-14",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":649665,
        "displayName":"James Kanze",
        "reputation":102729
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The term &quot;placement new&quot; itself is somewhat ambiguous. The term is used in two different ways in the C++ standard, and thus by the C++ community.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7413236]-[-1810010065]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The term &quot;placement new&quot; itself is somewhat ambiguous. The term is used in two different ways in the C++ standard, and thus by the C++ community.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "standard":1,
                    "term":2,
                    "way":1,
                    "placement":1,
                    "quot":2,
                    "ambigu":1,
                    "communiti":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The first meaning refers to <strong>any</strong> overloaded <code>operator new</code> function which has more than one parameter. The additional parameters can be used for just about anything\u2014there are two examples in the standard itself: <code>operator new(size_t, void*)</code> and <code>operator new(size_t, std::nothrow_t const&amp;)</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7413236]-[1748321265]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The first meaning refers to <strong>any</strong> overloaded <code>operator new</code> function which has more than one parameter. The additional parameters can be used for just about anything\u2014there are two examples in the standard itself: <code>operator new(size_t, void*)</code> and <code>operator new(size_t, std::nothrow_t const&amp;)</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"size_t",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"size_t",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"nothrow_t",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "nothrow":1,
                    "size":2,
                    "standard":1,
                    "addit":1,
                    "exampl":1,
                    "overload":1,
                    "mean":1,
                    "std":1,
                    "strong":2,
                    "amp":1,
                    "code":6,
                    "oper":3,
                    "paramet":2,
                    "function":1,
                    "refer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The second meaning refers to the specific overload <code>operator new(size_t, void*)</code>, which is used in fact to explicitly call the constructor of an object on memory obtained from elsewhere: to separate allocation from initialization. (It will be used in classes like <code>std::vector</code>, for example, where <code>capacity()</code> may be greater than <code>size()</code>.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7413236]-[-1486076712]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The second meaning refers to the specific overload <code>operator new(size_t, void*)</code>, which is used in fact to explicitly call the constructor of an object on memory obtained from elsewhere: to separate allocation from initialization. (It will be used in classes like <code>std::vector</code>, for example, where <code>capacity()</code> may be greater than <code>size()</code>.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"size_t",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "size":2,
                    "overload":1,
                    "vector":1,
                    "separ":1,
                    "mean":1,
                    "constructor":1,
                    "std":1,
                    "object":1,
                    "code":8,
                    "oper":1,
                    "fact":1,
                    "specif":1,
                    "refer":1,
                    "capac":1,
                    "class":1,
                    "initi":1,
                    "explicit":1,
                    "greater":1,
                    "call":1,
                    "obtain":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java, memory management is integrated into the language, and is not part of the library, so there can be no equivalents.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7413236]-[-1300586225]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java, memory management is integrated into the language, and is not part of the library, so there can be no equivalents.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "equival":1,
                    "librari":1,
                    "integr":1,
                    "part":1,
                    "manag":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7411991,
      "questionId":7411896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8961411,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@NullUserException: In my opinion a language is not an implementation of a language. Java is a huge implementation and the &quot;language&quot; is defined as &quot;whatever oracle decides it to be&quot;. So it's not me playing Humpty Dumpty, it's Sun first and Oracle later that went down this path. Java(tm) means just that, i.e. nothing except what Oracle wants it to mean at a given time. I see a clear distinction between say C++/Fortran and Java(tm)/MS Access(tm). You're of course free not not see the difference and to call me stupid."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8961411]-[1683789403]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@NullUserException: In my opinion a language is not an implementation of a language. Java is a huge implementation and the &quot;language&quot; is defined as &quot;whatever oracle decides it to be&quot;. So it's not me playing Humpty Dumpty, it's Sun first and Oracle later that went down this path. Java(tm) means just that, i.e. nothing except what Oracle wants it to mean at a given time. I see a clear distinction between say C++/Fortran and Java(tm)/MS Access(tm). You're of course free not not see the difference and to call me stupid."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"NullUserException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "decid":1,
                        "huge":1,
                        "languag":3,
                        "path":1,
                        "clear":1,
                        "play":1,
                        "differ":1,
                        "dumpti":1,
                        "sun":1,
                        "mean":1,
                        "oracl":3,
                        "opinion":1,
                        "distinct":1,
                        "implement":2,
                        "quot":4,
                        "time":1,
                        "stupid":1,
                        "defin":1,
                        "fortran":1,
                        "call":1,
                        "user":1,
                        "humpti":1,
                        "free":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8969390,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":396458,
            "displayName":"NullUserException",
            "reputation":44918
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So what's the difference between Java being what &quot;Oracle decides what it's to be&quot; and C++ being what it is because the &quot;C++ committee decided what it was to be&quot;?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8969390]-[1025773475]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So what's the difference between Java being what &quot;Oracle decides what it's to be&quot; and C++ being what it is because the &quot;C++ committee decided what it was to be&quot;?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "decid":2,
                        "committe":1,
                        "differ":1,
                        "oracl":1,
                        "quot":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8958936,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":726300,
            "displayName":"Luc Danton",
            "reputation":22242
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Languages are not software. That Microsoft Access example is ill-chosen. (Nothing prevents Java from both being a language and some of its implementations being products.)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8958936]-[1829402664]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Languages are not software. That Microsoft Access example is ill-chosen. (Nothing prevents Java from both being a language and some of its implementations being products.)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "languag":2,
                        "prevent":1,
                        "softwar":1,
                        "chosen":1,
                        "implement":1,
                        "ill":1,
                        "microsoft":1,
                        "product":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8972543,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@NullUserException: Many differences in quantity, quality, guidelines. The guidelines part is extremely important, for example oracle will decide for what is the best for oracle (and that will be different from the best for java users, erm, customers). Also I don't think the C++ committee is going to sue google for invalid uses of C++. By the way I've to thank you for some good reading you made me doing about JCP ... I don't really follow Java (I find it ugly) but it's important to keep an eye out on how things are going in general and Java (unfortunately) is still a big part of IT."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8972543]-[465792194]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@NullUserException: Many differences in quantity, quality, guidelines. The guidelines part is extremely important, for example oracle will decide for what is the best for oracle (and that will be different from the best for java users, erm, customers). Also I don't think the C++ committee is going to sue google for invalid uses of C++. By the way I've to thank you for some good reading you made me doing about JCP ... I don't really follow Java (I find it ugly) but it's important to keep an eye out on how things are going in general and Java (unfortunately) is still a big part of IT."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"NullUserException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "eye":1,
                        "read":1,
                        "decid":1,
                        "find":1,
                        "custom":1,
                        "googl":1,
                        "committe":1,
                        "good":1,
                        "big":1,
                        "differ":1,
                        "oracl":2,
                        "thing":1,
                        "sue":1,
                        "jcp":1,
                        "import":2,
                        "general":1,
                        "invalid":1,
                        "extrem":1,
                        "ugli":1,
                        "qualiti":1,
                        "part":2,
                        "made":1,
                        "user":2,
                        "erm":1,
                        "quantiti":1,
                        "guidelin":2,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8956910,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":396458,
            "displayName":"NullUserException",
            "reputation":44918
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"-1 For unnecessary rant."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8956910]-[1883234716]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"-1 For unnecessary rant."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "rant":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8956946,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What rant sorry? I didn't invest time on **that** specific commercial product but I invested time in other commercial products. A language is a language, a product is a product. Java is not a language and recent acquisition by Oracle and patent litigation made this issue 100% clear... what part of this reasoning you think is a &quot;rant&quot;? I'm just saying how things are, if you don't like them it's not my fault."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8956946]-[301183453]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What rant sorry? I didn't invest time on **that** specific commercial product but I invested time in other commercial products. A language is a language, a product is a product. Java is not a language and recent acquisition by Oracle and patent litigation made this issue 100% clear... what part of this reasoning you think is a &quot;rant&quot;? I'm just saying how things are, if you don't like them it's not my fault."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "invest":2,
                        "languag":3,
                        "litig":1,
                        "recent":1,
                        "clear":1,
                        "commerci":2,
                        "rant":2,
                        "oracl":1,
                        "thing":1,
                        "issu":1,
                        "reason":1,
                        "specif":1,
                        "quot":2,
                        "acquisit":1,
                        "time":2,
                        "fault":1,
                        "part":1,
                        "made":1,
                        "patent":1,
                        "product":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8956997,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":396458,
            "displayName":"NullUserException",
            "reputation":44918
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What definition of &quot;programming language&quot; would exclude Java? The comment adds no value to the answer; the only reason it's there is to rile up people. Thus, it's a rant."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8956997]-[-2132948984]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What definition of &quot;programming language&quot; would exclude Java? The comment adds no value to the answer; the only reason it's there is to rile up people. Thus, it's a rant."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "languag":1,
                        "rant":1,
                        "reason":1,
                        "rile":1,
                        "definit":1,
                        "comment":1,
                        "answer":1,
                        "quot":2,
                        "peopl":1,
                        "add":1,
                        "exclud":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957125,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@NullUserException: A language is a specification not in control of a single company. I got myself burnt many years ago when I was in love with TurboPascal, thinking to it as a language. But it wasn't and at the finger snap of a marketdroid it disappeared to be replaced with another product completely different (Delphi). When you use a language someone else cannot decide to destroy all you know and you built. C is a language, LISP is a language, Java is a product, Microsoft Access is a product, C# is a product. Seeing your website is oracle.com I can understand your point of view is different."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8957125]-[-551903948]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@NullUserException: A language is a specification not in control of a single company. I got myself burnt many years ago when I was in love with TurboPascal, thinking to it as a language. But it wasn't and at the finger snap of a marketdroid it disappeared to be replaced with another product completely different (Delphi). When you use a language someone else cannot decide to destroy all you know and you built. C is a language, LISP is a language, Java is a product, Microsoft Access is a product, C# is a product. Seeing your website is oracle.com I can understand your point of view is different."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"NullUserException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"TurboPascal",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "finger":1,
                        "decid":1,
                        "singl":1,
                        "languag":5,
                        "point":1,
                        "built":1,
                        "disappear":1,
                        "websit":1,
                        "marketdroid":1,
                        "understand":1,
                        "oracl":1,
                        "pascal":1,
                        "year":1,
                        "wasn":1,
                        "turbo":1,
                        "replac":1,
                        "destroy":1,
                        "think":1,
                        "love":1,
                        "ago":1,
                        "specif":1,
                        "control":1,
                        "lisp":1,
                        "delphi":1,
                        "complet":1,
                        "microsoft":1,
                        "compani":1,
                        "snap":1,
                        "user":1,
                        "burnt":1,
                        "product":4,
                        "access":1,
                        "view":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"TurboPascal",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957149,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I agree the parenthesized expression was unnecessary tho. Fixed."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8957149]-[356324316]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I agree the parenthesized expression was unnecessary tho. Fixed."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "parenthes":1,
                        "fix":1,
                        "express":1,
                        "agre":1,
                        "tho":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957182,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":7,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":734069,
            "displayName":"Nicol Bolas",
            "reputation":144536
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@6502: Why does a &quot;language&quot; have to not be in the control of a company to be a &quot;language&quot;? I can understand you not _liking_ a language that's not more open. But saying that a language under the control of a company isn't a &quot;language&quot; is like saying that software isn't &quot;software&quot; unless it's open-source. It's trying to appropriate a word to mean what you want it to mean rather than the accepted definition."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8957182]-[872104830]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@6502: Why does a &quot;language&quot; have to not be in the control of a company to be a &quot;language&quot;? I can understand you not _liking_ a language that's not more open. But saying that a language under the control of a company isn't a &quot;language&quot; is like saying that software isn't &quot;software&quot; unless it's open-source. It's trying to appropriate a word to mean what you want it to mean rather than the accepted definition."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_liking_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "languag":5,
                        "accept":1,
                        "understand":1,
                        "softwar":2,
                        "open":2,
                        "definit":1,
                        "isn":2,
                        "quot":8,
                        "control":2,
                        "compani":2,
                        "word":1,
                        "sourc":1,
                        "like":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957404,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Nicol Bolas: IMO a &quot;language&quot; is program/product/company agnostic. I'm **not** an open source fanatic... actually the reason I didn't pick up Java was not because Java was closed, but because it was dead ugly. But for example at that time I loved PowerBuilder (a **product** from Powersoft). As an additional point (but it's an extra) I prefer if possible building things knowing that no one can claim my bricks back. Any software that includes a programming capability is for you a language? Feel free to call Microsoft Access a language... I think it's a product."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8957404]-[-1135868651]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Nicol Bolas: IMO a &quot;language&quot; is program/product/company agnostic. I'm **not** an open source fanatic... actually the reason I didn't pick up Java was not because Java was closed, but because it was dead ugly. But for example at that time I loved PowerBuilder (a **product** from Powersoft). As an additional point (but it's an extra) I prefer if possible building things knowing that no one can claim my bricks back. Any software that includes a programming capability is for you a language? Feel free to call Microsoft Access a language... I think it's a product."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Nicol",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"PowerBuilder",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":2,
                        "feel":1,
                        "languag":3,
                        "point":1,
                        "claim":1,
                        "imo":1,
                        "addit":1,
                        "capabl":1,
                        "dead":1,
                        "brick":1,
                        "softwar":1,
                        "build":1,
                        "thing":1,
                        "builder":1,
                        "reason":1,
                        "open":1,
                        "agnost":1,
                        "includ":1,
                        "know":1,
                        "powersoft":1,
                        "fanat":1,
                        "pick":1,
                        "love":1,
                        "back":1,
                        "nicol":1,
                        "extra":1,
                        "ugli":1,
                        "quot":2,
                        "time":1,
                        "power":1,
                        "microsoft":1,
                        "bola":1,
                        "close":1,
                        "compani":1,
                        "call":1,
                        "sourc":1,
                        "free":1,
                        "prefer":1,
                        "product":3,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"PowerBuilder",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957616,
          "postId":7411991,
          "creationDate":"2011-09-14",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":396458,
            "displayName":"NullUserException",
            "reputation":44918
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You are of course free to make up your own definitions for words. But in doing that, aren't you defeating the purpose of language (natural language)? Are there other people who claim Java isn't a language? I mean, nothing stops me from saying dogs are plants. It's just that most people will think I am stupid."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7411991-cu8957616]-[976961624]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You are of course free to make up your own definitions for words. But in doing that, aren't you defeating the purpose of language (natural language)? Are there other people who claim Java isn't a language? I mean, nothing stops me from saying dogs are plants. It's just that most people will think I am stupid."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "plant":1,
                        "languag":3,
                        "natur":1,
                        "claim":1,
                        "aren":1,
                        "dog":1,
                        "stop":1,
                        "definit":1,
                        "defeat":1,
                        "isn":1,
                        "make":1,
                        "stupid":1,
                        "peopl":2,
                        "word":1,
                        "purpos":1,
                        "free":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-09-14",
      "lastActivityDate":"2011-09-14",
      "lastEditDate":"2011-09-14",
      "score":-1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":320726,
        "displayName":"6502",
        "reputation":50057
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Placement new allows to specify custom allocators that take extra parameters.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7411991]-[-576877063]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Placement new allows to specify custom allocators that take extra parameters.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "custom":1,
                    "placement":1,
                    "paramet":1,
                    "extra":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is also a predefined placement allocator that takes as extra parameter a pointer and that just returns as result of allocation that pointer, basically allowing your code to create objects at the address you specify.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7411991]-[-486212630]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is also a predefined placement allocator that takes as extra parameter a pointer and that just returns as result of allocation that pointer, basically allowing your code to create objects at the address you specify.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":2,
                    "pointer":2,
                    "return":1,
                    "result":1,
                    "predefin":1,
                    "object":1,
                    "code":1,
                    "placement":1,
                    "paramet":1,
                    "take":1,
                    "allow":1,
                    "address":1,
                    "extra":1,
                    "basic":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can however define other types of allocators that take other parameters, for example our debug allocator takes as extra parameters the filename and the line on which the allocation is performed. Storing this extra information with the allocated object allows us to track back to the source code where has been created a certain object instance that for example got leaked or overwritten or used after deallocation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7411991]-[2045737728]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can however define other types of allocators that take other parameters, for example our debug allocator takes as extra parameters the filename and the line on which the allocation is performed. Storing this extra information with the allocated object allows us to track back to the source code where has been created a certain object instance that for example got leaked or overwritten or used after deallocation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":4,
                    "filenam":1,
                    "line":1,
                    "track":1,
                    "leak":1,
                    "store":1,
                    "object":2,
                    "debug":1,
                    "code":1,
                    "paramet":2,
                    "inform":1,
                    "take":1,
                    "back":1,
                    "perform":1,
                    "dealloc":1,
                    "extra":2,
                    "overwritten":1,
                    "defin":1,
                    "type":1,
                    "creat":1,
                    "sourc":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>AFAIK Java works at an higher conceptual level and has no pointer concept (only the null pointer exception ;-) ). Memory is just a black magic box and the programmer never use the idea of memory address.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7411991]-[-205371921]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>AFAIK Java works at an higher conceptual level and has no pointer concept (only the null pointer exception ;-) ). Memory is just a black magic box and the programmer never use the idea of memory address.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":2,
                    "higher":1,
                    "idea":1,
                    "afaik":1,
                    "work":1,
                    "black":1,
                    "programm":1,
                    "address":1,
                    "concept":1,
                    "box":1,
                    "magic":1,
                    "conceptu":1,
                    "level":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I only knew Java 1.1 and back then decided to not invest time on that commercial product so may be the logical level of Java lowered enough today to reach the random access memory concept.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7411991]-[-1624754814]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I only knew Java 1.1 and back then decided to not invest time on that commercial product so may be the logical level of Java lowered enough today to reach the random access memory concept.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "decid":1,
                    "invest":1,
                    "reach":1,
                    "random":1,
                    "commerci":1,
                    "lower":1,
                    "knew":1,
                    "logic":1,
                    "back":1,
                    "concept":1,
                    "time":1,
                    "today":1,
                    "product":1,
                    "access":1,
                    "level":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7412026,
      "questionId":7411896,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8963844,
          "postId":7412026,
          "creationDate":"2011-09-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":478399,
            "displayName":"AlexR",
            "reputation":68143
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"OK, @amod0017, the lowest level of memory management existing in Java is class sun.misc.Unsafe. Try to read about it. Probably it may help you. It is almost like malloc in C"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7412026-cu8963844]-[2061699982]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"OK, @amod0017, the lowest level of memory management existing in Java is class sun.misc.Unsafe. Try to read about it. Probably it may help you. It is almost like malloc in C"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "lowest":1,
                        "exist":1,
                        "malloc":1,
                        "sun":1,
                        "amod":1,
                        "misc":1,
                        "unsaf":1,
                        "manag":1,
                        "level":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8958563,
          "postId":7412026,
          "creationDate":"2011-09-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":789214,
            "displayName":"amod0017",
            "reputation":1247
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@AlexR- in placement new operator we fix the position in the memory in the newly created object. Can provide me any way by which i can do that???"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7412026-cu8958563]-[-1286260847]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@AlexR- in placement new operator we fix the position in the memory in the newly created object. Can provide me any way by which i can do that???"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"AlexR",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "fix":1,
                        "object":1,
                        "oper":1,
                        "newli":1,
                        "placement":1,
                        "posit":1,
                        "alex":1,
                        "creat":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8957516,
          "postId":7412026,
          "creationDate":"2011-09-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":320726,
            "displayName":"6502",
            "reputation":50057
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"C++ placement allocators works at the **raw memory** level. What you provide as &quot;alternatives&quot; are constructions at a much higher logical level. Like you said placement allocators are &quot;irrilevant&quot; in Java because in Java there is no raw memory concept."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7412026-cu8957516]-[-630462076]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"C++ placement allocators works at the **raw memory** level. What you provide as &quot;alternatives&quot; are constructions at a much higher logical level. Like you said placement allocators are &quot;irrilevant&quot; in Java because in Java there is no raw memory concept."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "alloc":2,
                        "higher":1,
                        "altern":1,
                        "work":1,
                        "logic":1,
                        "placement":2,
                        "raw":2,
                        "concept":1,
                        "quot":4,
                        "construct":1,
                        "irrilev":1,
                        "level":2,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9025339,
          "postId":7412026,
          "creationDate":"2011-09-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":789214,
            "displayName":"amod0017",
            "reputation":1247
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@AlexR thanks for the help."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7412026-cu9025339]-[-1446107140]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@AlexR thanks for the help."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"AlexR",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alex":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-09-14",
      "lastActivityDate":"2011-09-14",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":478399,
        "displayName":"AlexR",
        "reputation":68143
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The following article explains the meaning of placement new in C++: <a href=\"http://www.glenmccl.com/nd_cmp.htm\"rel=\"nofollow\">http://www.glenmccl.com/nd_cmp.htm</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7412026]-[-103955612]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The following article explains the meaning of placement new in C++: <a href=\"http://www.glenmccl.com/nd_cmp.htm\"rel=\"nofollow\">http://www.glenmccl.com/nd_cmp.htm</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IdentifierNode",
                    "name":"nd_cmp",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "htm":2,
                    "cmp":2,
                    "explain":1,
                    "rel":1,
                    "mean":1,
                    "articl":1,
                    "glenmccl":2,
                    "placement":1,
                    "nofollow":1,
                    "href":1,
                    "http":2,
                    "www":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This term itself is relevant for overloaded <code>new</code> statement. Since Java does not allow to overload operators at all and specifically new operator the placement new is irrelevant for Java. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7412026]-[170914118]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This term itself is relevant for overloaded <code>new</code> statement. Since Java does not allow to overload operators at all and specifically new operator the placement new is irrelevant for Java. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "overload":2,
                    "term":1,
                    "relev":1,
                    "statement":1,
                    "code":2,
                    "oper":2,
                    "placement":1,
                    "specif":1,
                    "irrelev":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But you have several alternatives. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7412026]-[1949873899]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But you have several alternatives. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "altern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Using factory or builder pattern</li> \n <li>Using wrapper/decorator pattern (probably together with factory) that allows changin some class functionality by wrapping its methods. </li> \n <li>Aspect oriented programming. It works almost like decorator pattern but can be implemented using byte code modifiction.</li> \n <li>Class loader interception</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7412026]-[-1771387944]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Using factory or builder pattern</li> \n <li>Using wrapper/decorator pattern (probably together with factory) that allows changin some class functionality by wrapping its methods. </li> \n <li>Aspect oriented programming. It works almost like decorator pattern but can be implemented using byte code modifiction.</li> \n <li>Class loader interception</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"functionality",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "method":1,
                    "intercept":1,
                    "pattern":3,
                    "loader":1,
                    "aspect":1,
                    "builder":1,
                    "work":1,
                    "factori":2,
                    "modifict":1,
                    "code":1,
                    "wrap":1,
                    "decor":2,
                    "function":1,
                    "wrapper":1,
                    "implement":1,
                    "orient":1,
                    "changin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}