{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8956279,
    "title":"Language detection with data in PostgreSQL",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":11239049,
        "postId":8956279,
        "creationDate":"2012-01-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":540341,
          "displayName":"filiprem",
          "reputation":1837
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Can you add information about operating system and postgres version?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8956279-cu11239049]-[11277386]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Can you add information about operating system and postgres version?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "system":1,
                      "postgr":1,
                      "oper":1,
                      "version":1,
                      "inform":1,
                      "add":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11392057,
        "postId":8956279,
        "creationDate":"2012-01-31",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1037609,
          "displayName":"Balaswamy Vaddeman",
          "reputation":3137
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"u may try antlr"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8956279-cu11392057]-[1554045346]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"u may try antlr"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "antlr":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":11356636,
        "postId":8956279,
        "creationDate":"2012-01-29",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":586927,
          "displayName":"Rguy",
          "reputation":1006
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This thread is a related R-solution, which uses GoogleTranslate to translate a given web page. You may be able to somehow solve your problem similarly by submitting individual words, and mining out GoogleTranslate's language detection. http://stackoverflow.com/questions/4258171/in-r-how-to-parse-specific-frame-within-a-webpage"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8956279-cu11356636]-[2026123456]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This thread is a related R-solution, which uses GoogleTranslate to translate a given web page. You may be able to somehow solve your problem similarly by submitting individual words, and mining out GoogleTranslate's language detection. http://stackoverflow.com/questions/4258171/in-r-how-to-parse-specific-frame-within-a-webpage"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"GoogleTranslate",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"GoogleTranslate",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "question":1,
                      "languag":1,
                      "googl":2,
                      "relat":1,
                      "mine":1,
                      "similar":1,
                      "detect":1,
                      "problem":1,
                      "page":1,
                      "individu":1,
                      "submit":1,
                      "frame":1,
                      "web":1,
                      "stackoverflow":1,
                      "thread":1,
                      "pars":1,
                      "translat":3,
                      "specif":1,
                      "http":1,
                      "word":1,
                      "solut":1,
                      "webpag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"GoogleTranslate",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "r",
      "postgresql",
      "language-agnostic",
      "language-detection"
    ],
    "creationDate":"2012-01-21",
    "lastActivityDate":"2013-01-21",
    "lastEditDate":"2012-01-29",
    "score":7,
    "viewCount":904,
    "owner":{
      "type":"StackOverflowUser",
      "id":734984,
      "displayName":"Renato Dinhani Conceição",
      "reputation":4822
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a table in PostgreSQL where a column is a text. I need a library or tool that can identify the language of each text for a test purpose.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[-867027117]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a table in PostgreSQL where a column is a text. I need a library or tool that can identify the language of each text for a test purpose.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sql":1,
                  "test":1,
                  "languag":1,
                  "tool":1,
                  "postgr":1,
                  "text":2,
                  "librari":1,
                  "tabl":1,
                  "identifi":1,
                  "column":1,
                  "purpos":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There is no need for a PostgreSQL code because I'm having problems to install languages, but any language that can connect to the database, retrieve the texts and identify it arewelcome.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[1481877546]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There is no need for a PostgreSQL code because I'm having problems to install languages, but any language that can connect to the database, retrieve the texts and identify it arewelcome.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sql":1,
                  "languag":2,
                  "connect":1,
                  "retriev":1,
                  "problem":1,
                  "postgr":1,
                  "text":1,
                  "code":1,
                  "instal":1,
                  "arewelcom":1,
                  "identifi":1,
                  "databas":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I used <code>Lingua::Identify</code> suggested in the answers right in the Perl script, it worked, but the results are not precise.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[406476611]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I used <code>Lingua::Identify</code> suggested in the answers right in the Perl script, it worked, but the results are not precise.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "precis":1,
                  "suggest":1,
                  "result":1,
                  "perl":1,
                  "work":1,
                  "code":2,
                  "identifi":1,
                  "answer":1,
                  "script":1,
                  "lingua":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The texts I want to identify comes from the web and most are in portuguese, but <code>Lingua::Identify</code> is classifying much as french, italian and spanish that are similar languages.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[1185398219]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The texts I want to identify comes from the web and most are in portuguese, but <code>Lingua::Identify</code> is classifying much as french, italian and spanish that are similar languages.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "classifi":1,
                  "languag":1,
                  "french":1,
                  "similar":1,
                  "spanish":1,
                  "text":1,
                  "code":2,
                  "web":1,
                  "identifi":2,
                  "italian":1,
                  "lingua":1,
                  "portugues":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need something more precise.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[-517179920]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need something more precise.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "precis":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I added the <code>java</code> and <code>r</code> tags because are the languages I'm using in the system and solution using they will be easy to implement, but solutions in any language are welcome.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8956279]-[-134654126]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I added the <code>java</code> and <code>r</code> tags because are the languages I'm using in the system and solution using they will be easy to implement, but solutions in any language are welcome.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "languag":2,
                  "easi":1,
                  "system":1,
                  "tag":1,
                  "code":4,
                  "implement":1,
                  "ad":1,
                  "solut":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":9038366,
      "questionId":8956279,
      "comments":[
        
      ],
      "creationDate":"2012-01-27",
      "lastActivityDate":"2012-01-27",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":663957,
        "displayName":"LiKao",
        "reputation":5099
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The problem with language detection is, that it will never be fully precise. My browser quite often misidentifies the language, and it was done by google who probably put a lot of great minds to that tasks.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[-1601268006]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The problem with language detection is, that it will never be fully precise. My browser quite often misidentifies the language, and it was done by google who probably put a lot of great minds to that tasks.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "precis":1,
                    "languag":2,
                    "task":1,
                    "googl":1,
                    "detect":1,
                    "browser":1,
                    "problem":1,
                    "misidentifi":1,
                    "mind":1,
                    "fulli":1,
                    "lot":1,
                    "put":1,
                    "great":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However here are some points to consider:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[1357573006]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However here are some points to consider:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I am not sure what Perls <code>Lingua::Identify</code> module really is using, but most often these tasks are handled by Naive Baysian models as somebody pointed out in another answer. Baysian models use probability to classify into a number of categories, in your case these would be different language. Now these probabilities are both dependend probablities, i.e. how often a certain feature appears for each category, as well as independent (prior) probabilities, i.e. how often each category appears in total.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[-612647713]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I am not sure what Perls <code>Lingua::Identify</code> module really is using, but most often these tasks are handled by Naive Baysian models as somebody pointed out in another answer. Baysian models use probability to classify into a number of categories, in your case these would be different language. Now these probabilities are both dependend probablities, i.e. how often a certain feature appears for each category, as well as independent (prior) probabilities, i.e. how often each category appears in total.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "naiv":1,
                    "number":1,
                    "classifi":1,
                    "languag":1,
                    "point":1,
                    "task":1,
                    "prior":1,
                    "model":2,
                    "appear":2,
                    "perl":1,
                    "total":1,
                    "categori":3,
                    "dependend":1,
                    "code":2,
                    "independ":1,
                    "modul":1,
                    "baysian":2,
                    "identifi":1,
                    "answer":1,
                    "featur":1,
                    "lingua":1,
                    "probabl":4,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Because both these informations are used, you are very likely to get a low prediction quality when the priors are wrong. I guess <code>Linua::Identify</code> has mostly been trained by a corpus of online document, so the highest prior will most likely be english. What this means, that <code>Lingua::Identify</code> will most likely classify your documents as english, unless it has severe reasons to believe otherwise (In your case it most likely does have severe reason, because you say your documents are misclassified as italian, french and spanish).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[-1778894103]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Because both these informations are used, you are very likely to get a low prediction quality when the priors are wrong. I guess <code>Linua::Identify</code> has mostly been trained by a corpus of online document, so the highest prior will most likely be english. What this means, that <code>Lingua::Identify</code> will most likely classify your documents as english, unless it has severe reasons to believe otherwise (In your case it most likely does have severe reason, because you say your documents are misclassified as italian, french and spanish).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "classifi":1,
                    "corpus":1,
                    "french":1,
                    "prior":2,
                    "wrong":1,
                    "spanish":1,
                    "linua":1,
                    "document":3,
                    "onlin":1,
                    "misclassifi":1,
                    "mean":1,
                    "english":2,
                    "reason":2,
                    "code":4,
                    "low":1,
                    "sever":2,
                    "highest":1,
                    "inform":1,
                    "identifi":2,
                    "qualiti":1,
                    "train":1,
                    "italian":1,
                    "predict":1,
                    "lingua":1,
                    "guess":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This means you should try to re-train your model, if possible. There might be some methods within <code>Lingua::Identify</code> to help you with this. If not, I would suggest you write your own Naive Bayes classifier (it's quite simple actually).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[-1250298942]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This means you should try to re-train your model, if possible. There might be some methods within <code>Lingua::Identify</code> to help you with this. If not, I would suggest you write your own Naive Bayes classifier (it's quite simple actually).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "naiv":1,
                    "classifi":1,
                    "method":1,
                    "bay":1,
                    "simpl":1,
                    "model":1,
                    "suggest":1,
                    "mean":1,
                    "code":2,
                    "identifi":1,
                    "train":1,
                    "lingua":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In case you have a Naive Bayes Classifier, you have to decide on a set of features. Most often the frequencies of letters are very characteristic for each language, so this would be a first guess. Just try to train your classifier on these frequencies first. Naive Bayes Classifier are used in spam-filters, so you can train it like one of those. Have it run on a sample set, and whenever you get a misclassification, update the classifier to the correct classification. After a while it will get less and less wrong.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[934605705]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In case you have a Naive Bayes Classifier, you have to decide on a set of features. Most often the frequencies of letters are very characteristic for each language, so this would be a first guess. Just try to train your classifier on these frequencies first. Naive Bayes Classifier are used in spam-filters, so you can train it like one of those. Have it run on a sample set, and whenever you get a misclassification, update the classifier to the correct classification. After a while it will get less and less wrong.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "naiv":2,
                    "decid":1,
                    "classifi":4,
                    "languag":1,
                    "bay":2,
                    "wrong":1,
                    "classif":1,
                    "characterist":1,
                    "sampl":1,
                    "correct":1,
                    "run":1,
                    "set":2,
                    "updat":1,
                    "letter":1,
                    "filter":1,
                    "misclassif":1,
                    "train":2,
                    "featur":1,
                    "guess":1,
                    "spam":1,
                    "frequenc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In case single letter frequency does not give you well enough results, you could try using n-grams instead (however be aware of the combinatorial explosion this will introduce). I would not suggest ever trying anything more than 3-grams. In case this still does not give you good results, try manually identifying unique frequent words in each language and add those to your feature set. I am sure once you start experimenting on this you will get more ideas for features to try out.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[303290711]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In case single letter frequency does not give you well enough results, you could try using n-grams instead (however be aware of the combinatorial explosion this will introduce). I would not suggest ever trying anything more than 3-grams. In case this still does not give you good results, try manually identifying unique frequent words in each language and add those to your feature set. I am sure once you start experimenting on this you will get more ideas for features to try out.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "gram":2,
                    "languag":1,
                    "uniqu":1,
                    "good":1,
                    "suggest":1,
                    "result":2,
                    "set":1,
                    "introduc":1,
                    "idea":1,
                    "experi":1,
                    "letter":1,
                    "awar":1,
                    "explos":1,
                    "combinatori":1,
                    "give":2,
                    "identifi":1,
                    "featur":2,
                    "start":1,
                    "manual":1,
                    "word":1,
                    "add":1,
                    "frequent":1,
                    "frequenc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Another nice thing about the approach using Bayesian Classifiers, is that you can always add new information in case more documents come in, which do not match the trained data. In this case you can just reclassify a few of the new documents and similar to a spam filter the classifier will adapt to the changing environment.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9038366]-[-1832665547]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Another nice thing about the approach using Bayesian Classifiers, is that you can always add new information in case more documents come in, which do not match the trained data. In this case you can just reclassify a few of the new documents and similar to a spam filter the classifier will adapt to the changing environment.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "adapt":1,
                    "chang":1,
                    "classifi":2,
                    "similar":1,
                    "document":2,
                    "data":1,
                    "thing":1,
                    "nice":1,
                    "match":1,
                    "filter":1,
                    "inform":1,
                    "approach":1,
                    "bayesian":1,
                    "train":1,
                    "environ":1,
                    "spam":1,
                    "add":1,
                    "reclassifi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8956384,
      "questionId":8956279,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11372754,
          "postId":8956384,
          "creationDate":"2012-01-30",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1167210,
            "displayName":"Marcelo",
            "reputation":2773
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Indeed, if you create your own classifiers and train them with your own data you might get a very precise result. Might take you some time to train the algorithm, though."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8956384-cu11372754]-[1998633101]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Indeed, if you create your own classifiers and train them with your own data you might get a very precise result. Might take you some time to train the algorithm, though."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":1,
                        "classifi":1,
                        "data":1,
                        "result":1,
                        "algorithm":1,
                        "train":2,
                        "time":1,
                        "creat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-21",
      "lastActivityDate":"2012-01-21",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":346980,
        "displayName":"Savino Sguera",
        "reputation":2587
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://nlp.stanford.edu/IR-book/html/htmledition/text-classification-and-naive-bayes-1.html\"rel=\"nofollow\">Naive Bayes classifiers</a> are very good at <a href=\"https://en.wikipedia.org/wiki/Language_identification\"rel=\"nofollow\">language identification</a>. You find implementations in all the major languages, or you can implement one yourself, it's not extremely hard. The wikipedia entry is interesting too: <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\"rel=\"nofollow\">https://en.wikipedia.org/wiki/Naive_Bayes_classifier</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8956384]-[-1389139037]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://nlp.stanford.edu/IR-book/html/htmledition/text-classification-and-naive-bayes-1.html\"rel=\"nofollow\">Naive Bayes classifiers</a> are very good at <a href=\"https://en.wikipedia.org/wiki/Language_identification\"rel=\"nofollow\">language identification</a>. You find implementations in all the major languages, or you can implement one yourself, it's not extremely hard. The wikipedia entry is interesting too: <a href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\"rel=\"nofollow\">https://en.wikipedia.org/wiki/Naive_Bayes_classifier</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_Bayes_classifier",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "naiv":4,
                    "find":1,
                    "classifi":3,
                    "nlp":1,
                    "languag":3,
                    "bay":4,
                    "hard":1,
                    "classif":1,
                    "good":1,
                    "book":1,
                    "identif":2,
                    "rel":3,
                    "text":1,
                    "https":3,
                    "entri":1,
                    "wikipedia":4,
                    "nofollow":3,
                    "interest":1,
                    "extrem":1,
                    "implement":2,
                    "wiki":3,
                    "org":3,
                    "html":2,
                    "href":3,
                    "http":1,
                    "major":1,
                    "htmledit":1,
                    "stanford":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9047752,
      "questionId":8956279,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11355728,
          "postId":9047752,
          "creationDate":"2012-01-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":734984,
            "displayName":"Renato Dinhani Conceição",
            "reputation":4822
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The library for Java gave me good results."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9047752-cu11355728]-[-1353059913]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The library for Java gave me good results."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "result":1,
                        "librari":1,
                        "gave":1,
                        "good":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11357093,
          "postId":9047752,
          "creationDate":"2012-01-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":539121,
            "displayName":"Gaurav",
            "reputation":337
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Great! And of course you can use either [PL/Java](http://pljava.projects.postgresql.org/) or a [JDBC driver](http://jdbc.postgresql.org/) for your purpose. All the best!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9047752-cu11357093]-[-1800235032]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Great! And of course you can use either [PL/Java](http://pljava.projects.postgresql.org/) or a [JDBC driver](http://jdbc.postgresql.org/) for your purpose. All the best!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pljava":1,
                        "project":1,
                        "jdbc":2,
                        "postgresql":2,
                        "driver":1,
                        "org":2,
                        "http":2,
                        "purpos":1,
                        "great":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-28",
      "lastActivityDate":"2012-01-28",
      "score":5,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":539121,
        "displayName":"Gaurav",
        "reputation":337
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Try these:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9047752]-[1232068679]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Try these:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://code.google.com/p/language-detection/\">http://code.google.com/p/language-detection/</a> (Java)</li> \n <li><a href=\"http://code.google.com/p/chromium-compact-language-detector/\">http://code.google.com/p/chromium-compact-language-detector/</a> (C++/Python)</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9047752]-[-1122302329]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://code.google.com/p/language-detection/\">http://code.google.com/p/language-detection/</a> (Java)</li> \n <li><a href=\"http://code.google.com/p/chromium-compact-language-detector/\">http://code.google.com/p/chromium-compact-language-detector/</a> (C++/Python)</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":4,
                    "googl":4,
                    "detect":2,
                    "detector":2,
                    "code":4,
                    "python":1,
                    "href":2,
                    "http":4,
                    "chromium":2,
                    "compact":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This <a href=\"http://blog.mikemccandless.com/2011/10/accuracy-and-performance-of-googles.html\">blog post</a> shares some tests to compare the 2 libraries (along with a 3rd - the Language Identification module of Apache Tika, which really is a complete toolkit for Text Analysis).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9047752]-[1405596683]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This <a href=\"http://blog.mikemccandless.com/2011/10/accuracy-and-performance-of-googles.html\">blog post</a> shares some tests to compare the 2 libraries (along with a 3rd - the Language Identification module of Apache Tika, which really is a complete toolkit for Text Analysis).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "post":1,
                    "test":1,
                    "languag":1,
                    "apach":1,
                    "googl":1,
                    "identif":1,
                    "tika":1,
                    "text":1,
                    "librari":1,
                    "share":1,
                    "accuraci":1,
                    "blog":2,
                    "modul":1,
                    "compar":1,
                    "perform":1,
                    "complet":1,
                    "mikemccandless":1,
                    "html":1,
                    "analysi":1,
                    "href":1,
                    "toolkit":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":8957303,
      "questionId":8956279,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":11230230,
          "postId":8957303,
          "creationDate":"2012-01-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":734984,
            "displayName":"Renato Dinhani Conceição",
            "reputation":4822
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"How install PL/Perl in PostgreSQL in Windows? I think this function will work."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8957303-cu11230230]-[-1291919865]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"How install PL/Perl in PostgreSQL in Windows? I think this function will work."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sql":1,
                        "window":1,
                        "postgr":1,
                        "perl":1,
                        "work":1,
                        "instal":1,
                        "function":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11235704,
          "postId":8957303,
          "creationDate":"2012-01-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":540341,
            "displayName":"filiprem",
            "reputation":1837
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"which version of postgres, and which Windows?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8957303-cu11235704]-[-1974210797]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"which version of postgres, and which Windows?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "window":1,
                        "postgr":1,
                        "version":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11252392,
          "postId":8957303,
          "creationDate":"2012-01-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":734984,
            "displayName":"Renato Dinhani Conceição",
            "reputation":4822
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Windows XP / PostgreSQL 9.1"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8957303-cu11252392]-[-1832393748]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Windows XP / PostgreSQL 9.1"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "postgr":1,
                        "window":1,
                        "sql":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":11259546,
          "postId":8957303,
          "creationDate":"2012-01-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":734984,
            "displayName":"Renato Dinhani Conceição",
            "reputation":4822
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I used your solution right in Perl, worked, but the detection is not so good, much results are wrong. I opened a bounty to discover another library in the hope the results are better. Thank you for your help."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8957303-cu11259546]-[1596699778]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I used your solution right in Perl, worked, but the detection is not so good, much results are wrong. I opened a bounty to discover another library in the hope the results are better. Thank you for your help."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wrong":1,
                        "good":1,
                        "detect":1,
                        "result":2,
                        "librari":1,
                        "perl":1,
                        "bounti":1,
                        "open":1,
                        "work":1,
                        "hope":1,
                        "discov":1,
                        "solut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-01-21",
      "lastActivityDate":"2012-01-27",
      "lastEditDate":"2012-01-27",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":540341,
        "displayName":"filiprem",
        "reputation":1837
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can use <a href=\"http://www.postgresql.org/docs/current/static/plperl.html\"rel=\"nofollow\">PL/Perl</a> (<a href=\"http://www.postgresql.org/docs/current/static/sql-createfunction.html\"rel=\"nofollow\"><code>CREATE FUNCTION</code></a> <code>langof(text) LANGUAGE</code><a href=\"http://www.postgresql.org/docs/current/static/plperl-trusted.html\"rel=\"nofollow\"><code>plperlu</code></a><code>AS ...</code>) with <a href=\"http://search.cpan.org/perldoc?Lingua%3a%3aIdentify\"rel=\"nofollow\">Lingua::Identify</a> CPAN module.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[777245471]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can use <a href=\"http://www.postgresql.org/docs/current/static/plperl.html\"rel=\"nofollow\">PL/Perl</a> (<a href=\"http://www.postgresql.org/docs/current/static/sql-createfunction.html\"rel=\"nofollow\"><code>CREATE FUNCTION</code></a> <code>langof(text) LANGUAGE</code><a href=\"http://www.postgresql.org/docs/current/static/plperl-trusted.html\"rel=\"nofollow\"><code>plperlu</code></a><code>AS ...</code>) with <a href=\"http://search.cpan.org/perldoc?Lingua%3a%3aIdentify\"rel=\"nofollow\">Lingua::Identify</a> CPAN module.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cpan":2,
                    "sql":1,
                    "plperl":2,
                    "languag":1,
                    "trust":1,
                    "rel":4,
                    "perldoc":1,
                    "text":1,
                    "perl":1,
                    "doc":3,
                    "postgresql":3,
                    "langof":1,
                    "code":8,
                    "nofollow":4,
                    "createfunct":1,
                    "modul":1,
                    "function":1,
                    "identifi":2,
                    "lingua":2,
                    "org":4,
                    "html":3,
                    "href":4,
                    "current":3,
                    "http":4,
                    "creat":1,
                    "plperlu":1,
                    "www":3,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Perl script:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[-1019454135]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Perl script:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "script":1,
                    "perl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"#!/usr/bin/perl use Lingua::Identify qw(langof); undef $/; my $textstring = &lt;&gt;; ## warning - slurps whole file to memory my $a = langof( $textstring ); # gives the most probable language print &quot;$a\\n&quot;; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8957303]-[-534643966]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"#!/usr/bin/perl use Lingua::Identify "
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"qw",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"langof",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"undef $/; my $textstring = <>; ## warning - slurps whole file to memory my "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"$a",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"langof",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"$textstring",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"# gives the most probable language print \"$a\\n\"; "
                  }
                ]
              },
              "rawText":"#!/usr/bin/perl use Lingua::Identify qw(langof); undef $/; my $textstring = <>; ## warning - slurps whole file to memory my $a = langof( $textstring ); # gives the most probable language print \"$a\\n\"; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "textstr":2,
                    "warn":1,
                    "slurp":1,
                    "print":1,
                    "perl":1,
                    "langof":2,
                    "usr":1,
                    "identifi":1,
                    "file":1,
                    "bin":1,
                    "lingua":1,
                    "probabl":1,
                    "undef":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"qw",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"langof",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"langof",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"$textstring",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And the function:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[359138945]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And the function:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "function":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"create or replace function langof( text ) returns varchar(2) immutable returns null on null input language plperlu as $perlcode$ use Lingua::Identify qw(langof); return langof( shift ); $perlcode$; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8957303]-[155030709]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"create or replace function langof( text ) returns varchar(2) immutable returns null on null input language plperlu as $perlcode$ use Lingua::Identify "
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"qw",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"langof",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReturnStatementNode",
                    "expression":{
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"langof",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"shift",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"$perlcode$; "
                  }
                ]
              },
              "rawText":"create or replace function langof( text ) returns varchar(2) immutable returns null on null input language plperlu as $perlcode$ use Lingua::Identify qw(langof); return langof( shift ); $perlcode$; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "perlcod":2,
                    "languag":1,
                    "return":2,
                    "shift":1,
                    "immut":1,
                    "text":1,
                    "langof":3,
                    "replac":1,
                    "function":1,
                    "identifi":1,
                    "varchar":1,
                    "lingua":1,
                    "creat":1,
                    "input":1,
                    "plperlu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"qw",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"langof",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"langof",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"shift",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Works for me:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[361034564]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Works for me:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "work":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"filip@filip=# select langof('P&oacute;jdź, kiń-że tę chmurność w głąb flaszy'); langof -------- pl (1 row) Time: 1.801 ms "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8957303]-[613887371]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"filip@filip=# select langof('Pójdź, kiń-że tę chmurność w głąb flaszy'); langof -------- pl (1 row) Time: 1.801 ms "
                  }
                ]
              },
              "rawText":"filip@filip=# select langof('Pójdź, kiń-że tę chmurność w głąb flaszy'); langof -------- pl (1 row) Time: 1.801 ms ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "filip":2,
                    "chmurność":1,
                    "kiń":1,
                    "row":1,
                    "głąb":1,
                    "langof":2,
                    "select":1,
                    "pójdź":1,
                    "flaszi":1,
                    "time":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>PL/Perl on Windows</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[-1868950103]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>PL/Perl on Windows</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "window":1,
                    "perl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>PL/Perl language libary (plperl.dll) comes preinstalled in latest Windows installer of postgres.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[1678988629]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>PL/Perl language libary (plperl.dll) comes preinstalled in latest Windows installer of postgres.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "plperl":1,
                    "window":1,
                    "languag":1,
                    "postgr":1,
                    "perl":1,
                    "instal":1,
                    "libari":1,
                    "latest":1,
                    "preinstal":1,
                    "dll":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But to use PL/Perl, you need Perl interpreter itself. Specifically, Perl 5.14 (at the time of this writing). Most common installer is ActiveState, but it's not free. Free one comes from <a href=\"http://strawberryperl.com/\"rel=\"nofollow\">StrawberryPerl</a>. Make sure you have <code>PERL514.DLL</code> in place.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[101781497]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But to use PL/Perl, you need Perl interpreter itself. Specifically, Perl 5.14 (at the time of this writing). Most common installer is ActiveState, but it's not free. Free one comes from <a href=\"http://strawberryperl.com/\"rel=\"nofollow\">StrawberryPerl</a>. Make sure you have <code>PERL514.DLL</code> in place.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ActiveState",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strawberryperl":1,
                    "state":1,
                    "rel":1,
                    "perl":5,
                    "code":2,
                    "activ":1,
                    "nofollow":1,
                    "common":1,
                    "instal":1,
                    "specif":1,
                    "strawberri":1,
                    "make":1,
                    "place":1,
                    "time":1,
                    "href":1,
                    "http":1,
                    "dll":1,
                    "write":1,
                    "interpret":1,
                    "free":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ActiveState",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>After installing Perl, login to your postgres database and try to run</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[-8837216]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>After installing Perl, login to your postgres database and try to run</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "run":1,
                    "postgr":1,
                    "perl":1,
                    "instal":1,
                    "databas":1,
                    "login":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"CREATE LANGUAGE plperlu; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[8957303]-[516600459]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"CREATE "
                  },
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"plperlu",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"LANGUAGE",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"CREATE LANGUAGE plperlu; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "plperlu":1,
                    "creat":1,
                    "languag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"LANGUAGE",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"plperlu",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"LANGUAGE",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>Language identification library</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[222407496]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>Language identification library</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "identif":1,
                    "librari":1,
                    "languag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If quality is your concern, you have some options: You can improve Lingua::Identify yourself (it's open source) or you could try another library. I found <a href=\"http://www.lingua-systems.com/language-identifier/Lingua-Lid-Perl-extension/index.html\"rel=\"nofollow\">this one</a>, which is commercial but looks promising.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8957303]-[-1830964069]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If quality is your concern, you have some options: You can improve Lingua::Identify yourself (it's open source) or you could try another library. I found <a href=\"http://www.lingua-systems.com/language-identifier/Lingua-Lid-Perl-extension/index.html\"rel=\"nofollow\">this one</a>, which is commercial but looks promising.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "system":1,
                    "lid":1,
                    "commerci":1,
                    "promis":1,
                    "option":1,
                    "rel":1,
                    "librari":1,
                    "perl":1,
                    "open":1,
                    "improv":1,
                    "concern":1,
                    "found":1,
                    "nofollow":1,
                    "identifi":2,
                    "qualiti":1,
                    "lingua":3,
                    "html":1,
                    "href":1,
                    "http":1,
                    "extens":1,
                    "sourc":1,
                    "index":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9011577,
      "questionId":8956279,
      "comments":[
        
      ],
      "creationDate":"2012-01-25",
      "lastActivityDate":"2012-01-25",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":361703,
        "displayName":"Gary",
        "reputation":1291
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I found a library called <a href=\"http://odur.let.rug.nl/~vannoord/TextCat/Demo/textcat.html\"rel=\"nofollow\">TextCat</a>, which is available under LGPL. I can't say what the quality of its identification is, but it's got an online demo form, so maybe you can throw some text at it before deciding if its worth downloading.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9011577]-[-1385172064]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I found a library called <a href=\"http://odur.let.rug.nl/~vannoord/TextCat/Demo/textcat.html\"rel=\"nofollow\">TextCat</a>, which is available under LGPL. I can't say what the quality of its identification is, but it's got an online demo form, so maybe you can throw some text at it before deciding if its worth downloading.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"TextCat",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "decid":1,
                    "demo":2,
                    "textcat":1,
                    "identif":1,
                    "onlin":1,
                    "rel":1,
                    "odur":1,
                    "lgpl":1,
                    "text":3,
                    "librari":1,
                    "vannoord":1,
                    "found":1,
                    "nofollow":1,
                    "worth":1,
                    "rug":1,
                    "qualiti":1,
                    "form":1,
                    "html":1,
                    "href":1,
                    "cat":2,
                    "http":1,
                    "call":1,
                    "download":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"TextCat",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's also written in Perl, so if you do want to use it, the approach in <strong>filiprem</strong>'s answer would be a good start point.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9011577]-[-1321282365]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's also written in Perl, so if you do want to use it, the approach in <strong>filiprem</strong>'s answer would be a good start point.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "good":1,
                    "strong":2,
                    "perl":1,
                    "written":1,
                    "answer":1,
                    "approach":1,
                    "start":1,
                    "filiprem":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":14447981,
      "questionId":8956279,
      "comments":[
        
      ],
      "creationDate":"2013-01-21",
      "lastActivityDate":"2013-01-21",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":316536,
        "displayName":"Laurynas",
        "reputation":1557
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Also there is a language detection webservice which provides both free and premium services at <a href=\"http://detectlanguage.com\"rel=\"nofollow\">http://detectlanguage.com</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14447981]-[605415771]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Also there is a language detection webservice which provides both free and premium services at <a href=\"http://detectlanguage.com\"rel=\"nofollow\">http://detectlanguage.com</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "webservic":1,
                    "detect":1,
                    "detectlanguag":2,
                    "rel":1,
                    "nofollow":1,
                    "premium":1,
                    "href":1,
                    "http":2,
                    "servic":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It has <a href=\"https://github.com/detectlanguage/detect_language\"rel=\"nofollow\">Ruby</a> and <a href=\"https://github.com/detectlanguage/detectlanguage-php\"rel=\"nofollow\">PHP</a> clients, but can be accessed from any language simple web request. Output is in JSON. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14447981]-[-932513945]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It has <a href=\"https://github.com/detectlanguage/detect_language\"rel=\"nofollow\">Ruby</a> and <a href=\"https://github.com/detectlanguage/detectlanguage-php\"rel=\"nofollow\">PHP</a> clients, but can be accessed from any language simple web request. Output is in JSON. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":2,
                    "languag":2,
                    "request":1,
                    "simpl":1,
                    "json":1,
                    "detect":1,
                    "detectlanguag":3,
                    "rel":2,
                    "https":2,
                    "web":1,
                    "nofollow":2,
                    "client":1,
                    "php":2,
                    "output":1,
                    "href":2,
                    "rubi":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}