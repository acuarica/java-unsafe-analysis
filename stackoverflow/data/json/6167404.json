{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":6167404,
    "title":"Does volatile influence non-volatile variables?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":7169257,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"FredOverflow, if you need volatile array, either use `AtomicReferenceArray` or `AtomicIntegerArray`, or just see what Unsafe offers. I'll answer about the stale part."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7169257]-[-1130375791]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"FredOverflow, if you need volatile array, either use `AtomicReferenceArray` or `AtomicIntegerArray`, or just see what Unsafe offers. I'll answer about the stale part."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FredOverflow",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicReferenceArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "overflow":1,
                      "fred":1,
                      "array":3,
                      "refer":1,
                      "answer":1,
                      "atom":2,
                      "offer":1,
                      "unsaf":1,
                      "part":1,
                      "stale":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"FredOverflow",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicReferenceArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170454,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":4725,
          "displayName":"Tom Hawtin - tackline",
          "reputation":89549
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Don't use `Unsafe`!!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170454]-[-761479837]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Don't use `Unsafe`!!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "unsaf":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170553,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Tom, why the hate to unsafe (beside it is really unsafe, if you write any native code, Unsafe is not worse)?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170553]-[1672116854]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Tom, why the hate to unsafe (beside it is really unsafe, if you write any native code, Unsafe is not worse)?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Tom",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "wors":1,
                      "code":1,
                      "tom":1,
                      "hate":1,
                      "unsaf":3,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170688,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":4725,
          "displayName":"Tom Hawtin - tackline",
          "reputation":89549
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@bestsss `Unsafe` is a completely unsupported API that you aren't supposed to use. It allows compromising the robustness of JVM trivially without even leaving Java. You have to use hacks to get around the protections that make it difficult to get hold of."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170688]-[-881705033]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@bestsss `Unsafe` is a completely unsupported API that you aren't supposed to use. It allows compromising the robustness of JVM trivially without even leaving Java. You have to use hacks to get around the protections that make it difficult to get hold of."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "aren":1,
                      "compromis":1,
                      "leav":1,
                      "hold":1,
                      "difficult":1,
                      "robust":1,
                      "unsupport":1,
                      "make":1,
                      "hack":1,
                      "protect":1,
                      "api":1,
                      "unsaf":1,
                      "complet":1,
                      "bestsss":1,
                      "suppos":1,
                      "trivial":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170721,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Tom, -Xbootclasspath/p is quite a standard option to get Unsafe (I know most people do it via Reflection) but if I am to rely on Unsafe, I'd rather put my code in there. Side note: the worst thing that compromises java ever happened to me: double segment fault during a stackoverflow error, it quits the JVM w/o ANY single trace whatsoever (besides syslog) and the code is 100% java, no hack tricks, took me 2 weeks to find it out and changing the server hardware."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170721]-[1144147672]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Tom, -Xbootclasspath/p is quite a standard option to get Unsafe (I know most people do it via Reflection) but if I am to rely on Unsafe, I'd rather put my code in there. Side note: the worst thing that compromises java ever happened to me: double segment fault during a stackoverflow error, it quits the JVM w/o ANY single trace whatsoever (besides syslog) and the code is 100% java, no hack tricks, took me 2 weeks to find it out and changing the server hardware."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Tom",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "side":1,
                      "chang":1,
                      "jvm":1,
                      "find":1,
                      "singl":1,
                      "server":1,
                      "trace":1,
                      "worst":1,
                      "standard":1,
                      "syslog":1,
                      "happen":1,
                      "compromis":1,
                      "trick":1,
                      "option":1,
                      "thing":1,
                      "segment":1,
                      "quit":1,
                      "code":2,
                      "tom":1,
                      "stackoverflow":1,
                      "week":1,
                      "error":1,
                      "note":1,
                      "hardwar":1,
                      "put":1,
                      "whatsoev":1,
                      "hack":1,
                      "unsaf":2,
                      "fault":1,
                      "reli":1,
                      "peopl":1,
                      "reflect":1,
                      "xbootclasspath":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170753,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":252000,
          "displayName":"FredOverflow",
          "reputation":98549
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What is this `Unsafe`, and how does it relate to the question?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170753]-[1586857071]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What is this `Unsafe`, and how does it relate to the question?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "unsaf":1,
                      "question":1,
                      "relat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170778,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@FredOverflow, this is weird, I can swear there was a line about atomic array (hence my 1st comment). Unsafe is `sun.misc.Unsafe`, and it you do not know what it is, you do not need it for sure."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170778]-[773314708]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@FredOverflow, this is weird, I can swear there was a line about atomic array (hence my 1st comment). Unsafe is `sun.misc.Unsafe`, and it you do not know what it is, you do not need it for sure."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"FredOverflow",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "weird":1,
                      "overflow":1,
                      "fred":1,
                      "line":1,
                      "sun":1,
                      "swear":1,
                      "array":1,
                      "comment":1,
                      "misc":1,
                      "atom":1,
                      "unsaf":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7170956,
        "postId":6167404,
        "creationDate":"2011-05-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@FredOverflow, doh found it, it was your 1st comment to Tom's post, and the simulation part and all made me think you'd have constantly changing code, etc, etc."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6167404-cu7170956]-[-1106930286]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@FredOverflow, doh found it, it was your 1st comment to Tom's post, and the simulation part and all made me think you'd have constantly changing code, etc, etc."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"FredOverflow",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "constant":1,
                      "chang":1,
                      "post":1,
                      "doh":1,
                      "overflow":1,
                      "fred":1,
                      "simul":1,
                      "code":1,
                      "tom":1,
                      "found":1,
                      "comment":1,
                      "part":1,
                      "made":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "multithreading",
      "volatile"
    ],
    "creationDate":"2011-05-29",
    "lastActivityDate":"2011-05-30",
    "lastEditDate":"2011-05-30",
    "score":6,
    "viewCount":826,
    "owner":{
      "type":"StackOverflowUser",
      "id":252000,
      "displayName":"FredOverflow",
      "reputation":98549
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Okay, suppose I have a bunch of variables, one of them declared volatile:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6167404]-[1478007773]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Okay, suppose I have a bunch of variables, one of them declared volatile:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bunch":1,
                  "declar":1,
                  "variabl":1,
                  "suppos":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"int a; int b; int c; volatile int v; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[6167404]-[-480566788]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"int a; int b; int c; volatile int v; "
                }
              ]
            },
            "rawText":"int a; int b; int c; volatile int v; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If one thread writes to all four variables (writing to <code>v</code> last), and another thread reads from all four variables (reading from <code>v</code> first), does that second thread see the values written to <code>a</code>, <code>b</code> and <code>c</code> by the first thread, even though they are not themselves declared volatile? Or can it possibly see stale values?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6167404]-[-614109670]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If one thread writes to all four variables (writing to <code>v</code> last), and another thread reads from all four variables (reading from <code>v</code> first), does that second thread see the values written to <code>a</code>, <code>b</code> and <code>c</code> by the first thread, even though they are not themselves declared volatile? Or can it possibly see stale values?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":2,
                  "possibl":1,
                  "declar":1,
                  "code":10,
                  "thread":4,
                  "written":1,
                  "valu":2,
                  "variabl":2,
                  "stale":1,
                  "write":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Since there seems to be some confusion: I'm not deliberately trying to do something unsafe. I just want to understand the Java memory model and the semantics of the <code>volatile</code> keyword. Pure curiosity.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6167404]-[421798022]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Since there seems to be some confusion: I'm not deliberately trying to do something unsafe. I just want to understand the Java memory model and the semantics of the <code>volatile</code> keyword. Pure curiosity.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "model":1,
                  "understand":1,
                  "deliber":1,
                  "pure":1,
                  "keyword":1,
                  "code":2,
                  "semant":1,
                  "confus":1,
                  "unsaf":1,
                  "curios":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":6168221,
      "questionId":6167404,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":7170434,
          "postId":6168221,
          "creationDate":"2011-05-29",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"No, reading `a`, `b`, `c` in the same thread as read of `v` will result in getting the values set before `v` was written in the other thread. (Obviously you might also get values written even later or from a different thread.)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6168221-cu7170434]-[-15983122]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"No, reading `a`, `b`, `c` in the same thread as read of `v` will result in getting the values set before `v` was written in the other thread. (Obviously you might also get values written even later or from a different thread.)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":2,
                        "result":1,
                        "set":1,
                        "thread":3,
                        "written":2,
                        "valu":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7170533,
          "postId":6168221,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Tom, I do understand that, I edited the answer since it looks unclear. The main issue is any other thread that might be modifying it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6168221-cu7170533]-[-737016136]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Tom, I do understand that, I edited the answer since it looks unclear. The main issue is any other thread that might be modifying it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Tom",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "understand":1,
                        "issu":1,
                        "unclear":1,
                        "main":1,
                        "edit":1,
                        "tom":1,
                        "thread":1,
                        "modifi":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-05-29",
      "lastActivityDate":"2011-05-29",
      "lastEditDate":"2011-05-29",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":554431,
        "displayName":"bestsss",
        "reputation":6866
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><em>does that second thread see the values written to a, b and c by the first thread, even though they are not themselves declared volatile? Or can it possibly see stale values?</em></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6168221]-[-966076838]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><em>does that second thread see the values written to a, b and c by the first thread, even though they are not themselves declared volatile? Or can it possibly see stale values?</em></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "possibl":1,
                    "declar":1,
                    "thread":2,
                    "written":1,
                    "valu":2,
                    "stale":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You will get stale reads, b/c you can't ensure that the values of a, b, c are the ones set after reading of v. Using state machine (but you need CAS to change the state) is a way to tackle similar issues but it's beyond the scope of the discussion. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6168221]-[-1923146327]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You will get stale reads, b/c you can't ensure that the values of a, b, c are the ones set after reading of v. Using state machine (but you need CAS to change the state) is a way to tackle similar issues but it's beyond the scope of the discussion. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "chang":1,
                    "state":2,
                    "similar":1,
                    "scope":1,
                    "set":1,
                    "issu":1,
                    "cas":1,
                    "discuss":1,
                    "machin":1,
                    "tackl":1,
                    "valu":1,
                    "stale":1,
                    "ensur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Perhaps this part is unclear, after writing to <code>v</code> and reading first from <code>v</code>, you'd get the right results (non-stale reads), the main issue is that if you do <code>if (v==STATE1){...proceed...}</code>, there is no guarantee some other thread would not be modifying the state of a/b/c. In that case, there will be state reads. If you modify the a/b/c+v once only you'd get the correct result.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6168221]-[1273503236]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Perhaps this part is unclear, after writing to <code>v</code> and reading first from <code>v</code>, you'd get the right results (non-stale reads), the main issue is that if you do <code>if (v==STATE1){...proceed...}</code>, there is no guarantee some other thread would not be modifying the state of a/b/c. In that case, there will be state reads. If you modify the a/b/c+v once only you'd get the correct result.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":3,
                    "state":3,
                    "correct":1,
                    "result":2,
                    "issu":1,
                    "unclear":1,
                    "main":1,
                    "code":6,
                    "guarante":1,
                    "thread":1,
                    "modifi":2,
                    "proceed":1,
                    "part":1,
                    "stale":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Mastering concurrency and and lock-free structures is a really hard one. Doug Lea has a good book on and most talks/articles of Dr. Cliff Click are a wonderful wealth, if you need something to start digging in.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6168221]-[835230399]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Mastering concurrency and and lock-free structures is a really hard one. Doug Lea has a good book on and most talks/articles of Dr. Cliff Click are a wonderful wealth, if you need something to start digging in.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":1,
                    "hard":1,
                    "master":1,
                    "good":1,
                    "doug":1,
                    "book":1,
                    "talk":1,
                    "lock":1,
                    "articl":1,
                    "structur":1,
                    "click":1,
                    "cliff":1,
                    "wonder":1,
                    "wealth":1,
                    "dig":1,
                    "start":1,
                    "lea":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6167435,
      "questionId":6167404,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":7171542,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@toto `volatile` is rarely used. To be of any real use, you will need to combine it with other reads/writes. Usually (in these rare circumstances) they are in objects referenced by the reference assigned to `volatile`. But other fields are used, for instance this is done in implementing `java.util.concurrent`, and the only way to use `volatile` primitives with multiple fields."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7171542]-[-483926756]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@toto `volatile` is rarely used. To be of any real use, you will need to combine it with other reads/writes. Usually (in these rare circumstances) they are in objects referenced by the reference assigned to `volatile`. But other fields are used, for instance this is done in implementing `java.util.concurrent`, and the only way to use `volatile` primitives with multiple fields."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "circumst":1,
                        "concurr":1,
                        "util":1,
                        "real":1,
                        "field":2,
                        "toto":1,
                        "assign":1,
                        "object":1,
                        "rare":2,
                        "combin":1,
                        "refer":1,
                        "implement":1,
                        "primit":1,
                        "multipl":1,
                        "referenc":1,
                        "write":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7168119,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":252000,
            "displayName":"FredOverflow",
            "reputation":98549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So I could, for example, simulate volatile arrays by first writing to an array and writing to some dummy volatile int in one thread, and then reading from that dummy volatile int and reading from the array in another thread?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7168119]-[28133621]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So I could, for example, simulate volatile arrays by first writing to an array and writing to some dummy volatile int in one thread, and then reading from that dummy volatile int and reading from the array in another thread?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":2,
                        "dummi":2,
                        "simul":1,
                        "array":3,
                        "thread":2,
                        "write":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7168191,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@FredOverflow Not both usefully and reliably. `volatile` is tricky to work with."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7168191]-[1040908117]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@FredOverflow Not both usefully and reliably. `volatile` is tricky to work with."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"FredOverflow",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "tricki":1,
                        "overflow":1,
                        "reliabl":1,
                        "fred":1,
                        "work":1,
                        "use":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7169269,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"JDK 1.4 doesn't follow the new java memory model (it's from jdk 1.5)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7169269]-[-265689163]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"JDK 1.4 doesn't follow the new java memory model (it's from jdk 1.5)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "follow":1,
                        "model":1,
                        "jdk":2,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7170410,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@bestsss Any deviations from the new JMM were fixed as bugs in 1.4. It's not like it was practical to follow the JMM of the J2SE 1.4 spec. (Should have said J2SE 5.0, not Java SE 5.)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7170410]-[-748071027]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@bestsss Any deviations from the new JMM were fixed as bugs in 1.4. It's not like it was practical to follow the JMM of the J2SE 1.4 spec. (Should have said J2SE 5.0, not Java SE 5.)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "fix":1,
                        "bug":1,
                        "spec":1,
                        "bestsss":1,
                        "practic":1,
                        "jmm":2,
                        "deviat":1,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7170482,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Tom, I guess you are right about the backport part, though. I never knew it was fully implemented to support it (remember some fixes were introduced, only)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7170482]-[932897265]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Tom, I guess you are right about the backport part, though. I never knew it was fully implemented to support it (remember some fixes were introduced, only)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Tom",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "support":1,
                        "introduc":1,
                        "fix":1,
                        "knew":1,
                        "tom":1,
                        "rememb":1,
                        "fulli":1,
                        "implement":1,
                        "part":1,
                        "guess":1,
                        "backport":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7170719,
          "postId":6167435,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":765009,
            "displayName":"toto2",
            "reputation":3987
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Maybe it works, but I hope nobody ever uses that trick in real code with many developers; it would be a mess to maintain correct concurrency."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu7170719]-[-519913288]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Maybe it works, but I hope nobody ever uses that trick in real code with many developers; it would be a mess to maintain correct concurrency."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "concurr":1,
                        "real":1,
                        "correct":1,
                        "trick":1,
                        "work":1,
                        "code":1,
                        "mess":1,
                        "hope":1,
                        "develop":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":31561739,
          "postId":6167435,
          "creationDate":"2014-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4725,
            "displayName":"Tom Hawtin - tackline",
            "reputation":89549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gili 17.4.2 defines read and writing variables as an *inter-thread action*. 17.4.5 states that actions in the same thread in program order have a happens-before relationship. **happens-before** is a partial order."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu31561739]-[1414157208]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gili 17.4.2 defines read and writing variables as an *inter-thread action*. 17.4.5 states that actions in the same thread in program order have a happens-before relationship. **happens-before** is a partial order."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gili",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "program":1,
                        "partial":1,
                        "state":1,
                        "inter":1,
                        "relationship":1,
                        "thread":2,
                        "order":2,
                        "defin":1,
                        "variabl":1,
                        "gili":1,
                        "action":2,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":31562627,
          "postId":6167435,
          "creationDate":"2014-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":14731,
            "displayName":"Gili",
            "reputation":17459
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@TomHawtin-tackline good catch. Thanks!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu31562627]-[-307881673]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@TomHawtin-tackline good catch. Thanks!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"TomHawtin",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "tacklin":1,
                        "tom":1,
                        "hawtin":1,
                        "good":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":31560624,
          "postId":6167435,
          "creationDate":"2014-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":14731,
            "displayName":"Gili",
            "reputation":17459
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Where does it say (in the Java Memory Model) that `volatile` affects **all variables**? As far as I can tell, it only guarantees `happens-before` for the specific variable that is volatile."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6167435-cu31560624]-[-732409314]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Where does it say (in the Java Memory Model) that `volatile` affects **all variables**? As far as I can tell, it only guarantees `happens-before` for the specific variable that is volatile."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "model":1,
                        "affect":1,
                        "guarante":1,
                        "specif":1,
                        "variabl":2,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-05-29",
      "lastActivityDate":"2011-05-29",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":4725,
        "displayName":"Tom Hawtin - tackline",
        "reputation":89549
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Yes. <code>volatile</code>, locks, etc., setup the <em>happens-before</em> relationship, but it affects all variables (in the new Java Memory Model (JMM) from Java SE 5/JDK 1.4). Kind of makes it useful for non-primitive volatiles...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6167435]-[-954913859]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Yes. <code>volatile</code>, locks, etc., setup the <em>happens-before</em> relationship, but it affects all variables (in the new Java Memory Model (JMM) from Java SE 5/JDK 1.4). Kind of makes it useful for non-primitive volatiles...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "model":1,
                    "volatil":1,
                    "lock":1,
                    "affect":1,
                    "code":2,
                    "relationship":1,
                    "make":1,
                    "kind":1,
                    "variabl":1,
                    "primit":1,
                    "jmm":1,
                    "jdk":1,
                    "setup":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6169551,
      "questionId":6167404,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":7171613,
          "postId":6169551,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"nice summary, props for going into full length to describe it. Actually I was thinking of a similar case but using v as version and reading it at the beginning and the end of guarded a/b/c. The data is considered consistant only if the values are the same, if not loops. Still requires a single readed and writer, though and constantly changing version (say `volatile long v; v++`)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6169551-cu7171613]-[1174615722]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"nice summary, props for going into full length to describe it. Actually I was thinking of a similar case but using v as version and reading it at the beginning and the end of guarded a/b/c. The data is considered consistant only if the values are the same, if not loops. Still requires a single readed and writer, though and constantly changing version (say `volatile long v; v++`)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constant":1,
                        "read":2,
                        "chang":1,
                        "singl":1,
                        "begin":1,
                        "loop":1,
                        "writer":1,
                        "similar":1,
                        "summari":1,
                        "requir":1,
                        "data":1,
                        "full":1,
                        "nice":1,
                        "version":2,
                        "consist":1,
                        "consid":1,
                        "think":1,
                        "valu":1,
                        "end":1,
                        "prop":1,
                        "length":1,
                        "guard":1,
                        "describ":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7171741,
          "postId":6169551,
          "creationDate":"2011-05-29",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":31818,
            "displayName":"seh",
            "reputation":9499
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks, bestsss. Using the counter as you describe solves the *A-B-A* problem that would arise if instead you used a boolean flag indicating whether the writer is active (like `AtomicStampedReference`). Still, I think you need some sort of &quot;invalid&quot; value in there that allows readers to distinguish the situation where the writer *started* updating the non-volatile variables, but hasn't gotten around to changing the version number yet. Perhaps *a pair* of variables would suffice: The first as a transaction number, and the second as a commit number. Bump the first, commit by bumping the second."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6169551-cu7171741]-[-1766726386]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks, bestsss. Using the counter as you describe solves the *A-B-A* problem that would arise if instead you used a boolean flag indicating whether the writer is active (like `AtomicStampedReference`). Still, I think you need some sort of &quot;invalid&quot; value in there that allows readers to distinguish the situation where the writer *started* updating the non-volatile variables, but hasn't gotten around to changing the version number yet. Perhaps *a pair* of variables would suffice: The first as a transaction number, and the second as a commit number. Bump the first, commit by bumping the second."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicStampedReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "number":3,
                        "chang":1,
                        "commit":2,
                        "suffic":1,
                        "writer":2,
                        "reader":1,
                        "problem":1,
                        "distinguish":1,
                        "updat":1,
                        "stamp":1,
                        "situat":1,
                        "version":1,
                        "transact":1,
                        "activ":1,
                        "indic":1,
                        "invalid":1,
                        "aris":1,
                        "refer":1,
                        "flag":1,
                        "counter":1,
                        "quot":2,
                        "atom":1,
                        "pair":1,
                        "sort":1,
                        "bestsss":1,
                        "variabl":2,
                        "start":1,
                        "bump":2,
                        "describ":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicStampedReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":7172040,
          "postId":6169551,
          "creationDate":"2011-05-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"AtomicMarkableReference doesn't have intrinsic (as of now) and it's very bad performance wise, unfortunately. It'b great to use a single bit in the pointer, alas it's fully blown object w/ allocation each time. I have not checked AtomicStampedReference but I doubt, either. Indeed, it'd take two variables to properly ensure the data consistency."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6169551-cu7172040]-[719309124]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"AtomicMarkableReference doesn't have intrinsic (as of now) and it's very bad performance wise, unfortunately. It'b great to use a single bit in the pointer, alas it's fully blown object w/ allocation each time. I have not checked AtomicStampedReference but I doubt, either. Indeed, it'd take two variables to properly ensure the data consistency."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicMarkableReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicStampedReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wise":1,
                        "singl":1,
                        "markabl":1,
                        "bit":1,
                        "alloc":1,
                        "pointer":1,
                        "proper":1,
                        "data":1,
                        "bad":1,
                        "stamp":1,
                        "object":1,
                        "consist":1,
                        "check":1,
                        "doubt":1,
                        "perform":1,
                        "refer":2,
                        "fulli":1,
                        "intrins":1,
                        "atom":2,
                        "ala":1,
                        "time":1,
                        "variabl":1,
                        "blown":1,
                        "great":1,
                        "ensur":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicMarkableReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicStampedReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":31561989,
          "postId":6169551,
          "creationDate":"2014-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":14731,
            "displayName":"Gili",
            "reputation":17459
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@bestsss what's so inefficient about `AtomicMarkableReference` versus say double-checked locking?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6169551-cu31561989]-[676490795]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@bestsss what's so inefficient about `AtomicMarkableReference` versus say double-checked locking?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicMarkableReference",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "markabl":1,
                        "versus":1,
                        "lock":1,
                        "check":1,
                        "refer":1,
                        "ineffici":1,
                        "atom":1,
                        "bestsss":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicMarkableReference",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-05-29",
      "lastActivityDate":"2011-05-29",
      "lastEditDate":"2011-05-29",
      "score":8,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":31818,
        "displayName":"seh",
        "reputation":9499
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm going to speak to what I think you may really be probing about\u2014<em>piggybacking</em> synchronization.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[1879176077]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm going to speak to what I think you may really be probing about\u2014<em>piggybacking</em> synchronization.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "synchron":1,
                    "piggyback":1,
                    "probe":1,
                    "speak":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The technique that it <em>looks</em> like you're trying to use involves using one volatile variable as a synchronization guard in concert with one or more other non-volatile variables. This technique is applicable when the following conditions hold true:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[806391504]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The technique that it <em>looks</em> like you're trying to use involves using one volatile variable as a synchronization guard in concert with one or more other non-volatile variables. This technique is applicable when the following conditions hold true:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "involv":1,
                    "condit":1,
                    "concert":1,
                    "hold":1,
                    "techniqu":2,
                    "applic":1,
                    "true":1,
                    "guard":1,
                    "variabl":2,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Only one thread will <em>write</em> to the set of values meant to be guarded.</li> \n <li>The threads <em>reading</em> the set of values will read them only if the volatile guard value meets some criteria.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-1127123861]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Only one thread will <em>write</em> to the set of values meant to be guarded.</li> \n <li>The threads <em>reading</em> the set of values will read them only if the volatile guard value meets some criteria.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "criteria":1,
                    "set":2,
                    "meant":1,
                    "thread":2,
                    "valu":2,
                    "meet":1,
                    "guard":2,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You don't mention the second condition holding true for your example, but we can examine it anyway. The model for the <em>writer</em> is as follows:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[874339131]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You don't mention the second condition holding true for your example, but we can examine it anyway. The model for the <em>writer</em> is as follows:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "examin":1,
                    "model":1,
                    "writer":1,
                    "condit":1,
                    "hold":1,
                    "mention":1,
                    "true":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Write to all the non-volatile variables, assuming that no other thread will try to read them.</li> \n <li>Once complete, write a value to the volatile guard variable that indicates that the readers' criteria is met.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-398906420]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Write to all the non-volatile variables, assuming that no other thread will try to read them.</li> \n <li>Once complete, write a value to the volatile guard variable that indicates that the readers' criteria is met.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "assum":1,
                    "reader":1,
                    "criteria":1,
                    "met":1,
                    "thread":1,
                    "complet":1,
                    "guard":1,
                    "variabl":2,
                    "write":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <em>readers</em> operate as follows:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-1804879215]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <em>readers</em> operate as follows:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "reader":1,
                    "oper":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Read the volatile guard variable at any time, and if its value meets the criteria, then</li> \n <li>Read the other non-volatile variables.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-235758501]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Read the volatile guard variable at any time, and if its value meets the criteria, then</li> \n <li>Read the other non-volatile variables.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "criteria":1,
                    "meet":1,
                    "time":1,
                    "guard":1,
                    "variabl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The readers must not read the other non-volatile variables if the volatile guard variable does not yet indicate a proper value.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[1090353468]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The readers must not read the other non-volatile variables if the volatile guard variable does not yet indicate a proper value.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "reader":1,
                    "proper":1,
                    "guard":1,
                    "variabl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The guard variable is acting as a gate. It's closed until the writer sets it to a particular value, or set of values that all meet the criteria of indicating that the gate is now open. The non-volatile variables are guarded behind the gate. The reader is not permitted to read them until the gate opens. Once the gate is open, the reader will see a consistent view of the set of non-volatile variables.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-2145811638]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The guard variable is acting as a gate. It's closed until the writer sets it to a particular value, or set of values that all meet the criteria of indicating that the gate is now open. The non-volatile variables are guarded behind the gate. The reader is not permitted to read them until the gate opens. Once the gate is open, the reader will see a consistent view of the set of non-volatile variables.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "gate":5,
                    "writer":1,
                    "reader":2,
                    "criteria":1,
                    "set":3,
                    "open":3,
                    "consist":1,
                    "indic":1,
                    "permit":1,
                    "valu":1,
                    "meet":1,
                    "guard":2,
                    "variabl":3,
                    "close":1,
                    "act":1,
                    "view":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Note that it is <em>not</em> safe to run this protocol repeatedly. The writer can't keep changing the non-volatile variables once it's opened the gate. At that point, multiple reader threads may be reading those other variables, and they <em>can</em>\u2014though are not guaranteed\u2014see updates to those variables. Seeing some but not all of those updates would yield inconsistent views of the set.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-1104464050]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Note that it is <em>not</em> safe to run this protocol repeatedly. The writer can't keep changing the non-volatile variables once it's opened the gate. At that point, multiple reader threads may be reading those other variables, and they <em>can</em>\u2014though are not guaranteed\u2014see updates to those variables. Seeing some but not all of those updates would yield inconsistent views of the set.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "chang":1,
                    "point":1,
                    "gate":1,
                    "writer":1,
                    "reader":1,
                    "run":1,
                    "set":1,
                    "updat":2,
                    "yield":1,
                    "safe":1,
                    "open":1,
                    "guarante":1,
                    "thread":1,
                    "note":1,
                    "inconsist":1,
                    "repeat":1,
                    "variabl":3,
                    "multipl":1,
                    "protocol":1,
                    "view":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Backing up, the trick here is to control access to a set of variables without either</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-626119390]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Backing up, the trick here is to control access to a set of variables without either</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "trick":1,
                    "set":1,
                    "back":1,
                    "control":1,
                    "variabl":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>creating a structure to hold them all, to which an atomic reference could be swapped, um, atomically, or</li> \n <li>using a lock to make writing to and reading from the entire set of variables mutually exclusive activities.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[-1007548933]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>creating a structure to hold them all, to which an atomic reference could be swapped, um, atomically, or</li> \n <li>using a lock to make writing to and reading from the entire set of variables mutually exclusive activities.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "exclus":1,
                    "set":1,
                    "lock":1,
                    "entir":1,
                    "structur":1,
                    "mutual":1,
                    "hold":1,
                    "activ":1,
                    "refer":1,
                    "swap":1,
                    "make":1,
                    "atom":2,
                    "variabl":1,
                    "creat":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><em>Piggybacking</em> on top of the volatile guard variable is a clever stunt\u2014not one to be done casually. Subsequent updates to the program can break the aforementioned fragile conditions, removing the consistency guarantees afforded by the Java memory model. Should you choose to use this technique, document its invariants and requirements in the code clearly.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6169551]-[961655185]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><em>Piggybacking</em> on top of the volatile guard variable is a clever stunt\u2014not one to be done casually. Subsequent updates to the program can break the aforementioned fragile conditions, removing the consistency guarantees afforded by the Java memory model. Should you choose to use this technique, document its invariants and requirements in the code clearly.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "remov":1,
                    "subsequ":1,
                    "model":1,
                    "document":1,
                    "requir":1,
                    "condit":1,
                    "aforement":1,
                    "updat":1,
                    "clever":1,
                    "piggyback":1,
                    "code":1,
                    "casual":1,
                    "guarante":1,
                    "consist":1,
                    "afford":1,
                    "techniqu":1,
                    "invari":1,
                    "fragil":1,
                    "choos":1,
                    "stunt":1,
                    "guard":1,
                    "variabl":1,
                    "top":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6172566,
      "questionId":6167404,
      "comments":[
        
      ],
      "creationDate":"2011-05-30",
      "lastActivityDate":"2011-05-30",
      "lastEditDate":"2011-05-30",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":218978,
        "displayName":"irreputable",
        "reputation":27360
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Yes, volatile write &quot;happens-before&quot; next volatile read on the same variable.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6172566]-[1667388687]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Yes, volatile write &quot;happens-before&quot; next volatile read on the same variable.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "quot":2,
                    "variabl":1,
                    "write":1,
                    "read":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>While @seh is right on about consistency problems with multiple variables, there are use cases that less consistency is required. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6172566]-[-1240045384]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>While @seh is right on about consistency problems with multiple variables, there are use cases that less consistency is required. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "seh":1,
                    "problem":1,
                    "requir":1,
                    "consist":2,
                    "case":1,
                    "variabl":1,
                    "multipl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For example, a writer thread updates some state variables; a reader thread displays them promptly. There's not much relation among the variables, we only care about reading the new values promptly. We could make every state variable volatile. Or we could use only one volatile variable as visibility guard. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6172566]-[-2142774600]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For example, a writer thread updates some state variables; a reader thread displays them promptly. There's not much relation among the variables, we only care about reading the new values promptly. We could make every state variable volatile. Or we could use only one volatile variable as visibility guard. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "writer":1,
                    "state":2,
                    "relat":1,
                    "reader":1,
                    "updat":1,
                    "prompt":2,
                    "visibl":1,
                    "care":1,
                    "thread":2,
                    "valu":1,
                    "make":1,
                    "guard":1,
                    "variabl":4,
                    "display":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><em>However</em>, the saving is only on the paper, performance wise there's hardly any difference. In either version, every state variable must be &quot;flushed&quot; by the writer and &quot;loaded&quot; by the reader. No free lunch.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6172566]-[-1864964080]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><em>However</em>, the saving is only on the paper, performance wise there's hardly any difference. In either version, every state variable must be &quot;flushed&quot; by the writer and &quot;loaded&quot; by the reader. No free lunch.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wise":1,
                    "lunch":1,
                    "writer":1,
                    "state":1,
                    "reader":1,
                    "differ":1,
                    "load":1,
                    "version":1,
                    "paper":1,
                    "perform":1,
                    "flush":1,
                    "quot":4,
                    "variabl":1,
                    "save":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}