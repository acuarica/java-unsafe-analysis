{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19895405,
    "title":"JCR / Jackrabbit: hasNodes of type",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29648694,
        "postId":19895405,
        "creationDate":"2013-11-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":217731,
          "displayName":"Bertrand Delacretaz",
          "reputation":3949
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Why can't you use a query that combines the two conditions: path starts with the path of the current node and node type is the one you're looking for?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19895405-cu29648694]-[438473231]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Why can't you use a query that combines the two conditions: path starts with the path of the current node and node type is the one you're looking for?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "path":2,
                      "condit":1,
                      "queri":1,
                      "combin":1,
                      "node":2,
                      "type":1,
                      "start":1,
                      "current":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29649752,
        "postId":19895405,
        "creationDate":"2013-11-12",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":346031,
          "displayName":"Falcon",
          "reputation":2179
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"That's what I already do but I fetch two types and want to avoid two roundtrips."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19895405-cu29649752]-[458950515]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"That's what I already do but I fetch two types and want to avoid two roundtrips."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "avoid":1,
                      "type":1,
                      "fetch":1,
                      "roundtrip":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jackrabbit",
      "jcr"
    ],
    "creationDate":"2013-11-10",
    "lastActivityDate":"2014-11-20",
    "score":0,
    "viewCount":49,
    "owner":{
      "type":"StackOverflowUser",
      "id":346031,
      "displayName":"Falcon",
      "reputation":2179
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need some sort of <code>hasNodes</code> <strong>of type</strong> method on the <code>Node</code> class. However, I am not sure how to accomplish this. I cannot iterate over the children as I am lazy loading - I fetch the children of the requested type with a query.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19895405]-[1578741144]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need some sort of <code>hasNodes</code> <strong>of type</strong> method on the <code>Node</code> class. However, I am not sure how to accomplish this. I cannot iterate over the children as I am lazy loading - I fetch the children of the requested type with a query.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"hasNodes",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "children":2,
                  "request":1,
                  "lazi":1,
                  "load":1,
                  "strong":2,
                  "code":4,
                  "queri":1,
                  "iter":1,
                  "accomplish":1,
                  "fetch":1,
                  "node":2,
                  "sort":1,
                  "type":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Has anybody got a good solution for that? Do I need to have another query for that, too?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19895405]-[1102286236]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Has anybody got a good solution for that? Do I need to have another query for that, too?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "queri":1,
                  "solut":1,
                  "good":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19924553,
      "questionId":19895405,
      "comments":[
        
      ],
      "creationDate":"2013-11-12",
      "lastActivityDate":"2014-11-20",
      "lastEditDate":"2014-11-20",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2106516,
        "displayName":"tmarwen",
        "reputation":3515
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can use the method <code>getObejct(Path nodePath)</code> of the <em>Jackrabbit OCM</em> (<a href=\"http://jackrabbit.apache.org/object-content-manager.html\"rel=\"nofollow\">Object Content Mapping</a>) to retrieve the object which creates a proxy and assigns it to the lazy loaded collection.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19924553]-[1076072044]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can use the method <code>getObejct(Path nodePath)</code> of the <em>Jackrabbit OCM</em> (<a href=\"http://jackrabbit.apache.org/object-content-manager.html\"rel=\"nofollow\">Object Content Mapping</a>) to retrieve the object which creates a proxy and assigns it to the lazy loaded collection.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getObejct",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"nodePath",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "apach":1,
                    "path":2,
                    "map":1,
                    "retriev":1,
                    "obejct":1,
                    "rel":1,
                    "lazi":1,
                    "assign":1,
                    "load":1,
                    "object":3,
                    "code":2,
                    "nofollow":1,
                    "jackrabbit":2,
                    "content":2,
                    "node":1,
                    "collect":1,
                    "proxi":1,
                    "org":1,
                    "html":1,
                    "href":1,
                    "manag":1,
                    "http":1,
                    "creat":1,
                    "ocm":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}