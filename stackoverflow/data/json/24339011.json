{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":24339011,
    "title":"mysql query in clause at playframework",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":37626372,
        "postId":24339011,
        "creationDate":"2014-06-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3263217,
          "displayName":"aradhna",
          "reputation":204
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"you have not declared ids correctly. there is a problem in placement of your quotes, please check again."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24339011-cu37626372]-[1790548658]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"you have not declared ids correctly. there is a problem in placement of your quotes, please check again."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "problem":1,
                      "correct":1,
                      "declar":1,
                      "placement":1,
                      "id":1,
                      "check":1,
                      "quot":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":37626418,
        "postId":24339011,
        "creationDate":"2014-06-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3196723,
          "displayName":"Govind Singh Nagarkoti",
          "reputation":3659
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@aradhna SORRY its by mistake, only here"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24339011-cu37626418]-[1224919751]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@aradhna SORRY its by mistake, only here"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "mistak":1,
                      "aradhna":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":37626421,
        "postId":24339011,
        "creationDate":"2014-06-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3196723,
          "displayName":"Govind Singh Nagarkoti",
          "reputation":3659
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@aradhna i updated the question"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24339011-cu37626421]-[383259210]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@aradhna i updated the question"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "updat":1,
                      "aradhna":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "mysql",
      "sql",
      "scala",
      "playframework"
    ],
    "creationDate":"2014-06-21",
    "lastActivityDate":"2014-06-21",
    "lastEditDate":"2014-06-21",
    "score":0,
    "viewCount":88,
    "owner":{
      "type":"StackOverflowUser",
      "id":3196723,
      "displayName":"Govind Singh Nagarkoti",
      "reputation":3659
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>in below two sql query <code>sql1</code> not selecting any row, and <code>sql2</code> selecting only 1 for <code>111@k2.com</code></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24339011]-[-1550258048]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>in below two sql query <code>sql1</code> not selecting any row, and <code>sql2</code> selecting only 1 for <code>111@k2.com</code></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sql":3,
                  "row":1,
                  "code":6,
                  "select":2,
                  "queri":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" var ids=&quot;'111@k2.com','222@k2.com','333@k2.com','444@k2.com','555@k2.com','666@k2.com'&quot; val sql1 = SQL(&quot;SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in ({users})&quot;).on(&quot;users&quot; -&gt; ids) sql1().map { row =&gt; val point = if (row[Boolean](&quot;privacy&quot;)) { row[Double](&quot;point&quot;).toString } else { &quot;0&quot; } println(write(Map(&quot;id&quot; -&gt; row[String](&quot;id&quot;), &quot;point&quot; -&gt; point))) } val sql2 = SQL(&quot;SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in (&quot; + ids + &quot;)&quot;) sql2().map { row =&gt; val point = if (row[Boolean](&quot;privacy&quot;)) { row[Double](&quot;point&quot;).toString } else { &quot;0&quot; } println(write(Map(&quot;id&quot; -&gt; row[String](&quot;id&quot;), &quot;point&quot; -&gt; point))) } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[24339011]-[-1919147300]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" var ids=\"'111@k2.com','222@k2.com','333@k2.com','444@k2.com','555@k2.com','666@k2.com'\" val sql1 = SQL(\"SELECT id,point,privacy FROM `"
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"pointTable",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"` WHERE state=1 and id in ({users})\").on(\"users\" -> ids) sql1().map { row => val point = if (row[Boolean](\"privacy\")) { row[Double](\"point\")."
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"toString",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" } else { \"0\" } println(write(Map(\"id\" -> row[String](\"id\"), \"point\" -> point))) } val sql2 = SQL(\"SELECT id,point,privacy FROM `"
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"pointTable",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"` WHERE state=1 and id in (\" + ids + \")\") sql2().map { row => val point = if (row[Boolean](\"privacy\")) { row[Double](\"point\")."
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"toString",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" } else { \"0\" } println(write(Map(\"id\" -> row[String](\"id\"), \"point\" -> point))) } "
                }
              ]
            },
            "rawText":" var ids=\"'111@k2.com','222@k2.com','333@k2.com','444@k2.com','555@k2.com','666@k2.com'\" val sql1 = SQL(\"SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in ({users})\").on(\"users\" -> ids) sql1().map { row => val point = if (row[Boolean](\"privacy\")) { row[Double](\"point\").toString } else { \"0\" } println(write(Map(\"id\" -> row[String](\"id\"), \"point\" -> point))) } val sql2 = SQL(\"SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in (\" + ids + \")\") sql2().map { row => val point = if (row[Boolean](\"privacy\")) { row[Double](\"point\").toString } else { \"0\" } println(write(Map(\"id\" -> row[String](\"id\"), \"point\" -> point))) } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sql":6,
                  "point":12,
                  "state":2,
                  "map":4,
                  "privaci":4,
                  "row":8,
                  "println":2,
                  "select":2,
                  "tabl":2,
                  "id":3,
                  "user":2,
                  "write":2,
                  "var":1,
                  "val":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>in phpmyadmin when i run this query manualy it returns 6 rows then why not working perfectly here. i am using play framework 2.2 with scala 2.1</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24339011]-[167598620]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>in phpmyadmin when i run this query manualy it returns 6 rows then why not working perfectly here. i am using play framework 2.2 with scala 2.1</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "return":1,
                  "play":1,
                  "run":1,
                  "perfect":1,
                  "row":1,
                  "framework":1,
                  "work":1,
                  "phpmyadmin":1,
                  "queri":1,
                  "scala":1,
                  "manuali":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":24341934,
      "questionId":24339011,
      "comments":[
        
      ],
      "creationDate":"2014-06-21",
      "lastActivityDate":"2014-06-21",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":2292812,
        "displayName":"m-z",
        "reputation":14834
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That's not going to work. Passing <code>users</code> though <code>on</code> is going to escape the entire string, so it's going to appear as <em>one</em> value instead of a list. Anorm in Play 2.3 actually allows you to pass lists as parameters, but here you'll have to work around that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24341934]-[690907153]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That's not going to work. Passing <code>users</code> though <code>on</code> is going to escape the entire string, so it's going to appear as <em>one</em> value instead of a list. Anorm in Play 2.3 actually allows you to pass lists as parameters, but here you'll have to work around that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "escap":1,
                    "play":1,
                    "entir":1,
                    "work":2,
                    "code":4,
                    "paramet":1,
                    "pass":2,
                    "anorm":1,
                    "user":1,
                    "list":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"val ids: List[String] = List(&quot;111@k2.com&quot;, &quot;222@k2.com&quot;, &quot;333@k2.com&quot;) val indexedIds: List[(String, Int)] = ids.zipWithIndex // Create a bunch of parameter tokens for the IN clause.. {id_0}, {id_1}, .. val tokens: String = indexedIds.map{ case (id, index) =&gt; s&quot;{id_${index}}&quot; }.mkString(&quot;, &quot;) // Create the parameter bindings for the tokens val parameters = indexedIds.map{ case (id, index) =&gt; (s&quot;id_${index}&quot; -&gt; toParameterValue(id)) } val sql1 = SQL(s&quot;SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in (${tokens})&quot;) .on(parameters: _ *) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[24341934]-[-90989496]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"val ids: List[String] = List(\"111@k2.com\", \"222@k2.com\", \"333@k2.com\") val "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"indexedIds",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": List[(String, Int)] = "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ids",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"zipWithIndex",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" // Create a bunch of parameter tokens for the IN clause.. {"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"id_0",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"}, {"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"id_1",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"}, .. val tokens: String = "
                  },
                  {
                    "type":"IdentifierNode",
                    "name":"indexedIds",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":".map{ case (id, index) => s\"{"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"id_$",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"{index}}\" }."
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"mkString",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(\", \") // Create the parameter bindings for the tokens val parameters = "
                  },
                  {
                    "type":"IdentifierNode",
                    "name":"indexedIds",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":".map{ case (id, index) => (s\""
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"id_$",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"{index}\" -> "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"toParameterValue",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(id)) } val sql1 = SQL(s\"SELECT id,point,privacy FROM `"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"pointTable",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"` WHERE state=1 and id in (${tokens})\") .on(parameters: _ *) "
                  }
                ]
              },
              "rawText":"val ids: List[String] = List(\"111@k2.com\", \"222@k2.com\", \"333@k2.com\") val indexedIds: List[(String, Int)] = idszipWithIndex // Create a bunch of parameter tokens for the IN clause.. {id_0}, {id_1}, .. val tokens: String = indexedIds.map{ case (id, index) => s\"{id_${index}}\" }.mkString(\", \") // Create the parameter bindings for the tokens val parameters = indexedIds.map{ case (id, index) => (s\"id_${index}\" -> toParameterValue(id)) } val sql1 = SQL(s\"SELECT id,point,privacy FROM `pointTable` WHERE state=1 and id in (${tokens})\") .on(parameters: _ *) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sql":2,
                    "point":2,
                    "claus":1,
                    "state":1,
                    "map":2,
                    "privaci":1,
                    "bind":1,
                    "bunch":1,
                    "select":1,
                    "tabl":1,
                    "paramet":5,
                    "id":4,
                    "token":4,
                    "idszip":1,
                    "creat":2,
                    "val":5,
                    "list":3,
                    "index":8
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}