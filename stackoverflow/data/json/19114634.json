{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19114634,
    "title":"how to give optarg value b* in getopt class",
    "comments":[
      
    ],
    "tags":[
      "java",
      "getopt"
    ],
    "creationDate":"2013-10-01",
    "lastActivityDate":"2013-10-01",
    "lastEditDate":"2013-10-01",
    "score":2,
    "viewCount":75,
    "owner":{
      "type":"StackOverflowUser",
      "id":2572969,
      "displayName":"user2572969",
      "reputation":49
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>friends, in </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19114634]-[2062962621]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>friends, in </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "friend":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<blockquote> \n <p>gnu.getopt.Getopt.jar</p> \n</blockquote>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19114634]-[-250568291]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<blockquote> \n <p>gnu.getopt.Getopt.jar</p> \n</blockquote>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "blockquot":2,
                  "getopt":2,
                  "jar":1,
                  "gnu":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>there is some problem i am getting some problem when i am giving b* as option argument then it is taking as bin</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19114634]-[1639306954]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>there is some problem i am getting some problem when i am giving b* as option argument then it is taking as bin</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "problem":2,
                  "option":1,
                  "take":1,
                  "give":1,
                  "bin":1,
                  "argument":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Getopt g = new Getopt(&quot;cm_log_parser&quot;, args, &quot;i:s&quot;); //-D to enable debug log while((opt = g.getopt()) != -1) { switch (opt) { case 'f'://To set file name(if above is not specified) fileNameWithPath = getAndCheckOptArg(fFlag, opt, g); fFlag = true; break; case 'p'://To set the pattern String pattern = g.getOptarg(); hFlag = true; break; case '?': usage(&quot;Invalid option&quot; + opt + &quot; option&quot;); break; } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19114634]-[-532857873]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"g",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Getopt",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"cm_log_parser\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"args",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"i:s\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Getopt",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    {
                      "text":"//-D to enable debug log while((opt = g.getopt()) != -1) { switch (opt) { case 'f'://To set file name(if above is not specified) fileNameWithPath = getAndCheckOptArg(fFlag, opt, g); fFlag = true; break; case 'p'://To set the pattern String pattern = g.getOptarg(); hFlag = true; break; case '?': usage(\"Invalid option\" + opt + \" option\"); break; } } \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"Getopt g = new Getopt(\"cm_log_parser\", args, \"i:s\"); //-D to enable debug log while((opt = g.getopt()) != -1) { switch (opt) { case 'f'://To set file name(if above is not specified) fileNameWithPath = getAndCheckOptArg(fFlag, opt, g); fFlag = true; break; case 'p'://To set the pattern String pattern = g.getOptarg(); hFlag = true; break; case '?': usage(\"Invalid option\" + opt + \" option\"); break; } } \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "path":1,
                  "opt":5,
                  "pattern":2,
                  "parser":1,
                  "set":2,
                  "option":2,
                  "getopt":3,
                  "debug":1,
                  "check":1,
                  "invalid":1,
                  "optarg":1,
                  "true":2,
                  "flag":3,
                  "enabl":1,
                  "usag":1,
                  "file":2,
                  "arg":2,
                  "log":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Getopt",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"g",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Getopt",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"cm_log_parser\""
                                },
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"args",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"i:s\""
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Getopt",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>When I specify <code>-p &quot;b*&quot;</code> it is returns <code>bin</code> , why this is happening?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19114634]-[851031518]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>When I specify <code>-p &quot;b*&quot;</code> it is returns <code>bin</code> , why this is happening?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "return":1,
                  "happen":1,
                  "code":4,
                  "quot":2,
                  "bin":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19115239,
      "questionId":19114634,
      "comments":[
        
      ],
      "creationDate":"2013-10-01",
      "lastActivityDate":"2013-10-01",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1667004,
        "displayName":"ppeterka",
        "reputation":12349
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The shell (I suspect you use Linux, right?) resolves the <code>b*</code> literal to <code>bin</code> (there must be a directory named <code>bin</code> in the current working directory), because it is treated as a <strong>wildcard</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19115239]-[-876136598]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The shell (I suspect you use Linux, right?) resolves the <code>b*</code> literal to <code>bin</code> (there must be a directory named <code>bin</code> in the current working directory), because it is treated as a <strong>wildcard</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "name":1,
                    "wildcard":1,
                    "resolv":1,
                    "shell":1,
                    "liter":1,
                    "strong":2,
                    "work":1,
                    "code":6,
                    "suspect":1,
                    "directori":2,
                    "linux":1,
                    "treat":1,
                    "bin":2,
                    "current":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Depending on the shell you use, you have to escape the asterisk... For example in bash, use</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19115239]-[1767738664]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Depending on the shell you use, you have to escape the asterisk... For example in bash, use</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shell":1,
                    "depend":1,
                    "escap":1,
                    "asterisk":1,
                    "bash":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"-p b\\* "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19115239]-[227019533]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"-p b\\* "
                  }
                ]
              },
              "rawText":"-p b\\* ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To escape it to be an asterisk instead of getting resolved by the shell</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19115239]-[-339230530]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To escape it to be an asterisk instead of getting resolved by the shell</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "asterisk":1,
                    "resolv":1,
                    "escap":1,
                    "shell":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}