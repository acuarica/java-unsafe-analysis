{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":22637726,
    "title":"java executeUpdate for a pl-sql always returns 1 even if the row doesn't exist",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":34483387,
        "postId":22637726,
        "creationDate":"2014-03-25",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1639556,
          "displayName":"Leos Literak",
          "reputation":2397
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This is a good question. But I think that executeUpdate() returns number of affected rows only for DML statements. Procedures are more complex. Imagine that such procedure may call several other procedures that could update or delete rows as well. What would executeUpdate() return in such case? So I think that for procedures it just returns a constant."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22637726-cu34483387]-[-1128589724]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This is a good question. But I think that executeUpdate() returns number of affected rows only for DML statements. Procedures are more complex. Imagine that such procedure may call several other procedures that could update or delete rows as well. What would executeUpdate() return in such case? So I think that for procedures it just returns a constant."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"executeUpdate",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"executeUpdate",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "constant":1,
                      "number":1,
                      "question":1,
                      "delet":1,
                      "return":2,
                      "good":1,
                      "updat":3,
                      "procedur":4,
                      "row":2,
                      "statement":1,
                      "affect":1,
                      "imagin":1,
                      "dml":1,
                      "call":1,
                      "execut":2,
                      "complex":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":34483777,
        "postId":22637726,
        "creationDate":"2014-03-25",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3254614,
          "displayName":"Surya",
          "reputation":18
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"My requirement is to use pl-sql procedures to do the update. Is there any other way of knowing if the update failed for a particular row?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22637726-cu34483777]-[2023200055]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"My requirement is to use pl-sql procedures to do the update. Is there any other way of knowing if the update failed for a particular row?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sql":1,
                      "fail":1,
                      "requir":1,
                      "updat":2,
                      "procedur":1,
                      "row":1,
                      "know":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":34483898,
        "postId":22637726,
        "creationDate":"2014-03-25",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1639556,
          "displayName":"Leos Literak",
          "reputation":2397
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can detect such situation in plsql code and return in out parameter"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22637726-cu34483898]-[2124594922]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can detect such situation in plsql code and return in out parameter"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "detect":1,
                      "plsql":1,
                      "code":1,
                      "situat":1,
                      "paramet":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":34484445,
        "postId":22637726,
        "creationDate":"2014-03-25",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2184930,
          "displayName":"Jack",
          "reputation":639
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"try getUpdateCount() method? per http://www.xyzws.com/javafaq/how-to-call-a-stored-procedure-by-jdbc-java-class/169, executeUpdate is preferred when storedProc does not return result. I am not sure of the validity of this article. It mentios about excuteQuery and execute methods. You may try them."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22637726-cu34484445]-[571224747]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"try getUpdateCount() method? per http://www.xyzws.com/javafaq/how-to-call-a-stored-procedure-by-jdbc-java-class/169, executeUpdate is preferred when storedProc does not return result. I am not sure of the validity of this article. It mentios about excuteQuery and execute methods. You may try them."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"getUpdateCount",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"executeUpdate",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"storedProc",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"excuteQuery",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":2,
                      "count":1,
                      "jdbc":1,
                      "result":1,
                      "updat":2,
                      "procedur":1,
                      "store":2,
                      "articl":1,
                      "mentio":1,
                      "queri":1,
                      "valid":1,
                      "xyzw":1,
                      "http":1,
                      "proc":1,
                      "call":1,
                      "javafaq":1,
                      "execut":2,
                      "prefer":1,
                      "www":1,
                      "excut":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":34484489,
        "postId":22637726,
        "creationDate":"2014-03-25",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1639556,
          "displayName":"Leos Literak",
          "reputation":2397
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Take a look at my blog, there is a procedure with out parameter. You can use it as template. http://www.literak.cz/2013/08/working-with-complex-database-types-in-weblogic/"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22637726-cu34484489]-[607391072]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Take a look at my blog, there is a procedure with out parameter. You can use it as template. http://www.literak.cz/2013/08/working-with-complex-database-types-in-weblogic/"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "literak":1,
                      "procedur":1,
                      "templat":1,
                      "weblog":1,
                      "work":1,
                      "paramet":1,
                      "blog":1,
                      "databas":1,
                      "type":1,
                      "http":1,
                      "complex":1,
                      "www":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jdbc",
      "plsql"
    ],
    "creationDate":"2014-03-25",
    "lastActivityDate":"2014-03-25",
    "lastEditDate":"2014-03-25",
    "score":1,
    "viewCount":115,
    "owner":{
      "type":"StackOverflowUser",
      "id":3254614,
      "displayName":"Surya",
      "reputation":18
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have the following java code where the output of executeUpdate() is being captured in a int and the value is always 1. For the input values there are no rows in DB but it still returns 1. Why? Am I missing something?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[22637726]-[-614401675]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have the following java code where the output of executeUpdate() is being captured in a int and the value is always 1. For the input values there are no rows in DB but it still returns 1. Why? Am I missing something?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"executeUpdate",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "return":1,
                  "updat":1,
                  "row":1,
                  "miss":1,
                  "code":1,
                  "captur":1,
                  "valu":1,
                  "output":1,
                  "input":1,
                  "execut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" /*******************Java code *************/ /**** Code to get connection above ***/ CallableStatement oraCallStmt = null; try { oraCallStmt = connection.prepareCall( &quot;{ call XXXXX.UPDATEMEMBERNUMBER(?,?)}&quot; ); } catch (SQLException e1) { // TODO Auto-generated catch block e1.printStackTrace(); return ; } try { //Reading a comma delimited file to get two column values //One into the where clause and one into the update clause while ((str = in.readLine()) != null) { String[] ar = str.split(&quot;,&quot;); oraCallStmt.setString(1,ar[0].trim()); oraCallStmt.setString(2,ar[1].trim()); int output = oraCallStmt.executeUpdate(); //The output returns 1 always even if the row doesn't exist System.out.println(str +'-'+output); //Writing the result to another file bw.write(str +'-'+output); bw.newLine() ; bw.flush(); } bw.close(); }catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } /************pl-sql package*******************/ PROCEDURE UpdateMemberNumber(CUSTID_INP IN VARCHAR, MEM_NUM_INP IN VARCHAR) IS BEGIN UPDATE GENESIS.CUSTOMER SET MEMBER_NUMBER = MEM_NUM_INP WHERE CUSTOMER_ID = CUSTID_INP ; END UpdateMemberNumber ; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[22637726]-[-1601732147]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" /*******************Java code *************/ /**** Code to get connection above ***/ "
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"oraCallStmt",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"NullLiteralNode"
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"CallableStatement",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TryCatchStatementNode",
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"oraCallStmt",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"connection",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"prepareCall",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"{ call XXXXX.UPDATEMEMBERNUMBER(?,?)}\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "catches":[
                    {
                      "type":"CatchClauseNode",
                      "modifiers":[
                        
                      ],
                      "catchType":{
                        "type":"CatchTypeNode",
                        "identifiers":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"SQLException",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"e1",
                        "comments":[
                          
                        ]
                      },
                      "block":{
                        "type":"BlockNode",
                        "statements":[
                          
                        ],
                        "labels":[
                          
                        ],
                        "comments":[
                          {
                            "text":"// TODO Auto-generated catch block e1.printStackTrace(); return ; } try { //Reading a comma delimited file to get two column values //One into the where clause and one into the update clause while ((str = in.readLine()) != null) { String[] ar = str.split(\",\"); oraCallStmt.setString(1,ar[0].trim()); oraCallStmt.setString(2,ar[1].trim()); int output = oraCallStmt.executeUpdate(); //The output returns 1 always even if the row doesn't exist System.out.println(str +'-'+output); //Writing the result to another file bw.write(str +'-'+output); bw.newLine() ; bw.flush(); } bw.close(); }catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } /************pl-sql package*******************/ PROCEDURE UpdateMemberNumber(CUSTID_INP IN VARCHAR, MEM_NUM_INP IN VARCHAR) IS BEGIN UPDATE GENESIS.CUSTOMER SET MEMBER_NUMBER = MEM_NUM_INP WHERE CUSTOMER_ID = CUSTID_INP ; END UpdateMemberNumber ; \n"
                          }
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":" /*******************Java code *************/ /**** Code to get connection above ***/ CallableStatement oraCallStmt = null; try { oraCallStmt = connection.prepareCall( \"{ call XXXXX.UPDATEMEMBERNUMBER(?,?)}\"); } catch (SQLException e1) { // TODO Auto-generated catch block e1.printStackTrace(); return ; } try { //Reading a comma delimited file to get two column values //One into the where clause and one into the update clause while ((str = in.readLine()) != null) { String[] ar = str.split(\",\"); oraCallStmt.setString(1,ar[0].trim()); oraCallStmt.setString(2,ar[1].trim()); int output = oraCallStmt.executeUpdate(); //The output returns 1 always even if the row doesn't exist System.out.println(str +'-'+output); //Writing the result to another file bw.write(str +'-'+output); bw.newLine() ; bw.flush(); } bw.close(); }catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } /************pl-sql package*******************/ PROCEDURE UpdateMemberNumber(CUSTID_INP IN VARCHAR, MEM_NUM_INP IN VARCHAR) IS BEGIN UPDATE GENESIS.CUSTOMER SET MEMBER_NUMBER = MEM_NUM_INP WHERE CUSTOMER_ID = CUSTID_INP ; END UpdateMemberNumber ; \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":2,
                  "number":3,
                  "sql":1,
                  "begin":1,
                  "custid":2,
                  "auto":2,
                  "trace":2,
                  "custom":2,
                  "system":1,
                  "claus":2,
                  "exist":1,
                  "connect":2,
                  "return":1,
                  "line":2,
                  "print":2,
                  "result":1,
                  "set":3,
                  "updat":5,
                  "inp":4,
                  "procedur":1,
                  "xxxxx":1,
                  "row":1,
                  "statement":1,
                  "println":1,
                  "num":2,
                  "genesi":1,
                  "code":2,
                  "callabl":1,
                  "str":4,
                  "block":2,
                  "member":3,
                  "ora":5,
                  "split":1,
                  "mem":2,
                  "valu":1,
                  "delimit":1,
                  "stack":2,
                  "generat":2,
                  "end":1,
                  "flush":1,
                  "column":1,
                  "file":2,
                  "prepar":1,
                  "stmt":5,
                  "varchar":2,
                  "todo":2,
                  "output":4,
                  "trim":2,
                  "close":1,
                  "call":7,
                  "write":2,
                  "comma":1,
                  "updatemembernumb":1,
                  "execut":1,
                  "sqlexcept":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"CallableStatement",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"connection",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"prepareCall",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"{ call XXXXX.UPDATEMEMBERNUMBER(?,?)}\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"oraCallStmt",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"CallableStatement",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}