{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":12923084,
    "title":"Academic Java int[] merge sort inverts half the output",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":17511923,
        "postId":12923084,
        "creationDate":"2012-10-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":892387,
          "displayName":"Colleen",
          "reputation":2500
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I've walked through this code on paper and don't know what's wrong... have you tried running it through the debugger?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12923084-cu17511923]-[1732461096]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I've walked through this code on paper and don't know what's wrong... have you tried running it through the debugger?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "wrong":1,
                      "run":1,
                      "walk":1,
                      "code":1,
                      "debugg":1,
                      "paper":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17511468,
        "postId":12923084,
        "creationDate":"2012-10-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1735865,
          "displayName":"taufique",
          "reputation":825
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"bad implementation of merge() indeed."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12923084-cu17511468]-[-504068884]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"bad implementation of merge() indeed."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "merg":1,
                      "bad":1,
                      "implement":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17511517,
        "postId":12923084,
        "creationDate":"2012-10-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1735865,
          "displayName":"taufique",
          "reputation":825
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't know, is cropArray standard function? What does it do exactly?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[12923084-cu17511517]-[-1339163309]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't know, is cropArray standard function? What does it do exactly?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"cropArray",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "standard":1,
                      "function":1,
                      "crop":1,
                      "array":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "mergesort"
    ],
    "creationDate":"2012-10-16",
    "lastActivityDate":"2012-10-16",
    "lastEditDate":"2012-10-16",
    "score":2,
    "viewCount":399,
    "owner":{
      "type":"StackOverflowUser",
      "id":1751218,
      "displayName":"stefan",
      "reputation":144
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm getting hair loss here trying to find the error in my merge sort implementation in Java:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12923084]-[-2033420045]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm getting hair loss here trying to find the error in my merge sort implementation in Java:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "hair":1,
                  "error":1,
                  "merg":1,
                  "implement":1,
                  "loss":1,
                  "sort":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" Input: 10 9 8 7 6 5 4 3 2 1 Output: 5 4 3 2 1 10 9 8 7 6 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[12923084]-[-784615641]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" Input: 10 9 8 7 6 5 4 3 2 1 Output: 5 4 3 2 1 10 9 8 7 6 "
                }
              ]
            },
            "rawText":" Input: 10 9 8 7 6 5 4 3 2 1 Output: 5 4 3 2 1 10 9 8 7 6 ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "input":1,
                  "output":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I printed the in between arrays in my merge function and it gave me this:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12923084]-[1400941744]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I printed the in between arrays in my merge function and it gave me this:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "print":1,
                  "array":1,
                  "function":1,
                  "merg":1,
                  "gave":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"10 9 8 7 6 5 4 3 2 1 9 10 6 7 7 6 8 8 7 6 10 9 4 5 1 2 2 1 3 3 2 1 5 4 5 4 3 2 1 10 9 8 7 6 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[12923084]-[-881088582]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"10 9 8 7 6 5 4 3 2 1 9 10 6 7 7 6 8 8 7 6 10 9 4 5 1 2 2 1 3 3 2 1 5 4 5 4 3 2 1 10 9 8 7 6 "
                }
              ]
            },
            "rawText":"10 9 8 7 6 5 4 3 2 1 9 10 6 7 7 6 8 8 7 6 10 9 4 5 1 2 2 1 3 3 2 1 5 4 5 4 3 2 1 10 9 8 7 6 ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm pretty sure the mistake must be in my merge function. but I'm having a really hard time finding it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12923084]-[-1013572794]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm pretty sure the mistake must be in my merge function. but I'm having a really hard time finding it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "hard":1,
                  "pretti":1,
                  "mistak":1,
                  "function":1,
                  "merg":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here's my code: </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12923084]-[1316290030]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here's my code: </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"class merge1 { //the array which will get sorted static int N = 10; static int[] A = new int[N]; static int[] cropArray(int[] a) { int[] b = new int[a.length-1]; System.arraycopy(a, 1, b, 0, b.length); return b; } static int[] merge(int[] left, int[] right) { int[] merged = new int[left.length + right.length]; int i = 0; //loop must go on until both arrays are emptied into merged while(left.length &gt; 0 || right.length &gt; 0) { //first case: both arrays are still filled with elements to compare if(left.length &gt; 0 &amp;&amp; right.length &gt; 0) { if(left[0] &lt;= right[0]) //check for the bigger one { merged[i] = left[0]; left = cropArray(left); } else { merged[i] = right[0]; right = cropArray(right); } } else //second case: one of the arrays is empty { if(left.length &gt; 0) { merged[i] = left[0]; left = cropArray(left); } else if(right.length &gt; 0) { merged[i] = right[0]; right = cropArray(right); } } i++; } //while printA(merged, merged.length); return merged; } //merge() //merg sort recursivly splits the array in half until only one element is left and then merges each half back together in sorted order static int[] mergeSort(int[] a) { //STEP 1 //exit case if only one element to sort return this element if(a.length &lt;= 1) return a; //STEP 2 // split array into half int len = a.length/2; int[] left, right; //check if length is even, if not even integer division will cause loss of data if(a.length % 2 == 0) { //devide into two even halfs left = new int[len]; right = new int[len]; } else { //devide into two uneven halfs left = new int[len]; right = new int[len+1]; } //cycle through a and save out each half //could also use System.arraycopy here as in the merge function for(int i = 0; i &lt; left.length; i++) { left[i] = a[i]; } for(int i = 0; i &lt; right.length; i++) { right[i] = a[i+len]; } //split each half recursivley until only one element is left mergeSort(left); mergeSort(right); //STEP 3 //merge sorted halfs and return return merge(right, left); } //mergeSort() //initalizes the array for the worst case //the worst case for merge sort is an array sorted in reverse static void init() { int k = N; for(int i = 0; i &lt; A.length; i++) { A[i] = k; k--; } }//init() //prints the array, used to check if mergeSort is working static void printA(int[] a, int n) { for(int i = 0; i &lt; n; i++) { System.out.print(a[i] + &quot; &quot;); } System.out.println(); //break } //printA public static void main(String[] args) { //test code init(); printA(A,A.length); int [] sorted = mergeSort(A); //printA(sorted, sorted.length); /*//does 2000 sorts with arrays going from 0 to 1999 elements for(int i = 0; i &lt; 2000; i++) { init(); long x = System.nanoTime(); mergeSort(A, i); System.out.println(i + &quot; &quot; + (System.nanoTime() - x)); }*/ } //main() }//merge1 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[12923084]-[-2021691335]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"merge1",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          
                        ],
                        "comments":[
                          {
                            "text":"//the array which will get sorted static int N = 10; static int[] A = new int[N]; static int[] cropArray(int[] a) { int[] b = new int[a.length-1]; System.arraycopy(a, 1, b, 0, b.length); return b; } static int[] merge(int[] left, int[] right) { int[] merged = new int[left.length + right.length]; int i = 0; //loop must go on until both arrays are emptied into merged while(left.length > 0 || right.length > 0) { //first case: both arrays are still filled with elements to compare if(left.length > 0 && right.length > 0) { if(left[0] <= right[0]) //check for the bigger one { merged[i] = left[0]; left = cropArray(left); } else { merged[i] = right[0]; right = cropArray(right); } } else //second case: one of the arrays is empty { if(left.length > 0) { merged[i] = left[0]; left = cropArray(left); } else if(right.length > 0) { merged[i] = right[0]; right = cropArray(right); } } i++; } //while printA(merged, merged.length); return merged; } //merge() //merg sort recursivly splits the array in half until only one element is left and then merges each half back together in sorted order static int[] mergeSort(int[] a) { //STEP 1 //exit case if only one element to sort return this element if(a.length <= 1) return a; //STEP 2 // split array into half int len = a.length/2; int[] left, right; //check if length is even, if not even integer division will cause loss of data if(a.length % 2 == 0) { //devide into two even halfs left = new int[len]; right = new int[len]; } else { //devide into two uneven halfs left = new int[len]; right = new int[len+1]; } //cycle through a and save out each half //could also use System.arraycopy here as in the merge function for(int i = 0; i < left.length; i++) { left[i] = a[i]; } for(int i = 0; i < right.length; i++) { right[i] = a[i+len]; } //split each half recursivley until only one element is left mergeSort(left); mergeSort(right); //STEP 3 //merge sorted halfs and return return merge(right, left); } //mergeSort() //initalizes the array for the worst case //the worst case for merge sort is an array sorted in reverse static void init() { int k = N; for(int i = 0; i < A.length; i++) { A[i] = k; k--; } }//init() //prints the array, used to check if mergeSort is working static void printA(int[] a, int n) { for(int i = 0; i < n; i++) { System.out.print(a[i] + \" \"); } System.out.println(); //break } //printA public static void main(String[] args) { //test code init(); printA(A,A.length); int [] sorted = mergeSort(A); //printA(sorted, sorted.length); /*//does 2000 sorts with arrays going from 0 to 1999 elements for(int i = 0; i < 2000; i++) { init(); long x = System.nanoTime(); mergeSort(A, i); System.out.println(i + \" \" + (System.nanoTime() - x)); }*/ } //main() }//merge1 \n"
                          }
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"class merge1 { //the array which will get sorted static int N = 10; static int[] A = new int[N]; static int[] cropArray(int[] a) { int[] b = new int[a.length-1]; System.arraycopy(a, 1, b, 0, b.length); return b; } static int[] merge(int[] left, int[] right) { int[] merged = new int[left.length + right.length]; int i = 0; //loop must go on until both arrays are emptied into merged while(left.length > 0 || right.length > 0) { //first case: both arrays are still filled with elements to compare if(left.length > 0 && right.length > 0) { if(left[0] <= right[0]) //check for the bigger one { merged[i] = left[0]; left = cropArray(left); } else { merged[i] = right[0]; right = cropArray(right); } } else //second case: one of the arrays is empty { if(left.length > 0) { merged[i] = left[0]; left = cropArray(left); } else if(right.length > 0) { merged[i] = right[0]; right = cropArray(right); } } i++; } //while printA(merged, merged.length); return merged; } //merge() //merg sort recursivly splits the array in half until only one element is left and then merges each half back together in sorted order static int[] mergeSort(int[] a) { //STEP 1 //exit case if only one element to sort return this element if(a.length <= 1) return a; //STEP 2 // split array into half int len = a.length/2; int[] left, right; //check if length is even, if not even integer division will cause loss of data if(a.length % 2 == 0) { //devide into two even halfs left = new int[len]; right = new int[len]; } else { //devide into two uneven halfs left = new int[len]; right = new int[len+1]; } //cycle through a and save out each half //could also use System.arraycopy here as in the merge function for(int i = 0; i < left.length; i++) { left[i] = a[i]; } for(int i = 0; i < right.length; i++) { right[i] = a[i+len]; } //split each half recursivley until only one element is left mergeSort(left); mergeSort(right); //STEP 3 //merge sorted halfs and return return merge(right, left); } //mergeSort() //initalizes the array for the worst case //the worst case for merge sort is an array sorted in reverse static void init() { int k = N; for(int i = 0; i < A.length; i++) { A[i] = k; k--; } }//init() //prints the array, used to check if mergeSort is working static void printA(int[] a, int n) { for(int i = 0; i < n; i++) { System.out.print(a[i] + \" \"); } System.out.println(); //break } //printA public static void main(String[] args) { //test code init(); printA(A,A.length); int [] sorted = mergeSort(A); //printA(sorted, sorted.length); /*//does 2000 sorts with arrays going from 0 to 1999 elements for(int i = 0; i < 2000; i++) { init(); long x = System.nanoTime(); mergeSort(A, i); System.out.println(i + \" \" + (System.nanoTime() - x)); }*/ } //main() }//merge1 \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":1,
                  "loop":1,
                  "recursivli":1,
                  "step":3,
                  "system":7,
                  "worst":2,
                  "revers":1,
                  "print":7,
                  "data":1,
                  "left":21,
                  "main":2,
                  "nano":2,
                  "println":2,
                  "work":1,
                  "element":6,
                  "half":8,
                  "code":1,
                  "devid":2,
                  "array":15,
                  "check":3,
                  "divis":1,
                  "compar":1,
                  "order":1,
                  "fill":1,
                  "split":3,
                  "function":1,
                  "empti":2,
                  "merg":26,
                  "back":1,
                  "uneven":1,
                  "exit":1,
                  "length":20,
                  "bigger":1,
                  "loss":1,
                  "time":2,
                  "sort":18,
                  "cycl":1,
                  "arraycopi":2,
                  "save":1,
                  "crop":5,
                  "init":5,
                  "arg":1,
                  "recursivley":1,
                  "len":6
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":12923352,
      "questionId":12923084,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":17512346,
          "postId":12923352,
          "creationDate":"2012-10-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1751218,
            "displayName":"stefan",
            "reputation":144
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"very neat implementation! thanks for the tip!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12923352-cu17512346]-[1972364902]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"very neat implementation! thanks for the tip!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "neat":1,
                        "tip":1,
                        "implement":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-10-16",
      "lastActivityDate":"2012-10-16",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1123123,
        "displayName":"Sam I am",
        "reputation":20624
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm going to write some psudocode for the merge() function here</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12923352]-[-1681798257]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm going to write some psudocode for the merge() function here</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "merg":1,
                    "function":1,
                    "write":1,
                    "psudocod":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"merge(int[] left, int[] right) { int l = 0; int r = 0; int[] merged = new int[left.lentgh+right.length]; for(int i=0; i&lt;merged.length; i++) { // this condition is dependant of the fact that merged.length is equal to the sum of left.length and right.length if(r &gt;= right[r].length || (l &lt; left.length &amp;&amp; left[l] &lt; right[r])) { merged[i] = left[l]; l++; } else { merged[r] = right[r]; r++; } } return merged } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[12923352]-[-736615245]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"merge",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"ArrayTypeNode",
                          "typeNode":{
                            "type":"PrimitiveTypeNode",
                            "name":"int",
                            "comments":[
                              
                            ]
                          },
                          "depth":[
                            {
                              "type":"ArrayDimensionNode",
                              "comments":[
                                
                              ]
                            }
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"left",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "formalParameterDeclarator":{
                            "type":"FormalParameterDeclsNode",
                            "modifiers":[
                              
                            ],
                            "parameterType":{
                              "type":"ArrayTypeNode",
                              "typeNode":{
                                "type":"PrimitiveTypeNode",
                                "name":"int",
                                "comments":[
                                  
                                ]
                              },
                              "depth":[
                                {
                                  "type":"ArrayDimensionNode",
                                  "comments":[
                                    
                                  ]
                                }
                              ]
                            },
                            "nextDeclarator":{
                              "type":"AdditionalFormalParameterDeclNode",
                              "variableDeclarator":{
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"right",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"l",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"0"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"int",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"r",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"0"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"int",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"merged",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"ArrayExpressionCreatorNode",
                                      "creatorType":{
                                        "type":"PrimitiveTypeNode",
                                        "name":"int",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionDepth":[
                                        {
                                          "type":"DimExpressionNode",
                                          "argument":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"+",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"left",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"lentgh",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"right",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"length",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "arrayDepth":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ArrayTypeNode",
                                  "typeNode":{
                                    "type":"PrimitiveTypeNode",
                                    "name":"int",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "depth":[
                                    {
                                      "type":"ArrayDimensionNode",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ForLoopStatementNode",
                          "forControl":{
                            "type":"ForVarControlNode",
                            "variables":{
                              "type":"LocalVariableDeclarationStatementNode",
                              "modifiers":[
                                
                              ],
                              "declarators":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"0"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "condition":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"<",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"merged",
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"IdentifierNode",
                                    "name":"length",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "update":[
                              {
                                "type":"PostfixOperatorExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"++",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"// this condition is dependant of the fact that merged.length is equal to the sum of left.length and right.length if(r >= right[r].length || (l < left.length && left[l] < right[r])) { merged[i] = left[l]; l++; } else { merged[r] = right[r]; r++; } } return merged } \n"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"merge(int[] left, int[] right) { int l = 0; int r = 0; int[] merged = new int[left.lentgh+right.length]; for(int i=0; i<merged.length; i++) { // this condition is dependant of the fact that merged.length is equal to the sum of left.length and right.length if(r >= right[r].length || (l < left.length && left[l] < right[r])) { merged[i] = left[l]; l++; } else { merged[r] = right[r]; r++; } } return merged } \n...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "lentgh":1,
                    "depend":1,
                    "condit":1,
                    "left":6,
                    "fact":1,
                    "equal":1,
                    "merg":7,
                    "length":7,
                    "sum":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"merged",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"+",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"left",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"lentgh",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"right",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"length",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"right",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"left",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"i",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"l",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"r",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":12923579,
      "questionId":12923084,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":17512910,
          "postId":12923579,
          "creationDate":"2012-10-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1751218,
            "displayName":"stefan",
            "reputation":144
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"brilliant! what a stupid mistake, thanks colleen!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[12923579-cu17512910]-[-328874616]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"brilliant! what a stupid mistake, thanks colleen!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "colleen":1,
                        "stupid":1,
                        "brilliant":1,
                        "mistak":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-10-16",
      "lastActivityDate":"2012-10-16",
      "lastEditDate":"2012-10-16",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":892387,
        "displayName":"Colleen",
        "reputation":2500
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>you're not reassigning <code>right</code> and <code>left</code> in your calls to <code>mergeSort()</code>, so the actual &quot;sortedness&quot; is not carrying up the chain:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12923579]-[-1833767117]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>you're not reassigning <code>right</code> and <code>left</code> in your calls to <code>mergeSort()</code>, so the actual &quot;sortedness&quot; is not carrying up the chain:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"mergeSort",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "carri":1,
                    "left":1,
                    "code":6,
                    "sorted":1,
                    "merg":1,
                    "quot":2,
                    "sort":1,
                    "actual":1,
                    "call":1,
                    "chain":1,
                    "reassign":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>instead of </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12923579]-[1546403330]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>instead of </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"mergeSort(left); mergeSort(right); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[12923579]-[714262489]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"mergeSort",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"left",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"mergeSort",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"right",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"mergeSort(left); mergeSort(right); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "merg":2,
                    "sort":2,
                    "left":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"mergeSort",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"left",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"mergeSort",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"right",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>you want</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[12923579]-[462159228]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>you want</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"left = mergeSort(left); right = mergeSort(right); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[12923579]-[1708682084]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"left",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"mergeSort",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"left",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"right",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"mergeSort",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"right",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"left = mergeSort(left); right = mergeSort(right); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "merg":2,
                    "sort":2,
                    "left":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"mergeSort",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"left",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"mergeSort",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"right",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}