{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19615337,
    "title":"Java: Need optimzed (fast) method for writing integer array to FileOutputStream",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29118225,
        "postId":19615337,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1212596,
          "displayName":"Paul Draper",
          "reputation":17202
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"For clarification, these are byte values (0-255) that are being stored as ints. You don't have an array of `{0, 100, 1000, 100000}` and want to print those. If so, http://stackoverflow.com/questions/1086054/java-how-to-convert-int-to-byte"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19615337-cu29118225]-[-913827380]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"For clarification, these are byte values (0-255) that are being stored as ints. You don't have an array of `{0, 100, 1000, 100000}` and want to print those. If so, http://stackoverflow.com/questions/1086054/java-how-to-convert-int-to-byte"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "print":1,
                      "store":1,
                      "array":1,
                      "stackoverflow":1,
                      "int":1,
                      "valu":1,
                      "http":1,
                      "convert":1,
                      "clarif":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29118274,
        "postId":19615337,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1937263,
          "displayName":"macias",
          "reputation":1152
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Other link http://stackoverflow.com/questions/4358875/fastest-way-to-write-an-array-of-integers-to-a-file-in-java?rq=1"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19615337-cu29118274]-[-364353315]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Other link http://stackoverflow.com/questions/4358875/fastest-way-to-write-an-array-of-integers-to-a-file-in-java?rq=1"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "fastest":1,
                      "array":1,
                      "stackoverflow":1,
                      "integ":1,
                      "link":1,
                      "file":1,
                      "http":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29118300,
        "postId":19615337,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1324599,
          "displayName":"ags",
          "reputation":194
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"More specifically, I have int[14] and I want to write that in little-endian order to a file, with good efficiency. The link provided takes a different approach (which I could use if that's the best way - but requires more modification) which starts with a ByteBuffer, (apparently) wraps it with an IntBuffer, adds data (one int at a time) to the IntBuffer, then extracts a byte[] - which for my use would then be written to the FileOutputStream. Is that an efficient method?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19615337-cu29118300]-[210273966]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"More specifically, I have int[14] and I want to write that in little-endian order to a file, with good efficiency. The link provided takes a different approach (which I could use if that's the best way - but requires more modification) which starts with a ByteBuffer, (apparently) wraps it with an IntBuffer, adds data (one int at a time) to the IntBuffer, then extracts a byte[] - which for my use would then be written to the FileOutputStream. Is that an efficient method?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IntBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IntBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "provid":1,
                      "method":1,
                      "appar":1,
                      "good":1,
                      "requir":1,
                      "endian":1,
                      "data":1,
                      "effici":2,
                      "modif":1,
                      "buffer":3,
                      "wrap":1,
                      "take":1,
                      "order":1,
                      "stream":1,
                      "link":1,
                      "written":1,
                      "specif":1,
                      "approach":1,
                      "file":2,
                      "time":1,
                      "output":1,
                      "start":1,
                      "add":1,
                      "write":1,
                      "extract":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ByteBuffer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"IntBuffer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "arrays",
      "wrap"
    ],
    "creationDate":"2013-10-27",
    "lastActivityDate":"2013-10-27",
    "lastEditDate":"2013-10-27",
    "score":0,
    "viewCount":175,
    "owner":{
      "type":"StackOverflowUser",
      "id":1324599,
      "displayName":"ags",
      "reputation":194
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Searching yields many questions about how to convert an int to byte[]. I have a project with a critical loop that writes a long int[] to a FileOutputStream. FileOutputStream requires a byte[] for writing. I can brute-force different methods; I'm looking for a way to send an int[] directly to a FileOutputStream or the fastest method to convert int[] to byte[] - something like wrapping a buffer. I see ways to wrap a byte[] to convert to int[] and float[]... but none the other way (from int[] to byte[]). Thanks.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19615337]-[861360061]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Searching yields many questions about how to convert an int to byte[]. I have a project with a critical loop that writes a long int[] to a FileOutputStream. FileOutputStream requires a byte[] for writing. I can brute-force different methods; I'm looking for a way to send an int[] directly to a FileOutputStream or the fastest method to convert int[] to byte[] - something like wrapping a buffer. I see ways to wrap a byte[] to convert to int[] and float[]... but none the other way (from int[] to byte[]). Thanks.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"FileOutputStream",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"FileOutputStream",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "method":2,
                  "critic":1,
                  "loop":1,
                  "project":1,
                  "requir":1,
                  "yield":1,
                  "buffer":1,
                  "brute":1,
                  "fastest":1,
                  "way":1,
                  "direct":1,
                  "wrap":2,
                  "stream":3,
                  "file":3,
                  "output":3,
                  "forc":1,
                  "convert":3,
                  "write":2,
                  "search":1,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"FileOutputStream",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Update: still hoping to avoid the complexity (or experimenting - for now) of memory mapped I/O until the need is proven. The comments below prompted me to look at creating a ByteBuffer, wrapping it in an IntBuffer, writing ints to the IntBuffer, then extracting a byte[] from the ByteBuffer to send to the FileOutputStream. The obvious alternative is just to use byte[] directly, which requires that I manipulate my data as bytes rather than ints, which I can do - but how much more efficient (if at all) is it compared to the byte[]/ByteBuffer/IntBuffer wrapping scheme?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19615337]-[-338016122]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Update: still hoping to avoid the complexity (or experimenting - for now) of memory mapped I/O until the need is proven. The comments below prompted me to look at creating a ByteBuffer, wrapping it in an IntBuffer, writing ints to the IntBuffer, then extracting a byte[] from the ByteBuffer to send to the FileOutputStream. The obvious alternative is just to use byte[] directly, which requires that I manipulate my data as bytes rather than ints, which I can do - but how much more efficient (if at all) is it compared to the byte[]/ByteBuffer/IntBuffer wrapping scheme?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ByteBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"IntBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"IntBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ByteBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ByteBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"IntBuffer",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "proven":1,
                  "map":1,
                  "requir":1,
                  "obvious":1,
                  "data":1,
                  "updat":1,
                  "effici":1,
                  "manipul":1,
                  "prompt":1,
                  "buffer":6,
                  "altern":1,
                  "experi":1,
                  "avoid":1,
                  "direct":1,
                  "wrap":2,
                  "hope":1,
                  "compar":1,
                  "scheme":1,
                  "stream":1,
                  "comment":1,
                  "int":2,
                  "file":1,
                  "output":1,
                  "creat":1,
                  "byte":1,
                  "write":1,
                  "extract":1,
                  "complex":1,
                  "send":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"IntBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19615381,
      "questionId":19615337,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29118412,
          "postId":19615381,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1324599,
            "displayName":"ags",
            "reputation":194
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, good point about disk I/O and I did consider that. I may be writing files of 100+MB and am unfamiliar with all but the basics of memory mapped I/O. I am happy to start (until measurements show further optimization is needed) with letting java deal with buffered I/O. At first pass I'm looking to avoid unnecessary copying of data from int[] to byte[] just to get it out to a FileOutputStream (or something else that might be more suitable)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19615381-cu29118412]-[-957904120]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, good point about disk I/O and I did consider that. I may be writing files of 100+MB and am unfamiliar with all but the basics of memory mapped I/O. I am happy to start (until measurements show further optimization is needed) with letting java deal with buffered I/O. At first pass I'm looking to avoid unnecessary copying of data from int[] to byte[] just to get it out to a FileOutputStream (or something else that might be more suitable)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"FileOutputStream",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "show":1,
                        "disk":1,
                        "map":1,
                        "good":1,
                        "data":1,
                        "buffer":1,
                        "unfamiliar":1,
                        "avoid":1,
                        "measur":1,
                        "optim":1,
                        "need":1,
                        "stream":1,
                        "suitabl":1,
                        "pass":1,
                        "file":2,
                        "happi":1,
                        "output":1,
                        "start":1,
                        "basic":1,
                        "let":1,
                        "deal":1,
                        "write":1,
                        "copi":1,
                        "unnecessari":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"FileOutputStream",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29118499,
          "postId":19615381,
          "creationDate":"2013-10-27",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@ags I would concentrate on the slowest parts of your system first. You can do a direct copy from `int[]` to `byte[]` using sun.misc.Unsafe but if the array is large enough, it is your L3 cache to memory bandwidth which will be the limiting factor and how you do it won't matter. Creating the byte[] in the first place could cost more. NOTE: your byte[] has to be copied to native memory which is why Java-Chronicle copies directly into native memory to avoid all of that."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19615381-cu29118499]-[326092439]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@ags I would concentrate on the slowest parts of your system first. You can do a direct copy from `int[]` to `byte[]` using sun.misc.Unsafe but if the array is large enough, it is your L3 cache to memory bandwidth which will be the limiting factor and how you do it won't matter. Creating the byte[] in the first place could cost more. NOTE: your byte[] has to be copied to native memory which is why Java-Chronicle copies directly into native memory to avoid all of that."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "cach":1,
                        "system":1,
                        "sun":1,
                        "bandwidth":1,
                        "avoid":1,
                        "factor":1,
                        "direct":2,
                        "array":1,
                        "larg":1,
                        "concentr":1,
                        "cost":1,
                        "note":1,
                        "ag":1,
                        "misc":1,
                        "place":1,
                        "unsaf":1,
                        "matter":1,
                        "part":1,
                        "creat":1,
                        "limit":1,
                        "chronicl":1,
                        "slowest":1,
                        "won":1,
                        "copi":3,
                        "memori":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Your bottleneck is most likely to be your disk IO so what you do in CPU doesn't matter. I would make sure you trying to solve a problem which will make a difference to your application.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19615381]-[-934059772]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Your bottleneck is most likely to be your disk IO so what you do in CPU doesn't matter. I would make sure you trying to solve a problem which will make a difference to your application.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "disk":1,
                    "problem":1,
                    "differ":1,
                    "cpu":1,
                    "applic":1,
                    "make":2,
                    "bottleneck":1,
                    "matter":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you have a fast disk sub system and you have short bursts of data, your CPU can matter and the fastest way to do the conversion is to avoid performing the conversion in the first place, ie don't use a <code>byte[]</code> at all. An example if OpenHFT/Java Chronicle this takes an <code>int</code> value and writes it direct to a memory mapped file memory region as a 32-bit value. This means each write consists of a single machine code instruction and takes about 1.5 ns on average.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19615381]-[-1279801574]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you have a fast disk sub system and you have short bursts of data, your CPU can matter and the fastest way to do the conversion is to avoid performing the conversion in the first place, ie don't use a <code>byte[]</code> at all. An example if OpenHFT/Java Chronicle this takes an <code>int</code> value and writes it direct to a memory mapped file memory region as a 32-bit value. This means each write consists of a single machine code instruction and takes about 1.5 ns on average.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "bit":1,
                    "system":1,
                    "disk":1,
                    "map":1,
                    "data":1,
                    "burst":1,
                    "averag":1,
                    "mean":1,
                    "fastest":1,
                    "open":1,
                    "avoid":1,
                    "hft":1,
                    "direct":1,
                    "code":5,
                    "consist":1,
                    "take":2,
                    "machin":1,
                    "convers":2,
                    "cpu":1,
                    "perform":1,
                    "region":1,
                    "file":1,
                    "fast":1,
                    "place":1,
                    "matter":1,
                    "chronicl":1,
                    "write":2,
                    "instruct":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19615503,
      "questionId":19615337,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29118523,
          "postId":19615503,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"While simpler, this would be much slower as it turns the int[] into a byte[] and much more."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19615503-cu29118523]-[2019137385]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"While simpler, this would be much slower as it turns the int[] into a byte[] and much more."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "simpler":1,
                        "slower":1,
                        "turn":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29118796,
          "postId":19615503,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1324599,
            "displayName":"ags",
            "reputation":194
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Agreed. While useful for Serialization of heterogeneous types for persistent storage and later Deserialization, I've measured significant performance impact using this when not necessary."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19615503-cu29118796]-[-1072938840]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Agreed. While useful for Serialization of heterogeneous types for persistent storage and later Deserialization, I've measured significant performance impact using this when not necessary."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "impact":1,
                        "measur":1,
                        "persist":1,
                        "heterogen":1,
                        "signific":1,
                        "perform":1,
                        "agre":1,
                        "deseri":1,
                        "type":1,
                        "storag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1831293,
        "displayName":"Evgeniy Dorofeev",
        "reputation":58894
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Try ObjectOutputStream.writeObject(intArray). You can later read it with ObjectIntputStream.readObject</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19615503]-[-2021078109]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Try ObjectOutputStream.writeObject(intArray). You can later read it with ObjectIntputStream.readObject</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ObjectOutputStream",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"writeObject",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"intArray",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ObjectIntputStream",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"readObject",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "object":4,
                    "array":1,
                    "stream":2,
                    "intput":1,
                    "output":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}