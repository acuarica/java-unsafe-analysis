{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11119010,
    "title":"Use previously injected bindings in Guice initialization",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":14568505,
        "postId":11119010,
        "creationDate":"2012-06-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1064612,
          "displayName":"Yanflea",
          "reputation":1947
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I think your question is unclear, could you be more precise please ? Beside that, is it relevant to precise you are using Actor / Akka ? Does it have a link with the problem ?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11119010-cu14568505]-[147291559]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I think your question is unclear, could you be more precise please ? Beside that, is it relevant to precise you are using Actor / Akka ? Does it have a link with the problem ?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "precis":2,
                      "actor":1,
                      "question":1,
                      "problem":1,
                      "akka":1,
                      "relev":1,
                      "unclear":1,
                      "link":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14568639,
        "postId":11119010,
        "creationDate":"2012-06-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":741404,
          "displayName":"jdevelop",
          "reputation":5108
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I think it does not strictly related to akka. Imagine that class A has constructor like this &quot;public A(B instanceB, C instanceC) {}&quot;, and there are instances of B and C created somewhere in Guice. And what I need is to get reference to instance A after it was created, in order to do something about it (like call some methods or register it in some registry). I solved this with creation of additional class BootStrap, which takes A as parameter of it's own constructor, and inside the constructor it does do something useful. But it seems to be lame solution."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11119010-cu14568639]-[-2029839172]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I think it does not strictly related to akka. Imagine that class A has constructor like this &quot;public A(B instanceB, C instanceC) {}&quot;, and there are instances of B and C created somewhere in Guice. And what I need is to get reference to instance A after it was created, in order to do something about it (like call some methods or register it in some registry). I solved this with creation of additional class BootStrap, which takes A as parameter of it's own constructor, and inside the constructor it does do something useful. But it seems to be lame solution."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"A",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodDeclaratorNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"A",
                        "comments":[
                          
                        ]
                      },
                      "parameters":{
                        "type":"FormalParametersNode",
                        "parameters":{
                          "type":"FormalParameterDeclsNode",
                          "modifiers":[
                            
                          ],
                          "parameterType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"B",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "nextDeclarator":{
                            "type":"AdditionalFormalParameterDeclNode",
                            "variableDeclarator":{
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"instanceB",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ]
                            },
                            "formalParameterDeclarator":{
                              "type":"FormalParameterDeclsNode",
                              "modifiers":[
                                
                              ],
                              "parameterType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"C",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "nextDeclarator":{
                                "type":"AdditionalFormalParameterDeclNode",
                                "variableDeclarator":{
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"instanceC",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "arrayReturnType":[
                        
                      ],
                      "body":{
                        "type":"BlockNode",
                        "statements":[
                          
                        ],
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"BootStrap",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "method":1,
                      "strict":1,
                      "strap":1,
                      "relat":1,
                      "addit":1,
                      "boot":1,
                      "akka":1,
                      "regist":1,
                      "constructor":3,
                      "creation":1,
                      "paramet":1,
                      "lame":1,
                      "guic":1,
                      "take":1,
                      "insid":1,
                      "order":1,
                      "refer":1,
                      "imagin":1,
                      "quot":2,
                      "registri":1,
                      "creat":2,
                      "call":1,
                      "solut":1,
                      "instanc":4
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"B",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"C",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"instanceB",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ]
                      },
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"instanceC",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":14577973,
        "postId":11119010,
        "creationDate":"2012-06-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1064612,
          "displayName":"Yanflea",
          "reputation":1947
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Sorry...still confusing. Maybe more :). Thought it was me, but it seems nobody can answer you with just these few informations. Please edit your question and give a real example of what you want to achieve and what you have tried so far. I guess (well I think) that your problem could be simply solved by the Guice Provider or Assisted Injection mechanisms (did you have a look on that ?), but since I still don't understand your explanations at 100%, it's difficult to give an answer."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11119010-cu14577973]-[388163802]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Sorry...still confusing. Maybe more :). Thought it was me, but it seems nobody can answer you with just these few informations. Please edit your question and give a real example of what you want to achieve and what you have tried so far. I guess (well I think) that your problem could be simply solved by the Guice Provider or Assisted Injection mechanisms (did you have a look on that ?), but since I still don't understand your explanations at 100%, it's difficult to give an answer."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "provid":1,
                      "question":1,
                      "real":1,
                      "thought":1,
                      "problem":1,
                      "understand":1,
                      "edit":1,
                      "explan":1,
                      "guic":1,
                      "difficult":1,
                      "achiev":1,
                      "simpli":1,
                      "inform":1,
                      "mechan":1,
                      "give":2,
                      "inject":1,
                      "answer":2,
                      "confus":1,
                      "guess":1,
                      "assist":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "guice",
      "actor",
      "akka"
    ],
    "creationDate":"2012-06-20",
    "lastActivityDate":"2012-06-20",
    "score":2,
    "viewCount":177,
    "owner":{
      "type":"StackOverflowUser",
      "id":741404,
      "displayName":"jdevelop",
      "reputation":5108
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need to solve strange task : I have class A, which is created by Guice:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11119010]-[-14299416]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need to solve strange task : I have class A, which is created by Guice:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"A",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "solv":1,
                  "task":1,
                  "guic":1,
                  "creat":1,
                  "strang":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"bind(A.class) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[11119010]-[1887492279]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"bind(A.class) "
                }
              ]
            },
            "rawText":"bind(A.class) ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bind":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>but later I need to initialize Actor with the class A (which is Actor by it's nature):</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11119010]-[-191824589]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>but later I need to initialize Actor with the class A (which is Actor by it's nature):</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"A",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "actor":2,
                  "natur":1,
                  "initi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"actorSystem.actorOf( new Props( new UntypedActorFactory() { public UntypedActor create() { /// ???? } }) ); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[11119010]-[1078006158]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"actorSystem",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"actorOf",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"( "
                },
                {
                  "type":"ConstructorCreatorNode",
                  "creatorType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Props",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "expressionArgs":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"ConstructorCreatorNode",
                        "creatorType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"UntypedActorFactory",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "expressionArgs":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "classBody":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"UntypedActor",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"create",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"/// ???? } }) ); \n"
                                  }
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"actorSystemactorOf( new Props( new UntypedActorFactory() { public UntypedActor create() { /// ???? } }) ); \n...\n}...\n})",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "actor":3,
                  "systemactor":1,
                  "untyp":2,
                  "factori":1,
                  "prop":1,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Props",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"UntypedActorFactory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"UntypedActor",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>how do I return instance of previously bound actor A?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11119010]-[1498410028]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>how do I return instance of previously bound actor A?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "instanc":1,
                  "bound":1,
                  "actor":1,
                  "previous":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11126214,
      "questionId":11119010,
      "comments":[
        
      ],
      "creationDate":"2012-06-20",
      "lastActivityDate":"2012-06-20",
      "lastEditDate":"2012-06-20",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":459,
        "displayName":"dlamblin",
        "reputation":16289
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I may be misunderstanding the question implied by <code>????</code>, but when you're using Guice you generally try to avoid newing up a lot of objects. When you need a new object managed by Guice you just ask for a provider of that type. Even if you didn't write a provider for it, there is an implicit provider where Guice either resuses the object for the scope it's bound to or gives you an new one with the injected objects it needs.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11126214]-[-1219989706]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I may be misunderstanding the question implied by <code>????</code>, but when you're using Guice you generally try to avoid newing up a lot of objects. When you need a new object managed by Guice you just ask for a provider of that type. Even if you didn't write a provider for it, there is an implicit provider where Guice either resuses the object for the scope it's bound to or gives you an new one with the injected objects it needs.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":3,
                    "question":1,
                    "misunderstand":1,
                    "impli":1,
                    "scope":1,
                    "avoid":1,
                    "object":4,
                    "code":2,
                    "bound":1,
                    "resus":1,
                    "guic":3,
                    "general":1,
                    "implicit":1,
                    "new":1,
                    "lot":1,
                    "inject":1,
                    "type":1,
                    "manag":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It could look something like:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11126214]-[-389684857]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It could look something like:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class WhateverClassThisIs { private provider&lt;A&gt; providesA; @Inject public WhateverClassThisIs(provider&lt;A&gt; providesA) { this.providesA = providesA; } public whateverMethodThisIs() { actorSystem.actorOf( new Props( new UntypedActorFactory() { public UntypedActor create() { /// ???? translation: I need an object A here. A a = providesA.get(); } }) ); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[11126214]-[1479518324]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"WhateverClassThisIs",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"providesA",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"provider",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "typeArguments":{
                                            "type":"TypeArgumentsNode",
                                            "types":[
                                              {
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"A",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Inject",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"WhateverClassThisIs",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"provider",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "typeArguments":{
                                          "type":"TypeArgumentsNode",
                                          "types":[
                                            {
                                              "type":"ReferenceTypeNode",
                                              "ids":[
                                                {
                                                  "type":"ParameterizedTypeNode",
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"A",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"providesA",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"providesA",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"providesA",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"TextFragmentNode",
                              "text":"public whateverMethodThisIs() { actorSystem.actorOf( new Props( new UntypedActorFactory() { public UntypedActor create() "
                            },
                            {
                              "type":"BlockDeclarationNode",
                              "modifiers":[
                                
                              ],
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"/// ???? translation: I need an object A here. A a = providesA.get(); } }) ); } } \n"
                                  }
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class WhateverClassThisIs { private provider<A> providesA; @Inject public WhateverClassThisIs(provider<A> providesA) { this.providesA = providesA; } public whateverMethodThisIs() { actorSystem.actorOf( new Props( new UntypedActorFactory() { public UntypedActor create() { /// ???? translation: I need an object A here. A a = providesA.get(); } }) ); } } \n...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "actor":4,
                    "provid":2,
                    "method":1,
                    "system":1,
                    "untyp":2,
                    "factori":1,
                    "object":1,
                    "translat":1,
                    "inject":1,
                    "prop":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"provider",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"A",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"A",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"providesA",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"provider",
                              "comments":[
                                
                              ]
                            },
                            "typeArguments":{
                              "type":"TypeArgumentsNode",
                              "types":[
                                {
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"A",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"providesA",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you can edit the other class types, you can instead inject the objects their constructors/methods need, eliminating more uses of new.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11126214]-[-550042489]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you can edit the other class types, you can instead inject the objects their constructors/methods need, eliminating more uses of new.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"types",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "constructor":1,
                    "object":1,
                    "edit":1,
                    "elimin":1,
                    "inject":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If on the other hand you were saying that to get the right kind of <code>A</code> you need to do this <code>actorSystem.actorOf</code> call then you need to implement a provider for <code>A</code> which does this instead of just binding it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11126214]-[1169379246]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If on the other hand you were saying that to get the right kind of <code>A</code> you need to do this <code>actorSystem.actorOf</code> call then you need to implement a provider for <code>A</code> which does this instead of just binding it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"actorSystem",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"actorOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "actor":2,
                    "provid":1,
                    "system":1,
                    "hand":1,
                    "bind":1,
                    "code":6,
                    "implement":1,
                    "kind":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}