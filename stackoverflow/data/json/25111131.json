{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25111131,
    "title":"What's the default hash value of an object on 64 bit JVM",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":39079171,
        "postId":25111131,
        "creationDate":"2014-08-04",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The default hash value of an object *was* the address, in about 1997. It has never been specified to be so. It *has* been specified as 32 bits."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25111131-cu39079171]-[-1755819125]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The default hash value of an object *was* the address, in about 1997. It has never been specified to be so. It *has* been specified as 32 bits."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "object":1,
                      "address":1,
                      "hash":1,
                      "bit":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39082828,
        "postId":25111131,
        "creationDate":"2014-08-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Technically, the Object.hashCode() is only 31-bits, i.e. it is never negative. It has nothing to do with the address even though it might look like one when printed and the Javadoc mentions an &quot;internal address&quot; You can quickly tell it is not an address by printing the object.hashCode of many objects in a row. You would expect to see a pattern, but you do not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25111131-cu39082828]-[589959740]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Technically, the Object.hashCode() is only 31-bits, i.e. it is never negative. It has nothing to do with the address even though it might look like one when printed and the Javadoc mentions an &quot;internal address&quot; You can quickly tell it is not an address by printing the object.hashCode of many objects in a row. You would expect to see a pattern, but you do not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"object",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "negat":1,
                      "bit":1,
                      "pattern":1,
                      "print":2,
                      "row":1,
                      "object":3,
                      "code":2,
                      "hash":2,
                      "mention":1,
                      "expect":1,
                      "address":3,
                      "quot":2,
                      "technic":1,
                      "quick":1,
                      "intern":1,
                      "javadoc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "hash"
    ],
    "creationDate":"2014-08-04",
    "lastActivityDate":"2014-09-25",
    "score":1,
    "viewCount":169,
    "owner":{
      "type":"StackOverflowUser",
      "id":2562673,
      "displayName":"Bill Randerson",
      "reputation":34
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Since default hash value of an object is the object address of the object, on 32-bit machine, it makes sense considering hash value is an int value. My question is that on 64 bit machine, address is supposed to be 64 bit right? Then what about the 32 bit int hash value? Is there going to be some down conversion(from 64bit to 32 bit)?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25111131]-[2091145564]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Since default hash value of an object is the object address of the object, on 32-bit machine, it makes sense considering hash value is an int value. My question is that on 64 bit machine, address is supposed to be 64 bit right? Then what about the 32 bit int hash value? Is there going to be some down conversion(from 64bit to 32 bit)?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sens":1,
                  "question":1,
                  "bit":6,
                  "object":3,
                  "hash":3,
                  "machin":2,
                  "convers":1,
                  "address":2,
                  "make":1,
                  "suppos":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":25111136,
      "questionId":25111131,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":39079133,
          "postId":25111136,
          "creationDate":"2014-08-04",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2562673,
            "displayName":"Bill Randerson",
            "reputation":34
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, I understand that. My question is that what's the default hash value for an object on 64 bit JVM? Is it still the object address value?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25111136-cu39079133]-[1297120097]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, I understand that. My question is that what's the default hash value for an object on 64 bit JVM? Is it still the object address value?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "question":1,
                        "bit":1,
                        "understand":1,
                        "object":2,
                        "hash":1,
                        "address":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39079148,
          "postId":25111136,
          "creationDate":"2014-08-04",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2970947,
            "displayName":"Elliott Frisch",
            "reputation":65707
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@BillRanderson An algorithm that produces a 32-bit `int` as per the [`Object#hashCode()`](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29) Javadoc."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25111136-cu39079148]-[1976324299]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@BillRanderson An algorithm that produces a 32-bit `int` as per the [`Object#hashCode()`](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29) Javadoc."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"BillRanderson",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bit":1,
                        "produc":1,
                        "randerson":1,
                        "oracl":1,
                        "doc":2,
                        "object":2,
                        "code":2,
                        "hash":2,
                        "bill":1,
                        "algorithm":1,
                        "javas":1,
                        "api":1,
                        "lang":1,
                        "html":1,
                        "http":1,
                        "javadoc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-08-04",
      "lastActivityDate":"2014-08-04",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2970947,
        "displayName":"Elliott Frisch",
        "reputation":65707
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java an <code>int</code> is 32-bits. Even on a 64-bit native machine. See <code>Integer.SIZE</code>. Also, Oracle's <a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\"rel=\"nofollow\">Primitive Data Types</a> Tutorial says (in part) -</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111136]-[1006380776]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java an <code>int</code> is 32-bits. Even on a 64-bit native machine. See <code>Integer.SIZE</code>. Also, Oracle's <a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\"rel=\"nofollow\">Primitive Data Types</a> Tutorial says (in part) -</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "nutsandbolt":1,
                    "bit":2,
                    "size":1,
                    "data":1,
                    "rel":1,
                    "oracl":2,
                    "doc":1,
                    "code":4,
                    "datatyp":1,
                    "nofollow":1,
                    "machin":1,
                    "javas":1,
                    "part":1,
                    "type":1,
                    "html":1,
                    "href":1,
                    "primit":1,
                    "http":1,
                    "tutori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p><strong>int:</strong> By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -2<sup>31</sup> and a maximum value of 2<sup>31</sup>-1. In Java SE 8 and later, you can use the int data type to represent an unsigned 32-bit integer, which has a minimum value of 0 and a maximum value of 2<sup>32</sup>-1. Use the Integer class to use int data type as an unsigned integer. See the section The Number Classes for more information. Static methods like compareUnsigned, divideUnsigned etc have been added to the Integer class to support the arithmetic operations for unsigned integers.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111136]-[1896480758]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p><strong>int:</strong> By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -2<sup>31</sup> and a maximum value of 2<sup>31</sup>-1. In Java SE 8 and later, you can use the int data type to represent an unsigned 32-bit integer, which has a minimum value of 0 and a maximum value of 2<sup>32</sup>-1. Use the Integer class to use int data type as an unsigned integer. See the section The Number Classes for more information. Static methods like compareUnsigned, divideUnsigned etc have been added to the Integer class to support the arithmetic operations for unsigned integers.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"to",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"compareUnsigned",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"divideUnsigned",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"to",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "support":1,
                    "method":1,
                    "divid":1,
                    "bit":2,
                    "data":3,
                    "strong":2,
                    "unsign":5,
                    "section":1,
                    "blockquot":2,
                    "oper":1,
                    "maximum":2,
                    "sign":1,
                    "integ":1,
                    "inform":1,
                    "arithmet":1,
                    "compar":1,
                    "complement":1,
                    "ad":1,
                    "class":1,
                    "minimum":2,
                    "type":3,
                    "repres":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29\"rel=\"nofollow\"><code>Object#hashCode()</code></a> Javadoc says,</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111136]-[-107913278]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29\"rel=\"nofollow\"><code>Object#hashCode()</code></a> Javadoc says,</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "oracl":1,
                    "doc":2,
                    "object":2,
                    "code":4,
                    "hash":2,
                    "nofollow":1,
                    "javas":1,
                    "api":1,
                    "lang":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "javadoc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>(This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java<sup>TM</sup> programming language.)</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111136]-[1119676274]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>(This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java<sup>TM</sup> programming language.)</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "languag":1,
                    "requir":1,
                    "blockquot":2,
                    "object":1,
                    "typic":1,
                    "techniqu":1,
                    "implement":2,
                    "address":1,
                    "intern":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25111298,
      "questionId":25111131,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":39080657,
          "postId":25111298,
          "creationDate":"2014-08-04",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2562673,
            "displayName":"Bill Randerson",
            "reputation":34
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Nice explanation!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25111298-cu39080657]-[-906687253]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Nice explanation!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explan":1,
                        "nice":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-08-04",
      "lastActivityDate":"2014-08-04",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>My question is that what's the default hash value for an object on 64 bit JVM? Is it still the object address value?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[1382760786]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>My question is that what's the default hash value for an object on 64 bit JVM? Is it still the object address value?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "question":1,
                    "bit":1,
                    "blockquot":2,
                    "object":2,
                    "hash":1,
                    "address":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The &quot;default&quot; value ... or more specifically how an object's &quot;identity hashcode&quot; is calculated is NOT SPECIFIED. Not on a 32bit JVM, or a 64bit JVM.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[-774462756]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The &quot;default&quot; value ... or more specifically how an object's &quot;identity hashcode&quot; is calculated is NOT SPECIFIED. Not on a 32bit JVM, or a 64bit JVM.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "hashcod":1,
                    "bit":2,
                    "calcul":1,
                    "object":1,
                    "ident":1,
                    "specif":1,
                    "quot":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It is observed that the value is typically <em>based on</em> the object's address at the point that the <code>System.identityHashcode()</code> method is <em>first</em> called, but that is only an observation. It is certainly <em>not</em> specified to be that, which means that different JVMs are free to implement it differently.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[-1586152870]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It is observed that the value is typically <em>based on</em> the object's address at the point that the <code>System.identityHashcode()</code> method is <em>first</em> called, but that is only an observation. It is certainly <em>not</em> specified to be that, which means that different JVMs are free to implement it differently.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashcode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "hashcod":1,
                    "point":1,
                    "observ":2,
                    "system":1,
                    "differ":1,
                    "mean":1,
                    "jvms":1,
                    "object":1,
                    "base":1,
                    "code":2,
                    "ident":1,
                    "typic":1,
                    "implement":1,
                    "address":1,
                    "call":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Certainly, it cannot be the actual address on a 64bit JVM ... since a 64 bit address won't fit into a 32 bit integer. Obviously.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[-1621807811]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Certainly, it cannot be the actual address on a 64bit JVM ... since a 64 bit address won't fit into a 32 bit integer. Obviously.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "bit":3,
                    "fit":1,
                    "address":2,
                    "actual":1,
                    "won":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However it is actually calculated, it remains the fact that the identity hashcode is <strong>NEVER</strong> a reliable proxy for the object's address. If an object with an identity hashcode survives a garbage collection cycle, the GC will <em>probably</em> have moved it, and its hashcode and address will henceforth be unrelated. (One thing that is guaranteed is that an object's identity hashcode does not change. If it did, hash tables would break.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25111298]-[-1293010201]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However it is actually calculated, it remains the fact that the identity hashcode is <strong>NEVER</strong> a reliable proxy for the object's address. If an object with an identity hashcode survives a garbage collection cycle, the GC will <em>probably</em> have moved it, and its hashcode and address will henceforth be unrelated. (One thing that is guaranteed is that an object's identity hashcode does not change. If it did, hash tables would break.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "hashcod":4,
                    "move":1,
                    "henceforth":1,
                    "surviv":1,
                    "reliabl":1,
                    "thing":1,
                    "calcul":1,
                    "strong":2,
                    "object":3,
                    "unrel":1,
                    "fact":1,
                    "tabl":1,
                    "guarante":1,
                    "hash":1,
                    "ident":3,
                    "remain":1,
                    "address":2,
                    "collect":1,
                    "proxi":1,
                    "cycl":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25125317,
      "questionId":25111131,
      "comments":[
        
      ],
      "creationDate":"2014-08-04",
      "lastActivityDate":"2014-08-04",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3604164,
        "displayName":"user3604164",
        "reputation":21
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As far as I know and test, the most reliable way to get native address from JVM internal addess in case of compressed-oops mode, is using <strong>&quot;getNarrowOopBase&quot;</strong> and <strong>&quot;getNarrowOopShift&quot;</strong> methods of <strong>&quot;sun.jvm.hotspot.memory.Universe&quot;</strong> class and that class can be available in case of using <strong>&quot;Java HotSpot Serviceability Agent&quot;</strong>. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25125317]-[-1376403624]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As far as I know and test, the most reliable way to get native address from JVM internal addess in case of compressed-oops mode, is using <strong>&quot;getNarrowOopBase&quot;</strong> and <strong>&quot;getNarrowOopShift&quot;</strong> methods of <strong>&quot;sun.jvm.hotspot.memory.Universe&quot;</strong> class and that class can be available in case of using <strong>&quot;Java HotSpot Serviceability Agent&quot;</strong>. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getNarrowOopBase",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getNarrowOopShift",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"jvm",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"hotspot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"memory",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Universe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"and",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"can",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "method":1,
                    "test":1,
                    "addess":1,
                    "oop":3,
                    "reliabl":1,
                    "sun":1,
                    "shift":1,
                    "strong":8,
                    "agent":1,
                    "hotspot":1,
                    "univers":1,
                    "base":1,
                    "compress":1,
                    "spot":1,
                    "address":1,
                    "mode":1,
                    "quot":8,
                    "hot":1,
                    "narrow":2,
                    "intern":1,
                    "servic":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"jvm",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"hotspot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"memory",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Universe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Native address can be calculated as: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25125317]-[-443929895]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Native address can be calculated as: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "address":1,
                    "calcul":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"if (compressedRef) { return (address &gt;&gt; compressRefShift) - compressRefBase; } else { return address; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25125317]-[-760632228]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"compressedRef",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"-",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":">>",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"address",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"compressRefShift",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"compressRefBase",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "elseStatement":{
                      "type":"ElseStatementNode",
                      "statement":{
                        "type":"BlockNode",
                        "statements":[
                          {
                            "type":"ReturnStatementNode",
                            "expression":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"address",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"if (compressedRef) { return (address >> compressRefShift) - compressRefBase; } else { return address; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "shift":1,
                    "ref":3,
                    "base":1,
                    "compress":3,
                    "address":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here are usages of it </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25125317]-[1217484457]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here are usages of it </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "usag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/HotspotJvmInfoUtil.java\"rel=\"nofollow\">https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/HotspotJvmInfoUtil.java</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25125317]-[-1087583832]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/HotspotJvmInfoUtil.java\"rel=\"nofollow\">https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/HotspotJvmInfoUtil.java</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "github":2,
                    "util":4,
                    "master":2,
                    "ozal":2,
                    "rel":1,
                    "https":2,
                    "main":2,
                    "info":2,
                    "hotspot":2,
                    "jilleg":4,
                    "serkanoz":2,
                    "serkan":2,
                    "nofollow":1,
                    "src":2,
                    "href":1,
                    "blob":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/JvmUtil.java\"rel=\"nofollow\">https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/JvmUtil.java</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25125317]-[1366123602]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/JvmUtil.java\"rel=\"nofollow\">https://github.com/serkan-ozal/jillegal/blob/master/src/main/java/tr/com/serkanozal/jillegal/util/JvmUtil.java</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "github":2,
                    "util":4,
                    "master":2,
                    "ozal":2,
                    "rel":1,
                    "https":2,
                    "main":2,
                    "jilleg":4,
                    "serkanoz":2,
                    "serkan":2,
                    "nofollow":1,
                    "src":2,
                    "href":1,
                    "blob":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25113413,
      "questionId":25111131,
      "comments":[
        
      ],
      "creationDate":"2014-08-04",
      "lastActivityDate":"2014-08-04",
      "lastEditDate":"2014-08-04",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In the OpenJDK/HotSpot JVM you can obtain the raw index address of a reference. This translates to a 32-bit address for a small heap and a 64-bit address for a large heap. For medium sized heaps, 32-bit <a href=\"https://wikis.oracle.com/display/HotSpotInternals/CompressedOops\"rel=\"nofollow\">Compressed OOPS</a> are used.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[-1036070469]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In the OpenJDK/HotSpot JVM you can obtain the raw index address of a reference. This translates to a 32-bit address for a small heap and a 64-bit address for a large heap. For medium sized heaps, 32-bit <a href=\"https://wikis.oracle.com/display/HotSpotInternals/CompressedOops\"rel=\"nofollow\">Compressed OOPS</a> are used.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "oop":2,
                    "bit":3,
                    "size":1,
                    "rel":1,
                    "oracl":1,
                    "https":1,
                    "medium":1,
                    "open":1,
                    "small":1,
                    "larg":1,
                    "nofollow":1,
                    "raw":1,
                    "translat":1,
                    "compress":2,
                    "refer":1,
                    "spot":2,
                    "address":3,
                    "hot":2,
                    "wiki":1,
                    "heap":3,
                    "href":1,
                    "intern":1,
                    "jdk":1,
                    "index":1,
                    "display":1,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The implementation is available in <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/42ca4002efc2/src/share/vm/runtime/synchronizer.cpp#l246\"rel=\"nofollow\">synchronizer.cpp</a> AFAIK, the last implementation is the one actually used.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[81650002]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The implementation is available in <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/42ca4002efc2/src/share/vm/runtime/synchronizer.cpp#l246\"rel=\"nofollow\">synchronizer.cpp</a> AFAIK, the last implementation is the one actually used.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":1,
                    "runtim":1,
                    "cpp":2,
                    "rel":1,
                    "efc":1,
                    "afaik":1,
                    "net":1,
                    "hotspot":1,
                    "share":1,
                    "nofollow":1,
                    "src":1,
                    "implement":2,
                    "file":1,
                    "href":1,
                    "http":1,
                    "jdk":2,
                    "synchron":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"/** * Prints the addresses and hashCode()s of the first objects in eden space. * &lt;p&gt; * Assumes a 32-bit address space e.g. CompressOops * &lt;/p&gt; */ public static void main(String... ignored) throws Exception { Object[] objects = new Object[8]; for (int i = 0; i &lt; 20; i++) { System.gc(); for (int j = 0; j &lt; objects.length; j++) { objects[j] = new Object(); } for (int j = 0; j &lt; objects.length; j++) { long address = OBJECT_SCALE == 4 ? UNSAFE.getInt(objects, OBJECT_BASE + j * OBJECT_SCALE) &amp; 0xFFFFFFFFL : UNSAFE.getLong(objects, OBJECT_BASE + j * OBJECT_SCALE); System.out.printf(&quot;%,d: addr: %8x, hc: %8x &quot;, j, address, objects[j].hashCode()); } System.out.println(); } } static final Unsafe UNSAFE; static final int OBJECT_BASE, OBJECT_SCALE; static { try { Field theUnsafe = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); theUnsafe.setAccessible(true); UNSAFE = (Unsafe) theUnsafe.get(null); OBJECT_BASE = UNSAFE.arrayBaseOffset(Object[].class); OBJECT_SCALE = UNSAFE.arrayIndexScale(Object[].class); } catch (Exception e) { throw new AssertionError(e); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25113413]-[149615285]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"/** * Prints the addresses and "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"()s of the first objects in eden space. * "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"p"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":" * Assumes a 32-bit address space e.g. CompressOops * "
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" */ "
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"KeywordModifierNode",
                        "value":"static",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"main",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"String",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"FormaParameterVariadicNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ignored",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "thrownExceptions":{
                      "type":"ThrownExceptionsNode",
                      "qualifiedIdentifierList":{
                        "type":"QualifiedIdentifierListNode",
                        "qualifiedNames":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Exception",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"objects",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"ArrayExpressionCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"Object",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionDepth":[
                                        {
                                          "type":"DimExpressionNode",
                                          "argument":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"8"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "arrayDepth":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ArrayTypeNode",
                                  "typeNode":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"Object",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "depth":[
                                    {
                                      "type":"ArrayDimensionNode",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ForLoopStatementNode",
                          "forControl":{
                            "type":"ForVarControlNode",
                            "variables":{
                              "type":"LocalVariableDeclarationStatementNode",
                              "modifiers":[
                                
                              ],
                              "declarators":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"0"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "condition":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"<",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"i",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"20"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "update":[
                              {
                                "type":"PostfixOperatorExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"i",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"++",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"System",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"gc",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              {
                                "type":"ForLoopStatementNode",
                                "forControl":{
                                  "type":"ForVarControlNode",
                                  "variables":{
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"j",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "condition":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"<",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"j",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"objects",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"length",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "update":[
                                    {
                                      "type":"PostfixOperatorExpressionNode",
                                      "argument":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"j",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"++",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "statement":{
                                  "type":"BlockNode",
                                  "statements":[
                                    {
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"ArrayAccessSelectorNode",
                                          "identifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"objects",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "dimExpression":{
                                            "type":"DimExpressionNode",
                                            "argument":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"ConstructorCreatorNode",
                                          "creatorType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Object",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "expressionArgs":{
                                            "type":"ExpressionListNode",
                                            "arguments":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    }
                                  ],
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"ForLoopStatementNode",
                                "forControl":{
                                  "type":"ForVarControlNode",
                                  "variables":{
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"j",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"PrimitiveTypeNode",
                                            "name":"int",
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "condition":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"<",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"j",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"objects",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"length",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "update":[
                                    {
                                      "type":"PostfixOperatorExpressionNode",
                                      "argument":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"j",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"++",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "statement":{
                                  "type":"BlockNode",
                                  "statements":[
                                    {
                                      "type":"LocalVariableDeclarationStatementNode",
                                      "modifiers":[
                                        
                                      ],
                                      "declarators":{
                                        "type":"VariableDeclaratorsNode",
                                        "declarators":[
                                          {
                                            "type":"VariableDeclaratorNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"address",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "arrayDepth":[
                                              
                                            ],
                                            "assignment":{
                                              "type":"VariableAssignmentNode",
                                              "variableAssignment":{
                                                "type":"VariableExpressionInitNode",
                                                "expression":{
                                                  "type":"ConditionalExpressionNode",
                                                  "condition":{
                                                    "type":"BinaryExpressionNode",
                                                    "operator":{
                                                      "type":"OperatorNode",
                                                      "symbol":"==",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "left":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"OBJECT_SCALE",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "right":{
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"IntegerLiteralNode",
                                                        "valueRep":"4"
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "thenExp":{
                                                    "type":"BinaryExpressionNode",
                                                    "operator":{
                                                      "type":"OperatorNode",
                                                      "symbol":"&",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "left":{
                                                      "type":"MethodInvocationNode",
                                                      "qualifiedIdentifier":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"UNSAFE",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"getInt",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "args":{
                                                        "type":"ExpressionListNode",
                                                        "arguments":[
                                                          {
                                                            "type":"QualifiedIdentifierNode",
                                                            "identifiers":[
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"objects",
                                                                "comments":[
                                                                  
                                                                ]
                                                              }
                                                            ],
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          {
                                                            "type":"BinaryExpressionNode",
                                                            "operator":{
                                                              "type":"OperatorNode",
                                                              "symbol":"+",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "left":{
                                                              "type":"QualifiedIdentifierNode",
                                                              "identifiers":[
                                                                {
                                                                  "type":"IdentifierNode",
                                                                  "name":"OBJECT_BASE",
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              ],
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "right":{
                                                              "type":"BinaryExpressionNode",
                                                              "operator":{
                                                                "type":"OperatorNode",
                                                                "symbol":"*",
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              "left":{
                                                                "type":"QualifiedIdentifierNode",
                                                                "identifiers":[
                                                                  {
                                                                    "type":"IdentifierNode",
                                                                    "name":"j",
                                                                    "comments":[
                                                                      
                                                                    ]
                                                                  }
                                                                ],
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              "right":{
                                                                "type":"QualifiedIdentifierNode",
                                                                "identifiers":[
                                                                  {
                                                                    "type":"IdentifierNode",
                                                                    "name":"OBJECT_SCALE",
                                                                    "comments":[
                                                                      
                                                                    ]
                                                                  }
                                                                ],
                                                                "comments":[
                                                                  
                                                                ]
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "right":{
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"IntegerLiteralNode",
                                                        "valueRep":"0xFFFFFFFFL"
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "elseExp":{
                                                    "type":"MethodInvocationNode",
                                                    "qualifiedIdentifier":{
                                                      "type":"QualifiedIdentifierNode",
                                                      "identifiers":[
                                                        {
                                                          "type":"IdentifierNode",
                                                          "name":"UNSAFE",
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"getLong",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "args":{
                                                      "type":"ExpressionListNode",
                                                      "arguments":[
                                                        {
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"objects",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        {
                                                          "type":"BinaryExpressionNode",
                                                          "operator":{
                                                            "type":"OperatorNode",
                                                            "symbol":"+",
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "left":{
                                                            "type":"QualifiedIdentifierNode",
                                                            "identifiers":[
                                                              {
                                                                "type":"IdentifierNode",
                                                                "name":"OBJECT_BASE",
                                                                "comments":[
                                                                  
                                                                ]
                                                              }
                                                            ],
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "right":{
                                                            "type":"BinaryExpressionNode",
                                                            "operator":{
                                                              "type":"OperatorNode",
                                                              "symbol":"*",
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "left":{
                                                              "type":"QualifiedIdentifierNode",
                                                              "identifiers":[
                                                                {
                                                                  "type":"IdentifierNode",
                                                                  "name":"j",
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              ],
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "right":{
                                                              "type":"QualifiedIdentifierNode",
                                                              "identifiers":[
                                                                {
                                                                  "type":"IdentifierNode",
                                                                  "name":"OBJECT_SCALE",
                                                                  "comments":[
                                                                    
                                                                  ]
                                                                }
                                                              ],
                                                              "comments":[
                                                                
                                                              ]
                                                            },
                                                            "comments":[
                                                              
                                                            ]
                                                          },
                                                          "comments":[
                                                            
                                                          ]
                                                        }
                                                      ],
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "varType":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"long",
                                              "comments":[
                                                
                                              ]
                                            }
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"MethodInvocationNode",
                                        "qualifiedIdentifier":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"System",
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"IdentifierNode",
                                              "name":"out",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"printf",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "args":{
                                          "type":"ExpressionListNode",
                                          "arguments":[
                                            {
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"StringLiteralNode",
                                                "valueRep":"\"%,d: addr: %8x, hc: %8x \""
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"j",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"address",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"BinaryExpressionNode",
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":".",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "left":{
                                                "type":"ArrayAccessSelectorNode",
                                                "identifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"objects",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "dimExpression":{
                                                  "type":"DimExpressionNode",
                                                  "argument":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"j",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "right":{
                                                "type":"MethodInvocationNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"hashCode",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    }
                                  ],
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"System",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"out",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"println",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"FieldDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"static",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"KeywordModifierNode",
                        "value":"final",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "variables":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"UNSAFE",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Unsafe",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"static final int OBJECT"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_BASE",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":", OBJECT"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_SCALE",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"; "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"static",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"TryCatchStatementNode",
                          "block":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"LocalVariableDeclarationStatementNode",
                                "modifiers":[
                                  
                                ],
                                "declarators":{
                                  "type":"VariableDeclaratorsNode",
                                  "declarators":[
                                    {
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"theUnsafe",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ],
                                      "assignment":{
                                        "type":"VariableAssignmentNode",
                                        "variableAssignment":{
                                          "type":"VariableExpressionInitNode",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":".",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"ClassLiteralExpressionNode",
                                              "aType":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"Unsafe",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepths":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"MethodInvocationNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"getDeclaredField",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "args":{
                                                "type":"ExpressionListNode",
                                                "arguments":[
                                                  {
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"StringLiteralNode",
                                                      "valueRep":"\"theUnsafe\""
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "varType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"Field",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      }
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"theUnsafe",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"setAccessible",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"BooleanLiteralNode",
                                          "valueRep":"true"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"UNSAFE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"CastExpressionNode",
                                    "aType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Unsafe",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "argument":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"theUnsafe",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"get",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"NullLiteralNode"
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"OBJECT_BASE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"UNSAFE",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"arrayBaseOffset",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"ClassLiteralExpressionNode",
                                          "aType":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"Object",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepths":[
                                            {
                                              "type":"ArrayDimensionNode",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              },
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"OBJECT_SCALE",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"MethodInvocationNode",
                                    "qualifiedIdentifier":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"UNSAFE",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"arrayIndexScale",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"ClassLiteralExpressionNode",
                                          "aType":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"Object",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepths":[
                                            {
                                              "type":"ArrayDimensionNode",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "catches":[
                            {
                              "type":"CatchClauseNode",
                              "modifiers":[
                                
                              ],
                              "catchType":{
                                "type":"CatchTypeNode",
                                "identifiers":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Exception",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"e",
                                "comments":[
                                  
                                ]
                              },
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ThrowStatementNode",
                                    "expression":{
                                      "type":"ConstructorCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"AssertionError",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionArgs":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"e",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "rawText":"/** * Prints the addresses and hashCode()s of the first objects in eden space. * <p> * Assumes a 32-bit address space e.g. CompressOops * </p> */ public static void main(String... ignored) throws Exception { Object[] objects = new Object[8]; for (int i = 0; i < 20; i++) { System.gc(); for (int j = 0; j < objects.length; j++) { objects[j] = new Object(); } for (int j = 0; j < objects.length; j++) { long address = OBJECT_SCALE == 4? UNSAFE.getInt(objects, OBJECT_BASE + j * OBJECT_SCALE) & 0xFFFFFFFFL: UNSAFE.getLong(objects, OBJECT_BASE + j * OBJECT_SCALE); System.out.printf(\"%,d: addr: %8x, hc: %8x \", j, address, objects[j].hashCode()); } System.out.println(); } } static final Unsafe UNSAFE; static final int OBJECT_BASE, OBJECT_SCALE; static { try { Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\"); theUnsafe.setAccessible(true); UNSAFE = (Unsafe) theUnsafe.get(null); OBJECT_BASE = UNSAFE.arrayBaseOffset(Object[].class); OBJECT_SCALE = UNSAFE.arrayIndexScale(Object[].class); } catch (Exception e) { throw new AssertionError(e); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assert":1,
                    "assum":1,
                    "oop":1,
                    "bit":1,
                    "system":3,
                    "field":2,
                    "scale":6,
                    "print":1,
                    "set":1,
                    "main":1,
                    "println":1,
                    "declar":1,
                    "object":22,
                    "base":5,
                    "code":2,
                    "eden":1,
                    "array":2,
                    "hash":2,
                    "offset":1,
                    "space":2,
                    "printf":1,
                    "error":1,
                    "compress":1,
                    "addr":1,
                    "true":1,
                    "address":4,
                    "length":2,
                    "unsaf":13,
                    "ffffffffl":1,
                    "index":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AssertionError",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Object",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"long",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"UNSAFE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"arrayIndexScale",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Object",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              {
                                "type":"ArrayDimensionNode",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"UNSAFE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getInt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"objects",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OBJECT_BASE",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"*",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"j",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"OBJECT_SCALE",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"UNSAFE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getLong",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"objects",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"+",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"OBJECT_BASE",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"*",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"j",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"OBJECT_SCALE",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"gc",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"printf",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"%,d: addr: %8x, hc: %8x \""
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"j",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"address",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ArrayAccessSelectorNode",
                              "identifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"objects",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "dimExpression":{
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"j",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"hashCode",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"UNSAFE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"arrayBaseOffset",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Object",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              {
                                "type":"ArrayDimensionNode",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getDeclaredField",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"theUnsafe\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"theUnsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"theUnsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"get",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"UNSAFE",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"objects",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Object",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"8"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Object",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"i",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"address",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConditionalExpressionNode",
                            "condition":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"==",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"OBJECT_SCALE",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"4"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "thenExp":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"&",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"UNSAFE",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"getInt",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"objects",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"+",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"OBJECT_BASE",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"*",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"j",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"OBJECT_SCALE",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"0xFFFFFFFFL"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "elseExp":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"UNSAFE",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getLong",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"objects",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"+",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"OBJECT_BASE",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"*",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"j",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"OBJECT_SCALE",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"theUnsafe",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ClassLiteralExpressionNode",
                              "aType":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Unsafe",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepths":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getDeclaredField",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"theUnsafe\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Field",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ignored",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"j",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>prints</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[1561833329]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>prints</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "print":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"0: addr: fc000000, hc: 6d6f6e28 1: addr: fc000001, hc: 29453f44 2: addr: fc000002, hc: 5cad8086 3: addr: fc000003, hc: 6e0be858 4: addr: fc000004, hc: 61bbe9ba 5: addr: fc000005, hc: 610455d6 6: addr: fc000006, hc: 511d50c0 7: addr: fc000007, hc: 60e53b93 0: addr: fc000000, hc: 5e2de80c 1: addr: fc000001, hc: 1d44bcfa 2: addr: fc000002, hc: 266474c2 3: addr: fc000003, hc: 6f94fa3e 4: addr: fc000004, hc: 5e481248 5: addr: fc000005, hc: 66d3c617 6: addr: fc000006, hc: 63947c6b 7: addr: fc000007, hc: 2b193f2d 0: addr: fc000000, hc: 355da254 1: addr: fc000001, hc: 4dc63996 2: addr: fc000002, hc: d716361 3: addr: fc000003, hc: 6ff3c5b5 4: addr: fc000004, hc: 3764951d 5: addr: fc000005, hc: 4b1210ee 6: addr: fc000006, hc: 4d7e1886 7: addr: fc000007, hc: 3cd1a2f1 0: addr: fc000000, hc: 2f0e140b 1: addr: fc000001, hc: 7440e464 2: addr: fc000002, hc: 49476842 3: addr: fc000003, hc: 78308db1 4: addr: fc000004, hc: 27c170f0 5: addr: fc000005, hc: 5451c3a8 6: addr: fc000006, hc: 2626b418 7: addr: fc000007, hc: 5a07e868 0: addr: fc000000, hc: 76ed5528 1: addr: fc000001, hc: 2c7b84de 2: addr: fc000002, hc: 3fee733d 3: addr: fc000003, hc: 5acf9800 4: addr: fc000004, hc: 4617c264 5: addr: fc000005, hc: 36baf30c 6: addr: fc000006, hc: 7a81197d 7: addr: fc000007, hc: 5ca881b5 0: addr: fc000000, hc: 24d46ca6 1: addr: fc000001, hc: 4517d9a3 2: addr: fc000002, hc: 372f7a8d 3: addr: fc000003, hc: 2f92e0f4 4: addr: fc000004, hc: 28a418fc 5: addr: fc000005, hc: 5305068a 6: addr: fc000006, hc: 1f32e575 7: addr: fc000007, hc: 279f2327 0: addr: fc000000, hc: 2ff4acd0 1: addr: fc000001, hc: 54bedef2 2: addr: fc000002, hc: 5caf905d 3: addr: fc000003, hc: 27716f4 4: addr: fc000004, hc: 8efb846 5: addr: fc000005, hc: 2a84aee7 6: addr: fc000006, hc: a09ee92 7: addr: fc000007, hc: 30f39991 0: addr: fc000000, hc: 452b3a41 1: addr: fc000001, hc: 4a574795 2: addr: fc000002, hc: f6f4d33 3: addr: fc000003, hc: 23fc625e 4: addr: fc000004, hc: 3f99bd52 5: addr: fc000005, hc: 4f023edb 6: addr: fc000006, hc: 3a71f4dd 7: addr: fc000007, hc: 7adf9f5f 0: addr: fc000000, hc: 85ede7b 1: addr: fc000001, hc: 5674cd4d 2: addr: fc000002, hc: 63961c42 3: addr: fc000003, hc: 65b54208 4: addr: fc000004, hc: 1be6f5c3 5: addr: fc000005, hc: 6b884d57 6: addr: fc000006, hc: 38af3868 7: addr: fc000007, hc: 77459877 0: addr: fc000000, hc: 5b2133b1 1: addr: fc000001, hc: 72ea2f77 2: addr: fc000002, hc: 33c7353a 3: addr: fc000003, hc: 681a9515 4: addr: fc000004, hc: 3af49f1c 5: addr: fc000005, hc: 19469ea2 6: addr: fc000006, hc: 13221655 7: addr: fc000007, hc: 2f2c9b19 0: addr: fc000000, hc: 31befd9f 1: addr: fc000001, hc: 1c20c684 2: addr: fc000002, hc: 1fb3ebeb 3: addr: fc000003, hc: 548c4f57 4: addr: fc000004, hc: 1218025c 5: addr: fc000005, hc: 816f27d 6: addr: fc000006, hc: 87aac27 7: addr: fc000007, hc: 3e3abc88 0: addr: fc000000, hc: 6ce253f1 1: addr: fc000001, hc: 53d8d10a 2: addr: fc000002, hc: e9e54c2 3: addr: fc000003, hc: 65ab7765 4: addr: fc000004, hc: 1b28cdfa 5: addr: fc000005, hc: eed1f14 6: addr: fc000006, hc: 7229724f 7: addr: fc000007, hc: 4c873330 0: addr: fc000000, hc: 119d7047 1: addr: fc000001, hc: 776ec8df 2: addr: fc000002, hc: 4eec7777 3: addr: fc000003, hc: 3b07d329 4: addr: fc000004, hc: 41629346 5: addr: fc000005, hc: 404b9385 6: addr: fc000006, hc: 6d311334 7: addr: fc000007, hc: 682a0b20 0: addr: fc000000, hc: 3d075dc0 1: addr: fc000001, hc: 214c265e 2: addr: fc000002, hc: 448139f0 3: addr: fc000003, hc: 7cca494b 4: addr: fc000004, hc: 7ba4f24f 5: addr: fc000005, hc: 3b9a45b3 6: addr: fc000006, hc: 7699a589 7: addr: fc000007, hc: 58372a00 0: addr: fc000000, hc: 4dd8dc3 1: addr: fc000001, hc: 6d03e736 2: addr: fc000002, hc: 568db2f2 3: addr: fc000003, hc: 378bf509 4: addr: fc000004, hc: 5fd0d5ae 5: addr: fc000005, hc: 2d98a335 6: addr: fc000006, hc: 16b98e56 7: addr: fc000007, hc: 7ef20235 0: addr: fc000000, hc: 27d6c5e0 1: addr: fc000001, hc: 4f3f5b24 2: addr: fc000002, hc: 15aeb7ab 3: addr: fc000003, hc: 7b23ec81 4: addr: fc000004, hc: 6acbcfc0 5: addr: fc000005, hc: 5f184fc6 6: addr: fc000006, hc: 3feba861 7: addr: fc000007, hc: 5b480cf9 0: addr: fc000000, hc: 6f496d9f 1: addr: fc000001, hc: 723279cf 2: addr: fc000002, hc: 10f87f48 3: addr: fc000003, hc: b4c966a 4: addr: fc000004, hc: 2f4d3709 5: addr: fc000005, hc: 4e50df2e 6: addr: fc000006, hc: 1d81eb93 7: addr: fc000007, hc: 7291c18f 0: addr: fc000000, hc: 34a245ab 1: addr: fc000001, hc: 7cc355be 2: addr: fc000002, hc: 6e8cf4c6 3: addr: fc000003, hc: 12edcd21 4: addr: fc000004, hc: 34c45dca 5: addr: fc000005, hc: 52cc8049 6: addr: fc000006, hc: 5b6f7412 7: addr: fc000007, hc: 27973e9b 0: addr: fc000000, hc: 312b1dae 1: addr: fc000001, hc: 7530d0a 2: addr: fc000002, hc: 27bc2616 3: addr: fc000003, hc: 3941a79c 4: addr: fc000004, hc: 506e1b77 5: addr: fc000005, hc: 4fca772d 6: addr: fc000006, hc: 9807454 7: addr: fc000007, hc: 3d494fbf 0: addr: fc000000, hc: 1ddc4ec2 1: addr: fc000001, hc: 133314b 2: addr: fc000002, hc: b1bc7ed 3: addr: fc000003, hc: 7cd84586 4: addr: fc000004, hc: 30dae81 5: addr: fc000005, hc: 1b2c6ec2 6: addr: fc000006, hc: 4edde6e5 7: addr: fc000007, hc: 70177ecd "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25113413]-[1094674764]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"0: addr: fc000000, hc: 6d6f6e28 1: addr: fc000001, hc: 29453f44 2: addr: fc000002, hc: 5cad8086 3: addr: fc000003, hc: 6e0be858 4: addr: fc000004, hc: 61bbe9ba 5: addr: fc000005, hc: 610455d6 6: addr: fc000006, hc: 511d50c0 7: addr: fc000007, hc: 60e53b93 0: addr: fc000000, hc: 5e2de80c 1: addr: fc000001, hc: 1d44bcfa 2: addr: fc000002, hc: 266474c2 3: addr: fc000003, hc: 6f94fa3e 4: addr: fc000004, hc: 5e481248 5: addr: fc000005, hc: 66d3c617 6: addr: fc000006, hc: 63947c6b 7: addr: fc000007, hc: 2b193f2d 0: addr: fc000000, hc: 355da254 1: addr: fc000001, hc: 4dc63996 2: addr: fc000002, hc: d716361 3: addr: fc000003, hc: 6ff3c5b5 4: addr: fc000004, hc: 3764951d 5: addr: fc000005, hc: 4b1210ee 6: addr: fc000006, hc: 4d7e1886 7: addr: fc000007, hc: 3cd1a2f1 0: addr: fc000000, hc: 2f0e140b 1: addr: fc000001, hc: 7440e464 2: addr: fc000002, hc: 49476842 3: addr: fc000003, hc: 78308db1 4: addr: fc000004, hc: 27c170f0 5: addr: fc000005, hc: 5451c3a8 6: addr: fc000006, hc: 2626b418 7: addr: fc000007, hc: 5a07e868 0: addr: fc000000, hc: 76ed5528 1: addr: fc000001, hc: 2c7b84de 2: addr: fc000002, hc: 3fee733d 3: addr: fc000003, hc: 5acf9800 4: addr: fc000004, hc: 4617c264 5: addr: fc000005, hc: 36baf30c 6: addr: fc000006, hc: 7a81197d 7: addr: fc000007, hc: 5ca881b5 0: addr: fc000000, hc: 24d46ca6 1: addr: fc000001, hc: 4517d9a3 2: addr: fc000002, hc: 372f7a8d 3: addr: fc000003, hc: 2f92e0f4 4: addr: fc000004, hc: 28a418fc 5: addr: fc000005, hc: 5305068a 6: addr: fc000006, hc: 1f32e575 7: addr: fc000007, hc: 279f2327 0: addr: fc000000, hc: 2ff4acd0 1: addr: fc000001, hc: 54bedef2 2: addr: fc000002, hc: 5caf905d 3: addr: fc000003, hc: 27716f4 4: addr: fc000004, hc: 8efb846 5: addr: fc000005, hc: 2a84aee7 6: addr: fc000006, hc: a09ee92 7: addr: fc000007, hc: 30f39991 0: addr: fc000000, hc: 452b3a41 1: addr: fc000001, hc: 4a574795 2: addr: fc000002, hc: f6f4d33 3: addr: fc000003, hc: 23fc625e 4: addr: fc000004, hc: 3f99bd52 5: addr: fc000005, hc: 4f023edb 6: addr: fc000006, hc: 3a71f4dd 7: addr: fc000007, hc: 7adf9f5f 0: addr: fc000000, hc: 85ede7b 1: addr: fc000001, hc: 5674cd4d 2: addr: fc000002, hc: 63961c42 3: addr: fc000003, hc: 65b54208 4: addr: fc000004, hc: 1be6f5c3 5: addr: fc000005, hc: 6b884d57 6: addr: fc000006, hc: 38af3868 7: addr: fc000007, hc: 77459877 0: addr: fc000000, hc: 5b2133b1 1: addr: fc000001, hc: 72ea2f77 2: addr: fc000002, hc: 33c7353a 3: addr: fc000003, hc: 681a9515 4: addr: fc000004, hc: 3af49f1c 5: addr: fc000005, hc: 19469ea2 6: addr: fc000006, hc: 13221655 7: addr: fc000007, hc: 2f2c9b19 0: addr: fc000000, hc: 31befd9f 1: addr: fc000001, hc: 1c20c684 2: addr: fc000002, hc: 1fb3ebeb 3: addr: fc000003, hc: 548c4f57 4: addr: fc000004, hc: 1218025c 5: addr: fc000005, hc: 816f27d 6: addr: fc000006, hc: 87aac27 7: addr: fc000007, hc: 3e3abc88 0: addr: fc000000, hc: 6ce253f1 1: addr: fc000001, hc: 53d8d10a 2: addr: fc000002, hc: e9e54c2 3: addr: fc000003, hc: 65ab7765 4: addr: fc000004, hc: 1b28cdfa 5: addr: fc000005, hc: eed1f14 6: addr: fc000006, hc: 7229724f 7: addr: fc000007, hc: 4c873330 0: addr: fc000000, hc: 119d7047 1: addr: fc000001, hc: 776ec8df 2: addr: fc000002, hc: 4eec7777 3: addr: fc000003, hc: 3b07d329 4: addr: fc000004, hc: 41629346 5: addr: fc000005, hc: 404b9385 6: addr: fc000006, hc: 6d311334 7: addr: fc000007, hc: 682a0b20 0: addr: fc000000, hc: 3d075dc0 1: addr: fc000001, hc: 214c265e 2: addr: fc000002, hc: 448139f0 3: addr: fc000003, hc: 7cca494b 4: addr: fc000004, hc: 7ba4f24f 5: addr: fc000005, hc: 3b9a45b3 6: addr: fc000006, hc: 7699a589 7: addr: fc000007, hc: 58372a00 0: addr: fc000000, hc: 4dd8dc3 1: addr: fc000001, hc: 6d03e736 2: addr: fc000002, hc: 568db2f2 3: addr: fc000003, hc: 378bf509 4: addr: fc000004, hc: 5fd0d5ae 5: addr: fc000005, hc: 2d98a335 6: addr: fc000006, hc: 16b98e56 7: addr: fc000007, hc: 7ef20235 0: addr: fc000000, hc: 27d6c5e0 1: addr: fc000001, hc: 4f3f5b24 2: addr: fc000002, hc: 15aeb7ab 3: addr: fc000003, hc: 7b23ec81 4: addr: fc000004, hc: 6acbcfc0 5: addr: fc000005, hc: 5f184fc6 6: addr: fc000006, hc: 3feba861 7: addr: fc000007, hc: 5b480cf9 0: addr: fc000000, hc: 6f496d9f 1: addr: fc000001, hc: 723279cf 2: addr: fc000002, hc: 10f87f48 3: addr: fc000003, hc: b4c966a 4: addr: fc000004, hc: 2f4d3709 5: addr: fc000005, hc: 4e50df2e 6: addr: fc000006, hc: 1d81eb93 7: addr: fc000007, hc: 7291c18f 0: addr: fc000000, hc: 34a245ab 1: addr: fc000001, hc: 7cc355be 2: addr: fc000002, hc: 6e8cf4c6 3: addr: fc000003, hc: 12edcd21 4: addr: fc000004, hc: 34c45dca 5: addr: fc000005, hc: 52cc8049 6: addr: fc000006, hc: 5b6f7412 7: addr: fc000007, hc: 27973e9b 0: addr: fc000000, hc: 312b1dae 1: addr: fc000001, hc: 7530d0a 2: addr: fc000002, hc: 27bc2616 3: addr: fc000003, hc: 3941a79c 4: addr: fc000004, hc: 506e1b77 5: addr: fc000005, hc: 4fca772d 6: addr: fc000006, hc: 9807454 7: addr: fc000007, hc: 3d494fbf 0: addr: fc000000, hc: 1ddc4ec2 1: addr: fc000001, hc: 133314b 2: addr: fc000002, hc: b1bc7ed 3: addr: fc000003, hc: 7cd84586 4: addr: fc000004, hc: 30dae81 5: addr: fc000005, hc: 1b2c6ec2 6: addr: fc000006, hc: 4edde6e5 7: addr: fc000007, hc: 70177ecd "
                  }
                ]
              },
              "rawText":"0: addr: fc000000, hc: 6d6f6e28 1: addr: fc000001, hc: 29453f44 2: addr: fc000002, hc: 5cad8086 3: addr: fc000003, hc: 6e0be858 4: addr: fc000004, hc: 61bbe9ba 5: addr: fc000005, hc: 610455d6 6: addr: fc000006, hc: 511d50c0 7: addr: fc000007, hc: 60e53b93 0: addr: fc000000, hc: 5e2de80c 1: addr: fc000001, hc: 1d44bcfa 2: addr: fc000002, hc: 266474c2 3: addr: fc000003, hc: 6f94fa3e 4: addr: fc000004, hc: 5e481248 5: addr: fc000005, hc: 66d3c617 6: addr: fc000006, hc: 63947c6b 7: addr: fc000007, hc: 2b193f2d 0: addr: fc000000, hc: 355da254 1: addr: fc000001, hc: 4dc63996 2: addr: fc000002, hc: d716361 3: addr: fc000003, hc: 6ff3c5b5 4: addr: fc000004, hc: 3764951d 5: addr: fc000005, hc: 4b1210ee 6: addr: fc000006, hc: 4d7e1886 7: addr: fc000007, hc: 3cd1a2f1 0: addr: fc000000, hc: 2f0e140b 1: addr: fc000001, hc: 7440e464 2: addr: fc000002, hc: 49476842 3: addr: fc000003, hc: 78308db1 4: addr: fc000004, hc: 27c170f0 5: addr: fc000005, hc: 5451c3a8 6: addr: fc000006, hc: 2626b418 7: addr: fc000007, hc: 5a07e868 0: addr: fc000000, hc: 76ed5528 1: addr: fc000001, hc: 2c7b84de 2: addr: fc000002, hc: 3fee733d 3: addr: fc000003, hc: 5acf9800 4: addr: fc000004, hc: 4617c264 5: addr: fc000005, hc: 36baf30c 6: addr: fc000006, hc: 7a81197d 7: addr: fc000007, hc: 5ca881b5 0: addr: fc000000, hc: 24d46ca6 1: addr: fc000001, hc: 4517d9a3 2: addr: fc000002, hc: 372f7a8d 3: addr: fc000003, hc: 2f92e0f4 4: addr: fc000004, hc: 28a418fc 5: addr: fc000005, hc: 5305068a 6: addr: fc000006, hc: 1f32e575 7: addr: fc000007, hc: 279f2327 0: addr: fc000000, hc: 2ff4acd0 1: addr: fc000001, hc: 54bedef2 2: addr: fc000002, hc: 5caf905d 3: addr: fc000003, hc: 27716f4 4: addr: fc000004, hc: 8efb846 5: addr: fc000005, hc: 2a84aee7 6: addr: fc000006, hc: a09ee92 7: addr: fc000007, hc: 30f39991 0: addr: fc000000, hc: 452b3a41 1: addr: fc000001, hc: 4a574795 2: addr: fc000002, hc: f6f4d33 3: addr: fc000003, hc: 23fc625e 4: addr: fc000004, hc: 3f99bd52 5: addr: fc000005, hc: 4f023edb 6: addr: fc000006, hc: 3a71f4dd 7: addr: fc000007, hc: 7adf9f5f 0: addr: fc000000, hc: 85ede7b 1: addr: fc000001, hc: 5674cd4d 2: addr: fc000002, hc: 63961c42 3: addr: fc000003, hc: 65b54208 4: addr: fc000004, hc: 1be6f5c3 5: addr: fc000005, hc: 6b884d57 6: addr: fc000006, hc: 38af3868 7: addr: fc000007, hc: 77459877 0: addr: fc000000, hc: 5b2133b1 1: addr: fc000001, hc: 72ea2f77 2: addr: fc000002, hc: 33c7353a 3: addr: fc000003, hc: 681a9515 4: addr: fc000004, hc: 3af49f1c 5: addr: fc000005, hc: 19469ea2 6: addr: fc000006, hc: 13221655 7: addr: fc000007, hc: 2f2c9b19 0: addr: fc000000, hc: 31befd9f 1: addr: fc000001, hc: 1c20c684 2: addr: fc000002, hc: 1fb3ebeb 3: addr: fc000003, hc: 548c4f57 4: addr: fc000004, hc: 1218025c 5: addr: fc000005, hc: 816f27d 6: addr: fc000006, hc: 87aac27 7: addr: fc000007, hc: 3e3abc88 0: addr: fc000000, hc: 6ce253f1 1: addr: fc000001, hc: 53d8d10a 2: addr: fc000002, hc: e9e54c2 3: addr: fc000003, hc: 65ab7765 4: addr: fc000004, hc: 1b28cdfa 5: addr: fc000005, hc: eed1f14 6: addr: fc000006, hc: 7229724f 7: addr: fc000007, hc: 4c873330 0: addr: fc000000, hc: 119d7047 1: addr: fc000001, hc: 776ec8df 2: addr: fc000002, hc: 4eec7777 3: addr: fc000003, hc: 3b07d329 4: addr: fc000004, hc: 41629346 5: addr: fc000005, hc: 404b9385 6: addr: fc000006, hc: 6d311334 7: addr: fc000007, hc: 682a0b20 0: addr: fc000000, hc: 3d075dc0 1: addr: fc000001, hc: 214c265e 2: addr: fc000002, hc: 448139f0 3: addr: fc000003, hc: 7cca494b 4: addr: fc000004, hc: 7ba4f24f 5: addr: fc000005, hc: 3b9a45b3 6: addr: fc000006, hc: 7699a589 7: addr: fc000007, hc: 58372a00 0: addr: fc000000, hc: 4dd8dc3 1: addr: fc000001, hc: 6d03e736 2: addr: fc000002, hc: 568db2f2 3: addr: fc000003, hc: 378bf509 4: addr: fc000004, hc: 5fd0d5ae 5: addr: fc000005, hc: 2d98a335 6: addr: fc000006, hc: 16b98e56 7: addr: fc000007, hc: 7ef20235 0: addr: fc000000, hc: 27d6c5e0 1: addr: fc000001, hc: 4f3f5b24 2: addr: fc000002, hc: 15aeb7ab 3: addr: fc000003, hc: 7b23ec81 4: addr: fc000004, hc: 6acbcfc0 5: addr: fc000005, hc: 5f184fc6 6: addr: fc000006, hc: 3feba861 7: addr: fc000007, hc: 5b480cf9 0: addr: fc000000, hc: 6f496d9f 1: addr: fc000001, hc: 723279cf 2: addr: fc000002, hc: 10f87f48 3: addr: fc000003, hc: b4c966a 4: addr: fc000004, hc: 2f4d3709 5: addr: fc000005, hc: 4e50df2e 6: addr: fc000006, hc: 1d81eb93 7: addr: fc000007, hc: 7291c18f 0: addr: fc000000, hc: 34a245ab 1: addr: fc000001, hc: 7cc355be 2: addr: fc000002, hc: 6e8cf4c6 3: addr: fc000003, hc: 12edcd21 4: addr: fc000004, hc: 34c45dca 5: addr: fc000005, hc: 52cc8049 6: addr: fc000006, hc: 5b6f7412 7: addr: fc000007, hc: 27973e9b 0: addr: fc000000, hc: 312b1dae 1: addr: fc000001, hc: 7530d0a 2: addr: fc000002, hc: 27bc2616 3: addr: fc000003, hc: 3941a79c 4: addr: fc000004, hc: 506e1b77 5: addr: fc000005, hc: 4fca772d 6: addr: fc000006, hc: 9807454 7: addr: fc000007, hc: 3d494fbf 0: addr: fc000000, hc: 1ddc4ec2 1: addr: fc000001, hc: 133314b 2: addr: fc000002, hc: b1bc7ed 3: addr: fc000003, hc: 7cd84586 4: addr: fc000004, hc: 30dae81 5: addr: fc000005, hc: 1b2c6ec2 6: addr: fc000006, hc: 4edde6e5 7: addr: fc000007, hc: 70177ecd ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fca":1,
                    "edd":1,
                    "cad":1,
                    "aee":1,
                    "acd":1,
                    "abc":1,
                    "bedef":1,
                    "aeb":1,
                    "aac":1,
                    "bbe":1,
                    "edb":1,
                    "bcfa":1,
                    "ede":1,
                    "eec":1,
                    "adf":1,
                    "ddc":1,
                    "dae":2,
                    "ecd":1,
                    "efb":1,
                    "feba":1,
                    "dca":1,
                    "addr":160,
                    "caf":1,
                    "fbf":1,
                    "acf":1,
                    "edcd":1,
                    "acbcfc":1,
                    "eed":1,
                    "cdfa":1,
                    "ebeb":1,
                    "baf":1,
                    "cca":1,
                    "fee":1,
                    "befd":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For CompressedOops and heaps between 3-30 GB, it gives you an idea of the memory location (but it is translated) In the case above, the addresses are <code>index * 8</code> The <code>8</code> comes from the allocation block size which is 8 bytes by default. It can be increased to 16 or 32 in Java 8, although using 16 is only useful for heaps of 32 - 64 GB, and 32 might not be useful at all as a 32 byte allocation size might be more expensive than using 64-bit references</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[1085180321]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For CompressedOops and heaps between 3-30 GB, it gives you an idea of the memory location (but it is translated) In the case above, the addresses are <code>index * 8</code> The <code>8</code> comes from the allocation block size which is 8 bytes by default. It can be increased to 16 or 32 in Java 8, although using 16 is only useful for heaps of 32 - 64 GB, and 32 might not be useful at all as a 32 byte allocation size might be more expensive than using 64-bit references</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"CompressedOops",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "oop":1,
                    "bit":1,
                    "alloc":2,
                    "size":2,
                    "idea":1,
                    "code":4,
                    "block":1,
                    "translat":1,
                    "compress":1,
                    "refer":1,
                    "increas":1,
                    "address":1,
                    "heap":2,
                    "expens":1,
                    "byte":1,
                    "locat":1,
                    "index":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"CompressedOops",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As you can see, each object was allocated in the same space after a System.gc(). The addresses are the same each time, however the hashCode</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[-2008634264]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As you can see, each object was allocated in the same space after a System.gc(). The addresses are the same each time, however the hashCode</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "system":1,
                    "object":1,
                    "code":1,
                    "hash":1,
                    "space":1,
                    "address":1,
                    "time":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>has little to do with the address</li> \n <li>is only 31-bit, there is nothing starting <code>8</code> to <code>F</code> in hexadecimal.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25113413]-[306598214]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>has little to do with the address</li> \n <li>is only 31-bit, there is nothing starting <code>8</code> to <code>F</code> in hexadecimal.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bit":1,
                    "code":4,
                    "address":1,
                    "start":1,
                    "hexadecim":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":26049632,
      "questionId":25111131,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":40847696,
          "postId":26049632,
          "creationDate":"2014-09-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2562673,
            "displayName":"Bill Randerson",
            "reputation":34
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Cool! I didn't know that there is this -XX:hashCode option..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[26049632-cu40847696]-[-182799406]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Cool! I didn't know that there is this -XX:hashCode option..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"hashCode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "cool":1,
                        "hash":1,
                        "code":1,
                        "option":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-09-25",
      "lastActivityDate":"2014-09-25",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3448419,
        "displayName":"apangin",
        "reputation":6041
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How to calculate identity hashCode is JVM specific. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[26049632]-[221277266]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How to calculate identity hashCode is JVM specific. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "calcul":1,
                    "code":1,
                    "hash":1,
                    "ident":1,
                    "specif":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As to HotSpot JVM, it uses <strong>random number generator</strong> for initial calculation of identity hashCode. After the hashCode is calculated for the first time, it is saved in the object header so that subsequent calls to <code>identityHashCode</code> will return the same value.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[26049632]-[1967319326]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As to HotSpot JVM, it uses <strong>random number generator</strong> for initial calculation of identity hashCode. After the hashCode is calculated for the first time, it is saved in the object header so that subsequent calls to <code>identityHashCode</code> will return the same value.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "jvm":1,
                    "random":1,
                    "subsequ":1,
                    "calcul":2,
                    "strong":2,
                    "object":1,
                    "code":5,
                    "hash":3,
                    "ident":2,
                    "spot":1,
                    "generat":1,
                    "header":1,
                    "initi":1,
                    "hot":1,
                    "time":1,
                    "save":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Actually the algorithm of generating identity hashCode can be altered by <code>-XX:hashCode</code> JVM option. Look at <a href=\"http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/d638e49facb6/src/share/vm/runtime/synchronizer.cpp#l542\"rel=\"nofollow\">the sources</a>. There are the following options:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[26049632]-[-2035691970]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Actually the algorithm of generating identity hashCode can be altered by <code>-XX:hashCode</code> JVM option. Look at <a href=\"http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/d638e49facb6/src/share/vm/runtime/synchronizer.cpp#l542\"rel=\"nofollow\">the sources</a>. There are the following options:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":1,
                    "jvm":1,
                    "runtim":1,
                    "alter":1,
                    "cpp":1,
                    "option":2,
                    "rel":1,
                    "facb":1,
                    "net":1,
                    "hotspot":1,
                    "code":4,
                    "share":1,
                    "hash":2,
                    "ident":1,
                    "nofollow":1,
                    "algorithm":1,
                    "src":1,
                    "generat":1,
                    "file":1,
                    "href":1,
                    "http":1,
                    "sourc":1,
                    "jdk":2,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><code>-XX:hashCode=0</code> - global Park-Miller RNG <em>(default until Java 7)</em></li> \n <li><code>-XX:hashCode=1</code> - function(obj_address, global_state)</li> \n <li><code>-XX:hashCode=2</code> - constant 1. All objects will have the same hashCode. Just for testing.</li> \n <li><code>-XX:hashCode=3</code> - incremental counter.</li> \n <li><code>-XX:hashCode=4</code> - lower 32 bits of the object address in the Heap</li> \n <li><code>-XX:hashCode=5</code> - thread-local Marsaglia's Xor-shift RNG <em>(default since Java 8)</em></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[26049632]-[642690711]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><code>-XX:hashCode=0</code> - global Park-Miller RNG <em>(default until Java 7)</em></li> \n <li><code>-XX:hashCode=1</code> - function(obj_address, global_state)</li> \n <li><code>-XX:hashCode=2</code> - constant 1. All objects will have the same hashCode. Just for testing.</li> \n <li><code>-XX:hashCode=3</code> - incremental counter.</li> \n <li><code>-XX:hashCode=4</code> - lower 32 bits of the object address in the Heap</li> \n <li><code>-XX:hashCode=5</code> - thread-local Marsaglia's Xor-shift RNG <em>(default since Java 8)</em></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"obj_address",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"global_state",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":1,
                    "test":1,
                    "bit":1,
                    "state":1,
                    "marsaglia":1,
                    "rng":2,
                    "local":1,
                    "shift":1,
                    "miller":1,
                    "obj":1,
                    "lower":1,
                    "object":2,
                    "code":19,
                    "global":2,
                    "hash":7,
                    "thread":1,
                    "xor":1,
                    "function":1,
                    "park":1,
                    "address":2,
                    "counter":1,
                    "heap":1,
                    "increment":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}