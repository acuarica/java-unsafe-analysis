{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":16102990,
    "title":"About Deep Copy and Serialization",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":23002863,
        "postId":16102990,
        "creationDate":"2013-04-19",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Good immutable designs rarely need deep copying in the first place. What is the real problem you're trying to solve that you need deep copying?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23002863]-[-1968640131]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Good immutable designs rarely need deep copying in the first place. What is the real problem you're trying to solve that you need deep copying?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "design":1,
                      "real":1,
                      "good":1,
                      "problem":1,
                      "immut":1,
                      "deep":2,
                      "rare":1,
                      "place":1,
                      "copi":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23003109,
        "postId":16102990,
        "creationDate":"2013-04-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2132553,
          "displayName":"aLogic",
          "reputation":60
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Basically, I need deep copies of Map and List, and I did not like to loop over the array each time I deep copy (is is ok?). Since Map and List uses generics, I do not know how to implement generic methods for them."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23003109]-[-1021620727]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Basically, I need deep copies of Map and List, and I did not like to loop over the array each time I deep copy (is is ok?). Since Map and List uses generics, I do not know how to implement generic methods for them."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "loop":1,
                      "map":2,
                      "generic":2,
                      "array":1,
                      "deep":2,
                      "implement":1,
                      "time":1,
                      "basic":1,
                      "copi":2,
                      "list":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23003128,
        "postId":16102990,
        "creationDate":"2013-04-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You honestly can't, is the thing. Unless you're using the serialization hack, you can't do a generic deep copy."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23003128]-[-1467291074]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You honestly can't, is the thing. Unless you're using the serialization hack, you can't do a generic deep copy."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "thing":1,
                      "generic":1,
                      "deep":1,
                      "hack":1,
                      "honest":1,
                      "copi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23016167,
        "postId":16102990,
        "creationDate":"2013-04-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I would listen to what @LouisWasserman's first comment. You shouldn't need to do this. I've never had to deep-copy, or clone() either, in nearly 16 years of Java. (I learned not to after a couple of bad experiences with poorly designed C++ libraries and code generators.) Rethink."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23016167]-[413403734]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I would listen to what @LouisWasserman's first comment. You shouldn't need to do this. I've never had to deep-copy, or clone() either, in nearly 16 years of Java. (I learned not to after a couple of bad experiences with poorly designed C++ libraries and code generators.) Rethink."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"LouisWasserman",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "design":1,
                      "learn":1,
                      "loui":1,
                      "bad":1,
                      "year":1,
                      "librari":1,
                      "experi":1,
                      "code":1,
                      "listen":1,
                      "wasserman":1,
                      "poor":1,
                      "deep":1,
                      "coupl":1,
                      "clone":1,
                      "comment":1,
                      "generat":1,
                      "shouldn":1,
                      "rethink":1,
                      "copi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23028572,
        "postId":16102990,
        "creationDate":"2013-04-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can't. There is no way."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23028572]-[1533770962]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can't. There is no way."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23021349,
        "postId":16102990,
        "creationDate":"2013-04-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2132553,
          "displayName":"aLogic",
          "reputation":60
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Thanks EJP, all my copy constructors are implemented to be deep. But I am having an issue with List and Map. How could I make a copy of a List or Map without repeating my self in a loop for all generics?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu23021349]-[2115093180]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Thanks EJP, all my copy constructors are implemented to be deep. But I am having an issue with List and Map. How could I make a copy of a List or Map without repeating my self in a loop for all generics?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "loop":1,
                      "map":2,
                      "constructor":1,
                      "issu":1,
                      "generic":1,
                      "deep":1,
                      "implement":1,
                      "make":1,
                      "repeat":1,
                      "copi":2,
                      "list":2,
                      "ejp":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28376112,
        "postId":16102990,
        "creationDate":"2013-10-04",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2129937,
          "displayName":"matt helliwell",
          "reputation":960
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You'd have to implement clone on every object that might be in the collection and then iterate through the collection calling clone on each object. If you have 3rd party objects then the chance of them supporting clone is fairly small so you'll have to think of a different way."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16102990-cu28376112]-[-445541620]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You'd have to implement clone on every object that might be in the collection and then iterate through the collection calling clone on each object. If you have 3rd party objects then the chance of them supporting clone is fairly small so you'll have to think of a different way."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "support":1,
                      "fair":1,
                      "object":3,
                      "small":1,
                      "clone":3,
                      "iter":1,
                      "implement":1,
                      "collect":2,
                      "parti":1,
                      "call":1,
                      "chanc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance",
      "serialization",
      "deep-copy"
    ],
    "creationDate":"2013-04-19",
    "lastActivityDate":"2013-10-21",
    "score":3,
    "viewCount":784,
    "owner":{
      "type":"StackOverflowUser",
      "id":2132553,
      "displayName":"aLogic",
      "reputation":60
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have read a lot about deep copying and serialization in Java <code>List</code>, <code>Map</code>, etc, but I did not find good answers to a some questions. I care for time and performance, so I am looking for a compromise. I list my questions below so that you can address the ones you have answers to.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16102990]-[1220903625]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have read a lot about deep copying and serialization in Java <code>List</code>, <code>Map</code>, etc, but I did not find good answers to a some questions. I care for time and performance, so I am looking for a compromise. I list my questions below so that you can address the ones you have answers to.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "read":1,
                  "find":1,
                  "question":2,
                  "map":1,
                  "good":1,
                  "compromis":1,
                  "care":1,
                  "code":4,
                  "deep":1,
                  "perform":1,
                  "lot":1,
                  "address":1,
                  "answer":2,
                  "time":1,
                  "copi":1,
                  "list":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li><p>What is better in terms of performance, deepcopy by looping over a <code>list</code> or using serialization? I have read a post (sorry I lost the link) that says looping is 4 times better than java serialization. Does this mean that using a 3rd party like Kryo can be better than looping?</p></li> \n <li><p>I am not sure how serialization works in different <a href=\"http://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking\"rel=\"nofollow\">3rd party libraries</a>, but what happens if I have many subclass levels, would serialization be better than looping?</p></li> \n <li><p>Is there any library in Java that copies raw memory? For instance, a library that uses <code>memcopy()</code>-like functions in <code>C</code>. That would be much faster since there is no need to care about classes logic (of course it needs some handling for non-contiguous memory data). I am aware that Java is object oriented :), but this wont violate rules I think.</p></li> \n <li><p>If I want to implement <code>deepCopy(List&lt;?&gt;)</code> and <code>deepCopy(Map&lt;?,?&gt;)</code> in Java, can I put them in a <code>MyTools</code> class that I have; or there is some neater way to do it in Java?</p></li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16102990]-[537229544]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li><p>What is better in terms of performance, deepcopy by looping over a <code>list</code> or using serialization? I have read a post (sorry I lost the link) that says looping is 4 times better than java serialization. Does this mean that using a 3rd party like Kryo can be better than looping?</p></li> \n <li><p>I am not sure how serialization works in different <a href=\"http://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking\"rel=\"nofollow\">3rd party libraries</a>, but what happens if I have many subclass levels, would serialization be better than looping?</p></li> \n <li><p>Is there any library in Java that copies raw memory? For instance, a library that uses <code>memcopy()</code>-like functions in <code>C</code>. That would be much faster since there is no need to care about classes logic (of course it needs some handling for non-contiguous memory data). I am aware that Java is object oriented :), but this wont violate rules I think.</p></li> \n <li><p>If I want to implement <code>deepCopy(List&lt;?&gt;)</code> and <code>deepCopy(Map&lt;?,?&gt;)</code> in Java, can I put them in a <code>MyTools</code> class that I have; or there is some neater way to do it in Java?</p></li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"deepCopy",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"List",
                        "comments":[
                          
                        ]
                      },
                      "typeArguments":{
                        "type":"TypeArgumentsNode",
                        "types":[
                          {
                            "type":"WildcardTypeArgumentNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"?",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"deepCopy",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Map",
                        "comments":[
                          
                        ]
                      },
                      "typeArguments":{
                        "type":"TypeArgumentsNode",
                        "types":[
                          {
                            "type":"WildcardTypeArgumentNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"?",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"WildcardTypeArgumentNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"?",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"MyTools",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"that",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"have",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"I",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":4,
                  "read":1,
                  "post":1,
                  "subclass":1,
                  "violat":1,
                  "faster":1,
                  "loop":4,
                  "googl":1,
                  "map":1,
                  "contigu":1,
                  "tool":1,
                  "data":1,
                  "rel":1,
                  "term":1,
                  "rule":1,
                  "protobuf":1,
                  "librari":3,
                  "care":1,
                  "lost":1,
                  "work":1,
                  "logic":1,
                  "object":1,
                  "code":13,
                  "awar":1,
                  "nofollow":1,
                  "raw":1,
                  "deep":2,
                  "compar":1,
                  "function":1,
                  "link":1,
                  "wont":1,
                  "perform":1,
                  "deepcopi":1,
                  "implement":1,
                  "thrift":1,
                  "memcopi":1,
                  "orient":1,
                  "put":1,
                  "kryo":1,
                  "class":1,
                  "wiki":1,
                  "time":1,
                  "href":1,
                  "parti":2,
                  "http":1,
                  "neater":1,
                  "handl":1,
                  "copi":3,
                  "list":2,
                  "instanc":1,
                  "benchmark":1,
                  "level":1,
                  "memori":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"List",
                          "comments":[
                            
                          ]
                        },
                        "typeArguments":{
                          "type":"TypeArgumentsNode",
                          "types":[
                            {
                              "type":"WildcardTypeArgumentNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"?",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Map",
                          "comments":[
                            
                          ]
                        },
                        "typeArguments":{
                          "type":"TypeArgumentsNode",
                          "types":[
                            {
                              "type":"WildcardTypeArgumentNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"?",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"WildcardTypeArgumentNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"?",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyTools",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"I",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"have",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"I",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19494323,
      "questionId":16102990,
      "comments":[
        
      ],
      "creationDate":"2013-10-21",
      "lastActivityDate":"2013-10-21",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1414873,
        "displayName":"yusufaytas",
        "reputation":466
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Looping will always be faster than serialization unless you are only serializing primitives.</li> \n <li>In third party libraries, they handle subclass and all kinds in general. They do this by using sun.misc.Unsafe.class</li> \n <li>Yes, actually you can copy memory using Unsafe class. Check Unsafe class implementation.</li> \n <li>You can have MyTools or let's say Utils class do to that for you.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19494323]-[-952472676]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Looping will always be faster than serialization unless you are only serializing primitives.</li> \n <li>In third party libraries, they handle subclass and all kinds in general. They do this by using sun.misc.Unsafe.class</li> \n <li>Yes, actually you can copy memory using Unsafe class. Check Unsafe class implementation.</li> \n <li>You can have MyTools or let's say Utils class do to that for you.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"Yes",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"implementation",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyTools",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":2,
                    "subclass":1,
                    "faster":1,
                    "loop":1,
                    "util":1,
                    "tool":1,
                    "sun":1,
                    "librari":1,
                    "general":1,
                    "check":1,
                    "implement":1,
                    "misc":1,
                    "unsaf":3,
                    "kind":1,
                    "parti":1,
                    "primit":1,
                    "handl":1,
                    "copi":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"MyTools",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>According to your needs, there is not way of deep copying for list, maps and other generics. For this reason, you may end up using a good serialization library like Kryo.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19494323]-[-1910369837]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>According to your needs, there is not way of deep copying for list, maps and other generics. For this reason, you may end up using a good serialization library like Kryo.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "map":1,
                    "good":1,
                    "librari":1,
                    "reason":1,
                    "generic":1,
                    "deep":1,
                    "kryo":1,
                    "end":1,
                    "copi":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}