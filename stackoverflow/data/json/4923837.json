{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":4923837,
    "title":"Clojure - java interop - How to pass a float array&gt;",
    "comments":[
      
    ],
    "tags":[
      "java",
      "clojure"
    ],
    "creationDate":"2011-02-07",
    "lastActivityDate":"2011-02-10",
    "lastEditDate":"2011-02-10",
    "score":4,
    "viewCount":756,
    "owner":{
      "type":"StackOverflowUser",
      "id":606777,
      "displayName":"Tom Wilks",
      "reputation":21
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need to call a java function from clojure, which takes a float array as a parameter. How would I do this in clojure?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4923837]-[-512011688]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need to call a java function from clojure, which takes a float array as a parameter. How would I do this in clojure?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "array":1,
                  "paramet":1,
                  "take":1,
                  "function":1,
                  "call":1,
                  "clojur":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I tried</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4923837]-[-93945174]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I tried</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><code>(classname/function [0.1f 0.2f])</code> - but this doesn't work. Clearly the issue is with the parameter array. I can call other functions in the class with no problems, provide they don't take an array as a parameter.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4923837]-[365652497]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><code>(classname/function [0.1f 0.2f])</code> - but this doesn't work. Clearly the issue is with the parameter array. I can call other functions in the class with no problems, provide they don't take an array as a parameter.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"with",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "provid":1,
                  "problem":1,
                  "classnam":1,
                  "issu":1,
                  "work":1,
                  "code":2,
                  "array":2,
                  "paramet":2,
                  "function":2,
                  "call":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Any suggestions?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4923837]-[-1342674545]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Any suggestions?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "suggest":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thank you</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4923837]-[1624091392]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thank you</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":4923953,
      "questionId":4923837,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5486986,
          "postId":4923953,
          "creationDate":"2011-02-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":606777,
            "displayName":"Tom Wilks",
            "reputation":21
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thank you. This didn't work for me. To be more specific, I am trying to call an opengl function. In java, the code is like this: GLfloat blackAmbientLight[] = {0.0, 0.0, 0.0}; glLightfv(GL_LIGHT0, GL_AMBIENT, blackAmbientLight); However, I am not able to call the same from clojure :-( The (float-array [0 0 0]) doesn't produce what I need when I pass the parameter"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4923953-cu5486986]-[-45888465]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thank you. This didn't work for me. To be more specific, I am trying to call an opengl function. In java, the code is like this: GLfloat blackAmbientLight[] = {0.0, 0.0, 0.0}; glLightfv(GL_LIGHT0, GL_AMBIENT, blackAmbientLight); However, I am not able to call the same from clojure :-( The (float-array [0 0 0]) doesn't produce what I need when I pass the parameter"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"blackAmbientLight",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                {
                                  "type":"ArrayDimensionNode",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "assignment":{
                                "type":"VariableAssignmentNode",
                                "variableAssignment":{
                                  "type":"VariableArrayInitNode",
                                  "arrayInit":{
                                    "type":"ArrayInitializerNode",
                                    "inits":{
                                      "type":"VariableInitializersNode",
                                      "initializers":[
                                        {
                                          "type":"VariableExpressionInitNode",
                                          "expression":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"FloatingPointLiteralNode",
                                              "valueRep":"0.0"
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        },
                                        {
                                          "type":"VariableExpressionInitNode",
                                          "expression":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"FloatingPointLiteralNode",
                                              "valueRep":"0.0"
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        },
                                        {
                                          "type":"VariableExpressionInitNode",
                                          "expression":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"FloatingPointLiteralNode",
                                              "valueRep":"0.0"
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "varType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"GLfloat",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"glLightfv",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"GL_LIGHT0",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"GL_AMBIENT",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"blackAmbientLight",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "lightfv":1,
                        "produc":1,
                        "glfloat":1,
                        "opengl":1,
                        "work":1,
                        "code":1,
                        "array":1,
                        "paramet":1,
                        "black":2,
                        "function":1,
                        "specif":1,
                        "pass":1,
                        "ambient":3,
                        "light":3,
                        "call":2,
                        "clojur":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"GLfloat",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        {
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"glLightfv",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"GL_LIGHT0",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"GL_AMBIENT",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"blackAmbientLight",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"blackAmbientLight",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            {
                              "type":"ArrayDimensionNode",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableArrayInitNode",
                              "arrayInit":{
                                "type":"ArrayInitializerNode",
                                "inits":{
                                  "type":"VariableInitializersNode",
                                  "initializers":[
                                    {
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"FloatingPointLiteralNode",
                                          "valueRep":"0.0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    {
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"FloatingPointLiteralNode",
                                          "valueRep":"0.0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    {
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"FloatingPointLiteralNode",
                                          "valueRep":"0.0"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"GLfloat",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-07",
      "lastActivityDate":"2011-02-07",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":24946,
        "displayName":"Jonas",
        "reputation":8757
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Try <a href=\"http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/float-array\"rel=\"nofollow\"><code>float-array</code></a>. From the documetation: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4923953]-[-438857243]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Try <a href=\"http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/float-array\"rel=\"nofollow\"><code>float-array</code></a>. From the documetation: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":1,
                    "rel":1,
                    "code":2,
                    "array":2,
                    "nofollow":1,
                    "api":1,
                    "core":2,
                    "html":1,
                    "href":1,
                    "http":1,
                    "clojur":4,
                    "documet":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"user=&gt; (doc float-array) ------------------------- clojure.core/float-array ([size-or-seq] [size init-val-or-seq]) Creates an array of floats nil user=&gt; (float-array [1 2 3]) #&lt;float[] [F@e1666&gt; user=&gt; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[4923953]-[305683314]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"user=> (doc float-array) ------------------------- clojure.core/float-array ([size-or-seq] [size init-val-or-seq]) Creates an array of floats nil user=> (float-array [1 2 3]) #<float[] [F@e1666> user=> "
                  }
                ]
              },
              "rawText":"user=> (doc float-array) ------------------------- clojure.core/float-array ([size-or-seq] [size init-val-or-seq]) Creates an array of floats nil user=> (float-array [1 2 3]) #<float[] [F@e1666> user=> ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "size":2,
                    "float":1,
                    "doc":1,
                    "nil":1,
                    "array":4,
                    "seq":2,
                    "core":1,
                    "creat":1,
                    "init":1,
                    "clojur":1,
                    "user":3,
                    "val":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":4925800,
      "questionId":4923837,
      "comments":[
        
      ],
      "creationDate":"2011-02-07",
      "lastActivityDate":"2011-02-08",
      "lastEditDate":"2011-02-08",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":90801,
        "displayName":"Arthur Ulfeldt",
        "reputation":50752
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>it looks like that function wants an array of GLfloats so the build in shortcut of <code>float-array</code> may not give you what you need. the general array builder function is <code>(into-array type aseq)</code></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4925800]-[-1163884766]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>it looks like that function wants an array of GLfloats so the build in shortcut of <code>float-array</code> may not give you what you need. the general array builder function is <code>(into-array type aseq)</code></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "glfloat":1,
                    "build":1,
                    "builder":1,
                    "code":4,
                    "array":4,
                    "general":1,
                    "aseq":1,
                    "function":2,
                    "give":1,
                    "shortcut":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>so it may look something like:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4925800]-[476240723]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>so it may look something like:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"(def my-array (into-array GLfloat [0.0 0.0 0.0])) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[4925800]-[1386978232]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"(def my-array (into-array GLfloat [0.0 0.0 0.0])) "
                  }
                ]
              },
              "rawText":"(def my-array (into-array GLfloat [0.0 0.0 0.0])) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "glfloat":1,
                    "def":1,
                    "array":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>into array is longer winded though more general. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4925800]-[-1799025126]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>into array is longer winded though more general. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wind":1,
                    "longer":1,
                    "general":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}