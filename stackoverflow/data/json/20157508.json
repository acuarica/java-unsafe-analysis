{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20157508,
    "title":"Is there a way to force unload a class by using the sun.misc.Unsafe class?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":30046904,
        "postId":20157508,
        "creationDate":"2013-11-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1225463,
          "displayName":"benjamin.d",
          "reputation":1401
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Do you have a use case or is this just a general question?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20157508-cu30046904]-[-1332324159]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Do you have a use case or is this just a general question?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "general":1,
                      "question":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":30046931,
        "postId":20157508,
        "creationDate":"2013-11-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1052931,
          "displayName":"Philip Whitehouse",
          "reputation":2390
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If you have full control over the environment, use a seperate classloader to load that class or JAR and then unload the class loader (probably including a call to `System.gc();`) See http://stackoverflow.com/questions/148681/unloading-classes-in-java"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20157508-cu30046931]-[1180975076]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If you have full control over the environment, use a seperate classloader to load that class or JAR and then unload the class loader (probably including a call to `System.gc();`) See http://stackoverflow.com/questions/148681/unloading-classes-in-java"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"or",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"loader",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"gc",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "system":1,
                      "seper":1,
                      "loader":1,
                      "full":1,
                      "load":1,
                      "unload":2,
                      "includ":1,
                      "stackoverflow":1,
                      "class":1,
                      "control":1,
                      "classload":1,
                      "environ":1,
                      "http":1,
                      "call":1,
                      "jar":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      {
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"System",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"gc",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":30046959,
        "postId":20157508,
        "creationDate":"2013-11-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1676447,
          "displayName":"Cirno",
          "reputation":3
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I'm currently having issues trying to get classes to unload properly and want a way to forcefully unload said classes. edit: Just saw Philip's answer. I had a feeling I would have to use a custom class loader or some sort. If possible, I would still like for this question to be answered, declaring if it's just plainly impossible or not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20157508-cu30046959]-[1722777802]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I'm currently having issues trying to get classes to unload properly and want a way to forcefully unload said classes. edit: Just saw Philip's answer. I had a feeling I would have to use a custom class loader or some sort. If possible, I would still like for this question to be answered, declaring if it's just plainly impossible or not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"loader",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "feel":1,
                      "custom":1,
                      "proper":1,
                      "loader":1,
                      "imposs":1,
                      "issu":1,
                      "declar":1,
                      "unload":2,
                      "edit":1,
                      "philip":1,
                      "plain":1,
                      "answer":2,
                      "class":2,
                      "sort":1,
                      "forc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "memory-address"
    ],
    "creationDate":"2013-11-23",
    "lastActivityDate":"2014-04-10",
    "lastEditDate":"2014-04-10",
    "score":0,
    "viewCount":64,
    "owner":{
      "type":"StackOverflowUser",
      "id":1676447,
      "displayName":"Cirno",
      "reputation":3
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>A bit of a silly question. I've already looked around and seen that there's no way to force an unload of a class unless you wrote a custom JVM. However, I've been wondering if it was possible to do so by using the Unsafe class and manually empty the address of the class object, thus theoretically &quot;unloading&quot; the class. I do, however, predict there will be issues when an Object with said class is still in memory, therefore either promptly crashing the JVM or defaulting the object's class to Object.class or null.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20157508]-[-185837332]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>A bit of a silly question. I've already looked around and seen that there's no way to force an unload of a class unless you wrote a custom JVM. However, I've been wondering if it was possible to do so by using the Unsafe class and manually empty the address of the class object, thus theoretically &quot;unloading&quot; the class. I do, however, predict there will be issues when an Object with said class is still in memory, therefore either promptly crashing the JVM or defaulting the object's class to Object.class or null.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"unless",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"and",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"object",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"is",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"to",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"or",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "jvm":2,
                  "question":1,
                  "bit":1,
                  "custom":1,
                  "crash":1,
                  "look":1,
                  "theoret":1,
                  "wrote":1,
                  "prompt":1,
                  "issu":1,
                  "unload":2,
                  "object":4,
                  "silli":1,
                  "default":1,
                  "empti":1,
                  "wonder":1,
                  "address":1,
                  "quot":2,
                  "unsaf":1,
                  "predict":1,
                  "forc":1,
                  "manual":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":20157621,
      "questionId":20157508,
      "comments":[
        
      ],
      "creationDate":"2013-11-23",
      "lastActivityDate":"2013-11-23",
      "lastEditDate":"2013-11-23",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>However, I've been wondering if it was possible to do so by using the Unsafe class and manually empty the address of the class object, thus theoretically &quot;unloading&quot; the class. </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-719429894]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>However, I've been wondering if it was possible to do so by using the Unsafe class and manually empty the address of the class object, thus theoretically &quot;unloading&quot; the class. </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"and",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"object",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "theoret":1,
                    "blockquot":2,
                    "unload":1,
                    "object":1,
                    "empti":1,
                    "wonder":1,
                    "address":1,
                    "quot":2,
                    "unsaf":1,
                    "manual":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It is highly unlikely that you can find all places where the state of a loaded class is referenced. If you don't find them all, the garbage collector won't think it is unreachable and unloading won't be triggered. And if you (somehow) used <code>Unsafe</code> to smash the state of a (still) reachable class, then the end result is likely to be a hard JVM crash.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-415075240]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It is highly unlikely that you can find all places where the state of a loaded class is referenced. If you don't find them all, the garbage collector won't think it is unreachable and unloading won't be triggered. And if you (somehow) used <code>Unsafe</code> to smash the state of a (still) reachable class, then the end result is likely to be a hard JVM crash.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "find":2,
                    "collector":1,
                    "hard":1,
                    "unreach":1,
                    "state":2,
                    "crash":1,
                    "result":1,
                    "load":1,
                    "reachabl":1,
                    "unload":1,
                    "code":2,
                    "smash":1,
                    "end":1,
                    "place":1,
                    "unsaf":1,
                    "referenc":1,
                    "won":2,
                    "garbag":1,
                    "high":1,
                    "trigger":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>I do, however, predict there will be issues when an Object with said class is still in memory, therefore either promptly crashing the JVM or defaulting the object's class to Object.class or null.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-1370873028]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>I do, however, predict there will be issues when an Object with said class is still in memory, therefore either promptly crashing the JVM or defaulting the object's class to Object.class or null.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"to",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"or",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "crash":1,
                    "prompt":1,
                    "issu":1,
                    "blockquot":2,
                    "object":3,
                    "default":1,
                    "predict":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The former, most likely.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[206897228]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The former, most likely.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Is there a way to force unload a class by using the sun.misc.Unsafe class?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[2031838117]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Is there a way to force unload a class by using the sun.misc.Unsafe class?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"by",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sun":1,
                    "blockquot":2,
                    "unload":1,
                    "misc":1,
                    "unsaf":1,
                    "forc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>AFAIK, No.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[1021038822]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>AFAIK, No.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "afaik":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In short, <strong>don't try to do this.</strong> The probability of it &quot;working&quot; is vanishingly small ...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[461954134]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In short, <strong>don't try to do this.</strong> The probability of it &quot;working&quot; is vanishingly small ...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "vanish":1,
                    "strong":2,
                    "work":1,
                    "small":1,
                    "quot":2,
                    "probabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Apparently your motivation is ...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[827329830]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Apparently your motivation is ...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "motiv":1,
                    "appar":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>I'm currently having issues trying to get classes to unload properly and want a way to forcefully unload said classes.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-1252444614]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>I'm currently having issues trying to get classes to unload properly and want a way to forcefully unload said classes.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "proper":1,
                    "issu":1,
                    "blockquot":2,
                    "unload":2,
                    "class":2,
                    "forc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you <em>should</em> be doing is figuring out what is preventing the classes from unloading. The root cause is most likely that you still have references <em>somewhere</em> to some object or class defined by the classloader. Eliminate those references, and the classes should unload.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-2009873892]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you <em>should</em> be doing is figuring out what is preventing the classes from unloading. The root cause is most likely that you still have references <em>somewhere</em> to some object or class defined by the classloader. Eliminate those references, and the classes should unload.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"defined",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "root":1,
                    "prevent":1,
                    "unload":2,
                    "object":1,
                    "refer":2,
                    "elimin":1,
                    "figur":1,
                    "class":2,
                    "classload":1,
                    "defin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(Conceptually speaking, there is a hard, bidirectional &quot;reference&quot; between a class and all of its instances, and a hard, bidirectional &quot;reference&quot; between a classloader and all of the classes that it defined. Just one external link to an instance or class, or to the classloader, is sufficient to inhibit gc'ing / unloading for the entire network of objects.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20157621]-[-1847680259]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(Conceptually speaking, there is a hard, bidirectional &quot;reference&quot; between a class and all of its instances, and a hard, bidirectional &quot;reference&quot; between a classloader and all of the classes that it defined. Just one external link to an instance or class, or to the classloader, is sufficient to inhibit gc'ing / unloading for the entire network of objects.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"and",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "network":1,
                    "hard":2,
                    "inhibit":1,
                    "ing":1,
                    "entir":1,
                    "unload":1,
                    "object":1,
                    "suffici":1,
                    "link":1,
                    "extern":1,
                    "refer":2,
                    "class":1,
                    "quot":4,
                    "classload":2,
                    "defin":1,
                    "conceptu":1,
                    "bidirect":2,
                    "speak":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}