{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":16827017,
    "title":"Where exactly `hash == 1` performed in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":24260448,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2312796,
          "displayName":"greedybuddha",
          "reputation":5063
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I think you are confused. the hash is not the location in the heap, the hash is a value that denotes which objects are unique compared to each other."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260448]-[-1668717558]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I think you are confused. the hash is not the location in the heap, the hash is a value that denotes which objects are unique compared to each other."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "uniqu":1,
                      "object":1,
                      "hash":2,
                      "compar":1,
                      "denot":1,
                      "confus":1,
                      "heap":1,
                      "locat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24260478,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":802585,
          "displayName":"MrROY",
          "reputation":3478
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@greedybuddha, I'm not sure, but IIRC all instance variables are located in heap, but their values' location may not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260478]-[654283052]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@greedybuddha, I'm not sure, but IIRC all instance variables are located in heap, but their values' location may not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "iirc":1,
                      "valu":1,
                      "heap":1,
                      "greedybuddha":1,
                      "variabl":1,
                      "locat":2,
                      "instanc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24260492,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2312796,
          "displayName":"greedybuddha",
          "reputation":5063
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The locations are definitely not, there is no way to access the heap location inside of java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260492]-[1417887923]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The locations are definitely not, there is no way to access the heap location inside of java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "locat":2,
                      "heap":1,
                      "access":1,
                      "insid":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24260527,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":802585,
          "displayName":"MrROY",
          "reputation":3478
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@greedybuddha, check out this [JLS 17.4.1](http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.1) : ** All instance fields, static fields, and array elements are stored in heap memory. **"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260527]-[10426939]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@greedybuddha, check out this [JLS 17.4.1](http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.1) : ** All instance fields, static fields, and array elements are stored in heap memory. **"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jls":4,
                      "field":2,
                      "oracl":1,
                      "store":1,
                      "doc":1,
                      "element":1,
                      "array":1,
                      "check":1,
                      "spec":1,
                      "javas":1,
                      "heap":1,
                      "greedybuddha":1,
                      "html":2,
                      "http":1,
                      "instanc":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24260545,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2312796,
          "displayName":"greedybuddha",
          "reputation":5063
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I didn't say that they aren't stored in the Heap, they are. I said there is no way to get the Heap addresses."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260545]-[-310902267]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I didn't say that they aren't stored in the Heap, they are. I said there is no way to get the Heap addresses."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "address":1,
                      "store":1,
                      "aren":1,
                      "heap":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24260990,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":900873,
          "displayName":"Kevin",
          "reputation":24496
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"More likely `hash` is loaded into a register, which is then compared with the literal 1 in a single (maybe 2?) assembly command(s). Also, your example won't compile, it lacks a type on `hash`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24260990]-[1622828650]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"More likely `hash` is loaded into a register, which is then compared with the literal 1 in a single (maybe 2?) assembly command(s). Also, your example won't compile, it lacks a type on `hash`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "singl":1,
                      "assembl":1,
                      "liter":1,
                      "regist":1,
                      "load":1,
                      "command":1,
                      "hash":2,
                      "lack":1,
                      "compar":1,
                      "compil":1,
                      "type":1,
                      "won":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24261018,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":900873,
          "displayName":"Kevin",
          "reputation":24496
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@greedybuddha Your statement that you can't get heap addresses is correct for primitives, but I believe the default `hashCode()` for `Object`s in Sun's JVM is the address. (And it appears you can use `sun.misc.Unsafe` to get the address regardless of the hash code)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24261018]-[429064288]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@greedybuddha Your statement that you can't get heap addresses is correct for primitives, but I believe the default `hashCode()` for `Object`s in Sun's JVM is the address. (And it appears you can use `sun.misc.Unsafe` to get the address regardless of the hash code)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"hashCode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "appear":1,
                      "correct":1,
                      "sun":2,
                      "statement":1,
                      "object":1,
                      "code":2,
                      "hash":2,
                      "misc":1,
                      "address":3,
                      "unsaf":1,
                      "heap":1,
                      "greedybuddha":1,
                      "primit":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":24261158,
        "postId":16827017,
        "creationDate":"2013-05-30",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2312796,
          "displayName":"greedybuddha",
          "reputation":5063
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"http://stackoverflow.com/questions/1360826/how-to-get-address-of-a-java-object, from JonSkeet himself... no :). Or if you don't believe him, take a look at the Object code. http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16827017-cu24261158]-[-1571534363]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"http://stackoverflow.com/questions/1360826/how-to-get-address-of-a-java-object, from JonSkeet himself... no :). Or if you don't believe him, take a look at the Object code. http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JonSkeet",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "jon":1,
                      "oracl":1,
                      "doc":2,
                      "object":3,
                      "code":1,
                      "stackoverflow":1,
                      "javas":1,
                      "address":1,
                      "api":1,
                      "lang":1,
                      "html":1,
                      "http":2,
                      "skeet":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"JonSkeet",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jvm"
    ],
    "creationDate":"2013-05-30",
    "lastActivityDate":"2013-05-30",
    "score":0,
    "viewCount":109,
    "owner":{
      "type":"StackOverflowUser",
      "id":802585,
      "displayName":"MrROY",
      "reputation":3478
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If we have the code like this:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16827017]-[1445988857]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If we have the code like this:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"class A { private hash = 0; public void test(){ if (hash == 1) { //dosomething } } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[16827017]-[-494337972]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"A",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"{ private "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"hash",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"0"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"test",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"==",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"hash",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"1"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"//dosomething } } } \n"
                            }
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"class A { private hash = 0; public void test(){ if (hash == 1) { //dosomething } } } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "hash":2,
                  "dosometh":1,
                  "test":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Where exactly the compare performed ? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16827017]-[-387689501]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Where exactly the compare performed ? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "compar":1,
                  "perform":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here's my understanding:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16827017]-[953449009]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here's my understanding:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "understand":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>Load hash into thread's stack, named r1.</li> \n <li>compare r1 with literal 1.</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16827017]-[1116577417]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>Load hash into thread's stack, named r1.</li> \n <li>compare r1 with literal 1.</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "name":1,
                  "liter":1,
                  "load":1,
                  "hash":1,
                  "thread":1,
                  "compar":1,
                  "stack":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it right ? In the meaning time, the hash in the heap could be changed ?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16827017]-[-534039773]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it right ? In the meaning time, the hash in the heap could be changed ?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":1,
                  "mean":1,
                  "hash":1,
                  "time":1,
                  "heap":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":16827392,
      "questionId":16827017,
      "comments":[
        
      ],
      "creationDate":"2013-05-30",
      "lastActivityDate":"2013-05-30",
      "lastEditDate":"2013-05-30",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1831293,
        "displayName":"Evgeniy Dorofeev",
        "reputation":58894
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Both field hash and constant 1 are loaded on stack. Then comparison is performed:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16827392]-[-1708337888]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Both field hash and constant 1 are loaded on stack. Then comparison is performed:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":1,
                    "field":1,
                    "comparison":1,
                    "load":1,
                    "hash":1,
                    "perform":1,
                    "stack":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" ... GETFIELD A.hash : I // push hash onto the stack ICONST_1 // push 1 onto the stack IF_ICMPNE L1 // pop the top two ints off the stack and compare them ... // do smth L1 RETURN "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[16827392]-[-1921852565]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" ... GETFIELD A.hash : I // push hash onto the stack ICONST_1 // push 1 onto the stack IF"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_ICMPNE",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" L1 // pop the top two ints off the stack and compare them ... // do smth L1 RETURN "
                  }
                ]
              },
              "rawText":" ... GETFIELD A.hash : I // push hash onto the stack ICONST_1 // push 1 onto the stack IF_ICMPNE L1 // pop the top two ints off the stack and compare them ... // do smth L1 RETURN ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pop":1,
                    "smth":1,
                    "push":2,
                    "icmpn":1,
                    "getfield":1,
                    "hash":2,
                    "iconst":1,
                    "compar":1,
                    "int":1,
                    "stack":3,
                    "top":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}