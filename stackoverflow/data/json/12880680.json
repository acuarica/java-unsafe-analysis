{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":12880680,
    "title":"Transaction Strategies for DynamoDB in Spring",
    "comments":[
      
    ],
    "tags":[
      "java",
      "spring",
      "transactions",
      "jta",
      "amazon-dynamodb"
    ],
    "creationDate":"2012-10-14",
    "lastActivityDate":"2012-10-30",
    "score":1,
    "viewCount":745,
    "owner":{
      "type":"StackOverflowUser",
      "id":774395,
      "displayName":"Deejay",
      "reputation":2975
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What would be the most appropriate way to enable transactionality of multi-operation updates on AWS DynamoDB in a Java Spring application?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12880680]-[950310092]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What would be the most appropriate way to enable transactionality of multi-operation updates on AWS DynamoDB in a Java Spring application?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "updat":1,
                  "spring":1,
                  "aw":1,
                  "oper":1,
                  "transact":1,
                  "applic":1,
                  "enabl":1,
                  "multi":1,
                  "dynamo":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>AWS' DynamoDB is atomic only on a per-row update. I have a requirement to maintain secondary indices as separate tables, so I'd insert the 'main' row in the main table, and then insert a row into the secondary index table. If the second insert fails, I'd like to 'roll back' the first, in order to keep my data consistent. DynamoDB doesn't have any native support for transactions or rollbacks.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12880680]-[-52407950]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>AWS' DynamoDB is atomic only on a per-row update. I have a requirement to maintain secondary indices as separate tables, so I'd insert the 'main' row in the main table, and then insert a row into the secondary index table. If the second insert fails, I'd like to 'roll back' the first, in order to keep my data consistent. DynamoDB doesn't have any native support for transactions or rollbacks.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "support":1,
                  "fail":1,
                  "insert":3,
                  "requir":1,
                  "data":1,
                  "updat":1,
                  "separ":1,
                  "row":3,
                  "aw":1,
                  "main":2,
                  "tabl":3,
                  "rollback":1,
                  "transact":1,
                  "roll":1,
                  "consist":1,
                  "indic":1,
                  "order":1,
                  "back":1,
                  "atom":1,
                  "secondari":2,
                  "dynamo":2,
                  "index":1,
                  "maintain":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm familiar with using a Spring transaction manager when working with JPA datasources like Hibernate, but I'm not sure what the best approach to implementing my own transaction-management code would be.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[12880680]-[-695983025]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm familiar with using a Spring transaction manager when working with JPA datasources like Hibernate, but I'm not sure what the best approach to implementing my own transaction-management code would be.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "familiar":1,
                  "hibern":1,
                  "spring":1,
                  "jpa":1,
                  "work":1,
                  "code":1,
                  "transact":2,
                  "implement":1,
                  "approach":1,
                  "datasourc":1,
                  "manag":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":13144945,
      "questionId":12880680,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":17896009,
          "postId":13144945,
          "creationDate":"2012-10-31",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":774395,
            "displayName":"Deejay",
            "reputation":2975
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm not sure I understand. If the main table is in an RDBMS, then we're not getting any of the benefits of DynamoDB?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[13144945-cu17896009]-[367401271]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm not sure I understand. If the main table is in an RDBMS, then we're not getting any of the benefits of DynamoDB?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "understand":1,
                        "main":1,
                        "tabl":1,
                        "rdbms":1,
                        "benefit":1,
                        "dynamo":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-10-30",
      "lastActivityDate":"2012-10-30",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1786434,
        "displayName":"user1786434",
        "reputation":31
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>We have a similar requirement. What we are adopting is a &quot;polyglot&quot; approach. That is to keep the transactional part, your main table, in a relational database. Only update your secondary indices in DynamoDB after a transaction is committed in the main table.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[13144945]-[965862377]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>We have a similar requirement. What we are adopting is a &quot;polyglot&quot; approach. That is to keep the transactional part, your main table, in a relational database. Only update your secondary indices in DynamoDB after a transaction is committed in the main table.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "polyglot":1,
                    "commit":1,
                    "relat":1,
                    "similar":1,
                    "requir":1,
                    "updat":1,
                    "main":2,
                    "adopt":1,
                    "tabl":2,
                    "transact":2,
                    "indic":1,
                    "approach":1,
                    "quot":2,
                    "databas":1,
                    "part":1,
                    "secondari":1,
                    "dynamo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}