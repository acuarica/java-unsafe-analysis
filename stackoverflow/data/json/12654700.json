{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":12654700,"title":"fast copying object content in scala","comments":[],"tags":["performance","scala"],"creationDate":"2012-09-29","lastActivityDate":"2012-09-30","lastEditDate":"2012-09-30","score":2,"viewCount":177,"owner":{"type":"StackOverflowUser","id":837133,"displayName":"ayvango","reputation":1569},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I have a class with few Int and Double fields. What is the fastes way to copy all data from one object to another?</p>"},"units":[{"type":"TextUnit","id":"[12654700]-[-732088350]","astNode":{"type":"TextFragmentNode","text":"<p>I have a class with few Int and Double fields. What is the fastes way to copy all data from one object to another?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"with","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"field":1,"data":1,"object":1,"fast":1,"copi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"with","comments":[]}]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"class IntFields {\n  private val data : Array[Int] = Array(0,0)\n\n  def first : Int = data(0)\n  def first_= (value: Int) = data(0) = value\n  def second : Int = data(1)\n  def second_= (value : Int) = data(1) = value\n\n  def copyFrom(another : IntFields) =\n    Array.copy(another.data,0,data,0,2)\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[12654700]-[1537886658]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"IntFields","comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"{\n  private val data : Array[Int] = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"def first : Int = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"first_","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"= (value: Int) = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= value\n  def second : Int = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"second_","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"= (value : Int) = "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= value\n\n  def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"copyFrom","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(another : "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"IntFields","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":") =\n    Array.copy(another.data,0,data,0,2)\n}\n"}]},"rawText":"class IntFields {\n  private val data : Array[Int] = Array(0,0)\n\n  def first : Int = data(0)\n  def first_= (value: Int) = data(0) = value\n  def second : Int = data(1)\n  def second_= (value : Int) = data(1) = value\n\n  def copyFrom(another : IntFields) =\n    Array.copy(another.data,0,data,0,2)\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"field":2,"data":7,"array":3,"def":5,"copi":2,"val":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"IntFields","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"Array","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]},{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"second_","comments":[]},{"type":"IdentifierNode","name":"Array","comments":[]},{"type":"IdentifierNode","name":"IntFields","comments":[]},{"type":"IdentifierNode","name":"data","comments":[]},{"type":"IdentifierNode","name":"copyFrom","comments":[]},{"type":"IdentifierNode","name":"first_","comments":[]}]},{"declarators":[]},{"grade":0.05052313953638077}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>This is the way I may suggest. But I doubt it is really effective, since I have no clear understanding scala's internals </p>"},"units":[{"type":"TextUnit","id":"[12654700]-[265469619]","astNode":{"type":"TextFragmentNode","text":"<p>This is the way I may suggest. But I doubt it is really effective, since I have no clear understanding scala's internals </p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"clear":1,"suggest":1,"effect":1,"understand":1,"doubt":1,"scala":1,"intern":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<h2>update1:</h2>"},"units":[{"type":"TextUnit","id":"[12654700]-[-1783653641]","astNode":{"type":"TextFragmentNode","text":"<h2>update1:</h2>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"updat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>In fact I'm searching for scala's equivalent of c++ memcpy. I need just take one simple object and copy it contents byte by byte.</p>"},"units":[{"type":"TextUnit","id":"[12654700]-[29883568]","astNode":{"type":"TextFragmentNode","text":"<p>In fact I'm searching for scala's equivalent of c++ memcpy. I need just take one simple object and copy it contents byte by byte.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"simpl":1,"equival":1,"memcpi":1,"object":1,"fact":1,"scala":1,"content":1,"copi":1,"search":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Array copying is just a hack, I've googled for normal scala supported method and find none.</p>"},"units":[{"type":"TextUnit","id":"[12654700]-[-2100723236]","astNode":{"type":"TextFragmentNode","text":"<p>Array copying is just a hack, I've googled for normal scala supported method and find none.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"find":1,"support":1,"method":1,"googl":1,"normal":1,"array":1,"scala":1,"hack":1,"copi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"VeryNegative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<h2>update2:</h2>"},"units":[{"type":"TextUnit","id":"[12654700]-[-896149960]","astNode":{"type":"TextFragmentNode","text":"<h2>update2:</h2>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"updat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I've tried to microbenchmark two holders: simple case class with 12 variables and one backed up with array. In all benchmarks (simple copying and complex calculations over collection) array-based solution works slower for about 7%.</p>"},"units":[{"type":"TextUnit","id":"[12654700]-[-1863834867]","astNode":{"type":"TextFragmentNode","text":"<p>I've tried to microbenchmark two holders: simple case class with 12 variables and one backed up with array. In all benchmarks (simple copying and complex calculations over collection) array-based solution works slower for about 7%.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"with","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"simpl":2,"microbenchmark":1,"calcul":1,"holder":1,"work":1,"base":1,"array":2,"slower":1,"back":1,"collect":1,"variabl":1,"solut":1,"copi":1,"complex":1,"benchmark":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"with","comments":[]}]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>So, I need other means for simulating memcpy.</p>"},"units":[{"type":"TextUnit","id":"[12654700]-[1754408875]","astNode":{"type":"TextFragmentNode","text":"<p>So, I need other means for simulating memcpy.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"mean":1,"simul":1,"memcpi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},"answers":[{"type":"StackOverflowAnswer","id":12654921,"questionId":12654700,"comments":[{"type":"StackOverflowComment","id":17071187,"postId":12654921,"creationDate":"2012-09-29","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":837133,"displayName":"ayvango","reputation":1569},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"it supposed to have about 12 fields."},"units":[{"type":"TextUnit","id":"[12654921-cu17071187]-[-29152894]","astNode":{"type":"TextFragmentNode","text":"it supposed to have about 12 fields."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"field":1,"suppos":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":115.13000000000002,"fleshKincaidGradeLevel":-1.0599999999999987,"automatedReadingIndex":1.5828571428571436,"gunningFogIndex":2.8000000000000003,"smogIndex":3.0,"colemanLiauIndex":4.315714285714286}]}]}]},{"type":"StackOverflowComment","id":17071245,"postId":12654921,"creationDate":"2012-09-29","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":453594,"displayName":"axel22","reputation":18980},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"I'd still say it would be more efficient to copy the directly, however, I'd write a microbenchmark if this is performance-critical, to confirm this. See http://docs.scala-lang.org/overviews/parallel-collections/performance.html on writing microbenchmarks."},"units":[{"type":"TextUnit","id":"[12654921-cu17071245]-[439811349]","astNode":{"type":"TextFragmentNode","text":"I'd still say it would be more efficient to copy the directly, however, I'd write a microbenchmark if this is performance-critical, to confirm this. See http://docs.scala-lang.org/overviews/parallel-collections/performance.html on writing microbenchmarks."},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"critic":1,"microbenchmark":2,"effici":1,"doc":1,"direct":1,"scala":1,"perform":2,"confirm":1,"overview":1,"collect":1,"lang":1,"org":1,"html":1,"http":1,"parallel":1,"write":2,"copi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":16.44443548387099,"fleshKincaidGradeLevel":14.816290322580645,"automatedReadingIndex":20.049677419354836,"gunningFogIndex":8.780645161290323,"smogIndex":8.477225575051662,"colemanLiauIndex":24.444516129032255}]}]}]}],"creationDate":"2012-09-29","lastActivityDate":"2012-09-30","lastEditDate":"2012-09-30","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":453594,"displayName":"axel22","reputation":18980},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Since both arrays used for <code>Array.copy</code> are arrays of primitive integers (i.e. it is not the case that one of the holds boxed integers, in which case a <code>while</code> loop with boxing/unboxing would have been used to copy the elements), it is equally effective as the Java <code>System.arraycopy</code> is. Which is to say - if this were a huge array, you would probably see the difference in performance compared to a <code>while</code> loop in which you copy the elements. Since the array only has 2 elements, it is probably more efficient to just do:</p>"},"units":[{"type":"TextUnit","id":"[12654921]-[-238549293]","astNode":{"type":"TextFragmentNode","text":"<p>Since both arrays used for <code>Array.copy</code> are arrays of primitive integers (i.e. it is not the case that one of the holds boxed integers, in which case a <code>while</code> loop with boxing/unboxing would have been used to copy the elements), it is equally effective as the Java <code>System.arraycopy</code> is. Which is to say - if this were a huge array, you would probably see the difference in performance compared to a <code>while</code> loop in which you copy the elements. Since the array only has 2 elements, it is probably more efficient to just do:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"huge":1,"loop":2,"system":1,"differ":1,"effect":1,"effici":1,"element":3,"code":8,"array":5,"integ":2,"hold":1,"equal":1,"compar":1,"unbox":1,"perform":1,"box":2,"primit":1,"arraycopi":1,"copi":3}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"def copyFrom(another: IntFields) {\n  data(0) = another.data(0)\n  data(1) = another.data(1)\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[12654921]-[-108179946]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"def "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"copyFrom","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"(another: "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"IntFields","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":") {\n  "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= "},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"another","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"= "},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"another","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"}\n"}]},"rawText":"def copyFrom(another: IntFields) {\n  data(0) = another.data(0)\n  data(1) = another.data(1)\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"field":1,"data":4,"def":1,"copi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"IntFields","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"another","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"another","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"data","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"copyFrom","comments":[]},{"type":"IdentifierNode","name":"IntFields","comments":[]},{"type":"IdentifierNode","name":"data","comments":[]},{"type":"IdentifierNode","name":"another","comments":[]}]},{"declarators":[]},{"grade":0.10058552771806717}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>EDIT:</p>"},"units":[{"type":"TextUnit","id":"[12654921]-[1376224295]","astNode":{"type":"TextFragmentNode","text":"<p>EDIT:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"edit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I'd say that the fastest thing is to just copy the fields one-by-one. If performance is really important, you should consider using <code>Unsafe.getInt</code> - some report it should be faster than using <code>System.arraycopy</code> for small blocks: <a href=\"http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe\">Interesting uses of sun.misc.Unsafe</a></p>"},"units":[{"type":"TextUnit","id":"[12654921]-[-1653899325]","astNode":{"type":"TextFragmentNode","text":"<p>I'd say that the fastest thing is to just copy the fields one-by-one. If performance is really important, you should consider using <code>Unsafe.getInt</code> - some report it should be faster than using <code>System.arraycopy</code> for small blocks: <a href=\"http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe\">Interesting uses of sun.misc.Unsafe</a></p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Unsafe","comments":[]},{"type":"IdentifierNode","name":"getInt","comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"faster":1,"system":1,"field":1,"sun":2,"thing":1,"fastest":1,"code":4,"small":1,"stackoverflow":1,"block":1,"import":1,"interest":2,"perform":1,"misc":2,"report":1,"unsaf":3,"href":1,"arraycopi":1,"http":1,"copi":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"Unsafe","comments":[]},{"type":"IdentifierNode","name":"getInt","comments":[]},{"type":"IdentifierNode","name":"sun","comments":[]},{"type":"IdentifierNode","name":"misc","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]}]}