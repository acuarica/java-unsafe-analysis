{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2188706,
    "title":"How to avoid using scriptlets in my JSP page?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":2136980,
        "postId":2188706,
        "creationDate":"2010-02-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":59198,
          "displayName":"Chris",
          "reputation":15438
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"As an aside, is '&lt;%= request.getContextPath() %&gt;' an acceptable use of scriptlets that isn't frowned on so much?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2188706-cu2136980]-[-2063872993]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"As an aside, is '&lt;%= request.getContextPath() %&gt;' an acceptable use of scriptlets that isn't frowned on so much?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"request",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"getContextPath",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "frown":1,
                      "accept":1,
                      "request":1,
                      "path":1,
                      "scriptlet":1,
                      "context":1,
                      "isn":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2137004,
        "postId":2188706,
        "creationDate":"2010-02-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":86107,
          "displayName":"Andrew Dyster",
          "reputation":1271
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You should start using facelets for templating. Forces you to code correctly."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2188706-cu2137004]-[989953689]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You should start using facelets for templating. Forces you to code correctly."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "correct":1,
                      "templat":1,
                      "code":1,
                      "forc":1,
                      "start":1,
                      "facelet":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2137070,
        "postId":2188706,
        "creationDate":"2010-02-03",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":59198,
          "displayName":"Chris",
          "reputation":15438
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Are you saying use facelets instead of sitemesh?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2188706-cu2137070]-[622404214]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Are you saying use facelets instead of sitemesh?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "facelet":1,
                      "sitemesh":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4261761,
        "postId":2188706,
        "creationDate":"2010-10-20",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":203907,
          "displayName":"Bozho",
          "reputation":301603
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"possible duplicate of http://stackoverflow.com/questions/3177733/how-to-avoid-java-code-in-jsp-files"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2188706-cu4261761]-[-2126536236]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"possible duplicate of http://stackoverflow.com/questions/3177733/how-to-avoid-java-code-in-jsp-files"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "avoid":1,
                      "code":1,
                      "stackoverflow":1,
                      "jsp":1,
                      "file":1,
                      "duplic":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jsp",
      "sitemesh",
      "scriptlet"
    ],
    "creationDate":"2010-02-02",
    "lastActivityDate":"2012-09-14",
    "score":22,
    "viewCount":23319,
    "owner":{
      "type":"StackOverflowUser",
      "id":59198,
      "displayName":"Chris",
      "reputation":15438
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I've been told that the use of scriptlets (&lt;%= ... %&gt;) in my JSP pages isn't such a great idea.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2188706]-[-544591050]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I've been told that the use of scriptlets (&lt;%= ... %&gt;) in my JSP pages isn't such a great idea.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "scriptlet":1,
                  "page":1,
                  "idea":1,
                  "told":1,
                  "jsp":1,
                  "isn":1,
                  "great":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can someone with a bit more java/jsp experience please give me some pointers as to how to change this code so its more 'best practice', whatever that may be?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2188706]-[1965974116]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can someone with a bit more java/jsp experience please give me some pointers as to how to change this code so its more 'best practice', whatever that may be?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":1,
                  "bit":1,
                  "pointer":1,
                  "experi":1,
                  "code":1,
                  "jsp":1,
                  "give":1,
                  "practic":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This JSP is actually my sitemesh main decorator page. Basically my web design has a tab strip and a submenu, and i wish to somehow highlight the current tab and show the correct submenu by looking at the current request URI.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2188706]-[1965147282]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This JSP is actually my sitemesh main decorator page. Basically my web design has a tab strip and a submenu, and i wish to somehow highlight the current tab and show the correct submenu by looking at the current request URI.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "show":1,
                  "request":1,
                  "tab":2,
                  "correct":1,
                  "highlight":1,
                  "page":1,
                  "uri":1,
                  "sitemesh":1,
                  "strip":1,
                  "main":1,
                  "web":1,
                  "decor":1,
                  "jsp":1,
                  "submenu":2,
                  "basic":1,
                  "current":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"&lt;%@ taglib uri=&quot;http://www.opensymphony.com/sitemesh/decorator&quot; prefix=&quot;decorator&quot; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Events - &lt;decorator:title /&gt;&lt;/title&gt; &lt;link href=&quot;&lt;%= request.getContextPath() %&gt;/assets/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;tabs&quot;&gt; &lt;a &lt;%= request.getRequestURI().contains(&quot;/events/&quot;) ? &quot;class='selected'&quot; : &quot;&quot; %&gt; href='&lt;%= request.getContextPath() %&gt;/events/Listing.action'&gt;Events&lt;/a&gt; &lt;a &lt;%= request.getRequestURI().contains(&quot;/people/&quot;) ? &quot;class='selected'&quot; : &quot;&quot; %&gt; href='&lt;%= request.getContextPath() %&gt;/people/Listing.action'&gt;People&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;submenu&quot;&gt; &lt;% if(request.getRequestURI().contains(&quot;/events/&quot;)) { %&gt; &lt;a href=&quot;Listing.action&quot;&gt;List of Events&lt;/a&gt; |&lt;a href=&quot;New.action&quot;&gt;New Event&lt;/a&gt; &lt;% } %&gt; &lt;% if(request.getRequestURI().contains(&quot;/people/&quot;)) { %&gt; &lt;a href=&quot;Listing.action&quot;&gt;List of People&lt;/a&gt; |&lt;a href=&quot;New.action&quot;&gt;New Person&lt;/a&gt; &lt;% } %&gt; &amp;nbsp; &lt;/div&gt; &lt;div class=&quot;body&quot;&gt; &lt;decorator:body /&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[2188706]-[-608786362]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"<%@ taglib uri=\"http://www.opensymphony.com/sitemesh/decorator\" prefix=\"decorator\" %> <html> "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"head"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    },
                    {
                      "type":"XmlNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"title"
                      },
                      "attributes":[
                        
                      ],
                      "elements":[
                        {
                          "type":"XmlTextNode",
                          "contents":"My Events - "
                        },
                        {
                          "type":"XmlNode",
                          "name":{
                            "type":"XmlNameNode",
                            "value":"decorator:title"
                          },
                          "attributes":[
                            
                          ],
                          "elements":[
                            
                          ]
                        }
                      ]
                    },
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    },
                    {
                      "type":"XmlNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"link"
                      },
                      "attributes":[
                        {
                          "type":"XmlAttributeNode",
                          "name":{
                            "type":"XmlNameNode",
                            "value":"href"
                          },
                          "value":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"<%= request.getContextPath() %>/assets/styles.css\""
                          }
                        },
                        {
                          "type":"XmlAttributeNode",
                          "name":{
                            "type":"XmlNameNode",
                            "value":"rel"
                          },
                          "value":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"stylesheet\""
                          }
                        },
                        {
                          "type":"XmlAttributeNode",
                          "name":{
                            "type":"XmlNameNode",
                            "value":"type"
                          },
                          "value":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"text/css\""
                          }
                        }
                      ],
                      "elements":[
                        
                      ]
                    },
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" <body> <div class=\"tabs\"> <a <%= "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getRequestURI",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"().contains(\"/events/\") ? "
                },
                {
                  "type":"JsonMemberNode",
                  "name":{
                    "type":"JsonStringNode",
                    "value":"\"class='selected'\""
                  },
                  "value":{
                    "type":"JsonStringNode",
                    "value":"\"\""
                  }
                },
                {
                  "type":"TextFragmentNode",
                  "text":" %> href='<%= "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getContextPath",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"() %>/events/Listing.action'>Events</a> <a <%= "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getRequestURI",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"().contains(\"/people/\") ? "
                },
                {
                  "type":"JsonMemberNode",
                  "name":{
                    "type":"JsonStringNode",
                    "value":"\"class='selected'\""
                  },
                  "value":{
                    "type":"JsonStringNode",
                    "value":"\"\""
                  }
                },
                {
                  "type":"TextFragmentNode",
                  "text":" %> href='<%= "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getContextPath",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"() %>/people/Listing.action'>People</a> </div> <div class=\"submenu\"> <% if("
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getRequestURI",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"().contains(\"/events/\")) { %> "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"a"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"href"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"Listing.action\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":"List of Events"
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" |"
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"a"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"href"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"New.action\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":"New Event"
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" <% } %> <% if("
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"request",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getRequestURI",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"().contains(\"/people/\")) { %> "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"a"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"href"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"Listing.action\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":"List of People"
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" |"
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"a"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"href"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"New.action\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":"New Person"
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" <% } %> &nbsp; </div> "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"div"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"class"
                      },
                      "value":{
                        "type":"StringLiteralNode",
                        "valueRep":"\"body\""
                      }
                    }
                  ],
                  "elements":[
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    },
                    {
                      "type":"XmlNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"decorator:body"
                      },
                      "attributes":[
                        
                      ],
                      "elements":[
                        
                      ]
                    },
                    {
                      "type":"XmlTextNode",
                      "contents":" "
                    }
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" </body> </html> "
                }
              ]
            },
            "rawText":"<%@ taglib uri=\"http://www.opensymphony.com/sitemesh/decorator\" prefix=\"decorator\" %> <html> <head> <title>My Events - <decorator:title /></title> <link href=\"<%= request.getContextPath() %>/assets/styles.css\"rel=\"stylesheet\"type=\"text/css\"/> </head> <body> <div class=\"tabs\"> <a <%= requestgetRequestURI().contains(\"/events/\") ? \"class='selected'\" : \"\" %> href='<%= requestgetContextPath() %>/events/Listing.action'>Events</a> <a <%= requestgetRequestURI().contains(\"/people/\") ? \"class='selected'\" : \"\" %> href='<%= requestgetContextPath() %>/people/Listing.action'>People</a> </div> <div class=\"submenu\"> <% if(requestgetRequestURI().contains(\"/events/\")) { %> <a href=\"Listing.action\">List of Events</a> |<a href=\"New.action\">New Event</a> <% } %> <% if(requestgetRequestURI().contains(\"/people/\")) { %> <a href=\"Listing.action\">List of People</a> |<a href=\"New.action\">New Person</a> <% } %> &nbsp; </div> <div class=\"body\"> <decorator:body /> </div> </body> </html> ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "nbsp":1,
                  "request":5,
                  "path":3,
                  "opensymphoni":1,
                  "css":2,
                  "tab":1,
                  "event":7,
                  "style":1,
                  "prefix":1,
                  "requestget":6,
                  "head":2,
                  "context":3,
                  "uri":5,
                  "rel":1,
                  "sitemesh":1,
                  "div":6,
                  "titl":3,
                  "text":1,
                  "select":2,
                  "stylesheet":1,
                  "decor":4,
                  "link":1,
                  "person":1,
                  "submenu":1,
                  "bodi":4,
                  "asset":1,
                  "type":1,
                  "html":2,
                  "taglib":1,
                  "href":7,
                  "peopl":5,
                  "http":1,
                  "action":6,
                  "list":6,
                  "www":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks all</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2188706]-[-1132093195]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks all</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2188756,
      "questionId":2188706,
      "comments":[
        
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2010-02-03",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":27439,
        "displayName":"Vincent Ramdhanie",
        "reputation":50547
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You may want to start by using tag libraries. You can use the standard tag library <a href=\"http://java.sun.com/products/jsp/jstl/\"rel=\"nofollow\">JSTL</a> to do most of the common things that you need scriplets for. There are many other richer tag libraries that are used like in the struts2 framework or from apache.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188756]-[378953009]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You may want to start by using tag libraries. You can use the standard tag library <a href=\"http://java.sun.com/products/jsp/jstl/\"rel=\"nofollow\">JSTL</a> to do most of the common things that you need scriplets for. There are many other richer tag libraries that are used like in the struts2 framework or from apache.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "richer":1,
                    "apach":1,
                    "standard":1,
                    "tag":3,
                    "sun":1,
                    "rel":1,
                    "thing":1,
                    "strut":1,
                    "librari":3,
                    "framework":1,
                    "nofollow":1,
                    "common":1,
                    "jsp":1,
                    "jstl":2,
                    "href":1,
                    "start":1,
                    "http":1,
                    "scriplet":1,
                    "product":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>e.g.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188756]-[-571800485]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>e.g.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" &lt;c:if test=&quot;${your condition}&quot;&gt; Your Content &lt;/c:if&gt; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2188756]-[1820113322]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"c:if"
                    },
                    "attributes":[
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"test"
                        },
                        "value":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"${your condition}\""
                        }
                      }
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":" Your Content "
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  }
                ]
              },
              "rawText":" <c:if test=\"${your condition}\"> Your Content </c:if> ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "condit":1,
                    "content":1,
                    "test":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>would replace your if statements.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188756]-[-223435820]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>would replace your if statements.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "replac":1,
                    "statement":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2188764,
      "questionId":2188706,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2137405,
          "postId":2188764,
          "creationDate":"2010-02-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":157882,
            "displayName":"BalusC",
            "reputation":548029
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"JSTL != Expression Language. JSTL is a standard taglib http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/ Expression Language are those `${}` things http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2188764-cu2137405]-[-569371185]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"JSTL != Expression Language. JSTL is a standard taglib http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/ Expression Language are those `${}` things http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"JsonObjectNode",
                        "members":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bnahq":1,
                        "languag":2,
                        "javae":1,
                        "standard":1,
                        "sun":2,
                        "tlddoc":1,
                        "thing":1,
                        "doc":3,
                        "jsp":1,
                        "express":2,
                        "jstl":3,
                        "html":1,
                        "taglib":1,
                        "http":2,
                        "tutori":1,
                        "product":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2137559,
          "postId":2188764,
          "creationDate":"2010-02-03",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"For future reference: I've had more luck with 'http://java.sun.com/jsp/jstl/core' in my taglib uri (instead of http://java.sun.com/jstl/core)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2188764-cu2137559]-[-1253341293]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"For future reference: I've had more luck with 'http://java.sun.com/jsp/jstl/core' in my taglib uri (instead of http://java.sun.com/jstl/core)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "luck":1,
                        "uri":1,
                        "sun":2,
                        "futur":1,
                        "refer":1,
                        "jsp":1,
                        "jstl":2,
                        "core":2,
                        "taglib":1,
                        "http":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2137638,
          "postId":2188764,
          "creationDate":"2010-02-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":157882,
            "displayName":"BalusC",
            "reputation":548029
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The /jsp/-less uri is indeed part of the a decade old JSTL 1.0. Don't use it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2188764-cu2137638]-[150296800]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The /jsp/-less uri is indeed part of the a decade old JSTL 1.0. Don't use it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "decad":1,
                        "uri":1,
                        "jsp":1,
                        "jstl":1,
                        "part":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2010-02-03",
      "lastEditDate":"2010-02-03",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1237,
        "displayName":"Jacob Mattison",
        "reputation":33707
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The preferred alternative to scriptlets is the JSTL expression language; <a href=\"http://www.informit.com/articles/article.aspx?p=30946&amp;seqNum=7\"rel=\"nofollow\">here</a>'s a good overview. You'll need to add the taglib like so:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188764]-[-2026487271]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The preferred alternative to scriptlets is the JSTL expression language; <a href=\"http://www.informit.com/articles/article.aspx?p=30946&amp;seqNum=7\"rel=\"nofollow\">here</a>'s a good overview. You'll need to add the taglib like so:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "good":1,
                    "scriptlet":1,
                    "rel":1,
                    "articl":2,
                    "altern":1,
                    "amp":1,
                    "num":1,
                    "nofollow":1,
                    "overview":1,
                    "express":1,
                    "seq":1,
                    "jstl":1,
                    "informit":1,
                    "taglib":1,
                    "href":1,
                    "aspx":1,
                    "http":1,
                    "add":1,
                    "prefer":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"&lt;%@ taglib uri='http://java.sun.com/jsp/jstl/core' prefix='c' %&gt; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2188764]-[1458941169]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"<%@ taglib uri='http://java.sun.com/jsp/jstl/core' prefix='c' %> "
                  }
                ]
              },
              "rawText":"<%@ taglib uri='http://java.sun.com/jsp/jstl/core' prefix='c' %> ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "prefix":1,
                    "uri":1,
                    "sun":1,
                    "jsp":1,
                    "jstl":1,
                    "core":1,
                    "taglib":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As an example, JSTL provides a bunch of implicit objects that give you the stuff you need; the one you want is <code>pageContext.request</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188764]-[1384033156]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As an example, JSTL provides a bunch of implicit objects that give you the stuff you need; the one you want is <code>pageContext.request</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IdentifierNode",
                    "name":"pageContext",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":1,
                    "context":1,
                    "page":1,
                    "bunch":1,
                    "object":1,
                    "code":2,
                    "implicit":1,
                    "stuff":1,
                    "give":1,
                    "jstl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So you can replace <code>&lt;%request.getRequestURI%&gt;</code> with <code>${pageContext.request.requestURI}</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188764]-[936277637]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So you can replace <code>&lt;%request.getRequestURI%&gt;</code> with <code>${pageContext.request.requestURI}</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"request",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getRequestURI",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"pageContext",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"request",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"requestURI",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":4,
                    "context":1,
                    "page":1,
                    "uri":2,
                    "code":4,
                    "replac":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can do conditionals using <code>&lt;c:if&gt;</code> tags.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188764]-[-2135863807]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can do conditionals using <code>&lt;c:if&gt;</code> tags.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"c:if"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "condit":1,
                    "code":2,
                    "tag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2189397,
      "questionId":2188706,
      "comments":[
        
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2010-02-03",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":73371,
        "displayName":"Spike Williams",
        "reputation":4873
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Scriptlets aren't the worst thing in the world. An important consideration is to think about who is going to be maintaining the code. If its web designers who don't have much Java experience, you are probably better off going with tag libraries. However, if Java developers are doing the maintainance, it may be easier on them to go with scriptlets. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189397]-[1994220814]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Scriptlets aren't the worst thing in the world. An important consideration is to think about who is going to be maintaining the code. If its web designers who don't have much Java experience, you are probably better off going with tag libraries. However, if Java developers are doing the maintainance, it may be easier on them to go with scriptlets. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "design":1,
                    "consider":1,
                    "worst":1,
                    "aren":1,
                    "world":1,
                    "tag":1,
                    "scriptlet":2,
                    "thing":1,
                    "librari":1,
                    "experi":1,
                    "code":1,
                    "web":1,
                    "easier":1,
                    "import":1,
                    "develop":1,
                    "maintain":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you end up using a tag library and JSTL, you are expecting the maintainer to also learn the tag library and know JSTL. Some developers will be fine with this as it is a skill they want or already have, but for some developers who only have to deal with JSPs every few months or so, it can be lot less painful to work with clearly written scriptlets written in nice, familiar Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189397]-[1586436241]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you end up using a tag library and JSTL, you are expecting the maintainer to also learn the tag library and know JSTL. Some developers will be fine with this as it is a skill they want or already have, but for some developers who only have to deal with JSPs every few months or so, it can be lot less painful to work with clearly written scriptlets written in nice, familiar Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "learn":1,
                    "familiar":1,
                    "tag":2,
                    "scriptlet":1,
                    "librari":2,
                    "nice":1,
                    "work":1,
                    "jsps":1,
                    "expect":1,
                    "written":2,
                    "pain":1,
                    "lot":1,
                    "end":1,
                    "skill":1,
                    "fine":1,
                    "jstl":2,
                    "develop":2,
                    "deal":1,
                    "month":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2189123,
      "questionId":2188706,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2137774,
          "postId":2189123,
          "creationDate":"2010-02-03",
          "score":7,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Awesome answer! I owe you a beer if you're ever in sydney! Thanks for being so helpful and polite."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189123-cu2137774]-[-330576571]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Awesome answer! I owe you a beer if you're ever in sydney! Thanks for being so helpful and polite."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "owe":1,
                        "polit":1,
                        "beer":1,
                        "help":1,
                        "answer":1,
                        "awesom":1,
                        "sydney":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2140014,
          "postId":2189123,
          "creationDate":"2010-02-03",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":157882,
            "displayName":"BalusC",
            "reputation":548029
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You're welcome. I'll mind the beer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189123-cu2140014]-[1603748180]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You're welcome. I'll mind the beer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mind":1,
                        "beer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3358911,
          "postId":2189123,
          "creationDate":"2010-07-14",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":56463,
            "displayName":"Ree",
            "reputation":2311
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you compare the &quot;before&quot; and &quot;after&quot; templates, you'll see that they're pretty much the same. I don't see how the latter is automatically better than the former (besides looking a tiny bit cleaner)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189123-cu3358911]-[2097465441]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you compare the &quot;before&quot; and &quot;after&quot; templates, you'll see that they're pretty much the same. I don't see how the latter is automatically better than the former (besides looking a tiny bit cleaner)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bit":1,
                        "cleaner":1,
                        "templat":1,
                        "pretti":1,
                        "tini":1,
                        "automat":1,
                        "compar":1,
                        "quot":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":14277260,
          "postId":2189123,
          "creationDate":"2012-06-07",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2047962,
            "displayName":"RustyTheBoyRobot",
            "reputation":3190
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Ree - Honestly, I think that the biggest asset of JSTL is that it doesn't give you the freedom of writing whatever code comes to mind in your JSP. JSTL gives you most all of the tools you need to write templates, not controllers, business logic managers or data access objects."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189123-cu14277260]-[-842844347]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Ree - Honestly, I think that the biggest asset of JSTL is that it doesn't give you the freedom of writing whatever code comes to mind in your JSP. JSTL gives you most all of the tools you need to write templates, not controllers, business logic managers or data access objects."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Ree",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "tool":1,
                        "data":1,
                        "templat":1,
                        "biggest":1,
                        "logic":1,
                        "object":1,
                        "freedom":1,
                        "code":1,
                        "mind":1,
                        "busi":1,
                        "jsp":1,
                        "ree":1,
                        "give":1,
                        "control":1,
                        "jstl":2,
                        "asset":1,
                        "manag":1,
                        "honest":1,
                        "write":2,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2011-05-24",
      "lastEditDate":"2011-05-24",
      "score":33,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":157882,
        "displayName":"BalusC",
        "reputation":548029
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think it helps more if you see with your own eyes that it can actually be done entirely <strong>without</strong> scriptlets. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[225458752]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think it helps more if you see with your own eyes that it can actually be done entirely <strong>without</strong> scriptlets. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "eye":1,
                    "scriptlet":1,
                    "help":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's a 1 on 1 rewrite with help of among others <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/index.html\">JSTL</a> (just drop <a href=\"http://download.java.net/maven/1/jstl/jars/jstl-1.2.jar\"><code>jstl-1.2.jar</code></a> in <code>/WEB-INF/lib</code>) <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/c/tld-summary.html\">core</a> and <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/fn/tld-summary.html\">functions</a> taglib:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[-1904779240]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's a 1 on 1 rewrite with help of among others <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/index.html\">JSTL</a> (just drop <a href=\"http://download.java.net/maven/1/jstl/jars/jstl-1.2.jar\"><code>jstl-1.2.jar</code></a> in <code>/WEB-INF/lib</code>) <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/c/tld-summary.html\">core</a> and <a href=\"http://java.sun.com/products/jsp/jstl/1.1/docs/tlddocs/fn/tld-summary.html\">functions</a> taglib:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "summari":2,
                    "sun":3,
                    "tlddoc":3,
                    "doc":3,
                    "net":1,
                    "drop":1,
                    "code":4,
                    "web":1,
                    "maven":1,
                    "lib":1,
                    "inf":1,
                    "function":1,
                    "jsp":3,
                    "jstl":7,
                    "rewrit":1,
                    "core":1,
                    "html":3,
                    "taglib":1,
                    "href":4,
                    "http":4,
                    "jar":3,
                    "download":1,
                    "tld":2,
                    "index":1,
                    "product":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's a more optimized rewrite, note that I used <code>c:set</code> to &quot;cache&quot; expression results for reuse and that I use HTML <code>&lt;base&gt;</code> tag to avoid putting the context path in every link (just make all relative URL's in your webpage relative to it --without the leading slash!):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[309363188]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's a more optimized rewrite, note that I used <code>c:set</code> to &quot;cache&quot; expression results for reuse and that I use HTML <code>&lt;base&gt;</code> tag to avoid putting the context path in every link (just make all relative URL's in your webpage relative to it --without the leading slash!):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"base"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "lead":1,
                    "cach":1,
                    "path":1,
                    "relat":2,
                    "url":1,
                    "slash":1,
                    "tag":1,
                    "context":1,
                    "result":1,
                    "set":1,
                    "avoid":1,
                    "base":1,
                    "code":4,
                    "optim":1,
                    "note":1,
                    "link":1,
                    "express":1,
                    "make":1,
                    "put":1,
                    "quot":2,
                    "rewrit":1,
                    "html":1,
                    "webpag":1,
                    "reus":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It can actually be optimized more if you collect all those &quot;hardcoded&quot; values like <code>events</code> and <code>people</code> and link texts in a <code>Map</code> in the application scope and use under each the JSTL <code>&lt;c:forEach&gt;</code> to display the tabs.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[1697536820]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It can actually be optimized more if you collect all those &quot;hardcoded&quot; values like <code>events</code> and <code>people</code> and link texts in a <code>Map</code> in the application scope and use under each the JSTL <code>&lt;c:forEach&gt;</code> to display the tabs.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"c:forEach"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "map":1,
                    "tab":1,
                    "event":1,
                    "scope":1,
                    "text":1,
                    "code":8,
                    "optim":1,
                    "link":1,
                    "valu":1,
                    "applic":1,
                    "hardcod":1,
                    "quot":2,
                    "jstl":1,
                    "collect":1,
                    "peopl":1,
                    "display":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As to your <strong>actual</strong> question, you can <em>disable</em> scriptlets (and get runtime errors about using it) by adding the following entry in webapp's <code>web.xml</code>. It may help to spot overseen scriptlets.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[-115616950]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As to your <strong>actual</strong> question, you can <em>disable</em> scriptlets (and get runtime errors about using it) by adding the following entry in webapp's <code>web.xml</code>. It may help to spot overseen scriptlets.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "overseen":1,
                    "question":1,
                    "disabl":1,
                    "runtim":1,
                    "scriptlet":2,
                    "strong":2,
                    "code":2,
                    "web":1,
                    "webapp":1,
                    "entri":1,
                    "error":1,
                    "xml":1,
                    "spot":1,
                    "ad":1,
                    "actual":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To learn more about EL, check the <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html\">Java EE tutorial part II chapter 5</a>. Implicit EL objects, such as <code>${pageContext}</code> are described <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html#bnaij\">here</a>. To learn more about JSTL, check the <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnakc.html\">Java EE tutorial part II chapter 7</a>. Note that JSTL and EL are two separate things. JSTL is a <em>standard taglib</em> and EL just enables to access backend data programmatically. Although it is normally used in taglibs like JSTL, it can also be used standalone in template text.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189123]-[-1149821831]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To learn more about EL, check the <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html\">Java EE tutorial part II chapter 5</a>. Implicit EL objects, such as <code>${pageContext}</code> are described <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnahq.html#bnaij\">here</a>. To learn more about JSTL, check the <a href=\"http://java.sun.com/javaee/5/docs/tutorial/doc/bnakc.html\">Java EE tutorial part II chapter 7</a>. Note that JSTL and EL are two separate things. JSTL is a <em>standard taglib</em> and EL just enables to access backend data programmatically. Although it is normally used in taglibs like JSTL, it can also be used standalone in template text.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"pageContext",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "standalon":1,
                    "bnahq":2,
                    "javae":3,
                    "learn":2,
                    "bnaij":1,
                    "standard":1,
                    "context":1,
                    "data":1,
                    "page":1,
                    "sun":3,
                    "separ":1,
                    "templat":1,
                    "thing":1,
                    "text":1,
                    "doc":6,
                    "programmat":1,
                    "object":1,
                    "code":2,
                    "chapter":2,
                    "bnakc":1,
                    "check":2,
                    "note":1,
                    "implicit":1,
                    "backend":1,
                    "enabl":1,
                    "jstl":4,
                    "part":2,
                    "html":3,
                    "taglib":2,
                    "href":3,
                    "http":3,
                    "tutori":5,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2189247,
      "questionId":2188706,
      "comments":[
        
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2010-02-03",
      "score":5,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":31506,
        "displayName":"Jack Leow",
        "reputation":12323
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This isn't a direct answer to your question (and there are already several good ones, so I won't try to add to it), but you did mention:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[1194476486]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This isn't a direct answer to your question (and there are already several good ones, so I won't try to add to it), but you did mention:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "good":1,
                    "direct":1,
                    "mention":1,
                    "isn":1,
                    "answer":1,
                    "add":1,
                    "won":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Can someone with a bit more java/jsp experience please give me some pointers as to how to change this code so <em>its more 'best practice', whatever that may be</em>?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[-101113118]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Can someone with a bit more java/jsp experience please give me some pointers as to how to change this code so <em>its more 'best practice', whatever that may be</em>?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "bit":1,
                    "pointer":1,
                    "experi":1,
                    "blockquot":2,
                    "code":1,
                    "jsp":1,
                    "give":1,
                    "practic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In my opinion, best practice, with regards to JSP, is that it should be used strictly as a <em>templating engine</em>, and no more (i.e., no business logic in there). Using JSTL, as many pointed out, definitely helps you get there, but even with JSTL, it's easy to do to much in a JSP.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[796910758]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In my opinion, best practice, with regards to JSP, is that it should be used strictly as a <em>templating engine</em>, and no more (i.e., no business logic in there). Using JSTL, as many pointed out, definitely helps you get there, but even with JSTL, it's easy to do to much in a JSP.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strict":1,
                    "point":1,
                    "easi":1,
                    "templat":1,
                    "logic":1,
                    "help":1,
                    "engin":1,
                    "busi":1,
                    "opinion":1,
                    "jsp":2,
                    "jstl":2,
                    "practic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I personally like to follow the rules laid out in <a href=\"http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf\">Enforcing Strict Model-View Separation in Templating Engines</a> by the Terence Parr when developing in JSP. The paper mentions the purpose of templating engines (separating model and view), and characteristics of a good templating engine. It takes a good look at JSP and points out ways it's not a good templating engine. Not surprisingly, JSP is basically too powerful and allows developers to do too much. I strongly recommend reading this paper, and it'll help you restrict yourself to the &quot;good&quot; parts of JSP.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[-476812273]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I personally like to follow the rules laid out in <a href=\"http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf\">Enforcing Strict Model-View Separation in Templating Engines</a> by the Terence Parr when developing in JSP. The paper mentions the purpose of templating engines (separating model and view), and characteristics of a good templating engine. It takes a good look at JSP and points out ways it's not a good templating engine. Not surprisingly, JSP is basically too powerful and allows developers to do too much. I strongly recommend reading this paper, and it'll help you restrict yourself to the &quot;good&quot; parts of JSP.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "enforc":1,
                    "recommend":1,
                    "strict":1,
                    "point":1,
                    "model":2,
                    "good":4,
                    "characterist":1,
                    "pdf":1,
                    "separ":2,
                    "parrt":1,
                    "parr":1,
                    "templat":5,
                    "rule":1,
                    "strong":1,
                    "laid":1,
                    "way":1,
                    "surpris":1,
                    "terenc":1,
                    "mention":1,
                    "engin":4,
                    "take":1,
                    "paper":3,
                    "jsp":4,
                    "person":1,
                    "quot":2,
                    "part":1,
                    "power":1,
                    "mvc":1,
                    "href":1,
                    "basic":1,
                    "develop":2,
                    "http":1,
                    "purpos":1,
                    "restrict":1,
                    "usfca":1,
                    "www":1,
                    "follow":1,
                    "view":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you read only one section in that paper, read chapter 7, which includes the following rules:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[1658247101]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you read only one section in that paper, read chapter 7, which includes the following rules:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "rule":1,
                    "section":1,
                    "includ":1,
                    "chapter":1,
                    "paper":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <ol> \n  <li><strong>the view cannot modify the model either by directly altering model data objects or by invoking methods on the model that cause side-effects.</strong> That is, a template can access data from the model and invoke methods, but such references must be side-effect free. This rule arises partially because data references must be order-insensitive. See Section 7.1.</li> \n  <li><strong>the view cannot perform computations upon dependent data values</strong> because the computations may change in the future and they should be neatly encapsulated in the model in any case. For example, the view cannot compute book sale prices as \u201c$price*.90\u201d. To be independent of the model, the view cannot make assumptions about the meaning of data.</li> \n  <li><strong>the view cannot compare dependent data values</strong>, but can test the properties of data such as presence/absence or length of a multi-valued data value. Tests like $bloodPressure&lt;120 must be moved to the model as doctors like to keep reduc- ing the max systolic pressure on us. Expressions in the view must be replaced with a test for presence of a value simulat- ing a boolean such as $bloodPressureOk!=null Template output can be conditional on model data and com- putations, the conditional just has to be computed in the model. Even simple tests that make negative values red should be computed in the model; the right level of abstraction is usu- ally something higher level such as \u201cdepartment x is losing money.\u201d</li> \n  <li><strong>the view cannot make data type assumptions.</strong> Some type assumptions are obvious when the view assumes a data value is a date, for example, but more subtle type assumptions ap- pear: If a template assumes $userID is an integer, the pro- grammer cannot change this value to be a non-numeric in the model without breaking the template. This rule forbids array indexing such as colorCode[$topic] and $name[$ID] The view further cannot call methods with arguments be- cause (statically or dynamically) there is an assumed argu- ment type, unless one could guarantee the model method merely treated them as objects. Besides graphics designers are not programmers; expecting them to invoke methods and know what to pass is unrealistic.</li> \n  <li><strong>data from the model must not contain display or layout information.</strong> The model cannot pass any display informa- tion to the view disguised as data values. This includes not passing the name of a template to apply to other data values.</li> \n </ol> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[-563083992]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <ol> \n  <li><strong>the view cannot modify the model either by directly altering model data objects or by invoking methods on the model that cause side-effects.</strong> That is, a template can access data from the model and invoke methods, but such references must be side-effect free. This rule arises partially because data references must be order-insensitive. See Section 7.1.</li> \n  <li><strong>the view cannot perform computations upon dependent data values</strong> because the computations may change in the future and they should be neatly encapsulated in the model in any case. For example, the view cannot compute book sale prices as \u201c$price*.90\u201d. To be independent of the model, the view cannot make assumptions about the meaning of data.</li> \n  <li><strong>the view cannot compare dependent data values</strong>, but can test the properties of data such as presence/absence or length of a multi-valued data value. Tests like $bloodPressure&lt;120 must be moved to the model as doctors like to keep reduc- ing the max systolic pressure on us. Expressions in the view must be replaced with a test for presence of a value simulat- ing a boolean such as $bloodPressureOk!=null Template output can be conditional on model data and com- putations, the conditional just has to be computed in the model. Even simple tests that make negative values red should be computed in the model; the right level of abstraction is usu- ally something higher level such as \u201cdepartment x is losing money.\u201d</li> \n  <li><strong>the view cannot make data type assumptions.</strong> Some type assumptions are obvious when the view assumes a data value is a date, for example, but more subtle type assumptions ap- pear: If a template assumes $userID is an integer, the pro- grammer cannot change this value to be a non-numeric in the model without breaking the template. This rule forbids array indexing such as colorCode[$topic] and $name[$ID] The view further cannot call methods with arguments be- cause (statically or dynamically) there is an assumed argu- ment type, unless one could guarantee the model method merely treated them as objects. Besides graphics designers are not programmers; expecting them to invoke methods and know what to pass is unrealistic.</li> \n  <li><strong>data from the model must not contain display or layout information.</strong> The model cannot pass any display informa- tion to the view disguised as data values. This includes not passing the name of a template to apply to other data values.</li> \n </ol> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"bloodPressure",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"bloodPressureOk",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"userID",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"colorCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "static":1,
                    "side":2,
                    "chang":2,
                    "properti":1,
                    "method":5,
                    "test":4,
                    "assum":3,
                    "negat":1,
                    "move":1,
                    "design":1,
                    "systol":1,
                    "neat":1,
                    "simpl":1,
                    "break":1,
                    "partial":1,
                    "reduc":1,
                    "depend":2,
                    "alter":1,
                    "graphic":1,
                    "model":14,
                    "alli":1,
                    "subtl":1,
                    "higher":1,
                    "condit":2,
                    "obvious":1,
                    "book":1,
                    "sale":1,
                    "price":2,
                    "data":14,
                    "effect":2,
                    "abstract":1,
                    "dynam":1,
                    "invok":3,
                    "disguis":1,
                    "mean":1,
                    "presenc":2,
                    "templat":5,
                    "rule":2,
                    "ing":2,
                    "strong":10,
                    "unrealist":1,
                    "tion":1,
                    "color":1,
                    "argu":1,
                    "section":1,
                    "numer":1,
                    "doctor":1,
                    "blockquot":2,
                    "ment":1,
                    "forbid":1,
                    "simulat":1,
                    "object":2,
                    "direct":1,
                    "includ":1,
                    "code":1,
                    "array":1,
                    "guarante":1,
                    "replac":1,
                    "comput":5,
                    "max":1,
                    "independ":1,
                    "assumpt":4,
                    "futur":1,
                    "inform":1,
                    "date":1,
                    "aris":1,
                    "compar":1,
                    "grammer":1,
                    "order":1,
                    "expect":1,
                    "perform":1,
                    "programm":1,
                    "valu":6,
                    "refer":2,
                    "money":1,
                    "modifi":1,
                    "express":1,
                    "pass":3,
                    "make":3,
                    "treat":1,
                    "length":1,
                    "depart":1,
                    "putat":1,
                    "topic":1,
                    "layout":1,
                    "pear":1,
                    "informa":1,
                    "output":1,
                    "pressur":3,
                    "appli":1,
                    "type":4,
                    "absenc":1,
                    "insensit":1,
                    "pro":1,
                    "call":1,
                    "argument":1,
                    "encapsul":1,
                    "multi":1,
                    "lose":1,
                    "user":1,
                    "usu":1,
                    "red":1,
                    "free":1,
                    "index":1,
                    "display":2,
                    "access":1,
                    "view":10,
                    "level":2,
                    "blood":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Incidentally, Terence has created his own templating engine called <a href=\"http://www.stringtemplate.org/\">String Template</a> which supposedly does a really good job of enforcing these rules. I have no personal experience with it, but would love to check it out on my next project.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189247]-[1253320498]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Incidentally, Terence has created his own templating engine called <a href=\"http://www.stringtemplate.org/\">String Template</a> which supposedly does a really good job of enforcing these rules. I have no personal experience with it, but would love to check it out on my next project.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "incident":1,
                    "enforc":1,
                    "stringtempl":1,
                    "project":1,
                    "good":1,
                    "job":1,
                    "templat":2,
                    "rule":1,
                    "experi":1,
                    "terenc":1,
                    "engin":1,
                    "check":1,
                    "love":1,
                    "person":1,
                    "org":1,
                    "href":1,
                    "suppos":1,
                    "http":1,
                    "creat":1,
                    "call":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2188726,
      "questionId":2188706,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2137073,
          "postId":2188726,
          "creationDate":"2010-02-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm using struts2 if that helps."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2188726-cu2137073]-[1306189616]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm using struts2 if that helps."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "strut":1,
                        "help":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2137137,
          "postId":2188726,
          "creationDate":"2010-02-03",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":145989,
            "displayName":"Ondra Žižka",
            "reputation":9361
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Well now combine it with the tag libraries like JSTL suggested by Vincent, and you're free of scriptlets. See here: http://struts.apache.org/2.1.8.1/docs/tag-reference.html and there you'll find, amongst others, http://struts.apache.org/2.1.8.1/docs/text.html"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2188726-cu2137137]-[-1517288899]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Well now combine it with the tag libraries like JSTL suggested by Vincent, and you're free of scriptlets. See here: http://struts.apache.org/2.1.8.1/docs/tag-reference.html and there you'll find, amongst others, http://struts.apache.org/2.1.8.1/docs/text.html"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "apach":2,
                        "tag":2,
                        "scriptlet":1,
                        "suggest":1,
                        "strut":2,
                        "text":1,
                        "librari":1,
                        "vincent":1,
                        "doc":2,
                        "combin":1,
                        "refer":1,
                        "jstl":1,
                        "org":2,
                        "html":2,
                        "http":2,
                        "free":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2012-09-14",
      "lastEditDate":"2012-09-14",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":145989,
        "displayName":"Ondra Žižka",
        "reputation":9361
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You'll need to use some web framework. Or at least some convenient taglib. Or a templating enginge like <strong>FreeMarker</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188726]-[1536990838]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You'll need to use some web framework. Or at least some convenient taglib. Or a templating enginge like <strong>FreeMarker</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"FreeMarker",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "templat":1,
                    "marker":1,
                    "strong":2,
                    "framework":1,
                    "web":1,
                    "enging":1,
                    "conveni":1,
                    "taglib":1,
                    "free":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FreeMarker",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Ad frameworks:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188726]-[2082111827]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Ad frameworks:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "framework":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you like JSP way of coding, then I'd suggest <strong><a href=\"http://struts.apache.org/2.1.8.1/docs/tag-reference.html\"rel=\"nofollow\">Struts 2</a></strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188726]-[-1661747819]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you like JSP way of coding, then I'd suggest <strong><a href=\"http://struts.apache.org/2.1.8.1/docs/tag-reference.html\"rel=\"nofollow\">Struts 2</a></strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "apach":1,
                    "tag":1,
                    "suggest":1,
                    "rel":1,
                    "strut":2,
                    "strong":2,
                    "doc":1,
                    "code":1,
                    "nofollow":1,
                    "refer":1,
                    "jsp":1,
                    "org":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"&lt;s:if test=&quot;%{false}&quot;&gt; &lt;div&gt;Will Not Be Executed&lt;/div&gt; &lt;/s:if&gt; &lt;s:elseif test=&quot;%{true}&quot;&gt; &lt;div&gt;Will Be Executed&lt;/div&gt; &lt;/s:elseif&gt; &lt;s:else&gt; &lt;div&gt;Will Not Be Executed&lt;/div&gt; &lt;/s:else&gt; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2188726]-[-1441207511]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"s:if"
                    },
                    "attributes":[
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"test"
                        },
                        "value":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"%{false}\""
                        }
                      }
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      },
                      {
                        "type":"XmlNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"div"
                        },
                        "attributes":[
                          
                        ],
                        "elements":[
                          {
                            "type":"XmlTextNode",
                            "contents":"Will Not Be Executed"
                          }
                        ]
                      },
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"s:elseif"
                    },
                    "attributes":[
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"test"
                        },
                        "value":{
                          "type":"StringLiteralNode",
                          "valueRep":"\"%{true}\""
                        }
                      }
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      },
                      {
                        "type":"XmlNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"div"
                        },
                        "attributes":[
                          
                        ],
                        "elements":[
                          {
                            "type":"XmlTextNode",
                            "contents":"Will Be Executed"
                          }
                        ]
                      },
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"s:else"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      },
                      {
                        "type":"XmlNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"div"
                        },
                        "attributes":[
                          
                        ],
                        "elements":[
                          {
                            "type":"XmlTextNode",
                            "contents":"Will Not Be Executed"
                          }
                        ]
                      },
                      {
                        "type":"XmlTextNode",
                        "contents":" "
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  }
                ]
              },
              "rawText":"<s:if test=\"%{false}\"> <div>Will Not Be Executed</div> </s:if> <s:elseif test=\"%{true}\"> <div>Will Be Executed</div> </s:elseif> <s:else> <div>Will Not Be Executed</div> </s:else> ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":2,
                    "elseif":2,
                    "div":6,
                    "true":1,
                    "fals":1,
                    "execut":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Then there's component-oriented <strong>JSF</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188726]-[737740682]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Then there's component-oriented <strong>JSF</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "compon":1,
                    "jsf":1,
                    "orient":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you like OOP and coding everything in Java, try <strong><a href=\"http://wicket.apache.org/\"rel=\"nofollow\">Apache Wicket</a></strong> (my favorite) or <strong>Google Web Toolkit</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2188726]-[1196054225]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you like OOP and coding everything in Java, try <strong><a href=\"http://wicket.apache.org/\"rel=\"nofollow\">Apache Wicket</a></strong> (my favorite) or <strong>Google Web Toolkit</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "oop":1,
                    "apach":2,
                    "googl":1,
                    "rel":1,
                    "strong":4,
                    "code":1,
                    "web":1,
                    "nofollow":1,
                    "favorit":1,
                    "wicket":2,
                    "org":1,
                    "href":1,
                    "toolkit":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2189074,
      "questionId":2188706,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2137633,
          "postId":2189074,
          "creationDate":"2010-02-03",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ok great! I thought i was the only one with this opinion!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189074-cu2137633]-[-1250640398]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ok great! I thought i was the only one with this opinion!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "opinion":1,
                        "thought":1,
                        "great":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3358868,
          "postId":2189074,
          "creationDate":"2010-07-14",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":56463,
            "displayName":"Ree",
            "reputation":2311
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This is exactly my view too."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189074-cu3358868]-[1481872681]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This is exactly my view too."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "view":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":18602569,
          "postId":2189074,
          "creationDate":"2012-11-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":236241,
            "displayName":"Cole Stanfield",
            "reputation":553
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think the context here is one of best practice which comes into play more when you're not the only one developing or maintaining a template. Even though functionally, there is no difference in your example, you've set the precedence of using scriptlets and someone who doesn't know better may drop in some arbitrary java code that changes a model's state. Just something to consider. I like the idea of disabling them as BalusC mentioned above."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2189074-cu18602569]-[560059335]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think the context here is one of best practice which comes into play more when you're not the only one developing or maintaining a template. Even though functionally, there is no difference in your example, you've set the precedence of using scriptlets and someone who doesn't know better may drop in some arbitrary java code that changes a model's state. Just something to consider. I like the idea of disabling them as BalusC mentioned above."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "disabl":1,
                        "arbitrari":1,
                        "model":1,
                        "state":1,
                        "play":1,
                        "differ":1,
                        "scriptlet":1,
                        "context":1,
                        "set":1,
                        "idea":1,
                        "templat":1,
                        "drop":1,
                        "code":1,
                        "mention":1,
                        "function":1,
                        "balus":1,
                        "practic":1,
                        "develop":1,
                        "preced":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-03",
      "lastActivityDate":"2010-02-03",
      "lastEditDate":"2010-02-03",
      "score":8,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":14955,
        "displayName":"Thilo",
        "reputation":122627
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>As an aside, is <code>&lt;%= request.getContextPath() %&gt;</code> an acceptable use of scriptlets that isn't frowned on so much?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189074]-[505156956]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>As an aside, is <code>&lt;%= request.getContextPath() %&gt;</code> an acceptable use of scriptlets that isn't frowned on so much?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"request",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getContextPath",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "frown":1,
                    "accept":1,
                    "request":1,
                    "path":1,
                    "scriptlet":1,
                    "context":1,
                    "blockquot":2,
                    "code":2,
                    "isn":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This may be an unpopular opinion, but if all you do are simple conditionals and text insertions, I cannot find much fault in the use of scriptlets. (Note the <em>if</em>)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189074]-[-1800418645]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This may be an unpopular opinion, but if all you do are simple conditionals and text insertions, I cannot find much fault in the use of scriptlets. (Note the <em>if</em>)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "simpl":1,
                    "insert":1,
                    "unpopular":1,
                    "condit":1,
                    "scriptlet":1,
                    "text":1,
                    "note":1,
                    "opinion":1,
                    "fault":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'd probably use JSTL and the expression language, but mostly because it can be less typing, and IDE support may be better (but a good JSP IDE can also find missing closing brackets and stuff like that).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189074]-[-72229993]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'd probably use JSTL and the expression language, but mostly because it can be less typing, and IDE support may be better (but a good JSP IDE can also find missing closing brackets and stuff like that).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "support":1,
                    "languag":1,
                    "good":1,
                    "bracket":1,
                    "ide":2,
                    "miss":1,
                    "stuff":1,
                    "jsp":1,
                    "express":1,
                    "jstl":1,
                    "type":1,
                    "close":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But fundamentally (as in &quot;keep logic out of templates&quot;) I fail to see any difference between</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189074]-[1311805145]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But fundamentally (as in &quot;keep logic out of templates&quot;) I fail to see any difference between</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fail":1,
                    "differ":1,
                    "templat":1,
                    "logic":1,
                    "quot":2,
                    "fundament":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"&lt;% if(request.getRequestURI().contains(&quot;/events/&quot;)) { %&gt; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2189074]-[193150767]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"<% if("
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"request",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getRequestURI",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"().contains(\"/events/\")) { %> "
                  }
                ]
              },
              "rawText":"<% if(requestgetRequestURI().contains(\"/events/\")) { %> ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "uri":1,
                    "event":1,
                    "requestget":1,
                    "request":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2189074]-[1913736756]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"${fn:contains(pageContext.request.requestURI, '/events/') "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2189074]-[-1025626754]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"${fn:contains("
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"pageContext",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"request",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"requestURI",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":", '/events/') "
                  }
                ]
              },
              "rawText":"${fn:contains(pageContextrequestrequestURI, '/events/') ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "uri":1,
                    "event":1,
                    "page":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}