{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":8659377,
    "title":"How to get the memory address(not the hashcode) of a java object using JVMTI",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":10759997,
        "postId":8659377,
        "creationDate":"2011-12-28",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":4725,
          "displayName":"Tom Hawtin - tackline",
          "reputation":89549
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You realise that objects can be moved around in memory? (Although they can be temporarily pinned.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8659377-cu10759997]-[-884653457]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You realise that objects can be moved around in memory? (Although they can be temporarily pinned.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "temporarili":1,
                      "move":1,
                      "object":1,
                      "realis":1,
                      "pin":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10760142,
        "postId":8659377,
        "creationDate":"2011-12-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1119738,
          "displayName":"dm_poy",
          "reputation":11
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yes I know that ... Is there any way I can do this in JVMTI ... I don't care if the next second they move around ... I just want to find their actual memory location at that specific moment."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8659377-cu10760142]-[496254652]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yes I know that ... Is there any way I can do this in JVMTI ... I don't care if the next second they move around ... I just want to find their actual memory location at that specific moment."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "move":1,
                      "care":1,
                      "specif":1,
                      "moment":1,
                      "jvmti":1,
                      "actual":1,
                      "locat":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10760200,
        "postId":8659377,
        "creationDate":"2011-12-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":230717,
          "displayName":"Stas Kurilin",
          "reputation":6196
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I believe you don't need it actually. Anyway `sun.misc.Unsafe` is what you search."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8659377-cu10760200]-[-345927736]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I believe you don't need it actually. Anyway `sun.misc.Unsafe` is what you search."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "unsaf":1,
                      "sun":1,
                      "misc":1,
                      "search":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":10760452,
        "postId":8659377,
        "creationDate":"2011-12-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1119738,
          "displayName":"dm_poy",
          "reputation":11
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I've tried the Unsafe class but I couldn't find the memory location of an array... If I can with the Unsafe class I would be very happy if you show me how. But I believe jvmti is the answer... It might not make sense but I really need this, I am researching on something and this answer would be very helpfull for me"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[8659377-cu10760452]-[-531916]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I've tried the Unsafe class but I couldn't find the memory location of an array... If I can with the Unsafe class I would be very happy if you show me how. But I believe jvmti is the answer... It might not make sense but I really need this, I am researching on something and this answer would be very helpfull for me"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"but",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"I",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "find":1,
                      "show":1,
                      "research":1,
                      "array":1,
                      "helpful":1,
                      "make":1,
                      "answer":2,
                      "jvmti":1,
                      "unsaf":2,
                      "happi":1,
                      "locat":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "memory",
      "object",
      "jvmti"
    ],
    "creationDate":"2011-12-28",
    "lastActivityDate":"2011-12-28",
    "lastEditDate":"2011-12-28",
    "score":1,
    "viewCount":969,
    "owner":{
      "type":"StackOverflowUser",
      "id":1119738,
      "displayName":"dm_poy",
      "reputation":11
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am a beginner in C and C++ and I don't know very well how to use the JVMTI. I want to get the physical memory location (in hexadecimal) of a java object. Is it possible? I don't want to get answers like &quot;get it from this profiler etc&quot; ... So far I am using this command in linux terminal :</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8659377]-[-299206852]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am a beginner in C and C++ and I don't know very well how to use the JVMTI. I want to get the physical memory location (in hexadecimal) of a java object. Is it possible? I don't want to get answers like &quot;get it from this profiler etc&quot; ... So far I am using this command in linux terminal :</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "profil":1,
                  "beginn":1,
                  "command":1,
                  "object":1,
                  "linux":1,
                  "answer":1,
                  "quot":2,
                  "jvmti":1,
                  "hexadecim":1,
                  "physic":1,
                  "locat":1,
                  "termin":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"java -showversion -agentpath:../CPrg/DLL/bin/Debug/libDLL.so SimpleMemAlloc "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[8659377]-[512322851]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"java -showversion -agentpath:../CPrg/DLL/bin/Debug/"
                },
                {
                  "type":"IdentifierNode",
                  "name":"libDLL",
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":".so "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"SimpleMemAlloc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"java -showversion -agentpath:../CPrg/DLL/bin/Debug/libDLL.so SimpleMemAlloc ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "simpl":1,
                  "alloc":1,
                  "showvers":1,
                  "debug":1,
                  "lib":1,
                  "mem":1,
                  "cprg":1,
                  "bin":1,
                  "agentpath":1,
                  "dll":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SimpleMemAlloc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The libDLL.so is the library I am creating using c where I run it with my java application. It actually works, it runs with my code but I don't know how to get the data I want.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8659377]-[1994182800]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The libDLL.so is the library I am creating using c where I run it with my java application. It actually works, it runs with my code but I don't know how to get the data I want.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"IdentifierNode",
                  "name":"libDLL",
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "run":2,
                  "data":1,
                  "librari":1,
                  "work":1,
                  "code":1,
                  "lib":1,
                  "applic":1,
                  "creat":1,
                  "dll":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For example I am using this simple code:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8659377]-[-1176530432]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For example I am using this simple code:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1,
                  "simpl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public class SimpleMemAlloc{ Object [] oarray = new Object[10000]; public static void main(String args []){ Object [] o= new Object[100]; for (int i= 0; i&lt;100; i++){ o[i] = new Integer [10000]; } } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[8659377]-[835628952]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"SimpleMemAlloc",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"oarray",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"ArrayExpressionCreatorNode",
                                        "creatorType":{
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"Object",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "expressionDepth":[
                                          {
                                            "type":"DimExpressionNode",
                                            "argument":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"IntegerLiteralNode",
                                                "valueRep":"10000"
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "arrayDepth":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"ArrayTypeNode",
                                    "typeNode":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Object",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "depth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"MethodDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"public",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "returnType":{
                              "type":"PrimitiveTypeNode",
                              "name":"void",
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"main",
                              "comments":[
                                
                              ]
                            },
                            "parameters":{
                              "type":"FormalParametersNode",
                              "parameters":{
                                "type":"FormalParameterDeclsNode",
                                "modifiers":[
                                  
                                ],
                                "parameterType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"String",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "nextDeclarator":{
                                  "type":"AdditionalFormalParameterDeclNode",
                                  "variableDeclarator":{
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"args",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "arrayReturnType":[
                              
                            ],
                            "body":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"LocalVariableDeclarationStatementNode",
                                  "modifiers":[
                                    
                                  ],
                                  "declarators":{
                                    "type":"VariableDeclaratorsNode",
                                    "declarators":[
                                      {
                                        "type":"VariableDeclaratorNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"o",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "arrayDepth":[
                                          
                                        ],
                                        "assignment":{
                                          "type":"VariableAssignmentNode",
                                          "variableAssignment":{
                                            "type":"VariableExpressionInitNode",
                                            "expression":{
                                              "type":"ArrayExpressionCreatorNode",
                                              "creatorType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"Object",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "expressionDepth":[
                                                {
                                                  "type":"DimExpressionNode",
                                                  "argument":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"100"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "arrayDepth":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "varType":{
                                          "type":"ArrayTypeNode",
                                          "typeNode":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Object",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "depth":[
                                            {
                                              "type":"ArrayDimensionNode",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"ForLoopStatementNode",
                                  "forControl":{
                                    "type":"ForVarControlNode",
                                    "variables":{
                                      "type":"LocalVariableDeclarationStatementNode",
                                      "modifiers":[
                                        
                                      ],
                                      "declarators":{
                                        "type":"VariableDeclaratorsNode",
                                        "declarators":[
                                          {
                                            "type":"VariableDeclaratorNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "arrayDepth":[
                                              
                                            ],
                                            "assignment":{
                                              "type":"VariableAssignmentNode",
                                              "variableAssignment":{
                                                "type":"VariableExpressionInitNode",
                                                "expression":{
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"IntegerLiteralNode",
                                                    "valueRep":"0"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "varType":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"int",
                                              "comments":[
                                                
                                              ]
                                            }
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "condition":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"<",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"i",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"100"
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "update":[
                                      {
                                        "type":"PostfixOperatorExpressionNode",
                                        "argument":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"++",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "statement":{
                                    "type":"BlockNode",
                                    "statements":[
                                      {
                                        "type":"ExpressionStatement",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"=",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"ArrayAccessSelectorNode",
                                            "identifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"o",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "dimExpression":{
                                              "type":"DimExpressionNode",
                                              "argument":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"i",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"ArrayExpressionCreatorNode",
                                            "creatorType":{
                                              "type":"ReferenceTypeNode",
                                              "ids":[
                                                {
                                                  "type":"ParameterizedTypeNode",
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"Integer",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "expressionDepth":[
                                              {
                                                "type":"DimExpressionNode",
                                                "argument":{
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"IntegerLiteralNode",
                                                    "valueRep":"10000"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "arrayDepth":[
                                              
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"public class SimpleMemAlloc{ Object [] oarray = new Object[10000]; public static void main(String args []){ Object [] o= new Object[100]; for (int i= 0; i<100; i++){ o[i] = new Integer [10000]; } } } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "simpl":1,
                  "alloc":1,
                  "oarray":1,
                  "main":1,
                  "object":4,
                  "mem":1,
                  "arg":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Integer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"oarray",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ArrayExpressionCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Object",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionDepth":[
                            {
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"10000"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "arrayDepth":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Object",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"args",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      {
                        "type":"ArrayDimensionNode",
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"o",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ArrayExpressionCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Object",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionDepth":[
                            {
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"100"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "arrayDepth":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ArrayTypeNode",
                      "typeNode":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Object",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "depth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"i",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I want to get the memory location (0x...) of every new integer array that I create... I will be very happy if I get a nice sample code using the jvmti</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[8659377]-[-90183262]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I want to get the memory location (0x...) of every new integer array that I create... I will be very happy if I get a nice sample code using the jvmti</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sampl":1,
                  "nice":1,
                  "code":1,
                  "array":1,
                  "jvmti":1,
                  "happi":1,
                  "creat":1,
                  "locat":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":8659681,
      "questionId":8659377,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":38636859,
          "postId":8659681,
          "creationDate":"2014-07-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":545127,
            "displayName":"Raedwald",
            "reputation":11028
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This is wrong. The identity hash code of an object is not an address. The identity hash code is constant, but the address can change. In particular, when the garbage collector copies the object to reclaim space."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[8659681-cu38636859]-[-349133182]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This is wrong. The identity hash code of an object is not an address. The identity hash code is constant, but the address can change. In particular, when the garbage collector copies the object to reclaim space."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constant":1,
                        "chang":1,
                        "collector":1,
                        "wrong":1,
                        "reclaim":1,
                        "object":2,
                        "code":2,
                        "hash":2,
                        "ident":2,
                        "space":1,
                        "address":2,
                        "copi":1,
                        "garbag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-12-28",
      "lastActivityDate":"2011-12-28",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":690164,
        "displayName":"Dimitry",
        "reputation":788
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the object doesn't overwrite the <code>hashCode()</code> the default implementation returns the internal address of the object as a integer. Again this might not be the best way of doing this.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8659681]-[-300438021]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the object doesn't overwrite the <code>hashCode()</code> the default implementation returns the internal address of the object as a integer. Again this might not be the best way of doing this.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"hashCode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "object":2,
                    "code":3,
                    "hash":1,
                    "implement":1,
                    "address":1,
                    "intern":1,
                    "overwrit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8659681]-[-708414814]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "languag":1,
                    "requir":1,
                    "blockquot":2,
                    "object":1,
                    "typic":1,
                    "techniqu":1,
                    "implement":2,
                    "address":1,
                    "intern":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For more info <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#hashCode%28%29\"rel=\"nofollow\">click here</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[8659681]-[-1725854833]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For more info <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#hashCode%28%29\"rel=\"nofollow\">click here</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "oracl":1,
                    "doc":2,
                    "info":1,
                    "object":1,
                    "code":1,
                    "hash":1,
                    "nofollow":1,
                    "click":1,
                    "javas":1,
                    "api":1,
                    "lang":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}