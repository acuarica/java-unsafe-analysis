{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23349811,
    "title":"Color Picker with one single Slider",
    "comments":[
      
    ],
    "tags":[
      "java",
      "android",
      "c++",
      "rgb",
      "picker"
    ],
    "creationDate":"2014-04-28",
    "lastActivityDate":"2014-04-28",
    "score":-1,
    "viewCount":154,
    "owner":{
      "type":"StackOverflowUser",
      "id":1131857,
      "displayName":"wutzebaer",
      "reputation":2445
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Hi i'm implementing an android application, but this is offtopic.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23349811]-[2143214945]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Hi i'm implementing an android application, but this is offtopic.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "offtop":1,
                  "android":1,
                  "applic":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a slider which can take valus between 0...16581375 (255*255*255), means all rgb values.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23349811]-[894431562]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a slider which can take valus between 0...16581375 (255*255*255), means all rgb values.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "rgb":1,
                  "valus":1,
                  "slider":1,
                  "mean":1,
                  "valu":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>now technically this does work:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23349811]-[1396682779]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>now technically this does work:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "work":1,
                  "technic":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"testText.setTextColor(0xff000000 + progress); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23349811]-[-394874993]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"testText",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"setTextColor",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"+",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0xff000000"
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"progress",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"testTextsetTextColor(0xff000000+ progress); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":1,
                  "text":1,
                  "color":1,
                  "progress":1,
                  "xff":1,
                  "textset":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"testText",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setTextColor",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"+",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0xff000000"
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"progress",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>but when i'm sliding the color is flickering verry hard. How can i distribute the colors more harmonic</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23349811]-[882464609]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>but when i'm sliding the color is flickering verry hard. How can i distribute the colors more harmonic</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "verri":1,
                  "flicker":1,
                  "hard":1,
                  "color":2,
                  "slide":1,
                  "harmon":1,
                  "distribut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":23350623,
      "questionId":23349811,
      "comments":[
        
      ],
      "creationDate":"2014-04-28",
      "lastActivityDate":"2014-04-28",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1278938,
        "displayName":"HarshMarshmallow",
        "reputation":96
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I would imagine that the flicker has to do with you incrementing the combined rgb values with a base 10 value instead of a hex value. Here are some ideas of what to do in lieu of actually coding this myself.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[238952051]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I would imagine that the flicker has to do with you incrementing the combined rgb values with a base 10 value instead of a hex value. Here are some ideas of what to do in lieu of actually coding this myself.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rgb":1,
                    "lieu":1,
                    "flicker":1,
                    "hex":1,
                    "idea":1,
                    "base":1,
                    "code":1,
                    "combin":1,
                    "valu":1,
                    "imagin":1,
                    "increment":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>1) Try converting your decimal values into hex before setting the text color</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[666715900]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>1) Try converting your decimal values into hex before setting the text color</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hex":1,
                    "set":1,
                    "text":1,
                    "color":1,
                    "decim":1,
                    "valu":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"testText.setTextColor(Integer.valueOf(progress, 16)); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23350623]-[1048336560]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"testText",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setTextColor",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"valueOf",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"progress",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"16"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"testTextsetTextColor(Integer.valueOf(progress, 16)); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "text":1,
                    "color":1,
                    "progress":1,
                    "textset":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"testText",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setTextColor",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Integer",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"valueOf",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"progress",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"16"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Integer",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"valueOf",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"progress",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"16"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Then just pass the value to the textcolor instead of adding it. Alpha defaults to ff (opaque) so you shouldn't have to worry about it here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[-871250512]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Then just pass the value to the textcolor instead of adding it. Alpha defaults to ff (opaque) so you shouldn't have to worry about it here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alpha":1,
                    "opaqu":1,
                    "default":1,
                    "textcolor":1,
                    "pass":1,
                    "ad":1,
                    "worri":1,
                    "shouldn":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2) Make sure that the text color is changed in a handler or async task. The flickering may be caused by the application trying to process your commands synchronously.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[-1601812055]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2) Make sure that the text color is changed in a handler or async task. The flickering may be caused by the application trying to process your commands synchronously.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "flicker":1,
                    "task":1,
                    "process":1,
                    "text":1,
                    "color":1,
                    "command":1,
                    "async":1,
                    "applic":1,
                    "caus":1,
                    "make":1,
                    "handler":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>3) The flickering may have to do with the alpha value (ff at the start of the hex) getting messed up somewhere along the lines in your code. Just follow it through your code to be sure.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[416909112]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>3) The flickering may have to do with the alpha value (ff at the start of the hex) getting messed up somewhere along the lines in your code. Just follow it through your code to be sure.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alpha":1,
                    "flicker":1,
                    "hex":1,
                    "line":1,
                    "code":2,
                    "mess":1,
                    "start":1,
                    "follow":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>4) Make sure that you aren't recreating the textview everytime the bar is moved. Define it in the asynctask or activity contructor.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23350623]-[-1638993920]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>4) Make sure that you aren't recreating the textview everytime the bar is moved. Define it in the asynctask or activity contructor.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":1,
                    "aren":1,
                    "everytim":1,
                    "activ":1,
                    "bar":1,
                    "make":1,
                    "textview":1,
                    "defin":1,
                    "recreat":1,
                    "asynctask":1,
                    "contructor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}