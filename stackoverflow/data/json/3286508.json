{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":3286508,
    "title":"Where to put hibernate annotations?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":3477367,
        "postId":3286508,
        "creationDate":"2010-07-28",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":59198,
          "displayName":"Chris",
          "reputation":15438
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I've since found that if i use field access, i run into all sorts of problems with the proxies that Hibernate uses for lazy loading. So getters/setters it is! Woo hoo code generation to the rescue! Damn this java stuff is verbose!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3286508-cu3477367]-[89985923]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I've since found that if i use field access, i run into all sorts of problems with the proxies that Hibernate uses for lazy loading. So getters/setters it is! Woo hoo code generation to the rescue! Damn this java stuff is verbose!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "verbos":1,
                      "field":1,
                      "problem":1,
                      "hibern":1,
                      "run":1,
                      "setter":1,
                      "hoo":1,
                      "lazi":1,
                      "load":1,
                      "woo":1,
                      "getter":1,
                      "code":1,
                      "found":1,
                      "rescu":1,
                      "damn":1,
                      "stuff":1,
                      "generat":1,
                      "sort":1,
                      "proxi":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":16550641,
        "postId":3286508,
        "creationDate":"2012-09-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":827230,
          "displayName":"fabspro",
          "reputation":724
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"^ Indeed, I've been battling with lazy loading issues for a while (set my models to use eager fetching just to get it to work while it's only a prototype!) but yes, getters/setters are very important for hibernate."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3286508-cu16550641]-[2009200447]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"^ Indeed, I've been battling with lazy loading issues for a while (set my models to use eager fetching just to get it to work while it's only a prototype!) but yes, getters/setters are very important for hibernate."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "eager":1,
                      "model":1,
                      "hibern":1,
                      "set":1,
                      "setter":1,
                      "lazi":1,
                      "load":1,
                      "issu":1,
                      "work":1,
                      "getter":1,
                      "import":1,
                      "prototyp":1,
                      "fetch":1,
                      "battl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":35766140,
        "postId":3286508,
        "creationDate":"2014-04-29",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3184475,
          "displayName":"Borat Sagdiyev",
          "reputation":1301
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"My book - Hibernate made easy tells me to put it before the getters and setters. IDK why."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3286508-cu35766140]-[-1760591939]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"My book - Hibernate made easy tells me to put it before the getters and setters. IDK why."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "easi":1,
                      "idk":1,
                      "hibern":1,
                      "book":1,
                      "setter":1,
                      "getter":1,
                      "put":1,
                      "tell":1,
                      "made":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "hibernate",
      "annotations"
    ],
    "creationDate":"2010-07-20",
    "lastActivityDate":"2013-12-23",
    "score":14,
    "viewCount":6223,
    "owner":{
      "type":"StackOverflowUser",
      "id":59198,
      "displayName":"Chris",
      "reputation":15438
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Where do i put my hibernate annotations?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3286508]-[10599108]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Where do i put my hibernate annotations?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "annot":1,
                  "hibern":1,
                  "put":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it the line above my instance variable? Or before the getter? Or before the setter? Or doesn't it really matter?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3286508]-[1952399329]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it the line above my instance variable? Or before the getter? Or before the setter? Or doesn't it really matter?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "line":1,
                  "setter":1,
                  "getter":1,
                  "matter":1,
                  "variabl":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Thanks a lot</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3286508]-[897815846]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Thanks a lot</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "lot":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":3286601,
      "questionId":3286508,
      "comments":[
        
      ],
      "creationDate":"2010-07-20",
      "lastActivityDate":"2010-07-20",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":190189,
        "displayName":"Brian M. Carr",
        "reputation":840
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's up to your style. You may put it before the field or before getter. In strict JPA, the annotations on setters are ignored, but I'm not sure if Hibernate follows that. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286601]-[-252327134]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's up to your style. You may put it before the field or before getter. In strict JPA, the annotations on setters are ignored, but I'm not sure if Hibernate follows that. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strict":1,
                    "field":1,
                    "style":1,
                    "hibern":1,
                    "setter":1,
                    "jpa":1,
                    "getter":1,
                    "annot":1,
                    "put":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You either need to be consistent throughout your Entity, or you need to provide an @Access annotation at the top of the class with a default mode, and another @Access before each field/property you wish to deviate from the current class mode.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286601]-[-1591794792]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You either need to be consistent throughout your Entity, or you need to provide an @Access annotation at the top of the class with a default mode, and another @Access before each field/property you wish to deviate from the current class mode.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Access",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"with",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Access",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"mode",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "provid":1,
                    "field":1,
                    "consist":1,
                    "annot":1,
                    "mode":2,
                    "entiti":1,
                    "current":1,
                    "top":1,
                    "deviat":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":3286655,
      "questionId":3286508,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":3477360,
          "postId":3286655,
          "creationDate":"2010-07-28",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I've since found that if i use field access, i run into all sorts of problems with the proxies that Hibernate uses for lazy loading. So getters/setters it is! Woo hoo code generation to the rescue! Damn this java stuff is verbose!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3286655-cu3477360]-[89985923]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I've since found that if i use field access, i run into all sorts of problems with the proxies that Hibernate uses for lazy loading. So getters/setters it is! Woo hoo code generation to the rescue! Damn this java stuff is verbose!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "verbos":1,
                        "field":1,
                        "problem":1,
                        "hibern":1,
                        "run":1,
                        "setter":1,
                        "hoo":1,
                        "lazi":1,
                        "load":1,
                        "woo":1,
                        "getter":1,
                        "code":1,
                        "found":1,
                        "rescu":1,
                        "damn":1,
                        "stuff":1,
                        "generat":1,
                        "sort":1,
                        "proxi":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3477402,
          "postId":3286655,
          "creationDate":"2010-07-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":70604,
            "displayName":"Pascal Thivent",
            "reputation":320863
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Chris: I'm personally using property too (see http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access/2869468#2869468)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3286655-cu3477402]-[-1816953691]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Chris: I'm personally using property too (see http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access/2869468#2869468)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Chris",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "properti":2,
                        "question":1,
                        "chris":1,
                        "field":1,
                        "hibern":1,
                        "stackoverflow":1,
                        "annot":1,
                        "person":1,
                        "http":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3402750,
          "postId":3286655,
          "creationDate":"2010-07-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":59198,
            "displayName":"Chris",
            "reputation":15438
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So are you saying that if i put the annotations on the fields, then the get/setters will not be used for anything? What about simple (eg string) fields that don't need annotations, will their fields or setters be used?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3286655-cu3402750]-[-453466622]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So are you saying that if i put the annotations on the fields, then the get/setters will not be used for anything? What about simple (eg string) fields that don't need annotations, will their fields or setters be used?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "simpl":1,
                        "field":3,
                        "setter":2,
                        "annot":2,
                        "put":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3402809,
          "postId":3286655,
          "creationDate":"2010-07-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":70604,
            "displayName":"Pascal Thivent",
            "reputation":320863
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Chris: If you use field access, *Hibernate* will bypass the get/set pair and access the field directly, using reflection. Regarding the second part of your comment, it all depends on the access type - field or property - that will be guessed *from the position of @Id or @EmbeddedId*."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3286655-cu3402809]-[-70518888]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Chris: If you use field access, *Hibernate* will bypass the get/set pair and access the field directly, using reflection. Regarding the second part of your comment, it all depends on the access type - field or property - that will be guessed *from the position of @Id or @EmbeddedId*."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Chris",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Id",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"EmbeddedId",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "properti":1,
                        "chris":1,
                        "depend":1,
                        "field":3,
                        "hibern":1,
                        "set":1,
                        "embed":1,
                        "direct":1,
                        "comment":1,
                        "posit":1,
                        "bypass":1,
                        "pair":1,
                        "part":1,
                        "guess":1,
                        "type":1,
                        "reflect":1,
                        "access":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":35766166,
          "postId":3286655,
          "creationDate":"2014-04-29",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3184475,
            "displayName":"Borat Sagdiyev",
            "reputation":1301
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PascalThivent - Hi ! My book &quot;Hibernate made easy&quot; tells me to put it before the getters and setters. Can you please tell me why someone would say that ? Similarly, `@Id @GeneratedValue` should be before `getId()` which returns `id` variable of my class. I wonder why."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3286655-cu35766166]-[917294495]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PascalThivent - Hi ! My book &quot;Hibernate made easy&quot; tells me to put it before the getters and setters. Can you please tell me why someone would say that ? Similarly, `@Id @GeneratedValue` should be before `getId()` which returns `id` variable of my class. I wonder why."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PascalThivent",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Id",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"GeneratedValue",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"getId",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "easi":1,
                        "similar":1,
                        "return":1,
                        "hibern":1,
                        "book":1,
                        "setter":1,
                        "pascal":1,
                        "getter":1,
                        "generat":1,
                        "put":1,
                        "quot":2,
                        "variabl":1,
                        "tell":1,
                        "made":1,
                        "thivent":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-07-20",
      "lastActivityDate":"2010-07-21",
      "lastEditDate":"2010-07-21",
      "score":15,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":70604,
        "displayName":"Pascal Thivent",
        "reputation":320863
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You place them either on the <em>field</em> or on the <em>getter</em>. From the Hibernate Annotations Reference Guide:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[1724272270]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You place them either on the <em>field</em> or on the <em>getter</em>. From the Hibernate Annotations Reference Guide:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "guid":1,
                    "hibern":1,
                    "getter":1,
                    "annot":1,
                    "refer":1,
                    "place":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <h2><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-mapping-entity\">2.2.1. Marking a POJO as persistent entity</a></h2> \n <p>(...)</p> \n <p>Depending on whether you annotate fields or methods, the access type used by Hibernate will be field or property. The EJB3 spec requires that you declare annotations on the element type that will be accessed, i.e. the getter method if you use property access, the field if you use field access. Mixing annotations in both fields and methods should be avoided. Hibernate will guess the access type from the position of @Id or @EmbeddedId.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[-571020735]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <h2><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-mapping-entity\">2.2.1. Marking a POJO as persistent entity</a></h2> \n <p>(...)</p> \n <p>Depending on whether you annotate fields or methods, the access type used by Hibernate will be field or property. The EJB3 spec requires that you declare annotations on the element type that will be accessed, i.e. the getter method if you use property access, the field if you use field access. Mixing annotations in both fields and methods should be avoided. Hibernate will guess the access type from the position of @Id or @EmbeddedId.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Id",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"EmbeddedId",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":2,
                    "singl":1,
                    "method":3,
                    "depend":1,
                    "field":5,
                    "map":1,
                    "pojo":1,
                    "hibern":3,
                    "requir":1,
                    "stabl":1,
                    "ejb":1,
                    "embed":1,
                    "avoid":1,
                    "doc":1,
                    "blockquot":2,
                    "declar":1,
                    "getter":1,
                    "element":1,
                    "persist":1,
                    "jboss":1,
                    "mix":1,
                    "annot":4,
                    "refer":1,
                    "posit":1,
                    "spec":1,
                    "entiti":3,
                    "guess":1,
                    "type":3,
                    "org":1,
                    "html":1,
                    "mark":1,
                    "href":1,
                    "http":1,
                    "access":5
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You might also want to read about the <code>@Access</code> annotation that allows to force/override the access type (prior to Hibernate Annotations 3.5 and JPA 2.0, it was part of Hibernate Annotation Extensions):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[-1167736111]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You might also want to read about the <code>@Access</code> annotation that allows to force/override the access type (prior to Hibernate Annotations 3.5 and JPA 2.0, it was part of Hibernate Annotation Extensions):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Access",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "prior":1,
                    "hibern":2,
                    "overrid":1,
                    "jpa":1,
                    "code":2,
                    "annot":3,
                    "part":1,
                    "forc":1,
                    "type":1,
                    "extens":1,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <h3><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e535\">2.2.2.2. Access type</a></h3> \n <p>By default the access type of a class hierarchy is defined by the position of the @Id or @EmbeddedId annotations. If these annotations are on a field, then only fields are considered for persistence and the state is accessed via the field. If there annotations are on a getter, then only the getters are considered for persistence and the state is accessed via the getter/setter. That works well in practice and is the recommended approach.</p> \n <blockquote> \n  <p><strong>Note</strong></p> \n  <p>The placement of annotations within a class hierarchy has to be consistent (either field or on property) to be able to determine the default access type. It is recommended to stick to one single annotation placement strategy throughout your whole application.</p> \n </blockquote> \n <p>However in some situations, you need to:</p> \n <ul> \n  <li>force the access type of the entity hierarchy</li> \n  <li>override the access type of a specific entity in the class hierarchy</li> \n  <li>override the access type of an embeddable type</li> \n </ul> \n <p>The best use case is an embeddable class used by several entities that might not use the same access type. In this case it is better to force the access type at the embeddable class level.</p> \n <p>(...)</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[1852274781]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <h3><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#d0e535\">2.2.2.2. Access type</a></h3> \n <p>By default the access type of a class hierarchy is defined by the position of the @Id or @EmbeddedId annotations. If these annotations are on a field, then only fields are considered for persistence and the state is accessed via the field. If there annotations are on a getter, then only the getters are considered for persistence and the state is accessed via the getter/setter. That works well in practice and is the recommended approach.</p> \n <blockquote> \n  <p><strong>Note</strong></p> \n  <p>The placement of annotations within a class hierarchy has to be consistent (either field or on property) to be able to determine the default access type. It is recommended to stick to one single annotation placement strategy throughout your whole application.</p> \n </blockquote> \n <p>However in some situations, you need to:</p> \n <ul> \n  <li>force the access type of the entity hierarchy</li> \n  <li>override the access type of a specific entity in the class hierarchy</li> \n  <li>override the access type of an embeddable type</li> \n </ul> \n <p>The best use case is an embeddable class used by several entities that might not use the same access type. In this case it is better to force the access type at the embeddable class level.</p> \n <p>(...)</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Id",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"EmbeddedId",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"used",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"level",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "recommend":2,
                    "singl":2,
                    "determin":1,
                    "field":4,
                    "state":2,
                    "hibern":1,
                    "stick":1,
                    "setter":1,
                    "embedd":3,
                    "stabl":1,
                    "overrid":2,
                    "strategi":1,
                    "strong":2,
                    "embed":1,
                    "doc":1,
                    "work":1,
                    "blockquot":4,
                    "getter":3,
                    "situat":1,
                    "persist":2,
                    "placement":2,
                    "jboss":1,
                    "consist":1,
                    "annot":6,
                    "consid":2,
                    "note":1,
                    "hierarchi":4,
                    "specif":1,
                    "refer":1,
                    "applic":1,
                    "posit":1,
                    "approach":1,
                    "entiti":3,
                    "forc":2,
                    "defin":1,
                    "type":9,
                    "org":1,
                    "html":1,
                    "practic":1,
                    "href":1,
                    "http":1,
                    "access":10,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Regarding the pros and cons of both styles, I suggest to read the following questions:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[1226888402]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Regarding the pros and cons of both styles, I suggest to read the following questions:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "question":1,
                    "pros":1,
                    "con":1,
                    "style":1,
                    "suggest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://stackoverflow.com/questions/942035/hibernate-jpa-annotating-bean-methods-vs-fields\">Hibernate/JPA - annotating bean methods vs fields</a></li> \n <li><a href=\"http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access\">Hibernate Annotations - Which is better, field or property access?</a></li> \n <li><a href=\"http://stackoverflow.com/questions/332591/performance-difference-between-annotating-fields-or-getter-methods-in-hibernate\">Performance difference between annotating fields or getter methods in Hibernate / JPA</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3286655]-[196895518]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://stackoverflow.com/questions/942035/hibernate-jpa-annotating-bean-methods-vs-fields\">Hibernate/JPA - annotating bean methods vs fields</a></li> \n <li><a href=\"http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access\">Hibernate Annotations - Which is better, field or property access?</a></li> \n <li><a href=\"http://stackoverflow.com/questions/332591/performance-difference-between-annotating-fields-or-getter-methods-in-hibernate\">Performance difference between annotating fields or getter methods in Hibernate / JPA</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":2,
                    "question":3,
                    "method":4,
                    "field":6,
                    "hibern":6,
                    "differ":2,
                    "jpa":3,
                    "getter":2,
                    "stackoverflow":3,
                    "bean":2,
                    "annot":6,
                    "perform":2,
                    "href":3,
                    "http":3,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7194755,
      "questionId":3286508,
      "comments":[
        
      ],
      "creationDate":"2011-08-25",
      "lastActivityDate":"2011-08-25",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":912692,
        "displayName":"batti",
        "reputation":11
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Hibernate is known to use Java reflection. So it really doesn't matter whether you put it above the filed or above the getter.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7194755]-[369051842]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Hibernate is known to use Java reflection. So it really doesn't matter whether you put it above the filed or above the getter.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hibern":1,
                    "getter":1,
                    "put":1,
                    "file":1,
                    "matter":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":20743475,
      "questionId":3286508,
      "comments":[
        
      ],
      "creationDate":"2013-12-23",
      "lastActivityDate":"2013-12-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2151298,
        "displayName":"Ravi Kant",
        "reputation":1171
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here is the description of some important annotation used in Hibernate.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[2081782786]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here is the description of some important annotation used in Hibernate.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "annot":1,
                    "import":1,
                    "descript":1,
                    "hibern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@Entity: declares the class as an entity (i.e. a persistent POJO class) @Table: is set at the class level; it allows you to define the table, catalog, and schema names for your entity mapping. If no @Table is defined the default values are used: the unqualified class name of the entity. @Id: declares the identifier property of this entity. @Generated Value: annotation is used to specify the primary key generation strategy to use. If the strategy is not specified by default AUTO will be used. @Column: annotation is used to specify the details of the column to which a field or property will be mapped. If the @Column annotation is not specified by default the property name will be used as the column name. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20743475]-[1095863664]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Entity",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": declares the "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"as",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"an entity (i.e. a persistent POJO class) "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Table",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": is set at the "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"level",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"; it allows you to define the table, catalog, and schema names for your entity mapping. If no "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Table",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" is defined the default values are used: the unqualified "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"name",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"of the entity. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Id",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": declares the identifier property of this entity. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Generated",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" Value: annotation is used to specify the primary key generation strategy to use. If the strategy is not specified by default AUTO will be used. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Column",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": annotation is used to specify the details of the column to which a field or property will be mapped. If the "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Column",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" annotation is not specified by default the property name will be used as the column name. "
                  }
                ]
              },
              "rawText":"@Entity: declares the class as an entity (i.e. a persistent POJO class) @Table: is set at the class level; it allows you to define the table, catalog, and schema names for your entity mapping. If no @Table is defined the default values are used: the unqualified class name of the entity. @Id: declares the identifier property of this entity. @Generated Value: annotation is used to specify the primary key generation strategy to use. If the strategy is not specified by default AUTO will be used. @Column: annotation is used to specify the details of the column to which a field or property will be mapped. If the @Column annotation is not specified by default the property name will be used as the column name. ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":3,
                    "name":1,
                    "auto":1,
                    "catalog":1,
                    "field":1,
                    "map":2,
                    "pojo":1,
                    "unqualifi":1,
                    "set":1,
                    "primari":1,
                    "strategi":2,
                    "declar":2,
                    "key":1,
                    "tabl":3,
                    "persist":1,
                    "schema":1,
                    "annot":3,
                    "valu":1,
                    "identifi":1,
                    "generat":2,
                    "column":4,
                    "detail":1,
                    "entiti":5,
                    "defin":2,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Annotations based Inheritance mapping in Hibernate: There are three kinds os inheritance mappings in hibernate. They are</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[-1767997390]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Annotations based Inheritance mapping in Hibernate: There are three kinds os inheritance mappings in hibernate. They are</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "map":2,
                    "hibern":2,
                    "base":1,
                    "inherit":2,
                    "annot":1,
                    "kind":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>1.Table per Class hierarchy:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[1326974506]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>1.Table per Class hierarchy:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tabl":1,
                    "hierarchi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@Inheritance \u2013 Defines the inheritance strategy to be used for an entity class hierarchy. It is specified on the entity class that is the root of the entity class hierarchy. @DiscriminatorColumn \u2013 Is used to define the discriminator column for the SINGLE_TABLE inheritance mapping strategies. The strategy and the discriminator column are only specified in the root of an entity class hierarchy or sub hierarchy in which a different inheritance strategy is applied If the @DiscriminatorColumn annotation is missing, and a discriminator column is required, the name of the discriminator column defaults to &quot;DTYPE&quot; and the discriminator type to DiscriminatorType.STRING. @DiscriminatorValue \u2013 Is used to specify the value of the discriminator column for entities of the given type. The DiscriminatorValue annotation can only be specified on a concrete entity class. If the DiscriminatorValue annotation is not specified and a discriminator column is used, a provider-specific function will be used to generate a value representing the entity type. If the DiscriminatorType is STRING, the discriminator value default is the entity name. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20743475]-[136381902]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Inheritance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 Defines the inheritance strategy to be used for an entity "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":". It is specified on the entity "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"is the root of the entity "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":". "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"DiscriminatorColumn",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 Is used to define the discriminator column for the SINGLE"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_TABLE",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" inheritance mapping strategies. The strategy and the discriminator column are only specified in the root of an entity "
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"or sub hierarchy in which a different inheritance strategy is applied If the "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"DiscriminatorColumn",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" annotation is missing, and a discriminator column is required, the name of the discriminator column defaults to \"DTYPE\" and the discriminator type to DiscriminatorType.STRING. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"DiscriminatorValue",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 Is used to specify the value of the discriminator column for entities of the given type. The "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DiscriminatorValue",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"annotation can only be specified on a concrete entity class. If the "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DiscriminatorValue",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"annotation is not specified and a discriminator column is used, a provider-specific function will be used to generate a value representing the entity type. If the "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DiscriminatorType",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"is STRING, the discriminator value default is the entity name. "
                  }
                ]
              },
              "rawText":"@Inheritance \u2013 Defines the inheritance strategy to be used for an entity class hierarchy. It is specified on the entity class that is the root of the entity class hierarchy. @DiscriminatorColumn \u2013 Is used to define the discriminator column for the SINGLE_TABLE inheritance mapping strategies. The strategy and the discriminator column are only specified in the root of an entity class hierarchy or sub hierarchy in which a different inheritance strategy is applied If the @DiscriminatorColumn annotation is missing, and a discriminator column is required, the name of the discriminator column defaults to \"DTYPE\" and the discriminator type to DiscriminatorType.STRING. @DiscriminatorValue \u2013 Is used to specify the value of the discriminator column for entities of the given type. The DiscriminatorValue annotation can only be specified on a concrete entity class. If the DiscriminatorValue annotation is not specified and a discriminator column is used, a provider-specific function will be used to generate a value representing the entity type. If the DiscriminatorType is STRING, the discriminator value default is the entity name. ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "singl":1,
                    "dtype":1,
                    "map":1,
                    "root":2,
                    "concret":1,
                    "requir":1,
                    "strategi":4,
                    "miss":1,
                    "tabl":1,
                    "inherit":4,
                    "annot":3,
                    "discrimin":15,
                    "hierarchi":4,
                    "function":1,
                    "default":1,
                    "specif":1,
                    "generat":1,
                    "column":8,
                    "entiti":8,
                    "appli":1,
                    "defin":2,
                    "type":5,
                    "repres":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DiscriminatorValue",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DiscriminatorType",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2.Table per sub Class hierarchy:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[-328377751]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2.Table per sub Class hierarchy:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tabl":1,
                    "hierarchi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@InheritanceType \u2013 Defines inheritance strategy options. JOINED is a strategy in which fields that are specific to a subclass are mapped to a separate table than the fields that are common to the parent class, and a join is performed to instantiate the subclass. @PrimaryKeyJoinColumn \u2013 This annotation specifies a primary key column that is used as a foreign key to join to another table. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20743475]-[-1345309997]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"InheritanceType",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 Defines inheritance strategy options. JOINED is a strategy in which fields that are specific to a subclass are mapped to a separate table than the fields that are common to the parent class, and a join is performed to instantiate the subclass. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"PrimaryKeyJoinColumn",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 This annotation specifies a primary key column that is used as a foreign key to join to another table. "
                  }
                ]
              },
              "rawText":"@InheritanceType \u2013 Defines inheritance strategy options. JOINED is a strategy in which fields that are specific to a subclass are mapped to a separate table than the fields that are common to the parent class, and a join is performed to instantiate the subclass. @PrimaryKeyJoinColumn \u2013 This annotation specifies a primary key column that is used as a foreign key to join to another table. ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":1,
                    "subclass":2,
                    "instanti":1,
                    "field":2,
                    "join":4,
                    "map":1,
                    "option":1,
                    "separ":1,
                    "primari":2,
                    "strategi":2,
                    "key":3,
                    "tabl":2,
                    "inherit":2,
                    "common":1,
                    "annot":1,
                    "specif":1,
                    "foreign":1,
                    "perform":1,
                    "column":2,
                    "specifi":1,
                    "defin":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>3.Table per Concrete class hierarchy:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[-69044561]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>3.Table per Concrete class hierarchy:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"hierarchy",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tabl":1,
                    "concret":1,
                    "hierarchi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"@InheritanceType \u2013 Defines inheritance strategy options. TABLE_PER_CLASS is a strategy to map table per concrete class. @AttributeOverrides \u2013 This annotation is used to override mappings of multiple properties or fields. @AttributeOverride \u2013 The AttributeOverride annotation is used to override the mapping of a Basic (whether explicit or default) property or field or Id property or field. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[20743475]-[615269678]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"InheritanceType",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 Defines inheritance strategy options. TABLE"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_PER_CLASS",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" is a strategy to map table per concrete class. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"AttributeOverrides",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 This annotation is used to override mappings of multiple properties or fields. "
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"AttributeOverride",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" \u2013 The "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AttributeOverride",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"annotation is used to override the mapping of a Basic (whether explicit or default) property or field or Id property or field. "
                  }
                ]
              },
              "rawText":"@InheritanceType \u2013 Defines inheritance strategy options. TABLE_PER_CLASS is a strategy to map table per concrete class. @AttributeOverrides \u2013 This annotation is used to override mappings of multiple properties or fields. @AttributeOverride \u2013 The AttributeOverride annotation is used to override the mapping of a Basic (whether explicit or default) property or field or Id property or field. ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":3,
                    "field":3,
                    "map":3,
                    "concret":1,
                    "option":1,
                    "overrid":5,
                    "strategi":2,
                    "attribut":3,
                    "tabl":2,
                    "inherit":2,
                    "annot":2,
                    "defin":1,
                    "type":1,
                    "explicit":1,
                    "basic":1,
                    "multipl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AttributeOverride",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Hope it help's to get idea on basic annotation used in hibenate.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20743475]-[2119646143]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Hope it help's to get idea on basic annotation used in hibenate.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hiben":1,
                    "idea":1,
                    "annot":1,
                    "hope":1,
                    "basic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}