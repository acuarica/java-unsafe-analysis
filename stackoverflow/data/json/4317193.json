{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":4317193,
    "title":"Spring annotations conflicts with my design guidelines",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":4689926,
        "postId":4317193,
        "creationDate":"2010-11-30",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":128812,
          "displayName":"gpeche",
          "reputation":9674
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"IMHO those guidelines are strange. Why not try to adhere to the Java Beans specification? And anyway, if they are just guidelines, i guess you can ignore the ones that get in the middle if the end is justified."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4317193-cu4689926]-[-530956321]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"IMHO those guidelines are strange. Why not try to adhere to the Java Beans specification? And anyway, if they are just guidelines, i guess you can ignore the ones that get in the middle if the end is justified."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "ignor":1,
                      "middl":1,
                      "justifi":1,
                      "imho":1,
                      "adher":1,
                      "bean":1,
                      "specif":1,
                      "end":1,
                      "guess":1,
                      "strang":1,
                      "guidelin":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4690043,
        "postId":4317193,
        "creationDate":"2010-11-30",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":422651,
          "displayName":"Bivas",
          "reputation":1033
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I wouldn't call them strange, they are inherited from effective Java programming guidelines. And these are not Java beans but Spring beans. Plus, when using XML there was no problem following these guidelines so, IMHO annotations aren't justified."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4317193-cu4690043]-[1212281877]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I wouldn't call them strange, they are inherited from effective Java programming guidelines. And these are not Java beans but Spring beans. Plus, when using XML there was no problem following these guidelines so, IMHO annotations aren't justified."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "aren":1,
                      "problem":1,
                      "effect":1,
                      "spring":1,
                      "justifi":1,
                      "imho":1,
                      "inherit":1,
                      "bean":2,
                      "annot":1,
                      "xml":1,
                      "wouldn":1,
                      "call":1,
                      "strang":1,
                      "guidelin":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "spring",
      "annotations",
      "cglib"
    ],
    "creationDate":"2010-11-30",
    "lastActivityDate":"2010-12-09",
    "lastEditDate":"2010-11-30",
    "score":4,
    "viewCount":901,
    "owner":{
      "type":"StackOverflowUser",
      "id":422651,
      "displayName":"Bivas",
      "reputation":1033
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Overview</strong><br /> Using </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[1577123764]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Overview</strong><br /> Using </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "strong":2,
                  "overview":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>Spring 3.0.1 (annotation configuration) \n  <ul> \n   <li>Current configuration is using CGLib as proxy creator but this is not my preference</li> \n   <li>Transactions are annotation configured without any special settings</li> \n   <li>All configuration is done with annotations (<code>@Service</code>, <code>@Transactional</code>, <code>@ManagedResource</code>, <code>@Inject</code>, etc.)</li> \n  </ul></li> \n <li>Hibernate 3.5 (entities are annotated with javax.persistence)</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[713027862]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>Spring 3.0.1 (annotation configuration) \n  <ul> \n   <li>Current configuration is using CGLib as proxy creator but this is not my preference</li> \n   <li>Transactions are annotation configured without any special settings</li> \n   <li>All configuration is done with annotations (<code>@Service</code>, <code>@Transactional</code>, <code>@ManagedResource</code>, <code>@Inject</code>, etc.)</li> \n  </ul></li> \n <li>Hibernate 3.5 (entities are annotated with javax.persistence)</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Service",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Transactional",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ManagedResource",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Inject",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "hibern":1,
                  "set":1,
                  "resourc":1,
                  "spring":1,
                  "configur":4,
                  "creator":1,
                  "code":8,
                  "javax":1,
                  "transact":2,
                  "persist":1,
                  "annot":4,
                  "inject":1,
                  "entiti":1,
                  "special":1,
                  "proxi":1,
                  "cglib":1,
                  "manag":1,
                  "current":1,
                  "servic":1,
                  "prefer":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Guidelines highlights</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[-860125293]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Guidelines highlights</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "guidelin":1,
                  "highlight":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>Every bean annotated with <code>@Repository</code> or <code>@Service</code> must have an interface</li> \n <li>Constructor DI (when re-configuration isn't required) \n  <ul> \n   <li>Constructor has <em>default</em> visibility (<code>Foo(Bar bar) {...}</code>)</li> \n  </ul></li> \n <li>Bean fields are <em>final</em> (when re-configuration isn't required) \n  <ul> \n   <li>Leads to no default constructor</li> \n  </ul></li> \n <li>Implementations are <em>default</em> visible with <em>final</em> modifier (<code>final class Foo</code>)</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[-239316554]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>Every bean annotated with <code>@Repository</code> or <code>@Service</code> must have an interface</li> \n <li>Constructor DI (when re-configuration isn't required) \n  <ul> \n   <li>Constructor has <em>default</em> visibility (<code>Foo(Bar bar) {...}</code>)</li> \n  </ul></li> \n <li>Bean fields are <em>final</em> (when re-configuration isn't required) \n  <ul> \n   <li>Leads to no default constructor</li> \n  </ul></li> \n <li>Implementations are <em>default</em> visible with <em>final</em> modifier (<code>final class Foo</code>)</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Repository",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Service",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"final",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"Foo",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "lead":1,
                  "field":1,
                  "requir":2,
                  "constructor":3,
                  "visibl":2,
                  "repositori":1,
                  "configur":2,
                  "code":8,
                  "bean":2,
                  "annot":1,
                  "bar":2,
                  "modifi":1,
                  "isn":2,
                  "implement":1,
                  "servic":1,
                  "foo":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>The Problem</strong> </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[361501928]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>The Problem</strong> </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "strong":2,
                  "problem":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>CGLib can't proxy final classes</li> \n <li>CGLib requires default (empty) constructor</li> \n <li>Some services are required to be exposed via JMX</li> \n <li>MBean exporter can't work unless proxied by CGLib</li> \n <li>Some <code>@Transactional</code> <code>@Service</code>s are accessed via facade service which requires more than one service to include in the facade transaction (e.g. Observer service over 2 application components)</li> \n <li>Some interfaces have more than one implementation (which currently distinguished by <code>@Qualifier</code>)</li> \n <li>Future guideline (or nice to have feature) - each application module will have <code>beanRefContext.xml</code> file to configure its internal application context</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[-1921398029]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>CGLib can't proxy final classes</li> \n <li>CGLib requires default (empty) constructor</li> \n <li>Some services are required to be exposed via JMX</li> \n <li>MBean exporter can't work unless proxied by CGLib</li> \n <li>Some <code>@Transactional</code> <code>@Service</code>s are accessed via facade service which requires more than one service to include in the facade transaction (e.g. Observer service over 2 application components)</li> \n <li>Some interfaces have more than one implementation (which currently distinguished by <code>@Qualifier</code>)</li> \n <li>Future guideline (or nice to have feature) - each application module will have <code>beanRefContext.xml</code> file to configure its internal application context</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Transactional",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Services",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Qualifier",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"IdentifierNode",
                  "name":"beanRefContext",
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "facad":2,
                  "observ":1,
                  "jmx":1,
                  "requir":3,
                  "context":2,
                  "distinguish":1,
                  "constructor":1,
                  "ref":1,
                  "interfac":1,
                  "mbean":1,
                  "nice":1,
                  "configur":1,
                  "expos":1,
                  "work":1,
                  "compon":1,
                  "includ":1,
                  "code":8,
                  "export":1,
                  "qualifi":1,
                  "transact":2,
                  "bean":1,
                  "futur":1,
                  "xml":1,
                  "modul":1,
                  "empti":1,
                  "applic":3,
                  "implement":1,
                  "class":1,
                  "file":1,
                  "featur":1,
                  "proxi":2,
                  "cglib":3,
                  "intern":1,
                  "servic":5,
                  "guidelin":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>When I used to work with XML configuration I was able to enforce all the guidelines I presented above, but when switching to annotations it seems like Spring is misbehaving.<br /> Developers in my group prefer annotation configuration (I seems easier to wire and write new code), but I've noticed all kind of &quot;hacks&quot; they introduce to the code to prevent from dealing with Spring application context failures.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[555852871]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>When I used to work with XML configuration I was able to enforce all the guidelines I presented above, but when switching to annotations it seems like Spring is misbehaving.<br /> Developers in my group prefer annotation configuration (I seems easier to wire and write new code), but I've noticed all kind of &quot;hacks&quot; they introduce to the code to prevent from dealing with Spring application context failures.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "enforc":1,
                  "switch":1,
                  "failur":1,
                  "prevent":1,
                  "context":1,
                  "present":1,
                  "introduc":1,
                  "spring":2,
                  "configur":2,
                  "work":1,
                  "wire":1,
                  "code":2,
                  "easier":1,
                  "annot":2,
                  "xml":1,
                  "applic":1,
                  "quot":2,
                  "notic":1,
                  "hack":1,
                  "kind":1,
                  "develop":1,
                  "group":1,
                  "misbehav":1,
                  "deal":1,
                  "write":1,
                  "prefer":1,
                  "guidelin":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>The Question(s)</strong> </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[-393112799]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>The Question(s)</strong> </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "strong":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>Are there best practices I should follow when using annotation configuration? \n  <ul> \n   <li>When using more than one implementation per interface (trying to reduce the use of <code>@Primary</code> or <code>@Qualifier</code>)</li> \n   <li>When using <code>@Transactional</code></li> \n   <li>When using <code>@ManagedResource</code></li> \n   <li>When using a combination of the above</li> \n  </ul></li> \n <li>Is there a way of stop working with CGLib, keep the annotation configuration and still be able to export my MBeans with annotations?</li> \n <li>What is the suitable implementation for keeping most (preferably, all) of my guidelines?</li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4317193]-[-649645756]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>Are there best practices I should follow when using annotation configuration? \n  <ul> \n   <li>When using more than one implementation per interface (trying to reduce the use of <code>@Primary</code> or <code>@Qualifier</code>)</li> \n   <li>When using <code>@Transactional</code></li> \n   <li>When using <code>@ManagedResource</code></li> \n   <li>When using a combination of the above</li> \n  </ul></li> \n <li>Is there a way of stop working with CGLib, keep the annotation configuration and still be able to export my MBeans with annotations?</li> \n <li>What is the suitable implementation for keeping most (preferably, all) of my guidelines?</li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Primary",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Qualifier",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Transactional",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"ManagedResource",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "reduc":1,
                  "keep":1,
                  "resourc":1,
                  "primari":1,
                  "mbean":1,
                  "configur":2,
                  "stop":1,
                  "work":1,
                  "code":8,
                  "export":1,
                  "qualifi":1,
                  "transact":1,
                  "annot":3,
                  "combin":1,
                  "suitabl":1,
                  "implement":2,
                  "cglib":1,
                  "practic":1,
                  "manag":1,
                  "prefer":1,
                  "guidelin":1,
                  "follow":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":4317334,
      "questionId":4317193,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":4689665,
          "postId":4317334,
          "creationDate":"2010-11-30",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":422651,
            "displayName":"Bivas",
            "reputation":1033
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I would appreciated an example (if possible), because my attempts went down the drain"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4317334-cu4689665]-[2005738457]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I would appreciated an example (if possible), because my attempts went down the drain"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "drain":1,
                        "appreci":1,
                        "attempt":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4696306,
          "postId":4317334,
          "creationDate":"2010-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":280244,
            "displayName":"Ralph",
            "reputation":48766
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You need an example how Spring is using AspectJ instead of CGLib Proxies? -- I ask because it is some work to provide an example?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4317334-cu4696306]-[-1978446528]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You need an example how Spring is using AspectJ instead of CGLib Proxies? -- I ask because it is some work to provide an example?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "aspect":1,
                        "spring":1,
                        "work":1,
                        "proxi":1,
                        "cglib":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4703192,
          "postId":4317334,
          "creationDate":"2010-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":422651,
            "displayName":"Bivas",
            "reputation":1033
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I know how to make it work with Java Proxy instead of CGLib but it conflicts with exportation of MBeans"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4317334-cu4703192]-[-1297078340]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I know how to make it work with Java Proxy instead of CGLib but it conflicts with exportation of MBeans"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "conflict":1,
                        "mbean":1,
                        "work":1,
                        "export":1,
                        "make":1,
                        "proxi":1,
                        "cglib":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":4704765,
          "postId":4317334,
          "creationDate":"2010-12-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":280244,
            "displayName":"Ralph",
            "reputation":48766
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I am not talking about Java Proxy, I am talking about &quot;real&quot; AspectJ. @see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-using-aspectj -- I belive this would have no negative influence on MBeans."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4317334-cu4704765]-[-201091473]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I am not talking about Java Proxy, I am talking about &quot;real&quot; AspectJ. @see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-using-aspectj -- I belive this would have no negative influence on MBeans."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "negat":1,
                        "real":1,
                        "springsourc":1,
                        "beliv":1,
                        "influenc":1,
                        "aspect":1,
                        "spring":2,
                        "talk":2,
                        "mbean":1,
                        "framework":1,
                        "doc":1,
                        "refer":1,
                        "quot":2,
                        "aspectj":1,
                        "proxi":1,
                        "org":1,
                        "html":2,
                        "http":1,
                        "aop":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-11-30",
      "lastActivityDate":"2010-11-30",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":280244,
        "displayName":"Ralph",
        "reputation":48766
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Answer to point 2) You could use AspectJ instead of CGLib.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4317334]-[1936320998]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Answer to point 2) You could use AspectJ instead of CGLib.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aspect":1,
                    "point":1,
                    "answer":1,
                    "cglib":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":4396124,
      "questionId":4317193,
      "comments":[
        
      ],
      "creationDate":"2010-12-09",
      "lastActivityDate":"2010-12-09",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":422651,
        "displayName":"Bivas",
        "reputation":1033
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I came up with the following solution (to questions #2 and #3) to be able to enforce my design guidelines and keep using annotation based configuration: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4396124]-[-1211963623]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I came up with the following solution (to questions #2 and #3) to be able to enforce my design guidelines and keep using annotation based configuration: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "enforc":1,
                    "question":1,
                    "design":1,
                    "configur":1,
                    "base":1,
                    "annot":1,
                    "solut":1,
                    "guidelin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Each dependent project (Maven module) has it's own <code>ApplicationContext</code></li> \n <li>Every dependent project application context is defined in <code>beanRefContext.xml</code></li> \n <li>These application contexts are loaded in hierarchy using Spring context hierarchy mechanism. \n  <ul> \n   <li>This step is actually not fully supported by Spring and requires additional <a href=\"http://stackoverflow.com/questions/4364221/annotationconfigapplicationcontext-and-parent-context\">work</a></li> \n  </ul></li> \n <li>Since my application is layered, I could disable CGLib on all my modules besides the JMX layer (I can live with it :-) ). </li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4396124]-[1537283508]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Each dependent project (Maven module) has it's own <code>ApplicationContext</code></li> \n <li>Every dependent project application context is defined in <code>beanRefContext.xml</code></li> \n <li>These application contexts are loaded in hierarchy using Spring context hierarchy mechanism. \n  <ul> \n   <li>This step is actually not fully supported by Spring and requires additional <a href=\"http://stackoverflow.com/questions/4364221/annotationconfigapplicationcontext-and-parent-context\">work</a></li> \n  </ul></li> \n <li>Since my application is layered, I could disable CGLib on all my modules besides the JMX layer (I can live with it :-) ). </li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ApplicationContext",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"IdentifierNode",
                    "name":"beanRefContext",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "question":1,
                    "parent":1,
                    "disabl":1,
                    "step":1,
                    "depend":2,
                    "addit":1,
                    "jmx":1,
                    "project":2,
                    "requir":1,
                    "context":6,
                    "spring":2,
                    "load":1,
                    "ref":1,
                    "work":1,
                    "code":4,
                    "layer":2,
                    "stackoverflow":1,
                    "maven":1,
                    "bean":1,
                    "live":1,
                    "xml":1,
                    "modul":2,
                    "hierarchi":2,
                    "applic":4,
                    "mechan":1,
                    "fulli":1,
                    "cglib":1,
                    "defin":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ApplicationContext",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The above steps also enabled me to reduce the execution time of Spring aware tests (every module loaded only a sub-set of beans). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4396124]-[-114652661]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The above steps also enabled me to reduce the execution time of Spring aware tests (every module loaded only a sub-set of beans). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "step":1,
                    "reduc":1,
                    "set":1,
                    "spring":1,
                    "load":1,
                    "awar":1,
                    "bean":1,
                    "modul":1,
                    "enabl":1,
                    "time":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a practical guideline (for question #1), if an interface has more than one implementation, I place <code>@Primary</code> on the widely used one and other clients, requiring another implementation, wire the bean using <code>@Qualifier</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4396124]-[1391703481]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a practical guideline (for question #1), if an interface has more than one implementation, I place <code>@Primary</code> on the widely used one and other clients, requiring another implementation, wire the bean using <code>@Qualifier</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Primary",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Qualifier",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "requir":1,
                    "primari":1,
                    "wire":1,
                    "code":4,
                    "qualifi":1,
                    "bean":1,
                    "client":1,
                    "implement":2,
                    "place":1,
                    "wide":1,
                    "practic":1,
                    "guidelin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}