{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":8430924,"title":"How to share a variable between Java and C in android JNI?","comments":[],"tags":["android","variables","jni","share"],"creationDate":"2011-12-08","lastActivityDate":"2014-07-30","lastEditDate":"2011-12-09","score":3,"viewCount":365,"owner":{"type":"StackOverflowUser","id":992537,"displayName":"user992537","reputation":33},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Is there a way to share a native C variable instantly with Java in android JNI?</p>"},"units":[{"type":"TextUnit","id":"[8430924]-[177462630]","astNode":{"type":"TextFragmentNode","text":"<p>Is there a way to share a native C variable instantly with Java in android JNI?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"jni":1,"share":1,"instant":1,"variabl":1,"android":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I wanna receive data from C layer in client since the server is written in C++(with struct read/write involved),and record the data-coming situation in an array variable,and wanna detect that variable in Java and do what`s correspond, wondering if that is possible?</p>"},"units":[{"type":"TextUnit","id":"[8430924]-[-639823892]","astNode":{"type":"TextFragmentNode","text":"<p>I wanna receive data from C layer in client since the server is written in C++(with struct read/write involved),and record the data-coming situation in an array variable,and wanna detect that variable in Java and do what`s correspond, wondering if that is possible?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"read":1,"involv":1,"receiv":1,"server":1,"detect":1,"data":2,"come":1,"correspond":1,"layer":1,"array":1,"situat":1,"client":1,"written":1,"wonder":1,"struct":1,"variabl":2,"wanna":2,"write":1,"record":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I considered writing a file about the data-coming situation into sdcard,however that the last thing I wanna do,any tips?</p>"},"units":[{"type":"TextUnit","id":"[8430924]-[276249118]","astNode":{"type":"TextFragmentNode","text":"<p>I considered writing a file about the data-coming situation into sdcard,however that the last thing I wanna do,any tips?</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"data":1,"sdcard":1,"thing":1,"come":1,"situat":1,"consid":1,"tip":1,"file":1,"wanna":1,"write":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},"answers":[{"type":"StackOverflowAnswer","id":17558834,"questionId":8430924,"comments":[],"creationDate":"2013-07-09","lastActivityDate":"2013-07-09","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":2495158,"displayName":"sasbury","reputation":161},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I haven't done any android - so take this with a grain of salt - but you could probably use a direct byte buffer. The problem is going to be knowing that something happened. You could simply poll the buffer, but that wouldn't be much better than just using JNI to poll the value.</p>"},"units":[{"type":"TextUnit","id":"[17558834]-[420486820]","astNode":{"type":"TextFragmentNode","text":"<p>I haven't done any android - so take this with a grain of salt - but you could probably use a direct byte buffer. The problem is going to be knowing that something happened. You could simply poll the buffer, but that wouldn't be much better than just using JNI to poll the value.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"poll":2,"happen":1,"problem":1,"buffer":2,"direct":1,"know":1,"jni":1,"simpli":1,"wouldn":1,"grain":1,"salt":1,"android":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>In regular java, people might take advantage of the sun.misc.Unsafe class for this, if they were willing to take the risk. I am not sure if that class exists in android, but perhaps this will help <a href=\"http://stackoverflow.com/questions/5357390/unsafe-class-in-android\">Unsafe class in Android?</a>.</p>"},"units":[{"type":"TextUnit","id":"[17558834]-[-1914181231]","astNode":{"type":"TextFragmentNode","text":"<p>In regular java, people might take advantage of the sun.misc.Unsafe class for this, if they were willing to take the risk. I am not sure if that class exists in android, but perhaps this will help <a href=\"http://stackoverflow.com/questions/5357390/unsafe-class-in-android\">Unsafe class in Android?</a>.</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"exists","comments":[]},"labels":[],"comments":[]},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"in","comments":[]},"labels":[],"comments":[]}]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"exist":1,"sun":1,"regular":1,"risk":1,"stackoverflow":1,"advantag":1,"misc":1,"unsaf":3,"href":1,"peopl":1,"http":1,"android":3}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"sun","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"misc","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Unsafe","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"exists","comments":[]},{"type":"IdentifierNode","name":"sun","comments":[]},{"type":"IdentifierNode","name":"Unsafe","comments":[]},{"type":"IdentifierNode","name":"in","comments":[]},{"type":"IdentifierNode","name":"misc","comments":[]}]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]}]},{"type":"StackOverflowAnswer","id":25029999,"questionId":8430924,"comments":[],"creationDate":"2014-07-30","lastActivityDate":"2014-07-30","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":3336423,"displayName":"jpo38","reputation":1363},"source":[{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I recently had this problem and could solve it. I have a C++ Qt Android project that needs to execute some java code (for stuff only accessible from Android SDK). To achieve this, I had to share some constants between my java and C++ code (to have them talk together and understand each other).</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[237417972]","astNode":{"type":"TextFragmentNode","text":"<p>I recently had this problem and could solve it. I have a C++ Qt Android project that needs to execute some java code (for stuff only accessible from Android SDK). To achieve this, I had to share some constants between my java and C++ code (to have them talk together and understand each other).</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"solv":1,"constant":1,"recent":1,"project":1,"problem":1,"understand":1,"sdk":1,"talk":1,"code":2,"share":1,"achiev":1,"stuff":1,"execut":1,"android":2,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Here are possible solutions to achieve this:</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[1682109036]","astNode":{"type":"TextFragmentNode","text":"<p>Here are possible solutions to achieve this:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"achiev":1,"solut":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Neutral"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<ul>\n<li>Have C++ pass constants values to Java object upon creation (or the way around if Java invokes C++). But it's apain if you have many variables.</li>\n<li>Have a config file parsed dynamically by both C++ and Java module. Should work, but did not try it.</li>\n<li>Declare variables in both places....bad idea and hard to maintain</li>\n<li>Have a declaration file directly used ('included') by both C++ and Java</li>\n</ul>"},"units":[{"type":"TextUnit","id":"[25029999]-[1378335242]","astNode":{"type":"TextFragmentNode","text":"<ul>\n<li>Have C++ pass constants values to Java object upon creation (or the way around if Java invokes C++). But it's apain if you have many variables.</li>\n<li>Have a config file parsed dynamically by both C++ and Java module. Should work, but did not try it.</li>\n<li>Declare variables in both places....bad idea and hard to maintain</li>\n<li>Have a declaration file directly used ('included') by both C++ and Java</li>\n</ul>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":1,"hard":1,"apain":1,"idea":1,"dynam":1,"invok":1,"bad":1,"config":1,"work":1,"declar":2,"creation":1,"object":1,"direct":1,"includ":1,"pars":1,"modul":1,"valu":1,"pass":1,"file":2,"place":1,"variabl":2,"maintain":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>I finally made last solution work. The idea is to have a java file being used by both C++ and Java (the way around may work, but I'm more a C++ guy, so this way looked easier to me). And we use pre-processor to make this java file valid to be included by C++ as a header file!</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[1946858049]","astNode":{"type":"TextFragmentNode","text":"<p>I finally made last solution work. The idea is to have a java file being used by both C++ and Java (the way around may work, but I'm more a C++ guy, so this way looked easier to me). And we use pre-processor to make this java file valid to be included by C++ as a header file!</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"pre":1,"guy":1,"look":1,"idea":1,"work":2,"includ":1,"easier":1,"processor":1,"valid":1,"make":1,"header":1,"file":3,"made":1,"solut":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Here is an example of Java file (constants.java) declaring constants (integers and strings):</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[1964659188]","astNode":{"type":"TextFragmentNode","text":"<p>Here is an example of Java file (constants.java) declaring constants (integers and strings):</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":2,"string":1,"declar":1,"integ":1,"file":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"package name1.name2.name3;\nimport java.lang.String;\n\nclass MyConstants\n{\n    public static String  THE_NAME() { return \"Name\"; }\n    public static Integer THE_VALUE() { return 12; }\n};\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[25029999]-[24596326]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"CompilationUnitNode","packageDeclaration":{"type":"PackageDeclarationNode","annotations":[],"identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"name1","comments":[]},{"type":"IdentifierNode","name":"name2","comments":[]},{"type":"IdentifierNode","name":"name3","comments":[]}],"comments":[]},"comments":[]},"imports":[{"type":"ImportDeclarationNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"java","comments":[]},{"type":"IdentifierNode","name":"lang","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]}],"comments":[]},"isStatic":false,"isOnDemand":false,"comments":[]}],"typeDeclarations":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"MyConstants","comments":[]},"body":{"type":"ClassBodyNode","declarations":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]},{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Name\""},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]},{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Integer","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"12"},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}],"comments":[]},"labels":[],"comments":[]},{"type":"EmptyDeclarationNode","comments":[],"labels":[]}]}]},"rawText":"package name1.name2.name3;\nimport java.lang.String;\n\nclass MyConstants\n{\n    public static String  THE_NAME() { return \"Name\"; }\n    public static Integer THE_VALUE() { return 12; }\n};\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":1,"lang":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"java","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"lang","comments":[]},"comments":[]},{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]}],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Integer","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"THE_NAME","comments":[]},{"type":"IdentifierNode","name":"java","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"name3","comments":[]},{"type":"IdentifierNode","name":"lang","comments":[]},{"type":"IdentifierNode","name":"name2","comments":[]},{"type":"IdentifierNode","name":"name1","comments":[]},{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},{"type":"IdentifierNode","name":"Integer","comments":[]},{"type":"IdentifierNode","name":"MyConstants","comments":[]}]},{"declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]},{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Name\""},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]},{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Integer","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"12"},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]},{"grade":0.8192158937454224}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>This can be used with no problem from any Java code to access variables.\nNow, here's how to include it from a C++ file:</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[750176416]","astNode":{"type":"TextFragmentNode","text":"<p>This can be used with no problem from any Java code to access variables.\nNow, here's how to include it from a C++ file:</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"problem":1,"includ":1,"code":1,"file":1,"variabl":1,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"#include &lt;string&gt;\nusing namespace std;\n#define public public:\n#define package struct mockup1 { int name3; };struct mockup2 { mockup1 name2; };int i1 =\n#define name1 mockup2()\n#define import struct mockup3 { int String; };struct mockup4 { mockup3 lang; };int i2 =\n#define java mockup4()\n#define String string\n#define Integer int\n\n#include \"constants.java\"\n\n#undef public\n#undef String\n#undef package\n#undef import\n#undef java\n#undef name3\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[25029999]-[985634387]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"#include "},{"type":"XmlNode","name":{"type":"XmlNameNode","value":"string"},"attributes":[],"elements":[]},{"type":"TextFragmentNode","text":"\nusing namespace std;\n#define public public:\n#define package struct mockup1 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name3","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";struct mockup2 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name2","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";int i1 =\n#define name1 "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup2","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"#define import struct mockup3 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";struct mockup4 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"lang","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";int i2 =\n#define java "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup4","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"#define String string\n#define Integer int\n\n#include \"constants.java\"\n\n#undef public\n#undef String\n#undef package\n#undef import\n#undef java\n#undef name3\n"}]},"rawText":"#include <string>\nusing namespace std;\n#define public public:\n#define package struct mockup1 { int name3; };struct mockup2 { mockup1 name2; };int i1 =\n#define name1 mockup2()\n#define import struct mockup3 { int String; };struct mockup4 { mockup3 lang; };int i2 =\n#define java mockup4()\n#define String string\n#define Integer int\n\n#include \"constants.java\"\n\n#undef public\n#undef String\n#undef package\n#undef import\n#undef java\n#undef name3\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":1,"mockup":8,"std":1,"includ":2,"namespac":1,"struct":4,"lang":1,"defin":7,"undef":6}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup2","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup4","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name3","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name2","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"lang","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]}}]},{"identifiers":[{"type":"IdentifierNode","name":"mockup4","comments":[]},{"type":"IdentifierNode","name":"mockup3","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"name3","comments":[]},{"type":"IdentifierNode","name":"mockup1","comments":[]},{"type":"IdentifierNode","name":"lang","comments":[]},{"type":"IdentifierNode","name":"mockup2","comments":[]},{"type":"IdentifierNode","name":"name2","comments":[]}]},{"declarators":[]},{"grade":0.21835115551948547}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Pre-processor then changes constants.java file into this valid C++ header file (the main difficuly was to get ride of package and import lines because you cannot use dots in macro names....had to be malicious):</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[831532803]","astNode":{"type":"TextFragmentNode","text":"<p>Pre-processor then changes constants.java file into this valid C++ header file (the main difficuly was to get ride of package and import lines because you cannot use dots in macro names....had to be malicious):</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"pre":1,"constant":1,"dot":1,"name":1,"line":1,"macro":1,"difficuli":1,"main":1,"malici":1,"processor":1,"valid":1,"header":1,"file":2,"ride":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"struct mockup1 { int name3; };struct mockup2 { mockup1 name2; };int i1 = mockup2().name2.name3;\nstruct mockup3 { int String; };struct mockup4 { mockup3 lang; };int i2 = mockup4().lang.String;\n\nclass MyConstants\n{\n    public: static string THE_NAME() { return \"Name\"; }\n    public: static int THE_VALUE() { return 12; }\n};\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[25029999]-[1704233091]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"struct mockup1 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name3","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";struct mockup2 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name2","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";int "},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i1","comments":[]}],"comments":[]},"right":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup2","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"name2","comments":[]},{"type":"IdentifierNode","name":"name3","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"TextFragmentNode","text":"struct mockup3 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";struct mockup4 "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"lang","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":";int "},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i2","comments":[]}],"comments":[]},"right":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup4","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"lang","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"MyConstants","comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"{\n    public: "},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"string","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Name\""},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"public: "},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"int","comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"12"},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"};\n"}]},"rawText":"struct mockup1 { int name3; };struct mockup2 { mockup1 name2; };int i1 = mockup2().name2.name3;\nstruct mockup3 { int String; };struct mockup4 { mockup3 lang; };int i2 = mockup4().lang.String;\n\nclass MyConstants\n{\n    public: static string THE_NAME() { return \"Name\"; }\n    public: static int THE_VALUE() { return 12; }\n};\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"struct":4,"constant":1,"mockup":8,"lang":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"string","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup2","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"mockup4","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name3","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"name2","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup1","comments":[]},"comments":[]}],"comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"lang","comments":[]},"arrayDepth":[],"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"mockup3","comments":[]},"comments":[]}],"comments":[]}}]},{"identifiers":[{"type":"IdentifierNode","name":"mockup4","comments":[]},{"type":"IdentifierNode","name":"i2","comments":[]},{"type":"IdentifierNode","name":"THE_NAME","comments":[]},{"type":"IdentifierNode","name":"mockup3","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"name3","comments":[]},{"type":"IdentifierNode","name":"mockup1","comments":[]},{"type":"IdentifierNode","name":"lang","comments":[]},{"type":"IdentifierNode","name":"mockup2","comments":[]},{"type":"IdentifierNode","name":"name2","comments":[]},{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},{"type":"IdentifierNode","name":"i1","comments":[]},{"type":"IdentifierNode","name":"string","comments":[]},{"type":"IdentifierNode","name":"MyConstants","comments":[]}]},{"declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"string","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"Name\""},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"static","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"int","comments":[]},"identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"12"},"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]},{"grade":0.5172556042671204}]}]},{"type":"SourceInfo","node":{"type":"XmlTextNode","contents":"<p>Here you go with your constants in C++!</p>"},"units":[{"type":"TextUnit","id":"[25029999]-[1976120581]","astNode":{"type":"TextFragmentNode","text":"<p>Here you go with your constants in C++!</p>"},"codeFragments":{"type":"CodeFragmentSequence","fragments":[]},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[]},{"declarators":[]},{"averageLevel":"Negative"},{"fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]}]},{"type":"SourceInfo","node":{"type":"XmlNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"int main()\n{\n   cout &lt;&lt; MyConstants::THE_NAME() &lt;&lt; MyConstants::THE_VALUE() &lt;&lt; endl; \n\n   return 0;\n}\n"}]}]},"units":[{"type":"StructuredFragmentUnit","id":"[25029999]-[-477465307]","astNode":{"type":"CodeFragmentSequence","fragments":[{"type":"TextFragmentNode","text":"int "},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"main","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"{\n   cout << "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyConstants","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"::"},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":"<< "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyConstants","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"::"},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<<","comments":[]},"left":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"endl","comments":[]}],"comments":[]},"comments":[]},"labels":[]},{"type":"ReturnStatementNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"}\n"}]},"rawText":"int main()\n{\n   cout << MyConstants::THE_NAME() << MyConstants::THE_VALUE() << endl; \n\n   return 0;\n}\n","metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"constant":2,"cout":1,"main":1,"endl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyConstants","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"main","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"THE_NAME","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"identifiers":[{"type":"IdentifierNode","name":"THE_NAME","comments":[]},{"type":"IdentifierNode","name":"main","comments":[]},{"type":"IdentifierNode","name":"THE_VALUE","comments":[]},{"type":"IdentifierNode","name":"endl","comments":[]},{"type":"IdentifierNode","name":"MyConstants","comments":[]}]},{"declarators":[]},{"grade":0.85843825340271}]}]}]}]}