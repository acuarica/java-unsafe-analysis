{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18655795,
    "title":"Parameterise a Maven Multimodule Build",
    "comments":[
      
    ],
    "tags":[
      "java",
      "maven",
      "inheritance",
      "multi-module"
    ],
    "creationDate":"2013-09-06",
    "lastActivityDate":"2013-09-06",
    "lastEditDate":"2013-09-06",
    "score":3,
    "viewCount":82,
    "owner":{
      "type":"StackOverflowUser",
      "id":2087083,
      "displayName":"beaker",
      "reputation":35
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm looking for a possibility to parameterise a multi-module build in a way that I can replace/specify some files (e.g. UML files) that are used during the build in order to produce different output. The procedure of the build stays the same but I want to be able to produce different output depending on the input UML model.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[-984447745]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm looking for a possibility to parameterise a multi-module build in a way that I can replace/specify some files (e.g. UML files) that are used during the build in order to produce different output. The procedure of the build stays the same but I want to be able to produce different output depending on the input UML model.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "depend":1,
                  "model":1,
                  "produc":2,
                  "procedur":1,
                  "build":3,
                  "possibl":1,
                  "replac":1,
                  "modul":1,
                  "uml":2,
                  "order":1,
                  "file":2,
                  "stay":1,
                  "output":2,
                  "parameteris":1,
                  "multi":1,
                  "input":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a multi-module project that builds several jars based upon an UML model. The pom structure looks as follows:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[419667145]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a multi-module project that builds several jars based upon an UML model. The pom structure looks as follows:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pom":1,
                  "model":1,
                  "project":1,
                  "build":1,
                  "structur":1,
                  "base":1,
                  "modul":1,
                  "uml":1,
                  "jar":1,
                  "multi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"+ generation - mod1 - mod2 - mod3 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[18655795]-[-1085129686]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"+ generation - mod1 - mod2 - mod3 "
                }
              ]
            },
            "rawText":"+ generation - mod1 - mod2 - mod3 ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "generat":1,
                  "mod":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The root pom (generation) generates java sourcecode (.java) based upon an UML model stored in the directory /uml. Afterwards the modules (mod1...3) compile distinct subsets of this sourcecode and package the output as jar.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[1093119107]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The root pom (generation) generates java sourcecode (.java) based upon an UML model stored in the directory /uml. Afterwards the modules (mod1...3) compile distinct subsets of this sourcecode and package the output as jar.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pom":1,
                  "mod":1,
                  "model":1,
                  "root":1,
                  "store":1,
                  "base":1,
                  "subset":1,
                  "modul":1,
                  "uml":2,
                  "distinct":1,
                  "directori":1,
                  "generat":2,
                  "sourcecod":2,
                  "compil":1,
                  "output":1,
                  "jar":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I want to reuse this build procedure and apply it to different UML models. How can I reuse the entire generation, compilation and packaging procedure defined in the multimodule project in other maven projects?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[-951478341]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I want to reuse this build procedure and apply it to different UML models. How can I reuse the entire generation, compilation and packaging procedure defined in the multimodule project in other maven projects?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "model":1,
                  "project":2,
                  "procedur":2,
                  "build":1,
                  "multimodul":1,
                  "entir":1,
                  "maven":1,
                  "uml":1,
                  "generat":1,
                  "packag":1,
                  "compil":1,
                  "appli":1,
                  "defin":1,
                  "reus":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"# Generate jars based upon the foo UML model + generation-foo /uml/foo.uml # Generate jars based upon the bar UML model + generation-bar /uml/bar.uml "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[18655795]-[2085780819]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"# Generate jars based upon the foo UML model + generation-foo /uml/foo.uml # Generate jars based upon the bar UML model + generation-bar /uml/bar.uml "
                }
              ]
            },
            "rawText":"# Generate jars based upon the foo UML model + generation-foo /uml/foo.uml # Generate jars based upon the bar UML model + generation-bar /uml/bar.uml ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "model":2,
                  "base":2,
                  "uml":6,
                  "bar":3,
                  "generat":4,
                  "jar":2,
                  "foo":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Update</strong><br /> I could use profiles in the generation project in order to define the different input uml models and then just activate the relevant one. But I would lose traceability that way.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[2039567815]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Update</strong><br /> I could use profiles in the generation project in order to define the different input uml models and then just activate the relevant one. But I would lose traceability that way.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "profil":1,
                  "model":1,
                  "project":1,
                  "updat":1,
                  "relev":1,
                  "traceabl":1,
                  "strong":2,
                  "activ":1,
                  "uml":1,
                  "order":1,
                  "generat":1,
                  "defin":1,
                  "lose":1,
                  "input":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Perhaps a completely new approach would be a better idea ... any suggestions?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18655795]-[1015585971]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Perhaps a completely new approach would be a better idea ... any suggestions?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "suggest":1,
                  "approach":1,
                  "idea":1,
                  "complet":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18661686,
      "questionId":18655795,
      "comments":[
        
      ],
      "creationDate":"2013-09-06",
      "lastActivityDate":"2013-09-06",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":318174,
        "displayName":"Adam Gent",
        "reputation":17991
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm not entirely sure I understand your use cases but you might want to look at:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18661686]-[998337198]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm not entirely sure I understand your use cases but you might want to look at:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "understand":1,
                    "case":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><strong>POM Inheritance</strong> : Defining as much as you can in the parent module (different groups of modules can have the same parent)</li> \n <li><strong>Maven profiles</strong> : you can activate based on all sort of potential conventions like even the project name.</li> \n <li><strong>Maven Archetypes</strong> : And finally I think based on what your saying this maybe the only solution of a reusable project template</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18661686]-[-1858885181]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><strong>POM Inheritance</strong> : Defining as much as you can in the parent module (different groups of modules can have the same parent)</li> \n <li><strong>Maven profiles</strong> : you can activate based on all sort of potential conventions like even the project name.</li> \n <li><strong>Maven Archetypes</strong> : And finally I think based on what your saying this maybe the only solution of a reusable project template</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pom":1,
                    "parent":2,
                    "profil":1,
                    "project":2,
                    "potenti":1,
                    "reusabl":1,
                    "templat":1,
                    "strong":6,
                    "base":2,
                    "maven":2,
                    "inherit":1,
                    "activ":1,
                    "modul":2,
                    "archetyp":1,
                    "sort":1,
                    "defin":1,
                    "group":1,
                    "solut":1,
                    "convent":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18656997,
      "questionId":18655795,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":27473520,
          "postId":18656997,
          "creationDate":"2013-09-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2087083,
            "displayName":"beaker",
            "reputation":35
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm right there with you. Traceability is a very important point. Therefore the different UML models are also packed in jars and versioned by maven. In the generation project the module is added as dependency and gets unpacked during the generate-sources phase. Preferably I just would have to specify a different model dependency."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18656997-cu27473520]-[48327185]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm right there with you. Traceability is a very important point. Therefore the different UML models are also packed in jars and versioned by maven. In the generation project the module is added as dependency and gets unpacked during the generate-sources phase. Preferably I just would have to specify a different model dependency."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "depend":2,
                        "model":2,
                        "project":1,
                        "phase":1,
                        "unpack":1,
                        "pack":1,
                        "traceabl":1,
                        "maven":1,
                        "version":1,
                        "import":1,
                        "modul":1,
                        "uml":1,
                        "generat":2,
                        "ad":1,
                        "sourc":1,
                        "jar":1,
                        "prefer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-09-06",
      "lastActivityDate":"2013-09-06",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1325216,
        "displayName":"Sander Verhagen",
        "reputation":1635
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Conceptually, I would say, Maven is designed around the POM file which is a model of the project that is being built. It is not so much a process description that applies a function to an input and results in an output on basis of that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18656997]-[680189999]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Conceptually, I would say, Maven is designed around the POM file which is a model of the project that is being built. It is not so much a process description that applies a function to an input and results in an output on basis of that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pom":1,
                    "descript":1,
                    "basi":1,
                    "design":1,
                    "built":1,
                    "model":1,
                    "project":1,
                    "process":1,
                    "result":1,
                    "maven":1,
                    "function":1,
                    "file":1,
                    "output":1,
                    "appli":1,
                    "conceptu":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That being said, there is a lot possible with <code>properties</code> in the POM, which then can be passed along on the command-line: <code>-Dproperty=value</code>. It looks as if you would be able to pass the property to whatever process is generating the source code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18656997]-[-2096571230]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That being said, there is a lot possible with <code>properties</code> in the POM, which then can be passed along on the command-line: <code>-Dproperty=value</code>. It looks as if you would be able to pass the property to whatever process is generating the source code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pom":1,
                    "properti":2,
                    "line":1,
                    "process":1,
                    "command":1,
                    "code":5,
                    "dproperti":1,
                    "lot":1,
                    "pass":2,
                    "generat":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I may express some caution, though. I'm seeing some possible red flags in the overall design that you describe. If modules (regardless of their inheritance relationship) pass along files/folders, that should preferably go through <code>install</code>ation. So, if you were to do that, you end up with a version of the parent project in your local repository of which you don't really know what it is. Which parameters were used? And how will a user of that artifact then deal with that?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18656997]-[1819989299]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I may express some caution, though. I'm seeing some possible red flags in the overall design that you describe. If modules (regardless of their inheritance relationship) pass along files/folders, that should preferably go through <code>install</code>ation. So, if you were to do that, you end up with a version of the parent project in your local repository of which you don't really know what it is. Which parameters were used? And how will a user of that artifact then deal with that?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "parent":1,
                    "design":1,
                    "caution":1,
                    "project":1,
                    "ation":1,
                    "local":1,
                    "repositori":1,
                    "code":2,
                    "version":1,
                    "inherit":1,
                    "relationship":1,
                    "paramet":1,
                    "folder":1,
                    "instal":1,
                    "modul":1,
                    "express":1,
                    "flag":1,
                    "pass":1,
                    "end":1,
                    "file":1,
                    "describ":1,
                    "user":1,
                    "deal":1,
                    "red":1,
                    "artifact":1,
                    "prefer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I'm not saying this won't work, but it may get hairy and not play entirely well within more traditional Maven implementations.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18656997]-[-287549801]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I'm not saying this won't work, but it may get hairy and not play entirely well within more traditional Maven implementations.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tradit":1,
                    "play":1,
                    "work":1,
                    "maven":1,
                    "implement":1,
                    "hairi":1,
                    "won":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}