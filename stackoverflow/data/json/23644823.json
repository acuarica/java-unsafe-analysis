{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23644823,
    "title":"Hibernate ignore field on certain condition",
    "comments":[
      
    ],
    "tags":[
      "java",
      "hibernate"
    ],
    "creationDate":"2014-05-14",
    "lastActivityDate":"2014-05-14",
    "score":0,
    "viewCount":43,
    "owner":{
      "type":"StackOverflowUser",
      "id":1735186,
      "displayName":"Raymond",
      "reputation":169
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm new to hibernate and I'm having a problem in persist. In user class, it has <code>first_name</code>, <code>last_name</code>, <code>gender</code>, <code>address</code>, etc and I want only <code>Address</code> column field to ignore update to table when user's <code>gender</code> is only equals to <code>Female</code>. I googled and found out that I can use <code>@Transient</code> to ignore update but what I want is to ignore when certain condition is met and if not, I want to include <code>Address</code> in persist.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23644823]-[-120884723]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm new to hibernate and I'm having a problem in persist. In user class, it has <code>first_name</code>, <code>last_name</code>, <code>gender</code>, <code>address</code>, etc and I want only <code>Address</code> column field to ignore update to table when user's <code>gender</code> is only equals to <code>Female</code>. I googled and found out that I can use <code>@Transient</code> to ignore update but what I want is to ignore when certain condition is met and if not, I want to include <code>Address</code> in persist.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"first_name",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"last_name",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"AnnotationNode",
                  "identifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Transient",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ignor":3,
                  "googl":1,
                  "field":1,
                  "problem":1,
                  "hibern":1,
                  "condit":1,
                  "updat":2,
                  "met":1,
                  "includ":1,
                  "code":18,
                  "tabl":1,
                  "persist":2,
                  "found":1,
                  "equal":1,
                  "femal":1,
                  "address":3,
                  "column":1,
                  "user":2,
                  "gender":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible to do in hibernate?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23644823]-[-392164589]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible to do in hibernate?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "hibern":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":23648066,
      "questionId":23644823,
      "comments":[
        
      ],
      "creationDate":"2014-05-14",
      "lastActivityDate":"2014-05-14",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":909414,
        "displayName":"Rohit",
        "reputation":614
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A possible way to do this would be to amend the <code>setter</code> for address field. like </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23648066]-[-610259611]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A possible way to do this would be to amend the <code>setter</code> for address field. like </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "setter":1,
                    "amend":1,
                    "code":2,
                    "address":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>public void setAddress(String address) { if(!this.gender.equals(&quot;female&quot;) { this.address = address; } }</code></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23648066]-[-1859757486]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>public void setAddress(String address) { if(!this.gender.equals(&quot;female&quot;) { this.address = address; } }</code></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setAddress",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"String",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"address",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"=",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"this",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"address",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"address",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "set":1,
                    "code":2,
                    "equal":1,
                    "femal":1,
                    "address":4,
                    "quot":2,
                    "gender":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"address",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So when you persist the <code>User</code> address value would not be there for female users. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23648066]-[-537512710]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So when you persist the <code>User</code> address value would not be there for female users. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":2,
                    "persist":1,
                    "femal":1,
                    "address":1,
                    "user":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":23644863,
      "questionId":23644823,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":36312704,
          "postId":23644863,
          "creationDate":"2014-05-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":191367,
            "displayName":"KeatsPeeks",
            "reputation":9516
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Raymond I don't undersand why you would do such a thing, but you can still set a field to null after select, or select the fields one by one and manually build objects using those fields."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23644863-cu36312704]-[1037807297]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Raymond I don't undersand why you would do such a thing, but you can still set a field to null after select, or select the fields one by one and manually build objects using those fields."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Raymond",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "field":3,
                        "undersand":1,
                        "set":1,
                        "raymond":1,
                        "build":1,
                        "thing":1,
                        "object":1,
                        "select":2,
                        "manual":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":36312646,
          "postId":23644863,
          "creationDate":"2014-05-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1735186,
            "displayName":"Raymond",
            "reputation":169
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"thanks for your answer.. then how about in select? is it possible to ignore selecting that field on condition?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23644863-cu36312646]-[-426561532]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"thanks for your answer.. then how about in select? is it possible to ignore selecting that field on condition?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ignor":1,
                        "field":1,
                        "condit":1,
                        "select":2,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-05-14",
      "lastActivityDate":"2014-05-14",
      "lastEditDate":"2014-05-14",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":191367,
        "displayName":"KeatsPeeks",
        "reputation":9516
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Ignoring a field based of the value of another field in not the responsability of the <a href=\"http://en.wikipedia.org/wiki/Data_access_layer\"rel=\"nofollow\">Data Access Layer</a>. It should be the responsibility of the <a href=\"http://en.wikipedia.org/wiki/Business_logic\"rel=\"nofollow\">Business Logic Layer</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23644863]-[194841116]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Ignoring a field based of the value of another field in not the responsability of the <a href=\"http://en.wikipedia.org/wiki/Data_access_layer\"rel=\"nofollow\">Data Access Layer</a>. It should be the responsibility of the <a href=\"http://en.wikipedia.org/wiki/Business_logic\"rel=\"nofollow\">Business Logic Layer</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "ignor":1,
                    "field":2,
                    "data":2,
                    "rel":2,
                    "logic":2,
                    "base":1,
                    "layer":3,
                    "wikipedia":2,
                    "nofollow":2,
                    "busi":2,
                    "wiki":2,
                    "org":2,
                    "href":2,
                    "respons":2,
                    "http":2,
                    "access":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When your condition is met, just erase the new address with a copy of the old one before persisting.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23644863]-[-2060566176]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When your condition is met, just erase the new address with a copy of the old one before persisting.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "eras":1,
                    "condit":1,
                    "met":1,
                    "persist":1,
                    "address":1,
                    "copi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}