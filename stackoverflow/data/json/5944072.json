{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":5944072,
    "title":"Unsafe Class-loading Issue?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":7405589,
        "postId":5944072,
        "creationDate":"2011-06-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":61572,
          "displayName":"Ron",
          "reputation":1188
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"which java version &amp; jvm vendor? any bytecode injection or rewriting going on? custom classloaders?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7405589]-[-9825936]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"which java version &amp; jvm vendor? any bytecode injection or rewriting going on? custom classloaders?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "custom":1,
                      "bytecod":1,
                      "amp":1,
                      "version":1,
                      "inject":1,
                      "classload":1,
                      "rewrit":1,
                      "vendor":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7512466,
        "postId":5944072,
        "creationDate":"2011-06-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554670,
          "displayName":"LazyCubicleMonkey",
          "reputation":580
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I've found another solution. I put all the static final initializers in a synchronized block that synchronizes on the class. This should work since class-level locking is the same lock used when the jvm is loading the class, right?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7512466]-[-969393928]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I've found another solution. I put all the static final initializers in a synchronized block that synchronizes on the class. This should work since class-level locking is the same lock used when the jvm is loading the class, right?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "load":1,
                      "lock":2,
                      "work":1,
                      "found":1,
                      "block":1,
                      "put":1,
                      "initi":1,
                      "solut":1,
                      "level":1,
                      "synchron":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7463426,
        "postId":5944072,
        "creationDate":"2011-06-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":192444,
          "displayName":"John Vint",
          "reputation":21382
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What type of impossible situations are you seeing? Are you getting Exceptions?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7463426]-[-1446564426]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What type of impossible situations are you seeing? Are you getting Exceptions?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "situat":1,
                      "type":1,
                      "except":1,
                      "imposs":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7504042,
        "postId":5944072,
        "creationDate":"2011-06-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554670,
          "displayName":"LazyCubicleMonkey",
          "reputation":580
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"the 1.6.2x jvm."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7504042]-[50091171]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"the 1.6.2x jvm."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7504067,
        "postId":5944072,
        "creationDate":"2011-06-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554670,
          "displayName":"LazyCubicleMonkey",
          "reputation":580
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Here's what happens: I have a subclass with a bunch of static final variables that are initialized. The constructor calls a superclass that puts those variables inside of a globally-accessed map. Another thread references that map via an equals method. Example: Class B extends class A. Class B has a bunch of static final initializers. Class A constructor puts &quot;this&quot; into the globally accessed map. Another thread accesses this map via B.\n<variablename>\n .equals(map.get(...)). To initialize class B, those variables must be in B, yet the getter returns nothing. This only happens on rare occasions.\n</variablename>"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7504067]-[1061688624]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Here's what happens: I have a subclass with a bunch of static final variables that are initialized. The constructor calls a superclass that puts those variables inside of a globally-accessed map. Another thread references that map via an equals method. Example: Class B extends class A. Class B has a bunch of static final initializers. Class A constructor puts &quot;this&quot; into the globally accessed map. Another thread accesses this map via B.\n<variablename>\n .equals(map.get(...)). To initialize class B, those variables must be in B, yet the getter returns nothing. This only happens on rare occasions.\n</variablename>"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"A",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"B",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "subclass":1,
                      "map":5,
                      "return":1,
                      "constructor":2,
                      "bunch":2,
                      "superclass":1,
                      "getter":1,
                      "global":2,
                      "thread":2,
                      "equal":2,
                      "insid":1,
                      "rare":1,
                      "occas":1,
                      "refer":1,
                      "put":2,
                      "quot":2,
                      "initi":3,
                      "variabl":3,
                      "call":1,
                      "variablenam":2,
                      "access":3
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7504098,
        "postId":5944072,
        "creationDate":"2011-06-19",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@lazycubiclemonkey, Do you mean 1.6.0_02 or 1.6.0_20 or Java 6 update 26? If you are using the Unsafe class, you should be able to get the version of you JVM. :) If you want to be sure a class is loaded, why not use Class.forName()?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7504098]-[-125583846]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@lazycubiclemonkey, Do you mean 1.6.0_02 or 1.6.0_20 or Java 6 update 26? If you are using the Unsafe class, you should be able to get the version of you JVM. :) If you want to be sure a class is loaded, why not use Class.forName()?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"is",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Class",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"forName",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "updat":1,
                      "load":1,
                      "version":1,
                      "unsaf":1,
                      "lazycubiclemonkey":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":7471581,
        "postId":5944072,
        "creationDate":"2011-06-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"do you create the Field in static initializer?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5944072-cu7471581]-[-824964745]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"do you create the Field in static initializer?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "field":1,
                      "creat":1,
                      "initi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "unsafe"
    ],
    "creationDate":"2011-05-10",
    "lastActivityDate":"2013-10-09",
    "lastEditDate":"2011-06-13",
    "score":5,
    "viewCount":604,
    "owner":{
      "type":"StackOverflowUser",
      "id":554670,
      "displayName":"LazyCubicleMonkey",
      "reputation":580
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Unsafe has a method to ensure that classes are initialized:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5944072]-[1151049183]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Unsafe has a method to ensure that classes are initialized:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "class":1,
                  "initi":1,
                  "unsaf":1,
                  "ensur":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Unsafe.ensureClassInitialized(Class) line: not available [native method] "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5944072]-[-149372329]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Unsafe",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"ensureClassInitialized",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(Class) line: not available [native method] "
                }
              ]
            },
            "rawText":"UnsafeensureClassInitialized(Class) line: not available [native method] ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "line":1,
                  "unsafeensur":1,
                  "initi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I suspect that this type of initialization doesn't lock on the class like regular java class-loading because I've occasionally bumped into some impossible situations. I can give more details later if needed, but does anyone know if class-loading using Unsafe has quirks like that?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5944072]-[1410264155]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I suspect that this type of initialization doesn't lock on the class like regular java class-loading because I've occasionally bumped into some impossible situations. I can give more details later if needed, but does anyone know if class-loading using Unsafe has quirks like that?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"like",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "quirk":1,
                  "imposs":1,
                  "load":2,
                  "regular":1,
                  "lock":1,
                  "situat":1,
                  "need":1,
                  "suspect":1,
                  "give":1,
                  "initi":1,
                  "detail":1,
                  "unsaf":1,
                  "type":1,
                  "bump":1,
                  "occasion":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Btw, here's a short stack trace of how that class gets loaded up:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5944072]-[1613887093]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Btw, here's a short stack trace of how that class gets loaded up:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"gets",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "btw":1,
                  "stack":1,
                  "load":1,
                  "trace":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Unsafe.ensureClassInitialized(Class) line: not available [native method] UnsafeFieldAccessorFactory.newFieldAccessor(Field, boolean) line: 25 ReflectionFactory.newFieldAccessor(Field, boolean) line: 122 Field.acquireFieldAccessor(boolean) line: 918 Field.getFieldAccessor(Object) line: 899 Field.get(Object) line: 358 "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5944072]-[-311679010]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Unsafe",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"ensureClassInitialized",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(Class) line: not available [native method] "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"UnsafeFieldAccessorFactory",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"newFieldAccessor",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(Field, boolean) line: 25 "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"ReflectionFactory",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"newFieldAccessor",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(Field, boolean) line: 122 "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Field",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"acquireFieldAccessor",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(boolean) line: 918 "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Field",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"getFieldAccessor",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(Object) line: 899 Field.get(Object) line: 358 "
                }
              ]
            },
            "rawText":"UnsafeensureClassInitialized(Class) line: not available [native method] UnsafeFieldAccessorFactorynewFieldAccessor(Field, boolean) line: 25 ReflectionFactorynewFieldAccessor(Field, boolean) line: 122 FieldacquireFieldAccessor(boolean) line: 918 FieldgetFieldAccessor(Object) line: 899 Field.get(Object) line: 358 ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "fieldget":1,
                  "field":8,
                  "line":6,
                  "object":2,
                  "accessor":5,
                  "fieldacquir":1,
                  "unsafeensur":1,
                  "factorynew":2,
                  "initi":1,
                  "unsaf":1,
                  "reflect":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":6365011,
      "questionId":5944072,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":7470887,
          "postId":6365011,
          "creationDate":"2011-06-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"actually the entire idea to clear the fields of the the classes loaded by a certain classloader in order to release the classloader is weird. There are 2 ways to leak stuff, running threads (+JNI references) and references outside the web-app. The references inside the webapp won't leak anything on their own as they are outgoing, not incoming. So setting the fields to nil doesn't help much."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6365011-cu7470887]-[-1542879766]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"actually the entire idea to clear the fields of the the classes loaded by a certain classloader in order to release the classloader is weird. There are 2 ways to leak stuff, running threads (+JNI references) and references outside the web-app. The references inside the webapp won't leak anything on their own as they are outgoing, not incoming. So setting the fields to nil doesn't help much."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "weird":1,
                        "outgo":1,
                        "field":2,
                        "clear":1,
                        "run":1,
                        "set":1,
                        "idea":1,
                        "leak":2,
                        "load":1,
                        "entir":1,
                        "way":1,
                        "nil":1,
                        "web":1,
                        "jni":1,
                        "webapp":1,
                        "thread":1,
                        "releas":1,
                        "insid":1,
                        "order":1,
                        "stuff":1,
                        "refer":3,
                        "incom":1,
                        "app":1,
                        "class":1,
                        "classload":2,
                        "won":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-06-15",
      "lastActivityDate":"2011-06-15",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":699224,
        "displayName":"DNA",
        "reputation":19349
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There's a similar issue here: <a href=\"https://issues.apache.org/bugzilla/show_bug.cgi?id=43867\"rel=\"nofollow\">https://issues.apache.org/bugzilla/show_bug.cgi?id=43867</a> (search for &quot;Unsafe&quot; to jump to the relevant section) which might be of assistance, though it's hard to tell without more context and code...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6365011]-[926975303]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There's a similar issue here: <a href=\"https://issues.apache.org/bugzilla/show_bug.cgi?id=43867\"rel=\"nofollow\">https://issues.apache.org/bugzilla/show_bug.cgi?id=43867</a> (search for &quot;Unsafe&quot; to jump to the relevant section) which might be of assistance, though it's hard to tell without more context and code...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"IdentifierNode",
                    "name":"show_bug",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "apach":2,
                    "show":2,
                    "hard":1,
                    "jump":1,
                    "similar":1,
                    "context":1,
                    "rel":1,
                    "relev":1,
                    "issu":3,
                    "https":2,
                    "section":1,
                    "code":1,
                    "nofollow":1,
                    "bug":2,
                    "quot":2,
                    "unsaf":1,
                    "org":2,
                    "href":1,
                    "assist":1,
                    "bugzilla":2,
                    "cgi":2,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Tomcat, in the desire to clear out the static fields within a class by using reflection, has unwittingly caused the class init code to be rerun due to the way that reflection works. When it hits this code that tries to use the log factory, it doesn't know that it has already broken the logfactory by setting fields within the logfactory to null.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6365011]-[-101394501]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Tomcat, in the desire to clear out the static fields within a class by using reflection, has unwittingly caused the class init code to be rerun due to the way that reflection works. When it hits this code that tries to use the log factory, it doesn't know that it has already broken the logfactory by setting fields within the logfactory to null.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"by",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"init",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "due":1,
                    "rerun":1,
                    "field":2,
                    "clear":1,
                    "hit":1,
                    "set":1,
                    "work":1,
                    "factori":1,
                    "blockquot":2,
                    "code":2,
                    "caus":1,
                    "tomcat":1,
                    "unwit":1,
                    "desir":1,
                    "init":1,
                    "reflect":2,
                    "logfactori":2,
                    "log":1,
                    "broken":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So clearing of fields by reflection (directly or by using Tomcat) could be an issue...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6365011]-[-792538581]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So clearing of fields by reflection (directly or by using Tomcat) could be an issue...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "clear":1,
                    "issu":1,
                    "direct":1,
                    "tomcat":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19276563,
      "questionId":5944072,
      "comments":[
        
      ],
      "creationDate":"2013-10-09",
      "lastActivityDate":"2013-10-09",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":38896,
        "displayName":"JodaStephen",
        "reputation":8652
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For reference and web seaches, it turns out that you can force class initialization without using <code>Unsafe</code>:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19276563]-[-1590725237]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For reference and web seaches, it turns out that you can force class initialization without using <code>Unsafe</code>:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"initialization",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "seach":1,
                    "code":2,
                    "web":1,
                    "refer":1,
                    "turn":1,
                    "initi":1,
                    "unsaf":1,
                    "forc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code> Class.forName(cls.getName(), true, cls.getClassLoader()); </code></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19276563]-[1888570996]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code> Class.forName(cls.getName(), true, cls.getClassLoader()); </code></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Class",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"forName",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"cls",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getName",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"true"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"cls",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getClassLoader",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cls":2,
                    "code":2,
                    "true":1,
                    "loader":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Class",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"forName",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"cls",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getName",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"cls",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getClassLoader",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"cls",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getName",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"cls",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getClassLoader",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Not pretty, but it works.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19276563]-[-1442603774]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Not pretty, but it works.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "work":1,
                    "pretti":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}