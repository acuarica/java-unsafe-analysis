{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":23801897,
    "title":"How can Java Write/Read hardware ports like C does? (outb, inb etc..)",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":36611660,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":992484,
          "displayName":"MadProgrammer",
          "reputation":182649
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Write some JNI to do it for you"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36611660]-[-1341344279]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Write some JNI to do it for you"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jni":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36611675,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2087705,
          "displayName":"Suvarna",
          "reputation":3100
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I am not sure if this is entirely related, but see [this](http://stackoverflow.com/questions/8925489/pc-hardware-port-access-from-java-on-linux) link"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36611675]-[-1578772474]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I am not sure if this is entirely related, but see [this](http://stackoverflow.com/questions/8925489/pc-hardware-port-access-from-java-on-linux) link"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "relat":1,
                      "stackoverflow":1,
                      "port":1,
                      "link":1,
                      "hardwar":1,
                      "linux":1,
                      "http":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36611775,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3658314,
          "displayName":"Baalthasarr",
          "reputation":354
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"[programmers.stackexchange](http://programmers.stackexchange.com/questions/207196/do-pointers-really-exist-in-java)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36611775]-[1651817396]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"[programmers.stackexchange](http://programmers.stackexchange.com/questions/207196/do-pointers-really-exist-in-java)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "pointer":1,
                      "exist":1,
                      "programm":2,
                      "stackexchang":2,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36612078,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2057294,
          "displayName":"skiwi",
          "reputation":10334
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You *could* also accomplish it via `sun.misc.Unsafe` possibly, but I didn't advice that."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36612078]-[-1514483527]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You *could* also accomplish it via `sun.misc.Unsafe` possibly, but I didn't advice that."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "advic":1,
                      "sun":1,
                      "possibl":1,
                      "accomplish":1,
                      "misc":1,
                      "unsaf":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36612482,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2187042,
          "displayName":"Richard Tingle",
          "reputation":8323
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"People talking about unsafe are I believe correct; although it is called &quot;unsafe&quot; for a reason and is undocumented by design. What are you trying to achieve? There is usually a better way to achieve things that going through the dark arts"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36612482]-[458449573]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"People talking about unsafe are I believe correct; although it is called &quot;unsafe&quot; for a reason and is undocumented by design. What are you trying to achieve? There is usually a better way to achieve things that going through the dark arts"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "art":1,
                      "design":1,
                      "correct":1,
                      "talk":1,
                      "thing":1,
                      "reason":1,
                      "dark":1,
                      "undocu":1,
                      "achiev":2,
                      "quot":2,
                      "unsaf":2,
                      "peopl":1,
                      "call":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36668753,
        "postId":23801897,
        "creationDate":"2014-05-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":125389,
          "displayName":"Kevin Panko",
          "reputation":4991
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"A related question: http://stackoverflow.com/questions/8960620/low-level-i-o-access-using-outb-and-inb"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36668753]-[-1989357632]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"A related question: http://stackoverflow.com/questions/8960620/low-level-i-o-access-using-outb-and-inb"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":2,
                      "relat":1,
                      "inb":1,
                      "stackoverflow":1,
                      "low":1,
                      "outb":1,
                      "http":1,
                      "access":1,
                      "level":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36669063,
        "postId":23801897,
        "creationDate":"2014-05-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":125389,
          "displayName":"Kevin Panko",
          "reputation":4991
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@immibis The `inb` and `outb` functions can be called outside of the kernel, but they require special permissions."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36669063]-[-425902403]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@immibis The `inb` and `outb` functions can be called outside of the kernel, but they require special permissions."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "kernel":1,
                      "permiss":1,
                      "immibi":1,
                      "requir":1,
                      "inb":1,
                      "function":1,
                      "outb":1,
                      "special":1,
                      "call":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36669194,
        "postId":23801897,
        "creationDate":"2014-05-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":125389,
          "displayName":"Kevin Panko",
          "reputation":4991
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Duplicate question: http://stackoverflow.com/questions/8925489/pc-hardware-port-access-from-java-on-linux"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36669194]-[377065849]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Duplicate question: http://stackoverflow.com/questions/8925489/pc-hardware-port-access-from-java-on-linux"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":2,
                      "stackoverflow":1,
                      "port":1,
                      "hardwar":1,
                      "linux":1,
                      "duplic":1,
                      "http":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":36613464,
        "postId":23801897,
        "creationDate":"2014-05-22",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":106104,
          "displayName":"immibis",
          "reputation":11558
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"This is not memory access. This is I/O port access, and I/O ports are not the same as memory. You can't access them even with sun.misc.Unsafe, and I didn't know you could access them outside the kernel at all. You will need to use JNI or find a pre-existing library (that uses JNI). (Edit: This depends on the architecture. x86 processors have a separate concept of I/O ports, but this might not be one)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[23801897-cu36613464]-[586717403]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"This is not memory access. This is I/O port access, and I/O ports are not the same as memory. You can't access them even with sun.misc.Unsafe, and I didn't know you could access them outside the kernel at all. You will need to use JNI or find a pre-existing library (that uses JNI). (Edit: This depends on the architecture. x86 processors have a separate concept of I/O ports, but this might not be one)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pre":1,
                      "find":1,
                      "kernel":1,
                      "depend":1,
                      "exist":1,
                      "sun":1,
                      "separ":1,
                      "librari":1,
                      "jni":2,
                      "edit":1,
                      "port":3,
                      "processor":1,
                      "architectur":1,
                      "misc":1,
                      "concept":1,
                      "unsaf":1,
                      "access":4,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "hardware-port"
    ],
    "creationDate":"2014-05-22",
    "lastActivityDate":"2014-05-23",
    "lastEditDate":"2014-05-23",
    "closedDate":"2014-05-23",
    "score":1,
    "viewCount":112,
    "owner":{
      "type":"StackOverflowUser",
      "id":3613008,
      "displayName":"The_Reaper",
      "reputation":68
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I've a C application. This application writes and reads some I/O port addresses.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23801897]-[1045333708]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I've a C application. This application writes and reads some I/O port addresses.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "port":1,
                  "applic":2,
                  "address":1,
                  "write":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I think that Java can't access low level I/O address natively. Am I right?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23801897]-[222693001]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I think that Java can't access low level I/O address natively. Am I right?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "nativ":1,
                  "low":1,
                  "address":1,
                  "access":1,
                  "level":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Here is an example of C++ app:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23801897]-[-1037720569]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Here is an example of C++ app:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "app":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"#include &lt;malloc.h&gt; #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; #include &lt;iostream&gt; #include &lt;sys/io.h&gt; int main(int argc, char *argv[]) { cout &lt;&lt; &quot;Refresh watchdog program&quot; &lt;&lt; endl; outb(0x87,0x2E); //Extended Function Mode outb(0x30,0x2E); //Set Watch Dog Timer Activate outb(0x01,0x2F); int reg = inb(0x2f); outb(reg|0x08, 0x2f); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[23801897]-[1619984202]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"#include "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"malloc.h"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" #include "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"stdlib.h"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" #include "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"stdio.h"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" #include "
                },
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"iostream"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" #include <sys/io.h> int main(int argc, char *argv[]) "
                },
                {
                  "type":"BlockDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"<<",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"<<",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"cout",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"Refresh watchdog program\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"endl",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"outb",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"0x87"
                                },
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"0x2E"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            {
                              "text":"//Extended Function Mode outb(0x30,0x2E); //Set Watch Dog Timer Activate outb(0x01,0x2F); int reg = inb(0x2f); outb(reg|0x08, 0x2f); } \n"
                            }
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                }
              ]
            },
            "rawText":"#include <malloc.h> #include <stdlib.h> #include <stdio.h> #include <iostream> #include <sys/io.h> int main(int argc, char *argv[]) { cout << \"Refresh watchdog program\"<< endl; outb(0x87,0x2E); //Extended Function Mode outb(0x30,0x2E); //Set Watch Dog Timer Activate outb(0x01,0x2F); int reg = inb(0x2f); outb(reg|0x08, 0x2f); } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "argc":1,
                  "refresh":1,
                  "reg":2,
                  "stdio":1,
                  "watchdog":1,
                  "malloc":1,
                  "set":1,
                  "watch":1,
                  "iostream":1,
                  "dog":1,
                  "main":1,
                  "inb":1,
                  "sys":1,
                  "extend":1,
                  "includ":5,
                  "activ":1,
                  "argv":1,
                  "function":1,
                  "endl":1,
                  "mode":1,
                  "cout":1,
                  "outb":4,
                  "stdlib":1,
                  "timer":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"outb",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0x87"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0x2E"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"//Extended Function Mode outb(0x30,0x2E); //Set Watch Dog Timer Activate outb(0x01,0x2F); int reg = inb(0x2f); outb(reg|0x08, 0x2f); } \n"
                      }
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>How can I do the same in Java?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[23801897]-[1817891194]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>How can I do the same in Java?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":23802287,
      "questionId":23801897,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":36668388,
          "postId":23802287,
          "creationDate":"2014-05-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":125389,
            "displayName":"Kevin Panko",
            "reputation":4991
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This is a totally different type of I/O. It's not memory access that `Unsafe` would be able to do."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23802287-cu36668388]-[1773972355]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This is a totally different type of I/O. It's not memory access that `Unsafe` would be able to do."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "total":1,
                        "unsaf":1,
                        "type":1,
                        "access":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-05-22",
      "lastActivityDate":"2014-05-22",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3533191,
        "displayName":"Syam S",
        "reputation":4332
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I think sun.misc.Unsafe might help you for this. It has methods like <code>void putAddress(long address, long value)</code> that may suit your need. To be honest I haven't worked on this but you could know more about it from</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[83106135]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I think sun.misc.Unsafe might help you for this. It has methods like <code>void putAddress(long address, long value)</code> that may suit your need. To be honest I haven't worked on this but you could know more about it from</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"putAddress",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "sun":1,
                    "suit":1,
                    "work":1,
                    "code":2,
                    "misc":1,
                    "address":2,
                    "put":1,
                    "unsaf":1,
                    "honest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://mydailyjava.blogspot.co.uk/2013/12/sunmiscunsafe.html\"rel=\"nofollow\">http://mydailyjava.blogspot.co.uk/2013/12/sunmiscunsafe.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[-1350505200]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://mydailyjava.blogspot.co.uk/2013/12/sunmiscunsafe.html\"rel=\"nofollow\">http://mydailyjava.blogspot.co.uk/2013/12/sunmiscunsafe.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sunmiscunsaf":2,
                    "rel":1,
                    "blogspot":2,
                    "mydailyjava":2,
                    "nofollow":1,
                    "html":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[-1930307598]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":4,
                    "github":2,
                    "sun":2,
                    "rel":1,
                    "blog":2,
                    "nofollow":1,
                    "misc":2,
                    "magic":2,
                    "unsaf":2,
                    "part":2,
                    "href":1,
                    "http":2,
                    "mishadoff":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[-452626914]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "highlyscal":2,
                    "wordpress":2,
                    "rel":1,
                    "direct":2,
                    "nofollow":1,
                    "href":1,
                    "http":2,
                    "access":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A small sample program could be found on</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[-1232783156]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A small sample program could be found on</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "found":1,
                    "small":1,
                    "program":1,
                    "sampl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java\"rel=\"nofollow\">http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23802287]-[834011196]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java\"rel=\"nofollow\">http://robaustin.wikidot.com/how-to-write-to-direct-memory-locations-in-java</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "robaustin":2,
                    "rel":1,
                    "direct":2,
                    "nofollow":1,
                    "href":1,
                    "http":2,
                    "wikidot":2,
                    "write":2,
                    "locat":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}