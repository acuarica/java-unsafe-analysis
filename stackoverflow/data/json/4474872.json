{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":4474872,
    "title":"Need an Objective-C version of Java Encryption and Base 64 encoding that I already have",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":4892155,
        "postId":4474872,
        "creationDate":"2010-12-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":9990,
          "displayName":"Marcelo Cantos",
          "reputation":98208
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't understand why you would inject a space into the stackoverflow link. Are you trying to refer to that question or using it as an example URL? What am I missing?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4474872-cu4892155]-[1848088924]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't understand why you would inject a space into the stackoverflow link. Are you trying to refer to that question or using it as an example URL? What am I missing?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "url":1,
                      "understand":1,
                      "miss":1,
                      "stackoverflow":1,
                      "space":1,
                      "link":1,
                      "refer":1,
                      "inject":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4892173,
        "postId":4474872,
        "creationDate":"2010-12-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":546547,
          "displayName":"Angelo Stracquatanio",
          "reputation":42
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"because im new i cant post more then 1 hyperlink, so to still include it i had to hack it"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4474872-cu4892173]-[209552767]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"because im new i cant post more then 1 hyperlink, so to still include it i had to hack it"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "includ":1,
                      "hack":1,
                      "hyperlink":1,
                      "post":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":4892209,
        "postId":4474872,
        "creationDate":"2010-12-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":546547,
          "displayName":"Angelo Stracquatanio",
          "reputation":42
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"stack overflow has been a HUGE help to me in the past and this is my first post, but i didnt know how to still show everything i needed to without posting a ton of code. I fully appologize if it seems like I am overstepping any rules. When I first posted it stopped me because of the hyperlinks, but the reason they gave was to mitigate spam."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4474872-cu4892209]-[-1268415453]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"stack overflow has been a HUGE help to me in the past and this is my first post, but i didnt know how to still show everything i needed to without posting a ton of code. I fully appologize if it seems like I am overstepping any rules. When I first posted it stopped me because of the hyperlinks, but the reason they gave was to mitigate spam."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "post":3,
                      "mitig":1,
                      "huge":1,
                      "show":1,
                      "overflow":1,
                      "appolog":1,
                      "rule":1,
                      "ton":1,
                      "reason":1,
                      "stop":1,
                      "code":1,
                      "need":1,
                      "gave":1,
                      "stack":1,
                      "fulli":1,
                      "hyperlink":1,
                      "didnt":1,
                      "spam":1,
                      "overstep":1,
                      "past":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "c#",
      "java",
      "iphone",
      "android",
      "objective-c"
    ],
    "creationDate":"2010-12-17",
    "lastActivityDate":"2010-12-17",
    "lastEditDate":"2010-12-17",
    "score":1,
    "viewCount":954,
    "owner":{
      "type":"StackOverflowUser",
      "id":546547,
      "displayName":"Angelo Stracquatanio",
      "reputation":42
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a Java class that encrypts a string and then converts it to Base64, which is used in an Android Application: (this code was used from this example (note the spaces in the hyperlink): http ://stackoverflow.com/ questions/2090765/encryption-compatable-between-android-and-c)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[949192124]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a Java class that encrypts a string and then converts it to Base64, which is used in an Android Application: (this code was used from this example (note the spaces in the hyperlink): http ://stackoverflow.com/ questions/2090765/encryption-compatable-between-android-and-c)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"that",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "encrypt":2,
                  "base":1,
                  "code":1,
                  "stackoverflow":1,
                  "space":1,
                  "note":1,
                  "applic":1,
                  "hyperlink":1,
                  "http":1,
                  "convert":1,
                  "android":2,
                  "compat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public class encryption { public static final String TAG = &quot;smsfwd&quot; private static Cipher aesCipher; private static SecretKey secretKey; private static IvParameterSpec ivParameterSpec; private static String CIPHER_TRANSFORMATION = &quot;AES/CBC/PKCS5Padding&quot;; private static String CIPHER_ALGORITHM = &quot;AES&quot;; //the secret key in HEX is 'secretkey' private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; private static String MESSAGEDIGEST_ALGORITHM = &quot;MD5&quot;; public encryption(String passphrase) { byte[] passwordKey = encodeDigest(passphrase); try { aesCipher = Cipher.getInstance(CIPHER_TRANSFORMATION); } catch (NoSuchAlgorithmException e) { Log.e(TAG, &quot;No such algorithm &quot; + CIPHER_ALGORITHM, e); } catch (NoSuchPaddingException e) { Log.e(TAG, &quot;No such padding PKCS5&quot;, e); } secretKey = new SecretKeySpec(passwordKey, CIPHER_ALGORITHM); ivParameterSpec = new IvParameterSpec(rawSecretKey); } //base 64 encryption public String encryptAsBase64(byte[] clearData) { byte[] encryptedData = encrypt(clearData); return base64.encodeBytes(encryptedData); } public byte[] encrypt(byte[] clearData) { try { aesCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec); } catch (InvalidKeyException e) { Log.e(TAG, &quot;Invalid key&quot;, e); return null; } catch (InvalidAlgorithmParameterException e) { Log.e(TAG, &quot;Invalid algorithm &quot; + CIPHER_ALGORITHM, e); return null; } byte[] encryptedData; try { encryptedData = aesCipher.doFinal(clearData); } catch (IllegalBlockSizeException e) { Log.e(TAG, &quot;Illegal block size&quot;, e); return null; } catch (BadPaddingException e) { Log.e(TAG, &quot;Bad padding&quot;, e); return null; } return encryptedData; } private byte[] encodeDigest(String text) { MessageDigest digest; try { digest = MessageDigest.getInstance(MESSAGEDIGEST_ALGORITHM); return digest.digest(text.getBytes()); } catch (NoSuchAlgorithmException e) { Log.e(TAG, &quot;No such algorithm &quot; + MESSAGEDIGEST_ALGORITHM, e); } return null; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[4474872]-[-1661764014]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"CompilationUnitNode",
                  "imports":[
                    
                  ],
                  "typeDeclarations":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        {
                          "type":"KeywordModifierNode",
                          "value":"public",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"encryption",
                        "comments":[
                          
                        ]
                      },
                      "body":{
                        "type":"ClassBodyNode",
                        "declarations":[
                          {
                            "type":"TextFragmentNode",
                            "text":"public static final String TAG = \"smsfwd\" private static "
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"aesCipher",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"Cipher",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"secretKey",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"SecretKey",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"ivParameterSpec",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"IvParameterSpec",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"CIPHER_TRANSFORMATION",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"StringLiteralNode",
                                          "valueRep":"\"AES/CBC/PKCS5Padding\""
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"FieldDeclaratorNode",
                            "modifiers":[
                              {
                                "type":"KeywordModifierNode",
                                "value":"private",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"KeywordModifierNode",
                                "value":"static",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "variables":{
                              "type":"VariableDeclaratorsNode",
                              "declarators":[
                                {
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"CIPHER_ALGORITHM",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ],
                                  "assignment":{
                                    "type":"VariableAssignmentNode",
                                    "variableAssignment":{
                                      "type":"VariableExpressionInitNode",
                                      "expression":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"StringLiteralNode",
                                          "valueRep":"\"AES\""
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "varType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              {
                                "text":"//the secret key in HEX is 'secretkey' private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; private static String MESSAGEDIGEST_ALGORITHM = \"MD5\"; public encryption(String passphrase) { byte[] passwordKey = encodeDigest(passphrase); try { aesCipher = Cipher.getInstance(CIPHER_TRANSFORMATION); } catch (NoSuchAlgorithmException e) { Log.e(TAG, \"No such algorithm \" + CIPHER_ALGORITHM, e); } catch (NoSuchPaddingException e) { Log.e(TAG, \"No such padding PKCS5\", e); } secretKey = new SecretKeySpec(passwordKey, CIPHER_ALGORITHM); ivParameterSpec = new IvParameterSpec(rawSecretKey); } //base 64 encryption public String encryptAsBase64(byte[] clearData) { byte[] encryptedData = encrypt(clearData); return base64.encodeBytes(encryptedData); } public byte[] encrypt(byte[] clearData) { try { aesCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec); } catch (InvalidKeyException e) { Log.e(TAG, \"Invalid key\", e); return null; } catch (InvalidAlgorithmParameterException e) { Log.e(TAG, \"Invalid algorithm \" + CIPHER_ALGORITHM, e); return null; } byte[] encryptedData; try { encryptedData = aesCipher.doFinal(clearData); } catch (IllegalBlockSizeException e) { Log.e(TAG, \"Illegal block size\", e); return null; } catch (BadPaddingException e) { Log.e(TAG, \"Bad padding\", e); return null; } return encryptedData; } private byte[] encodeDigest(String text) { MessageDigest digest; try { digest = MessageDigest.getInstance(MESSAGEDIGEST_ALGORITHM); return digest.digest(text.getBytes()); } catch (NoSuchAlgorithmException e) { Log.e(TAG, \"No such algorithm \" + MESSAGEDIGEST_ALGORITHM, e); } return null; } \n"
                              }
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                }
              ]
            },
            "rawText":"public class encryption { public static final String TAG = \"smsfwd\" private static Cipher aesCipher; private static SecretKey secretKey; private static IvParameterSpec ivParameterSpec; private static String CIPHER_TRANSFORMATION = \"AES/CBC/PKCS5Padding\"; private static String CIPHER_ALGORITHM = \"AES\"; //the secret key in HEX is 'secretkey' private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; private static String MESSAGEDIGEST_ALGORITHM = \"MD5\"; public encryption(String passphrase) { byte[] passwordKey = encodeDigest(passphrase); try { aesCipher = Cipher.getInstance(CIPHER_TRANSFORMATION); } catch (NoSuchAlgorithmException e) { Log.e(TAG, \"No such algorithm \" + CIPHER_ALGORITHM, e); } catch (NoSuchPaddingException e) { Log.e(TAG, \"No such padding PKCS5\", e); } secretKey = new SecretKeySpec(passwordKey, CIPHER_ALGORITHM); ivParameterSpec = new IvParameterSpec(rawSecretKey); } //base 64 encryption public String encryptAsBase64(byte[] clearData) { byte[] encryptedData = encrypt(clearData); return base64.encodeBytes(encryptedData); } public byte[] encrypt(byte[] clearData) { try { aesCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec); } catch (InvalidKeyException e) { Log.e(TAG, \"Invalid key\", e); return null; } catch (InvalidAlgorithmParameterException e) { Log.e(TAG, \"Invalid algorithm \" + CIPHER_ALGORITHM, e); return null; } byte[] encryptedData; try { encryptedData = aesCipher.doFinal(clearData); } catch (IllegalBlockSizeException e) { Log.e(TAG, \"Illegal block size\", e); return null; } catch (BadPaddingException e) { Log.e(TAG, \"Bad padding\", e); return null; } return encryptedData; } private byte[] encodeDigest(String text) { MessageDigest digest; try { digest = MessageDigest.getInstance(MESSAGEDIGEST_ALGORITHM); return digest.digest(text.getBytes()); } catch (NoSuchAlgorithmException e) { Log.e(TAG, \"No such algorithm \" + MESSAGEDIGEST_ALGORITHM, e); } return null; } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "secret":8,
                  "ae":6,
                  "hex":1,
                  "size":2,
                  "digest":8,
                  "tag":8,
                  "clear":4,
                  "data":9,
                  "bad":2,
                  "encrypt":12,
                  "text":2,
                  "pkcs":2,
                  "pad":5,
                  "base":3,
                  "key":12,
                  "encod":3,
                  "block":2,
                  "paramet":6,
                  "cipher":13,
                  "algorithm":13,
                  "raw":2,
                  "invalid":4,
                  "illeg":2,
                  "cbc":1,
                  "spec":6,
                  "mode":1,
                  "messag":2,
                  "passphras":2,
                  "smsfwd":1,
                  "secretkey":1,
                  "byte":2,
                  "transform":2,
                  "init":1,
                  "log":7,
                  "messagedigest":3,
                  "instanc":2,
                  "password":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Cipher",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SecretKey",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"IvParameterSpec",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"aesCipher",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Cipher",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"ivParameterSpec",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IvParameterSpec",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"CIPHER_TRANSFORMATION",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"AES/CBC/PKCS5Padding\""
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"secretKey",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SecretKey",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"CIPHER_ALGORITHM",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"AES\""
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>}</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-297114188]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>}</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>And the base 64 encryption comes from (note the spaces in the hyperlink) http ://iharder.sourceforge.net/current/java/base64/ </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-1796379583]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>And the base 64 encryption comes from (note the spaces in the hyperlink) http ://iharder.sourceforge.net/current/java/base64/ </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sourceforg":1,
                  "ihard":1,
                  "encrypt":1,
                  "net":1,
                  "base":2,
                  "space":1,
                  "note":1,
                  "hyperlink":1,
                  "current":1,
                  "http":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What happens is that this gets passed to a C#/.net server for decryption and everything works great on the Android. The issue is now converting this to Objective-C for use on the iPhone.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-1207388385]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What happens is that this gets passed to a C#/.net server for decryption and everything works great on the Android. The issue is now converting this to Objective-C for use on the iPhone.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"iPhone",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "server":1,
                  "issu":1,
                  "work":1,
                  "net":1,
                  "object":1,
                  "decrypt":1,
                  "pass":1,
                  "great":1,
                  "convert":1,
                  "phone":1,
                  "android":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have done a lot of research and the answer that has come closest is <a href=\"http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/\"rel=\"nofollow\">http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[1275942809]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have done a lot of research and the answer that has come closest is <a href=\"http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/\"rel=\"nofollow\">http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ae":2,
                  "research":1,
                  "interoper":2,
                  "rel":1,
                  "iphon":2,
                  "net":4,
                  "nofollow":1,
                  "lot":1,
                  "answer":1,
                  "rationalmind":2,
                  "dotmac":2,
                  "href":1,
                  "http":2,
                  "closest":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>However, when I use that example (code taken straight from the downloaded zip), I'm getting a 'Padding is invalid and cannot be removed.' error server side.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-2003785671]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>However, when I use that example (code taken straight from the downloaded zip), I'm getting a 'Padding is invalid and cannot be removed.' error server side.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":1,
                  "remov":1,
                  "server":1,
                  "zip":1,
                  "pad":1,
                  "code":1,
                  "error":1,
                  "invalid":1,
                  "straight":1,
                  "download":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My server side code is:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-1629695820]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My server side code is:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":1,
                  "code":1,
                  "server":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Text; using System.Security.Cryptography; namespace test.Business { public class Crypto { private ICryptoTransform rijndaelDecryptor; // Replace me with a 16-byte key, share between Java and C# private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; public Crypto(string passphrase, bool encrypt) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); if(encrypt) rijndaelDecryptor = rijndael.CreateEncryptor(passwordKey, rawSecretKey); else rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } public Crypto(string passphrase) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } private string Decrypt(byte[] encryptedData) { byte[] newClearData; try { newClearData = rijndaelDecryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length); } catch { throw; } return Encoding.ASCII.GetString(newClearData); } internal string DecyptString(string token) { //UTF8Encoding utf8 = new UTF8Encoding(); return Decrypt(ASCIIEncoding.ASCII.GetBytes(token)); } internal string DecryptFromBase64(string encryptedBase64) { return Decrypt(Convert.FromBase64String(encryptedBase64)); } private byte[] encodeDigest(string text) { MD5CryptoServiceProvider x = new System.Security.Cryptography.MD5CryptoServiceProvider(); byte[] data = Encoding.ASCII.GetBytes(text); return x.ComputeHash(data); } //Encryption Code public string EncryptAsBase64(string strData) { byte[] clearData = Encoding.ASCII.GetBytes(strData); byte[] encryptedData = Encrypt(clearData); return Convert.ToBase64String(encryptedData); } public byte[] Encrypt(byte[] clearData) { byte[] test1 = new byte[clearData.Length]; try { test1 = rijndaelDecryptor.TransformFinalBlock(clearData, 0, clearData.Length); } catch { throw; } return test1; } } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[4474872]-[1210799972]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"using System; using "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Collections",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Generic",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"; using System.Linq; using System.Web; using System.Text; using "
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Security",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Cryptography",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"; namespace test.Business "
                },
                {
                  "type":"BlockDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Crypto",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"rijndaelDecryptor",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"ICryptoTransform",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                {
                                  "text":"// Replace me with a 16-byte key, share between Java and C# private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; public Crypto(string passphrase, bool encrypt) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); if(encrypt) rijndaelDecryptor = rijndael.CreateEncryptor(passwordKey, rawSecretKey); else rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } public Crypto(string passphrase) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } private string Decrypt(byte[] encryptedData) { byte[] newClearData; try { newClearData = rijndaelDecryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length); } catch { throw; } return Encoding.ASCII.GetString(newClearData); } internal string DecyptString(string token) { //UTF8Encoding utf8 = new UTF8Encoding(); return Decrypt(ASCIIEncoding.ASCII.GetBytes(token)); } internal string DecryptFromBase64(string encryptedBase64) { return Decrypt(Convert.FromBase64String(encryptedBase64)); } private byte[] encodeDigest(string text) { MD5CryptoServiceProvider x = new System.Security.Cryptography.MD5CryptoServiceProvider(); byte[] data = Encoding.ASCII.GetBytes(text); return x.ComputeHash(data); } //Encryption Code public string EncryptAsBase64(string strData) { byte[] clearData = Encoding.ASCII.GetBytes(strData); byte[] encryptedData = Encrypt(clearData); return Convert.ToBase64String(encryptedData); } public byte[] Encrypt(byte[] clearData) { byte[] test1 = new byte[clearData.Length]; try { test1 = rijndaelDecryptor.TransformFinalBlock(clearData, 0, clearData.Length); } catch { throw; } return test1; } } } \n"
                                }
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                }
              ]
            },
            "rawText":"using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Text; using System.Security.Cryptography; namespace test.Business { public class Crypto { private ICryptoTransform rijndaelDecryptor; // Replace me with a 16-byte key, share between Java and C# private static byte[] rawSecretKey = {Ox73, Ox65, Ox63, Ox72, Ox65, Ox74, Ox6B, Ox65, Ox79}; public Crypto(string passphrase, bool encrypt) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); if(encrypt) rijndaelDecryptor = rijndael.CreateEncryptor(passwordKey, rawSecretKey); else rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } public Crypto(string passphrase) { byte[] passwordKey = encodeDigest(passphrase); RijndaelManaged rijndael = new RijndaelManaged(); rijndaelDecryptor = rijndael.CreateDecryptor(passwordKey, rawSecretKey); } private string Decrypt(byte[] encryptedData) { byte[] newClearData; try { newClearData = rijndaelDecryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length); } catch { throw; } return Encoding.ASCII.GetString(newClearData); } internal string DecyptString(string token) { //UTF8Encoding utf8 = new UTF8Encoding(); return Decrypt(ASCIIEncoding.ASCII.GetBytes(token)); } internal string DecryptFromBase64(string encryptedBase64) { return Decrypt(Convert.FromBase64String(encryptedBase64)); } private byte[] encodeDigest(string text) { MD5CryptoServiceProvider x = new System.Security.Cryptography.MD5CryptoServiceProvider(); byte[] data = Encoding.ASCII.GetBytes(text); return x.ComputeHash(data); } //Encryption Code public string EncryptAsBase64(string strData) { byte[] clearData = Encoding.ASCII.GetBytes(strData); byte[] encryptedData = Encrypt(clearData); return Convert.ToBase64String(encryptedData); } public byte[] Encrypt(byte[] clearData) { byte[] test1 = new byte[clearData.Length]; try { test1 = rijndaelDecryptor.TransformFinalBlock(clearData, 0, clearData.Length); } catch { throw; } return test1; } } } \n...\n}...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "secret":4,
                  "provid":2,
                  "test":4,
                  "linq":1,
                  "asciiencod":1,
                  "system":7,
                  "digest":3,
                  "clear":9,
                  "data":18,
                  "crypto":5,
                  "encrypt":13,
                  "text":3,
                  "secur":2,
                  "generic":1,
                  "base":6,
                  "key":10,
                  "ascii":4,
                  "code":1,
                  "web":1,
                  "namespac":1,
                  "share":1,
                  "decrypt":4,
                  "rijndael":15,
                  "str":2,
                  "encod":8,
                  "block":2,
                  "hash":1,
                  "replac":1,
                  "comput":1,
                  "decryptor":8,
                  "encryptor":1,
                  "bool":1,
                  "raw":4,
                  "busi":1,
                  "utf":3,
                  "token":2,
                  "icrypto":1,
                  "decypt":1,
                  "length":3,
                  "collect":1,
                  "passphras":4,
                  "manag":4,
                  "creat":3,
                  "byte":3,
                  "transform":3,
                  "intern":2,
                  "convert":2,
                  "servic":2,
                  "cryptographi":2,
                  "password":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Collections",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Generic",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Security",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Cryptography",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ICryptoTransform",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"rijndaelDecryptor",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ICryptoTransform",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Any ideas? Thank you very very much in advance!</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4474872]-[-508111906]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Any ideas? Thank you very very much in advance!</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "advanc":1,
                  "idea":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":4475078,
      "questionId":4474872,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":4892599,
          "postId":4475078,
          "creationDate":"2010-12-17",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":546547,
            "displayName":"Angelo Stracquatanio",
            "reputation":42
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"thank you.. i will test and respond back!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu4892599]-[-85568872]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"thank you.. i will test and respond back!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "back":1,
                        "respond":1,
                        "test":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5018178,
          "postId":4475078,
          "creationDate":"2010-12-31",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":546547,
            "displayName":"Angelo Stracquatanio",
            "reputation":42
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"sorry for the delay.. the base 64 worked perfectly, but I'm still having issues withe the encryption.. In other words, im using CCCryptorStatus result = CCCrypt( kCCEncrypt, //encrypt kCCAlgorithmAES128, //use the AES algo kCCOptionPKCS7Padding,// add padding (const void *)[aSymmetricKey bytes], //md5 encrypted byte key kCCKeySizeAES256,// length of the md5 key iv, //initilization vector [self bytes], //data in [self length], //length of the data in [self mutableBytes], //data out [self length], // length of the data out &amp;numBytesEncrypted );"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu5018178]-[1355266671]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"sorry for the delay.. the base 64 worked perfectly, but I'm still having issues withe the encryption.. In other words, im using CCCryptorStatus result = CCCrypt( kCCEncrypt, //encrypt kCCAlgorithmAES128, //use the AES algo kCCOptionPKCS7Padding,// add padding (const void *)[aSymmetricKey bytes], //md5 encrypted byte key kCCKeySizeAES256,// length of the md5 key iv, //initilization vector [self bytes], //data in [self length], //length of the data in [self mutableBytes], //data out [self length], // length of the data out &amp;numBytesEncrypted );"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"CCCryptorStatus",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"kCCEncrypt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"kCCAlgorithmAES128",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"kCCOptionPKCS7Padding",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"aSymmetricKey",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"kCCKeySizeAES256",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"mutableBytes",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"numBytesEncrypted",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ae":3,
                        "ccalgorithm":1,
                        "delay":1,
                        "cckey":1,
                        "size":1,
                        "symmetr":1,
                        "data":4,
                        "result":1,
                        "vector":1,
                        "algo":1,
                        "ccencrypt":1,
                        "issu":1,
                        "encrypt":4,
                        "perfect":1,
                        "cccrypt":1,
                        "amp":1,
                        "work":1,
                        "pkcs":1,
                        "pad":2,
                        "num":1,
                        "base":1,
                        "key":3,
                        "ccoption":1,
                        "status":1,
                        "with":1,
                        "length":5,
                        "word":1,
                        "add":1,
                        "byte":4,
                        "cccryptor":1,
                        "initil":1,
                        "mutabl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"CCCryptorStatus",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5018190,
          "postId":4475078,
          "creationDate":"2010-12-31",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":546547,
            "displayName":"Angelo Stracquatanio",
            "reputation":42
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"and the .net code server side its still cant decrypt"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu5018190]-[1927628967]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"and the .net code server side its still cant decrypt"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":1,
                        "server":1,
                        "net":1,
                        "code":1,
                        "decrypt":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5018979,
          "postId":4475078,
          "creationDate":"2011-01-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":6330,
            "displayName":"Kendall Helmstetter Gelner",
            "reputation":56732
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Sorry, have not used that with server side before, not sure what could be happening... only thought I have is to verify binary is same on server as on client. Also, perhaps it's a byte-ordering issue?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu5018979]-[475126261]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Sorry, have not used that with server side before, not sure what could be happening... only thought I have is to verify binary is same on server as on client. Also, perhaps it's a byte-ordering issue?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":1,
                        "server":2,
                        "thought":1,
                        "happen":1,
                        "binari":1,
                        "verifi":1,
                        "issu":1,
                        "order":1,
                        "client":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5053902,
          "postId":4475078,
          "creationDate":"2011-01-05",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":546547,
            "displayName":"Angelo Stracquatanio",
            "reputation":42
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks again for your answer. I ended up just re-writing my .net code to match this example: http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu5053902]-[1907196132]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks again for your answer. I ended up just re-writing my .net code to match this example: http://dotmac.rationalmind.net/2009/02/aes-interoperability-between-net-and-iphone/"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ae":1,
                        "interoper":1,
                        "iphon":1,
                        "net":3,
                        "match":1,
                        "code":1,
                        "answer":1,
                        "end":1,
                        "rationalmind":1,
                        "dotmac":1,
                        "http":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5068611,
          "postId":4475078,
          "creationDate":"2011-01-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":6330,
            "displayName":"Kendall Helmstetter Gelner",
            "reputation":56732
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Good to know, thanks for the followup. I'll keep that in mind if I ever have to encrypt something to send server side."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4475078-cu5068611]-[-1130499300]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Good to know, thanks for the followup. I'll keep that in mind if I ever have to encrypt something to send server side."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "side":1,
                        "server":1,
                        "good":1,
                        "encrypt":1,
                        "mind":1,
                        "followup":1,
                        "send":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-12-17",
      "lastActivityDate":"2010-12-17",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":6330,
        "displayName":"Kendall Helmstetter Gelner",
        "reputation":56732
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can get an NSData category to handle Base64 encoding/decoding here:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4475078]-[-965354797]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can get an NSData category to handle Base64 encoding/decoding here:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "categori":1,
                    "base":1,
                    "encod":1,
                    "decod":1,
                    "nsdata":1,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html\"rel=\"nofollow\">http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4475078]-[-1711960602]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html\"rel=\"nofollow\">http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "mac":2,
                    "option":2,
                    "rel":1,
                    "base":2,
                    "encod":2,
                    "nofollow":1,
                    "cocoawithlov":2,
                    "html":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can find a library and NSData category to do AES encryption here:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4475078]-[619099897]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can find a library and NSData category to do AES encryption here:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "ae":1,
                    "encrypt":1,
                    "librari":1,
                    "categori":1,
                    "nsdata":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://iphonedevelopment.blogspot.com/2009/02/strong-encryption-for-cocoa-cocoa-touch.html\"rel=\"nofollow\">http://iphonedevelopment.blogspot.com/2009/02/strong-encryption-for-cocoa-cocoa-touch.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4475078]-[900635030]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://iphonedevelopment.blogspot.com/2009/02/strong-encryption-for-cocoa-cocoa-touch.html\"rel=\"nofollow\">http://iphonedevelopment.blogspot.com/2009/02/strong-encryption-for-cocoa-cocoa-touch.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "iphonedevelop":2,
                    "touch":2,
                    "rel":1,
                    "encrypt":2,
                    "strong":2,
                    "blogspot":2,
                    "nofollow":1,
                    "cocoa":4,
                    "html":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Between the two, you can replicate what you are doing, and probably with less code...</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4475078]-[97263514]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Between the two, you can replicate what you are doing, and probably with less code...</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "replic":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}