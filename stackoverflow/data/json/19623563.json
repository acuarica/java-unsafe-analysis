{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19623563,
    "title":"Where does java reference variable stored?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29150551,
        "postId":19623563,
        "creationDate":"2013-10-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":395760,
          "displayName":"delnan",
          "reputation":55307
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@TedHopp The JVM spec, like any language spec, includes the as-if rule. When an object doesn't escape or it can otherwise be proven safe, an optimizing implementation is free to put the object on the stack, put some of its members into registers, or even completely elide the allocation."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29150551]-[-1061731181]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@TedHopp The JVM spec, like any language spec, includes the as-if rule. When an object doesn't escape or it can otherwise be proven safe, an optimizing implementation is free to put the object on the stack, put some of its members into registers, or even completely elide the allocation."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"TedHopp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "languag":1,
                      "proven":1,
                      "alloc":1,
                      "escap":1,
                      "regist":1,
                      "rule":1,
                      "safe":1,
                      "hopp":1,
                      "ted":1,
                      "object":2,
                      "includ":1,
                      "optim":1,
                      "member":1,
                      "stack":1,
                      "implement":1,
                      "spec":2,
                      "put":2,
                      "complet":1,
                      "elid":1,
                      "free":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29132251,
        "postId":19623563,
        "creationDate":"2013-10-27",
        "score":4,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":395760,
          "displayName":"delnan",
          "reputation":55307
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"In general: Wherever the hell the JVM feels like storing it ;-) Your wording sounds confused though, be sure to distinguish the reference/pointer and the thing that's pointed at/referred to, both in Java and in C!"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29132251]-[1425008716]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"In general: Wherever the hell the JVM feels like storing it ;-) Your wording sounds confused though, be sure to distinguish the reference/pointer and the thing that's pointed at/referred to, both in Java and in C!"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "feel":1,
                      "point":1,
                      "pointer":1,
                      "distinguish":1,
                      "thing":1,
                      "store":1,
                      "hell":1,
                      "general":1,
                      "sound":1,
                      "refer":2,
                      "confus":1,
                      "word":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29132395,
        "postId":19623563,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":535871,
          "displayName":"Ted Hopp",
          "reputation":130000
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@delnan - _&quot;Wherever the hell the JVM feels like storing it.&quot;_ is not correct. The [Java Virtual Machine Specification](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.new) requires that objects be allocated from the garbage-collected heap."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29132395]-[21400632]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@delnan - _&quot;Wherever the hell the JVM feels like storing it.&quot;_ is not correct. The [Java Virtual Machine Specification](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.new) requires that objects be allocated from the garbage-collected heap."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "feel":1,
                      "alloc":1,
                      "requir":1,
                      "correct":1,
                      "delnan":1,
                      "oracl":1,
                      "store":1,
                      "hell":1,
                      "jvms":3,
                      "doc":1,
                      "virtual":1,
                      "object":1,
                      "machin":1,
                      "specif":1,
                      "spec":1,
                      "javas":1,
                      "quot":2,
                      "collect":1,
                      "heap":1,
                      "html":2,
                      "http":1,
                      "garbag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29132412,
        "postId":19623563,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1424875,
          "displayName":"hexafraction",
          "reputation":18349
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@TedHopp And Sun nicely violates that by offering `sun.misc.Unsafe` which has the ability to store objects off-heap."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29132412]-[-998688842]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@TedHopp And Sun nicely violates that by offering `sun.misc.Unsafe` which has the ability to store objects off-heap."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"TedHopp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "violat":1,
                      "sun":2,
                      "store":1,
                      "nice":1,
                      "hopp":1,
                      "ted":1,
                      "object":1,
                      "misc":1,
                      "abil":1,
                      "offer":1,
                      "unsaf":1,
                      "heap":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29132416,
        "postId":19623563,
        "creationDate":"2013-10-27",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":86604,
          "displayName":"Ingo",
          "reputation":22437
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@TedHopp it is about the reference, not the object."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29132416]-[2129698301]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@TedHopp it is about the reference, not the object."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"TedHopp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "hopp":1,
                      "object":1,
                      "refer":1,
                      "ted":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29165893,
        "postId":19623563,
        "creationDate":"2013-10-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":395760,
          "displayName":"delnan",
          "reputation":55307
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@TedHopp Ah, up until now I didn't realize you were talking about &quot;heap&quot; and &quot;stack&quot; in the JVM sense. Most people don't and skip right to implementation details. Including, I assume, OP, because otherwise this question is trivial. Yes, in a JVM objects always go to the place the JVM spec calls &quot;heap&quot;."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29165893]-[995271503]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@TedHopp Ah, up until now I didn't realize you were talking about &quot;heap&quot; and &quot;stack&quot; in the JVM sense. Most people don't and skip right to implementation details. Including, I assume, OP, because otherwise this question is trivial. Yes, in a JVM objects always go to the place the JVM spec calls &quot;heap&quot;."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"TedHopp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "jvm":3,
                      "question":1,
                      "assum":1,
                      "talk":1,
                      "skip":1,
                      "hopp":1,
                      "ted":1,
                      "object":1,
                      "includ":1,
                      "stack":1,
                      "implement":1,
                      "spec":1,
                      "quot":6,
                      "place":1,
                      "detail":1,
                      "heap":2,
                      "peopl":1,
                      "call":1,
                      "trivial":1,
                      "realiz":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29163060,
        "postId":19623563,
        "creationDate":"2013-10-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":395760,
          "displayName":"delnan",
          "reputation":55307
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@TedHopp I'm not very well versed in the JVM spec, so I wouldn't know how to find an &quot;as if&quot; statement. But even assuming there is none, the wording in the s pec seems to allow these optimizations (why wouldn't it?) -- `new` is defined as &quot;Memory for a new instance of that class is allocated from the garbage-collected heap&quot; (&sect;6.5) and the &quot;heap&quot; can be pretty much anything: &quot;The Java Virtual Machine assumes no particular type of automatic storage management system [...]&quot; (&sect;2.5.3). Also, &quot;The Java Virtual Machine does not mandate any particular internal structure for objects.&quot; (&sect;2.7)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29163060]-[-867057115]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@TedHopp I'm not very well versed in the JVM spec, so I wouldn't know how to find an &quot;as if&quot; statement. But even assuming there is none, the wording in the s pec seems to allow these optimizations (why wouldn't it?) -- `new` is defined as &quot;Memory for a new instance of that class is allocated from the garbage-collected heap&quot; (&sect;6.5) and the &quot;heap&quot; can be pretty much anything: &quot;The Java Virtual Machine assumes no particular type of automatic storage management system [...]&quot; (&sect;2.5.3). Also, &quot;The Java Virtual Machine does not mandate any particular internal structure for objects.&quot; (&sect;2.7)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"TedHopp",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"is",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "find":1,
                      "assum":2,
                      "mandat":1,
                      "alloc":1,
                      "system":1,
                      "statement":1,
                      "hopp":1,
                      "virtual":2,
                      "ted":1,
                      "structur":1,
                      "object":1,
                      "pretti":1,
                      "vers":1,
                      "optim":1,
                      "automat":1,
                      "machin":2,
                      "pec":1,
                      "wouldn":2,
                      "spec":1,
                      "quot":10,
                      "sect":3,
                      "collect":1,
                      "heap":2,
                      "defin":1,
                      "type":1,
                      "manag":1,
                      "storag":1,
                      "word":1,
                      "intern":1,
                      "garbag":1,
                      "instanc":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29155397,
        "postId":19623563,
        "creationDate":"2013-10-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":535871,
          "displayName":"Ted Hopp",
          "reputation":130000
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@delnan - The JVM spec uses &quot;as-if&quot; language in many specific cases, but it pointedly does not use it when describing the operation of the `new` instruction. I don't believe there is a blanket &quot;as-if&quot; rule that would allow a conforming implementation to operate as you describe. (If I'm wrong, I'd appreciate you pointing out where in the spec such a general &quot;as-if rule&quot; can be found.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29155397]-[495447677]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@delnan - The JVM spec uses &quot;as-if&quot; language in many specific cases, but it pointedly does not use it when describing the operation of the `new` instruction. I don't believe there is a blanket &quot;as-if&quot; rule that would allow a conforming implementation to operate as you describe. (If I'm wrong, I'd appreciate you pointing out where in the spec such a general &quot;as-if rule&quot; can be found.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "languag":1,
                      "point":2,
                      "conform":1,
                      "wrong":1,
                      "delnan":1,
                      "rule":2,
                      "oper":2,
                      "blanket":1,
                      "found":1,
                      "general":1,
                      "specif":1,
                      "implement":1,
                      "spec":2,
                      "quot":6,
                      "case":1,
                      "describ":2,
                      "instruct":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29164937,
        "postId":19623563,
        "creationDate":"2013-10-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":535871,
          "displayName":"Ted Hopp",
          "reputation":130000
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@delnan - I think our back-and-forth is a bit of apples and oranges. I'm talking about how Java language elements behave with respect to the (abstract) JVM as defined in the spec. You seem to be talking about how a particular JVM might be implemented in some (concrete) host system. The spec is very clear about where objects go in terms of the structure of the JVM--they never go on a (JVM) stack area; they always exist in the JVM heap. If the JVM heap happens to be implemented on the stack of some underlying OS, that's outside the scope of the discussion, I think."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19623563-cu29164937]-[-110299660]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@delnan - I think our back-and-forth is a bit of apples and oranges. I'm talking about how Java language elements behave with respect to the (abstract) JVM as defined in the spec. You seem to be talking about how a particular JVM might be implemented in some (concrete) host system. The spec is very clear about where objects go in terms of the structure of the JVM--they never go on a (JVM) stack area; they always exist in the JVM heap. If the JVM heap happens to be implemented on the stack of some underlying OS, that's outside the scope of the discussion, I think."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":6,
                      "area":1,
                      "languag":1,
                      "orang":1,
                      "bit":1,
                      "system":1,
                      "exist":1,
                      "concret":1,
                      "scope":1,
                      "clear":1,
                      "host":1,
                      "appl":1,
                      "delnan":1,
                      "term":1,
                      "talk":2,
                      "behav":1,
                      "structur":1,
                      "object":1,
                      "element":1,
                      "discuss":1,
                      "back":1,
                      "stack":2,
                      "implement":2,
                      "spec":2,
                      "under":1,
                      "respect":1,
                      "heap":2,
                      "defin":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "variables",
      "pointers",
      "memory",
      "reference"
    ],
    "creationDate":"2013-10-27",
    "lastActivityDate":"2015-02-21",
    "score":2,
    "viewCount":1622,
    "owner":{
      "type":"StackOverflowUser",
      "id":2325991,
      "displayName":"Taewan",
      "reputation":101
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>How does Java's reference variable stored? Is that work similar to C pointer?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19623563]-[597621746]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>How does Java's reference variable stored? Is that work similar to C pointer?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pointer":1,
                  "similar":1,
                  "store":1,
                  "work":1,
                  "refer":1,
                  "variabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>what I mean by reference variable is myDog in this code</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19623563]-[-1801849981]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>what I mean by reference variable is myDog in this code</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"myDog",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "dog":1,
                  "refer":1,
                  "code":1,
                  "variabl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Dog myDog = new Dog(); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[19623563]-[113090571]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"myDog",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Dog",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Dog",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"Dog myDog = new Dog(); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "dog":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Dog",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myDog",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Dog",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I understood about C pointer, it stores in the heap if global variable, and it stores in the stack if local variable. I wonder java works same way. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19623563]-[1243376630]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I understood about C pointer, it stores in the heap if global variable, and it stores in the stack if local variable. I wonder java works same way. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pointer":1,
                  "local":1,
                  "store":2,
                  "work":1,
                  "understood":1,
                  "global":1,
                  "stack":1,
                  "heap":1,
                  "variabl":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19623603,
      "questionId":19623563,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29132262,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1424875,
            "displayName":"hexafraction",
            "reputation":18349
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@tbodt I don't. I've had this thing for a few months now."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132262]-[-1216141921]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@tbodt I don't. I've had this thing for a few months now."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thing":1,
                        "tbodt":1,
                        "month":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132281,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1455016,
            "displayName":"tbodt",
            "reputation":7038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I have seen your avatar be an [interrobang](https://en.wikipedia.org/wiki/Interrobang) before."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132281]-[-390017821]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I have seen your avatar be an [interrobang](https://en.wikipedia.org/wiki/Interrobang) before."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "avatar":1,
                        "interrobang":2,
                        "https":1,
                        "wikipedia":1,
                        "wiki":1,
                        "org":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132291,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1424875,
            "displayName":"hexafraction",
            "reputation":18349
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@tbodt That was months ago."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132291]-[658702385]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@tbodt That was months ago."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ago":1,
                        "tbodt":1,
                        "month":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132307,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1455016,
            "displayName":"tbodt",
            "reputation":7038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think it would be best to get one avatar and stick with it. Never ever change it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132307]-[-1085629765]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think it would be best to get one avatar and stick with it. Never ever change it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "stick":1,
                        "avatar":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132318,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1424875,
            "displayName":"hexafraction",
            "reputation":18349
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@tbodt Why is that a good idea?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132318]-[-595704978]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@tbodt Why is that a good idea?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "idea":1,
                        "tbodt":1,
                        "good":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132319,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1455016,
            "displayName":"tbodt",
            "reputation":7038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Then it would be easier to recognize you."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132319]-[-725092475]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Then it would be easier to recognize you."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "easier":1,
                        "recogn":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132341,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1424875,
            "displayName":"hexafraction",
            "reputation":18349
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@tbodt I think this is the avatar I'll be sticking with for some time, given that it's the logo of my most likely-to-succeed project."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132341]-[-389861606]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@tbodt I think this is the avatar I'll be sticking with for some time, given that it's the logo of my most likely-to-succeed project."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "succeed":1,
                        "avatar":1,
                        "project":1,
                        "stick":1,
                        "logo":1,
                        "tbodt":1,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":29132445,
          "postId":19623603,
          "creationDate":"2013-10-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1455016,
            "displayName":"tbodt",
            "reputation":7038
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"OK then. Stick to it forever."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19623603-cu29132445]-[-825468326]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"OK then. Stick to it forever."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "forev":1,
                        "stick":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2015-02-21",
      "lastEditDate":"2015-02-21",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1424875,
        "displayName":"hexafraction",
        "reputation":18349
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You need to understand a bit of the lower levels of Java memory organization. On the stack, primitives(int, double, boolean, etc) and object <em>references</em> pointing to the heap are stored.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623603]-[-1441416293]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You need to understand a bit of the lower levels of Java memory organization. On the stack, primitives(int, double, boolean, etc) and object <em>references</em> pointing to the heap are stored.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "bit":1,
                    "organ":1,
                    "understand":1,
                    "store":1,
                    "lower":1,
                    "object":1,
                    "refer":1,
                    "stack":1,
                    "heap":1,
                    "primit":1,
                    "level":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Inside any object the same is true. It either contains references to other objects or primitives directly. Objects are <em>always</em> references in any context and those references are passed by value.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623603]-[897627156]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Inside any object the same is true. It either contains references to other objects or primitives directly. Objects are <em>always</em> references in any context and those references are passed by value.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "context":1,
                    "object":3,
                    "direct":1,
                    "insid":1,
                    "refer":3,
                    "true":1,
                    "pass":1,
                    "primit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So we may have:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623603]-[-1215490464]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So we may have:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"[ STACK ] [ HEAP ] int a: 10; -&gt; MyWrapperObject@21f03b70====|| double b: 10.4; | || int someField: 11 || MyWrapperObject@21f03b70 ------| || String@10112222 ---------- ...... ||==========================|| | | | String@10112222============||&lt;----- || ... || || ... || }}=========================|| "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19623603]-[-1223714173]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"[ STACK ] [ HEAP ] int "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"10"
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      {
                        "type":"LabelNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"-> "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyWrapperObject",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"@21f03b70====|| double "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"FloatingPointLiteralNode",
                        "valueRep":"10.4"
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      {
                        "type":"LabelNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"b",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"| || int "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"someField",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":": 11 || "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyWrapperObject",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"@21f03b70 ------| || String@10112222 ---------- ...... ||==========================|| | | | String@10112222============||<----- || ... || || ... || }}=========================|| "
                  }
                ]
              },
              "rawText":"[ STACK ] [ HEAP ] int a: 10; -> MyWrapperObject@21f03b70====|| double b: 10.4; | || int someField: 11 || MyWrapperObject@21f03b70 ------| || String@10112222 ---------- ...... ||==========================|| | | | String@10112222============||<----- || ... || || ... || }}=========================|| ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "object":2,
                    "wrapper":2,
                    "stack":1,
                    "heap":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"MyWrapperObject",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Note that use in some cases(as in via JVM internals) objects may be stored in non-heap memory.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623603]-[1260307939]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Note that use in some cases(as in via JVM internals) objects may be stored in non-heap memory.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "store":1,
                    "object":1,
                    "note":1,
                    "heap":1,
                    "case":1,
                    "intern":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19623633,
      "questionId":19623563,
      "comments":[
        
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2806996,
        "displayName":"joews",
        "reputation":6514
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In general local variables are stored on the stack. Instance variables are stored on the heap. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623633]-[523612862]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In general local variables are stored on the stack. Instance variables are stored on the heap. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "local":1,
                    "store":2,
                    "general":1,
                    "stack":1,
                    "heap":1,
                    "variabl":2,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19623610,
      "questionId":19623563,
      "comments":[
        
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":621338,
        "displayName":"necromancer",
        "reputation":4949
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It is exactly the same as a C pointer, and almost always on the stack. In C the object itself is on the heap when you say <code>new Dog();</code> but the <code>Dog * myDogP</code> pointer (4 or 8 bytes) need not be on the heap and is usually on the stack.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623610]-[156420849]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It is exactly the same as a C pointer, and almost always on the stack. In C the object itself is on the heap when you say <code>new Dog();</code> but the <code>Dog * myDogP</code> pointer (4 or 8 bytes) need not be on the heap and is usually on the stack.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ConstructorCreatorNode",
                    "creatorType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "expressionArgs":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"myDogP",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":2,
                    "dog":3,
                    "object":1,
                    "code":4,
                    "stack":2,
                    "heap":2,
                    "byte":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19623600,
      "questionId":19623563,
      "comments":[
        
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "lastEditDate":"2013-10-27",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":535871,
        "displayName":"Ted Hopp",
        "reputation":130000
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java works the same way. Be aware that no variable in Java has an object as a value; all object variables (and field) are <em>references</em> to objects. The objects themselves are maintained somewhere (usually on the heap) by the Java virtual machine. Java has automatic garbage collection, so (unlike in C) you don't need to worry about freeing the object. Once all live references to it are out of scope, it will eventually be swept up by the garbage collector.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623600]-[-1879330438]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java works the same way. Be aware that no variable in Java has an object as a value; all object variables (and field) are <em>references</em> to objects. The objects themselves are maintained somewhere (usually on the heap) by the Java virtual machine. Java has automatic garbage collection, so (unlike in C) you don't need to worry about freeing the object. Once all live references to it are out of scope, it will eventually be swept up by the garbage collector.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "unlik":1,
                    "collector":1,
                    "field":1,
                    "scope":1,
                    "swept":1,
                    "eventu":1,
                    "work":1,
                    "virtual":1,
                    "object":5,
                    "awar":1,
                    "automat":1,
                    "live":1,
                    "machin":1,
                    "refer":2,
                    "collect":1,
                    "heap":1,
                    "worri":1,
                    "variabl":2,
                    "garbag":2,
                    "free":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For instance:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623600]-[-1486648507]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For instance:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Dog myDog = new Dog(); someMethod(myDog); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19623600]-[-1051094490]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"myDog",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"ConstructorCreatorNode",
                                "creatorType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Dog",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "expressionArgs":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Dog",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"someMethod",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"myDog",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"Dog myDog = new Dog(); someMethod(myDog); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dog":4,
                    "method":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"someMethod",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"myDog",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"myDog",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Dog",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Dog",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>passes to <code>someMethod</code> a reference to the dog object that is referenced by <code>myDog</code>. Changes to the object that might occur inside <code>someMethod</code> will be seen in <code>myDog</code> after the method returns.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623600]-[-2017334705]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>passes to <code>someMethod</code> a reference to the dog object that is referenced by <code>myDog</code>. Changes to the object that might occur inside <code>someMethod</code> will be seen in <code>myDog</code> after the method returns.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"someMethod",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"myDog",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"someMethod",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"myDog",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":3,
                    "return":1,
                    "occur":1,
                    "dog":3,
                    "object":2,
                    "code":8,
                    "insid":1,
                    "refer":1,
                    "pass":1,
                    "referenc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19623601,
      "questionId":19623563,
      "comments":[
        
      ],
      "creationDate":"2013-10-27",
      "lastActivityDate":"2013-10-27",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1455016,
        "displayName":"tbodt",
        "reputation":7038
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It does work similarly. What is actually happening is that the object itself is stored in the heap, and a reference to the object, which is just like a C pointer, is stored in a local variable.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19623601]-[50187789]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It does work similarly. What is actually happening is that the object itself is stored in the heap, and a reference to the object, which is just like a C pointer, is stored in a local variable.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "similar":1,
                    "happen":1,
                    "local":1,
                    "store":2,
                    "work":1,
                    "object":2,
                    "refer":1,
                    "heap":1,
                    "variabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}