{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":13174107,
    "title":"Big O complexity of recursive method",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":17928776,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1645490,
          "displayName":"Bert te Velde",
          "reputation":561
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It would help if you could clarify what your code is supposed to achieve; pls give an example. BTW, did you test that your code actually does what it is supposed to do? I'm curious about the innermost loop, where for each k, you add one element to the new list tmp1 AND remove element #i (...) AND ..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17928776]-[-1163019961]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It would help if you could clarify what your code is supposed to achieve; pls give an example. BTW, did you test that your code actually does what it is supposed to do? I'm curious about the innermost loop, where for each k, you add one element to the new list tmp1 AND remove element #i (...) AND ..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "test":1,
                      "remov":1,
                      "loop":1,
                      "pls":1,
                      "btw":1,
                      "tmp":1,
                      "element":2,
                      "code":2,
                      "innermost":1,
                      "achiev":1,
                      "curious":1,
                      "give":1,
                      "suppos":2,
                      "add":1,
                      "clarifi":1,
                      "list":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17928863,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":902383,
          "displayName":"user902383",
          "reputation":2540
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"except that i can see syntax error, and you will get index out of boundry exception, i could consider this as O(n^2) + T(computeDistance() + T(recomputeDistance()). as tmp1 when you call permuteRec(tmp1, tmp2) will be always empty"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17928863]-[272102165]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"except that i can see syntax error, and you will get index out of boundry exception, i could consider this as O(n^2) + T(computeDistance() + T(recomputeDistance()). as tmp1 when you call permuteRec(tmp1, tmp2) will be always empty"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"computeDistance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"recomputeDistance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"permuteRec",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "tmp":3,
                      "syntax":1,
                      "comput":1,
                      "distanc":2,
                      "error":1,
                      "empti":1,
                      "rec":1,
                      "permut":1,
                      "boundri":1,
                      "call":1,
                      "recomput":1,
                      "index":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17928914,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":493928,
          "displayName":"khachik",
          "reputation":13173
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The current code as it is written, has `O(n*(n+m))` complexity (where n,m are list1, list2 sizes respectively), since the every recursive call to `permoteRec` passes an empty `list1`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17928914]-[-106223036]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The current code as it is written, has `O(n*(n+m))` complexity (where n,m are list1, list2 sizes respectively), since the every recursive call to `permoteRec` passes an empty `list1`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"permoteRec",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "permot":1,
                      "size":1,
                      "code":1,
                      "recurs":1,
                      "written":1,
                      "empti":1,
                      "pass":1,
                      "rec":1,
                      "current":1,
                      "call":1,
                      "list":3,
                      "complex":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17929075,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":477008,
          "displayName":"njlarsson",
          "reputation":810
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Tricky case. Even coming up with the correct recurrence relation is tricky; it will contain a sum. And then you have to solve it. What I would start with would be to add a global counter for how many times the inner loop is executed, and try it for different lists, to get an idea of the complexity. Try to spot a pattern, make a hypothesis, and then try to prove it."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17929075]-[-25968651]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Tricky case. Even coming up with the correct recurrence relation is tricky; it will contain a sum. And then you have to solve it. What I would start with would be to add a global counter for how many times the inner loop is executed, and try it for different lists, to get an idea of the complexity. Try to spot a pattern, make a hypothesis, and then try to prove it."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "solv":1,
                      "prove":1,
                      "loop":1,
                      "hypothesi":1,
                      "tricki":2,
                      "pattern":1,
                      "relat":1,
                      "correct":1,
                      "idea":1,
                      "recurr":1,
                      "come":1,
                      "global":1,
                      "spot":1,
                      "make":1,
                      "counter":1,
                      "time":1,
                      "start":1,
                      "add":1,
                      "sum":1,
                      "execut":1,
                      "list":1,
                      "complex":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17927719,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":643109,
          "displayName":"Pulkit Goyal",
          "reputation":3759
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"possible duplicate of [Recursion and Big O](http://stackoverflow.com/questions/206094/recursion-and-big-o)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17927719]-[-959450437]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"possible duplicate of [Recursion and Big O](http://stackoverflow.com/questions/206094/recursion-and-big-o)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "big":2,
                      "stackoverflow":1,
                      "recurs":2,
                      "duplic":1,
                      "http":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":17927731,
        "postId":13174107,
        "creationDate":"2012-11-01",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":602372,
          "displayName":"Yam Marcovic",
          "reputation":1605
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If the method weren't recursive, it'd be O(n^2). So how many times are you calling this method in the worst case scenario? That should give you your asymptotic complexity."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[13174107-cu17927731]-[-189448525]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If the method weren't recursive, it'd be O(n^2). So how many times are you calling this method in the worst case scenario? That should give you your asymptotic complexity."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "scenario":1,
                      "method":2,
                      "worst":1,
                      "recurs":1,
                      "give":1,
                      "time":1,
                      "weren":1,
                      "call":1,
                      "complex":1,
                      "asymptot":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "recursion",
      "complexity-theory"
    ],
    "creationDate":"2012-11-01",
    "lastActivityDate":"2012-11-01",
    "lastEditDate":"2012-11-01",
    "score":1,
    "viewCount":322,
    "owner":{
      "type":"StackOverflowUser",
      "id":1790850,
      "displayName":"Sardant",
      "reputation":6
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This is a java permutation of a bunch of numbers done recursively and I need to find out what the big O complexity of it is. Assumed it would be O(N^2) because of the nested loop, but a friend commented that recursive methods work differently. Any help is appreciated</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[13174107]-[1433934795]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This is a java permutation of a bunch of numbers done recursively and I need to find out what the big O complexity of it is. Assumed it would be O(N^2) because of the nested loop, but a friend commented that recursive methods work differently. Any help is appreciated</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "find":1,
                  "method":1,
                  "assum":1,
                  "loop":1,
                  "nest":1,
                  "appreci":1,
                  "big":1,
                  "friend":1,
                  "differ":1,
                  "bunch":1,
                  "work":1,
                  "recurs":2,
                  "comment":1,
                  "permut":1,
                  "complex":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    
  ]
}