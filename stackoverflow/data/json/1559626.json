{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":1559626,
    "title":"Java \u2013 Create a workflow in Quartz",
    "comments":[
      
    ],
    "tags":[
      "java",
      "frameworks",
      "workflow",
      "quartz-scheduler"
    ],
    "creationDate":"2009-10-13",
    "lastActivityDate":"2013-06-20",
    "lastEditDate":"2009-11-10",
    "score":5,
    "viewCount":2223,
    "owner":{
      "type":"StackOverflowUser",
      "id":181406,
      "displayName":"Adrian",
      "reputation":2232
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am considering using the <a href=\"http://www.opensymphony.com/quartz\"rel=\"nofollow\">Quartz</a> framework to schedule the run of several hundred jobs.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[-466418256]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am considering using the <a href=\"http://www.opensymphony.com/quartz\"rel=\"nofollow\">Quartz</a> framework to schedule the run of several hundred jobs.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "opensymphoni":1,
                  "run":1,
                  "quartz":2,
                  "rel":1,
                  "job":1,
                  "framework":1,
                  "hundr":1,
                  "nofollow":1,
                  "schedul":1,
                  "href":1,
                  "http":1,
                  "www":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>According to their API, jobs can be scheduled to run at certain moments in time but not to run one after the other (and stop a chain of jobs if one fails). The only recommended methods I was able to find are:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[34284396]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>According to their API, jobs can be scheduled to run at certain moments in time but not to run one after the other (and stop a chain of jobs if one fails). The only recommended methods I was able to find are:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "recommend":1,
                  "method":1,
                  "fail":1,
                  "run":2,
                  "job":2,
                  "stop":1,
                  "moment":1,
                  "schedul":1,
                  "api":1,
                  "time":1,
                  "chain":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>Using a listener which notices the completion of a job and schedule the next trigger to fire (how to coordinate this?)</li> \n <li>Each job will receive a parameter containing the next job to run and, after completing the actual work, schedule its run. (Cooperative) </li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[1913183513]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>Using a listener which notices the completion of a job and schedule the next trigger to fire (how to coordinate this?)</li> \n <li>Each job will receive a parameter containing the next job to run and, after completing the actual work, schedule its run. (Cooperative) </li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "receiv":1,
                  "fire":1,
                  "cooper":1,
                  "run":2,
                  "job":3,
                  "work":1,
                  "paramet":1,
                  "listen":1,
                  "coordin":1,
                  "notic":1,
                  "schedul":2,
                  "complet":2,
                  "actual":1,
                  "trigger":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Do you know a better method to create a workflow of jobs in Quartz?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[1483857431]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Do you know a better method to create a workflow of jobs in Quartz?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "workflow":1,
                  "quartz":1,
                  "job":1,
                  "creat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can you recommend other methods/framework for implementing a workflow in Java ?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[-789704809]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can you recommend other methods/framework for implementing a workflow in Java ?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "recommend":1,
                  "method":1,
                  "workflow":1,
                  "framework":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>EDITED: In the meantime I found out about <a href=\"http://www.opensymphony.com/osworkflow/\"rel=\"nofollow\">OSWorkflow</a> which appears to be a good match for what I need. It appears that what I need to implement is a &quot;<a href=\"http://www.workflowpatterns.com/patterns/control/basic/wcp1.php\"rel=\"nofollow\">Sequence Pattern</a>&quot;.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[1559626]-[1158890219]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>EDITED: In the meantime I found out about <a href=\"http://www.opensymphony.com/osworkflow/\"rel=\"nofollow\">OSWorkflow</a> which appears to be a good match for what I need. It appears that what I need to implement is a &quot;<a href=\"http://www.workflowpatterns.com/patterns/control/basic/wcp1.php\"rel=\"nofollow\">Sequence Pattern</a>&quot;.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "opensymphoni":1,
                  "pattern":2,
                  "good":1,
                  "workflowpattern":1,
                  "appear":2,
                  "meantim":1,
                  "rel":2,
                  "match":1,
                  "edit":1,
                  "found":1,
                  "nofollow":2,
                  "sequenc":1,
                  "osworkflow":2,
                  "php":1,
                  "implement":1,
                  "quot":2,
                  "control":1,
                  "href":2,
                  "wcp":1,
                  "basic":1,
                  "http":2,
                  "www":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":1559727,
      "questionId":1559626,
      "comments":[
        
      ],
      "creationDate":"2009-10-13",
      "lastActivityDate":"2009-10-13",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":12960,
        "displayName":"Brian Agnew",
        "reputation":154342
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It sounds to me like you want Quartz to schedule the <em>first</em> job, and chain everything off that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1559727]-[-971343794]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It sounds to me like you want Quartz to schedule the <em>first</em> job, and chain everything off that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "quartz":1,
                    "job":1,
                    "sound":1,
                    "schedul":1,
                    "chain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Have you looked at encapsulating each task using the <a href=\"http://en.wikipedia.org/wiki/Command%5Fpattern\"rel=\"nofollow\">Command Pattern</a>, and linking them together ?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1559727]-[-1565997541]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Have you looked at encapsulating each task using the <a href=\"http://en.wikipedia.org/wiki/Command%5Fpattern\"rel=\"nofollow\">Command Pattern</a>, and linking them together ?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "task":1,
                    "pattern":1,
                    "look":1,
                    "rel":1,
                    "command":2,
                    "fpattern":1,
                    "wikipedia":1,
                    "nofollow":1,
                    "link":1,
                    "wiki":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "encapsul":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":1560443,
      "questionId":1559626,
      "comments":[
        
      ],
      "creationDate":"2009-10-13",
      "lastActivityDate":"2009-10-13",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":90305,
        "displayName":"Jon Quarfoth",
        "reputation":1220
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When Quartz documentation talks about &quot;Job&quot;, it is referring to a class implementing the &quot;Job&quot; Interface, which is really just any class with an &quot;execute&quot; method that takes in the Quartz Context object. When creating this implementation you can really do whatever you want.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1560443]-[2116716252]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When Quartz documentation talks about &quot;Job&quot;, it is referring to a class implementing the &quot;Job&quot; Interface, which is really just any class with an &quot;execute&quot; method that takes in the Quartz Context object. When creating this implementation you can really do whatever you want.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"implementing",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"with",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "document":1,
                    "context":1,
                    "quartz":2,
                    "job":2,
                    "talk":1,
                    "object":1,
                    "take":1,
                    "refer":1,
                    "implement":2,
                    "quot":6,
                    "creat":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You could create an implementation of the Quartz Job Interface which simply calls all the jobs in your workflow in series, and throws a JobExecutionException exception on failure.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[1560443]-[1522261949]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You could create an implementation of the Quartz Job Interface which simply calls all the jobs in your workflow in series, and throws a JobExecutionException exception on failure.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JobExecutionException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "workflow":1,
                    "failur":1,
                    "quartz":1,
                    "job":3,
                    "simpli":1,
                    "seri":1,
                    "implement":1,
                    "creat":1,
                    "call":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JobExecutionException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":17212547,
      "questionId":1559626,
      "comments":[
        
      ],
      "creationDate":"2013-06-20",
      "lastActivityDate":"2013-06-20",
      "lastEditDate":"2013-06-20",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":846553,
        "displayName":"zerologiko",
        "reputation":513
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I've worked on a project called <strong>Dynamic Task Scheduler</strong> that use Quartz to execute <em>job chains</em> implementing a simple workflow in a fault-tolerant way (definied in XML format). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17212547]-[-516038781]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I've worked on a project called <strong>Dynamic Task Scheduler</strong> that use Quartz to execute <em>job chains</em> implementing a simple workflow in a fault-tolerant way (definied in XML format). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "format":1,
                    "task":1,
                    "workflow":1,
                    "simpl":1,
                    "project":1,
                    "quartz":1,
                    "dynam":1,
                    "job":1,
                    "defini":1,
                    "strong":2,
                    "work":1,
                    "toler":1,
                    "xml":1,
                    "implement":1,
                    "schedul":1,
                    "fault":1,
                    "call":1,
                    "chain":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Take a look at <a href=\"http://sourceforge.net/projects/dynatasksched/\"rel=\"nofollow\">http://sourceforge.net/projects/dynatasksched/</a> <br />The project is beta, but I think it can gives you some ideas to start.. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17212547]-[360089120]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Take a look at <a href=\"http://sourceforge.net/projects/dynatasksched/\"rel=\"nofollow\">http://sourceforge.net/projects/dynatasksched/</a> <br />The project is beta, but I think it can gives you some ideas to start.. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sourceforg":2,
                    "project":3,
                    "idea":1,
                    "rel":1,
                    "dynatasksch":2,
                    "net":2,
                    "nofollow":1,
                    "beta":1,
                    "href":1,
                    "start":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Hope it's useful!</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[17212547]-[96509373]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Hope it's useful!</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hope":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}