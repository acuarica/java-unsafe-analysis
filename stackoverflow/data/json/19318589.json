{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19318589,
    "title":"Is there a relatively easy way to implement the retain/release memory management mechanism from Objective-C in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28615812,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":485337,
          "displayName":"Adam Arold",
          "reputation":11886
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Actually it can detect those circles whith are detached from the root. This is important."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28615812]-[540005304]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Actually it can detect those circles whith are detached from the root. This is important."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "root":1,
                      "detect":1,
                      "whith":1,
                      "circl":1,
                      "detach":1,
                      "import":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28619370,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Uh, why would you want to? Java has a built-in garbage collector. If you need a &quot;dealloc&quot; like function `finalize()` is admittedly a bit flaky but works well enough for most uses."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28619370]-[-380083900]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Uh, why would you want to? Java has a built-in garbage collector. If you need a &quot;dealloc&quot; like function `finalize()` is admittedly a bit flaky but works well enough for most uses."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "collector":1,
                      "built":1,
                      "bit":1,
                      "flaki":1,
                      "work":1,
                      "final":1,
                      "function":1,
                      "dealloc":1,
                      "admit":1,
                      "quot":2,
                      "garbag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28619456,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Perhaps if you could explain what you intend to accomplish by this (other than just an intellectual exercise) we could provide better advice."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28619456]-[-289394022]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Perhaps if you could explain what you intend to accomplish by this (other than just an intellectual exercise) we could provide better advice."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "provid":1,
                      "explain":1,
                      "advic":1,
                      "intend":1,
                      "accomplish":1,
                      "exercis":1,
                      "intellectu":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28614215,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":485337,
          "displayName":"Adam Arold",
          "reputation":11886
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You already have the JVM and the GC."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28614215]-[-1100822883]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You already have the JVM and the GC."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28614335,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1037729,
          "displayName":"aranhakki",
          "reputation":321
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yes but out of interest i'd like to know how to do this."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28614335]-[1243097576]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yes but out of interest i'd like to know how to do this."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "interest":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28619925,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1037729,
          "displayName":"aranhakki",
          "reputation":321
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I guess manually freeing memory would reduce the strain on the GC and would improve average latency response. For example in applications like algo trading you would'nt want the GC to kick in at a critical time and delay your actions."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28619925]-[1058320483]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I guess manually freeing memory would reduce the strain on the GC and would improve average latency response. For example in applications like algo trading you would'nt want the GC to kick in at a critical time and delay your actions."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "critic":1,
                      "delay":1,
                      "latenc":1,
                      "strain":1,
                      "reduc":1,
                      "averag":1,
                      "algo":1,
                      "trade":1,
                      "improv":1,
                      "kick":1,
                      "applic":1,
                      "time":1,
                      "guess":1,
                      "respons":1,
                      "manual":1,
                      "action":1,
                      "free":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28620040,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@user1037729 - There is no way to &quot;manually free memory&quot;. And the solution to GC &quot;kicking in&quot; at an inappropriate time is concurrent GC (which, for religious reasons, is rarely implemented)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28620040]-[-583517443]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@user1037729 - There is no way to &quot;manually free memory&quot;. And the solution to GC &quot;kicking in&quot; at an inappropriate time is concurrent GC (which, for religious reasons, is rarely implemented)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "concurr":1,
                      "inappropri":1,
                      "reason":1,
                      "religi":1,
                      "kick":1,
                      "rare":1,
                      "implement":1,
                      "quot":4,
                      "time":1,
                      "manual":1,
                      "solut":1,
                      "user":1,
                      "free":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28615583,
        "postId":19318589,
        "creationDate":"2013-10-11",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1387438,
          "displayName":"Marek R",
          "reputation":5275
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"you don't get it. Garbage collector is much more advanced version of memory management. It works like retain release but it happens automatically without additional code. It is like ARC but even better since it detects circular dependency."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19318589-cu28615583]-[-1338147579]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"you don't get it. Garbage collector is much more advanced version of memory management. It works like retain release but it happens automatically without additional code. It is like ARC but even better since it detects circular dependency."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "collector":1,
                      "advanc":1,
                      "depend":1,
                      "addit":1,
                      "detect":1,
                      "circular":1,
                      "retain":1,
                      "work":1,
                      "code":1,
                      "arc":1,
                      "version":1,
                      "automat":1,
                      "releas":1,
                      "manag":1,
                      "garbag":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "objective-c",
      "memory-management"
    ],
    "creationDate":"2013-10-11",
    "lastActivityDate":"2013-10-11",
    "lastEditDate":"2013-10-11",
    "score":0,
    "viewCount":102,
    "owner":{
      "type":"StackOverflowUser",
      "id":1037729,
      "displayName":"aranhakki",
      "reputation":321
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The only way I can think of doing this is the create a sub class of Object and add retain/release methods that increment/decrement a counter, have an observer on this counter that invokes a deconstructor which is also in the Object subclass, after invoking the deconstructor you would free the memory using a native call.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19318589]-[615084490]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The only way I can think of doing this is the create a sub class of Object and add retain/release methods that increment/decrement a counter, have an observer on this counter that invokes a deconstructor which is also in the Object subclass, after invoking the deconstructor you would free the memory using a native call.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"of",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "subclass":1,
                  "observ":1,
                  "deconstructor":2,
                  "invok":2,
                  "retain":1,
                  "object":2,
                  "decrement":1,
                  "releas":1,
                  "counter":2,
                  "creat":1,
                  "call":1,
                  "add":1,
                  "increment":1,
                  "free":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Problem would be that all objects must extend this new subclass, not very backward compatible, can you guys think of a better way to do this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19318589]-[521448366]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Problem would be that all objects must extend this new subclass, not very backward compatible, can you guys think of a better way to do this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "subclass":1,
                  "guy":1,
                  "problem":1,
                  "backward":1,
                  "extend":1,
                  "object":1,
                  "compat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19319596,
      "questionId":19318589,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28618507,
          "postId":19319596,
          "creationDate":"2013-10-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1037729,
            "displayName":"aranhakki",
            "reputation":321
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Another way would to create an interface with retain, release and destroy methods, and create a component which implements this interface and then use this component inside all the objects you want to manage the memory of manually. This would allow you to retro fit the functionality onto existing code, hence its backward compatible."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19319596-cu28618507]-[-2002592214]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Another way would to create an interface with retain, release and destroy methods, and create a component which implements this interface and then use this component inside all the objects you want to manage the memory of manually. This would allow you to retro fit the functionality onto existing code, hence its backward compatible."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "retro":1,
                        "exist":1,
                        "fit":1,
                        "retain":1,
                        "backward":1,
                        "compon":2,
                        "object":1,
                        "code":1,
                        "destroy":1,
                        "releas":1,
                        "insid":1,
                        "function":1,
                        "manag":1,
                        "manual":1,
                        "creat":2,
                        "compat":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28617723,
          "postId":19319596,
          "creationDate":"2013-10-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1037729,
            "displayName":"aranhakki",
            "reputation":321
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I wouldn't have a global object which manages this, each object would maintain a count of references too it. Thats why all class would have to extend the new object subclass, which it self is bad, but I can't think of a better way..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19319596-cu28617723]-[1133920839]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I wouldn't have a global object which manages this, each object would maintain a count of references too it. Thats why all class would have to extend the new object subclass, which it self is bad, but I can't think of a better way..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"would",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "subclass":1,
                        "count":1,
                        "bad":1,
                        "extend":1,
                        "object":3,
                        "global":1,
                        "wouldn":1,
                        "refer":1,
                        "manag":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28634100,
          "postId":19319596,
          "creationDate":"2013-10-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":885029,
            "displayName":"SomeGuy",
            "reputation":2658
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you plan on subclassing then you plan on cutting all existing functionality short because of your base class. My solution guarantees it will work with every existing class with no modification. The result will be just as expected, regardless of whether it's going through a singleton or not."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19319596-cu28634100]-[-1237935364]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you plan on subclassing then you plan on cutting all existing functionality short because of your base class. My solution guarantees it will work with every existing class with no modification. The result will be just as expected, regardless of whether it's going through a singleton or not."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"with",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "subclass":1,
                        "exist":2,
                        "cut":1,
                        "result":1,
                        "modif":1,
                        "work":1,
                        "base":1,
                        "guarante":1,
                        "function":1,
                        "expect":1,
                        "singleton":1,
                        "solut":1,
                        "plan":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-11",
      "lastActivityDate":"2013-10-11",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":885029,
        "displayName":"SomeGuy",
        "reputation":2658
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Don't know why you'd want to but to make it work with every class, have a global object that you send retain and release methods to along with the object you plan on retaining/releasing.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19319596]-[-1517045897]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Don't know why you'd want to but to make it work with every class, have a global object that you send retain and release methods to along with the object you plan on retaining/releasing.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "retain":2,
                    "work":1,
                    "object":2,
                    "global":1,
                    "releas":2,
                    "make":1,
                    "plan":1,
                    "send":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This global object can simply manage putting them into a collection with a retain count, which is the same as hanging on to that object, right?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19319596]-[265903408]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This global object can simply manage putting them into a collection with a retain count, which is the same as hanging on to that object, right?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "count":1,
                    "hang":1,
                    "retain":1,
                    "object":2,
                    "global":1,
                    "simpli":1,
                    "put":1,
                    "collect":1,
                    "manag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"memoryManager.retain(obj); memoryManager.release(obj); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19319596]-[-1104822186]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"memoryManager",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"retain",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"obj",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"memoryManager",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"release",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"obj",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"memoryManagerretain(obj); memoryManagerrelease(obj); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "managerreleas":1,
                    "managerretain":1,
                    "memori":2,
                    "obj":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"memoryManager",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"retain",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"obj",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"memoryManager",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"release",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"obj",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19321953,
      "questionId":19318589,
      "comments":[
        
      ],
      "creationDate":"2013-10-11",
      "lastActivityDate":"2013-10-11",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":581994,
        "displayName":"Hot Licks",
        "reputation":27968
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Keep in mind, that if you're mimicking Objective-C (and not ARC), the object does not need to keep track of what it references. Rather the programmer keeps track of that and &quot;manually&quot; does retain/release as required. No need to automate the tracking of which objects are linked.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19321953]-[1816501257]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Keep in mind, that if you're mimicking Objective-C (and not ARC), the object does not need to keep track of what it references. Rather the programmer keeps track of that and &quot;manually&quot; does retain/release as required. No need to automate the tracking of which objects are linked.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "autom":1,
                    "mimick":1,
                    "requir":1,
                    "track":3,
                    "retain":1,
                    "object":3,
                    "arc":1,
                    "releas":1,
                    "mind":1,
                    "link":1,
                    "programm":1,
                    "refer":1,
                    "quot":2,
                    "manual":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you really need to mimic this is a (cough) singleton that supports <code>retain(Object)</code> and <code>release(Object)</code> methods and internally manages a Map of object pointer to reference count. The object pointer in the Map assures that the object will exist until the count goes to zero (when the Map entry will be removed). After a count goes zero but before removing the Map entry you can invoke the object's <code>dealloc</code> method (if it has one -- test if it implements a Dealloc interface).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19321953]-[-1050671647]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you really need to mimic this is a (cough) singleton that supports <code>retain(Object)</code> and <code>release(Object)</code> methods and internally manages a Map of object pointer to reference count. The object pointer in the Map assures that the object will exist until the count goes to zero (when the Map entry will be removed). After a count goes zero but before removing the Map entry you can invoke the object's <code>dealloc</code> method (if it has one -- test if it implements a Dealloc interface).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "method":2,
                    "test":1,
                    "count":3,
                    "remov":2,
                    "mimic":1,
                    "pointer":2,
                    "exist":1,
                    "map":4,
                    "invok":1,
                    "retain":1,
                    "object":6,
                    "code":6,
                    "entri":2,
                    "releas":1,
                    "refer":1,
                    "dealloc":2,
                    "singleton":1,
                    "cough":1,
                    "manag":1,
                    "intern":1,
                    "assur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(But I see that this is basically the same as SomeGuy's suggestion.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19321953]-[1866649990]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(But I see that this is basically the same as SomeGuy's suggestion.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SomeGuy",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "suggest":1,
                    "basic":1,
                    "guy":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SomeGuy",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19322136,
      "questionId":19318589,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28620367,
          "postId":19322136,
          "creationDate":"2013-10-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1037729,
            "displayName":"aranhakki",
            "reputation":321
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm asking to gain experience in performance tunning, cheers the links would be great."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19322136-cu28620367]-[-712767775]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm asking to gain experience in performance tunning, cheers the links would be great."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "tun":1,
                        "cheer":1,
                        "experi":1,
                        "gain":1,
                        "link":1,
                        "perform":1,
                        "great":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-11",
      "lastActivityDate":"2013-10-11",
      "lastEditDate":"2013-10-11",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":253924,
        "displayName":"Leonardo",
        "reputation":3527
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You already know that it is completely useless, because the garbage collector is taking care of everything.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[-2020550077]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You already know that it is completely useless, because the garbage collector is taking care of everything.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "useless":1,
                    "care":1,
                    "take":1,
                    "complet":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In addition, retain/release is not really a garbage collection mechanism, but rather a retain counter. Objective-c offer its &quot;garbage collector&quot; but it is only available on OSX platform, not iOS.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[-580490595]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In addition, retain/release is not really a garbage collection mechanism, but rather a retain counter. Objective-c offer its &quot;garbage collector&quot; but it is only available on OSX platform, not iOS.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "collector":1,
                    "addit":1,
                    "retain":2,
                    "object":1,
                    "releas":1,
                    "mechan":1,
                    "counter":1,
                    "quot":2,
                    "offer":1,
                    "collect":1,
                    "platform":1,
                    "garbag":2,
                    "osx":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To answer your question, the only way to mimic objective-c is to go deep at root of JVM. Take a look at the <code>sun.misc.Unsafe</code> class, there you can access direct memory (with some restrictions) declare variable and release them. Unfortunately I am behind a company firewall at the moment, so I cannot give you any links. Will try again later. Just google for java direct memory access and phrases like that.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[-925697273]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To answer your question, the only way to mimic objective-c is to go deep at root of JVM. Take a look at the <code>sun.misc.Unsafe</code> class, there you can access direct memory (with some restrictions) declare variable and release them. Unfortunately I am behind a company firewall at the moment, so I cannot give you any links. Will try again later. Just google for java direct memory access and phrases like that.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "question":1,
                    "mimic":1,
                    "googl":1,
                    "root":1,
                    "sun":1,
                    "phrase":1,
                    "declar":1,
                    "object":1,
                    "direct":2,
                    "code":2,
                    "releas":1,
                    "deep":1,
                    "link":1,
                    "moment":1,
                    "give":1,
                    "misc":1,
                    "answer":1,
                    "unsaf":1,
                    "variabl":1,
                    "compani":1,
                    "firewal":1,
                    "restrict":1,
                    "access":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Some link, I will add more as soon as I can:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[130321140]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Some link, I will add more as soon as I can:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "link":1,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">Java Magic. sun.misc.Unsafe</a></li> \n <li><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">Direct memory access in Java</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[-35007943]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">Java Magic. sun.misc.Unsafe</a></li> \n <li><a href=\"http://highlyscalable.wordpress.com/2012/02/02/direct-memory-access-in-java/\"rel=\"nofollow\">Direct memory access in Java</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "dot":2,
                    "github":1,
                    "highlyscal":1,
                    "wordpress":1,
                    "sun":2,
                    "rel":2,
                    "direct":2,
                    "blog":1,
                    "nofollow":2,
                    "misc":2,
                    "magic":2,
                    "unsaf":2,
                    "part":1,
                    "href":2,
                    "http":2,
                    "mishadoff":1,
                    "access":2,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Anyway, rather than spending too much time on this, I would start reading about JVM and garbage collector tuning, you will gain skills that few people have.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[515160350]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Anyway, rather than spending too much time on this, I would start reading about JVM and garbage collector tuning, you will gain skills that few people have.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tune":1,
                    "read":1,
                    "jvm":1,
                    "collector":1,
                    "spend":1,
                    "gain":1,
                    "skill":1,
                    "time":1,
                    "start":1,
                    "peopl":1,
                    "garbag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Good read :-)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322136]-[-72582938]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Good read :-)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "good":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19322393,
      "questionId":19318589,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28622308,
          "postId":19322393,
          "creationDate":"2013-10-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":253924,
            "displayName":"Leonardo",
            "reputation":3527
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The object may be freed by the garbage collector if no one reference it, no matter how big the retainCount is."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19322393-cu28622308]-[1250827111]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The object may be freed by the garbage collector if no one reference it, no matter how big the retainCount is."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"retainCount",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "collector":1,
                        "count":1,
                        "big":1,
                        "retain":1,
                        "object":1,
                        "freed":1,
                        "refer":1,
                        "matter":1,
                        "garbag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28682960,
          "postId":19322393,
          "creationDate":"2013-10-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":169346,
            "displayName":"JeremyP",
            "reputation":50006
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Leonardo But that's what you want. In Objective-C, if you have no references and a retain count &gt;= 1, you have a memory leak because there is no way to do the final release."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19322393-cu28682960]-[428517036]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Leonardo But that's what you want. In Objective-C, if you have no references and a retain count &gt;= 1, you have a memory leak because there is no way to do the final release."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Leonardo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "count":1,
                        "leonardo":1,
                        "leak":1,
                        "retain":1,
                        "object":1,
                        "releas":1,
                        "refer":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-11",
      "lastActivityDate":"2013-10-11",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":169346,
        "displayName":"JeremyP",
        "reputation":50006
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have no idea why you'd want to do it, but here we go</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19322393]-[-1290053396]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have no idea why you'd want to do it, but here we go</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "idea":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public class ReferenceCountedObject { private int referenceCount; public ReferenceCountedObject() { this.retain(); } public synchronized ReferenceCountedObject retain() { referenceCount++; return this; } public synchronized void release() { if (referenceCount == 1) { this.dealloc(); } else { referenceCount--; } } protected void dealloc() { // memory will be freed by GC } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[19322393]-[-1022368312]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ReferenceCountedObject",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"referenceCount",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ReferenceCountedObject",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"retain",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"synchronized",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"ReferenceCountedObject",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"retain",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"PostfixOperatorExpressionNode",
                                      "argument":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"referenceCount",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"++",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"this",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"synchronized",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"release",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"IfStatementNode",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"==",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"referenceCount",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"IntegerLiteralNode",
                                          "valueRep":"1"
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"MethodInvocationNode",
                                            "qualifiedIdentifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"this",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"dealloc",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "args":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "elseStatement":{
                                      "type":"ElseStatementNode",
                                      "statement":{
                                        "type":"BlockNode",
                                        "statements":[
                                          {
                                            "type":"ExpressionStatement",
                                            "expression":{
                                              "type":"PostfixOperatorExpressionNode",
                                              "argument":{
                                                "type":"QualifiedIdentifierNode",
                                                "identifiers":[
                                                  {
                                                    "type":"IdentifierNode",
                                                    "name":"referenceCount",
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "operator":{
                                                "type":"OperatorNode",
                                                "symbol":"--",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "labels":[
                                              
                                            ]
                                          }
                                        ],
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"protected",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"dealloc",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"// memory will be freed by GC } } \n"
                                  }
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"public class ReferenceCountedObject { private int referenceCount; public ReferenceCountedObject() { this.retain(); } public synchronized ReferenceCountedObject retain() { referenceCount++; return this; } public synchronized void release() { if (referenceCount == 1) { this.dealloc(); } else { referenceCount--; } } protected void dealloc() { // memory will be freed by GC } } \n...\n}...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "count":7,
                    "retain":2,
                    "object":3,
                    "releas":1,
                    "freed":1,
                    "refer":7,
                    "dealloc":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ReferenceCountedObject",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"this",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"retain",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"this",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"dealloc",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"referenceCount",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}