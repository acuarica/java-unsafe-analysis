{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11682658,
    "title":"Weblogic memory leak on deploy undeploy",
    "comments":[
      
    ],
    "tags":[
      "java",
      "java-ee",
      "memory-leaks",
      "weblogic"
    ],
    "creationDate":"2012-07-27",
    "lastActivityDate":"2013-09-04",
    "lastEditDate":"2013-09-04",
    "score":1,
    "viewCount":3913,
    "owner":{
      "type":"StackOverflowUser",
      "id":766149,
      "displayName":"stracktracer",
      "reputation":781
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Weblogic 10.3.5 running with 32 bit JRockit R 28.2.4-14 using <code>-Xmx1024m -Xms1024m</code> always gets out of native memory after 5-8 Undeploy-Redeploy cycles of our Java EE EAR files.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11682658]-[526233596]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Weblogic 10.3.5 running with 32 bit JRockit R 28.2.4-14 using <code>-Xmx1024m -Xms1024m</code> always gets out of native memory after 5-8 Undeploy-Redeploy cycles of our Java EE EAR files.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bit":1,
                  "xms":1,
                  "undeploy":1,
                  "run":1,
                  "xmx":1,
                  "redeploy":1,
                  "weblog":1,
                  "code":2,
                  "ear":1,
                  "jrockit":1,
                  "file":1,
                  "cycl":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>According to the error message and what is displayed in VisualVM, it is not the Java Heap that gets too full but insufficient system memory which is available. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11682658]-[-817308204]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>According to the error message and what is displayed in VisualVM, it is not the Java Heap that gets too full but insufficient system memory which is available. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "system":1,
                  "full":1,
                  "insuffici":1,
                  "error":1,
                  "visual":1,
                  "messag":1,
                  "heap":1,
                  "display":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"java.lang.OutOfMemoryError: class allocation, 865324184 loaded, 464M footprint, in check_alloc (src/jvm/model/classload/classalloc.c:215). Attempting to allocate 1G bytes There is insufficient native memory for the Java Runtime Environment to continue. Possible reasons: The system is out of physical RAM or swap space In 32 bit mode, the process size limit was hit Possible solutions: Reduce memory load on the system Increase physical memory or swap space Check if swap backing store is full Use 64 bit Java on a 64 bit OS Decrease Java heap size (-Xmx/-Xms) Decrease number of Java threads Decrease Java thread stack sizes (-Xss) Disable compressed references (-XXcompressedRefs=false) at sun.misc.Unsafe.defineClass(Native Method) at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:45) at sun.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:381) at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:377) at sun.reflect.MethodAccessorGenerator.generateSerializationConstructor(MethodAccessorGenerator.java:95) at sun.reflect.ReflectionFactory.newConstructorForSerialization(ReflectionFactory.java:313) at java.io.ObjectStreamClass.getSerializableConstructor(ObjectStreamClass.java:1322) "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[11682658]-[-566980058]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"lang",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"OutOfMemoryError",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":": "
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"allocation",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":", 865324184 loaded, 464M footprint, in "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"check_alloc",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" (src/jvm/model/classload/classalloc.c:215). Attempting to allocate 1G bytes There is insufficient native memory for the Java Runtime Environment to continue. Possible reasons: The system is out of physical RAM or swap space In 32 bit mode, the process size limit was hit Possible solutions: Reduce memory load on the system Increase physical memory or swap space Check if swap backing store is full Use 64 bit Java on a 64 bit OS Decrease Java heap size (-Xmx/-Xms) Decrease number of Java threads Decrease Java thread stack sizes (-Xss) Disable compressed references (-"
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"XXcompressedRefs",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"=false) "
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"defineClass",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"Native Method"
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"ClassDefiner",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"defineClass",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"ClassDefiner.java",
                    "lineNumber":45
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"MethodAccessorGenerator$1",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"run",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"MethodAccessorGenerator.java",
                    "lineNumber":381
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"MethodAccessorGenerator",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"generate",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"MethodAccessorGenerator.java",
                    "lineNumber":377
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"MethodAccessorGenerator",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"generateSerializationConstructor",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"MethodAccessorGenerator.java",
                    "lineNumber":95
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"reflect",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"ReflectionFactory",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"newConstructorForSerialization",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"ReflectionFactory.java",
                    "lineNumber":313
                  }
                },
                {
                  "type":"StackTraceLineNode",
                  "methodName":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"io",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"ObjectStreamClass",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"getSerializableConstructor",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "location":{
                    "type":"SourceLocationNode",
                    "fileName":"ObjectStreamClass.java",
                    "lineNumber":1322
                  }
                }
              ]
            },
            "rawText":"java.lang.OutOfMemoryError: class allocation, 865324184 loaded, 464M footprint, in check_alloc (src/jvm/model/classload/classalloc.c:215). Attempting to allocate 1G bytes There is insufficient native memory for the Java Runtime Environment to continue. Possible reasons: The system is out of physical RAM or swap space In 32 bit mode, the process size limit was hit Possible solutions: Reduce memory load on the system Increase physical memory or swap space Check if swap backing store is full Use 64 bit Java on a 64 bit OS Decrease Java heap size (-Xmx/-Xms) Decrease number of Java threads Decrease Java thread stack sizes (-Xss) Disable compressed references (-XXcompressedRefs=false) at sun.misc.Unsafe.defineClass(Native Method)at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:45)at sun.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:381)at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:377)at sun.reflect.MethodAccessorGenerator.generateSerializationConstructor(MethodAccessorGenerator.java:95)at sun.reflect.ReflectionFactory.newConstructorForSerialization(ReflectionFactory.java:313)at java.io.ObjectStreamClass.getSerializableConstructor(ObjectStreamClass.java:1322)",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":2,
                  "number":1,
                  "jvm":1,
                  "method":7,
                  "disabl":1,
                  "runtim":1,
                  "bit":3,
                  "alloc":3,
                  "ram":1,
                  "reduc":1,
                  "xms":1,
                  "size":3,
                  "system":2,
                  "model":1,
                  "decreas":3,
                  "process":1,
                  "hit":1,
                  "run":1,
                  "full":1,
                  "serializ":1,
                  "sun":6,
                  "xmx":1,
                  "constructor":3,
                  "store":1,
                  "load":2,
                  "ref":1,
                  "insuffici":1,
                  "reason":1,
                  "factori":2,
                  "object":2,
                  "classalloc":1,
                  "accessor":6,
                  "thread":2,
                  "check":2,
                  "space":2,
                  "error":1,
                  "stream":2,
                  "compress":1,
                  "back":1,
                  "src":1,
                  "refer":1,
                  "stack":1,
                  "increas":1,
                  "misc":1,
                  "xxcompress":1,
                  "swap":3,
                  "mode":1,
                  "generat":8,
                  "fals":1,
                  "unsaf":1,
                  "classload":1,
                  "heap":1,
                  "lang":1,
                  "attempt":1,
                  "defin":4,
                  "environ":1,
                  "limit":1,
                  "byte":1,
                  "reflect":7,
                  "solut":1,
                  "physic":2,
                  "xss":1,
                  "footprint":1,
                  "memori":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"OutOfMemoryError",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"XXcompressedRefs",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I understand the possible solutions that are suggested, but as everything is fine if the application is only deployed once, it seems classes are not correctly freed when undeploying. A heap dump after undeployment shows there are many of our classes left in memory. Shouldn't they be garbage collected then?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11682658]-[1364137018]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I understand the possible solutions that are suggested, but as everything is fine if the application is only deployed once, it seems classes are not correctly freed when undeploying. A heap dump after undeployment shows there are many of our classes left in memory. Shouldn't they be garbage collected then?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "show":1,
                  "suggest":1,
                  "undeploy":2,
                  "correct":1,
                  "left":1,
                  "understand":1,
                  "dump":1,
                  "freed":1,
                  "applic":1,
                  "deploy":1,
                  "class":2,
                  "fine":1,
                  "collect":1,
                  "heap":1,
                  "shouldn":1,
                  "solut":1,
                  "garbag":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The path to GC Root shows a Thread <code>&lt;JNI Local&gt; java.lang.Thread @ 0x129ac778 JDWP Transport Listener: dt_socket Native Stack, Thread</code>. There is no traffic on the server and I don't know why this stays to be active.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11682658]-[1604066760]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The path to GC Root shows a Thread <code>&lt;JNI Local&gt; java.lang.Thread @ 0x129ac778 JDWP Transport Listener: dt_socket Native Stack, Thread</code>. There is no traffic on the server and I don't know why this stays to be active.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"JNI"
                  },
                  "attributes":[
                    {
                      "type":"XmlAttributeNode",
                      "name":{
                        "type":"XmlNameNode",
                        "value":"Local"
                      }
                    }
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"lang",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Thread",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"dt_socket",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "show":1,
                  "socket":1,
                  "server":1,
                  "path":1,
                  "root":1,
                  "local":1,
                  "code":2,
                  "jni":1,
                  "transport":1,
                  "thread":3,
                  "listen":1,
                  "activ":1,
                  "stack":1,
                  "traffic":1,
                  "stay":1,
                  "jdwp":1,
                  "lang":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Thread",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11682708,
      "questionId":11682658,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":15488541,
          "postId":11682708,
          "creationDate":"2012-07-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":766149,
            "displayName":"stracktracer",
            "reputation":781
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Right that's the error I get when using Hotspot JVM. Even after increasing MaxPermGen to 256M (of 1024!) I keep getting the error. I'll check the links you provided..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11682708-cu15488541]-[-973899394]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Right that's the error I get when using Hotspot JVM. Even after increasing MaxPermGen to 256M (of 1024!) I keep getting the error. I'll check the links you provided..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"MaxPermGen",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "provid":1,
                        "hotspot":1,
                        "max":1,
                        "check":1,
                        "error":2,
                        "link":1,
                        "increas":1,
                        "perm":1,
                        "gen":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"MaxPermGen",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15498867,
          "postId":11682708,
          "creationDate":"2012-07-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1349691,
            "displayName":"Philippe Marschall",
            "reputation":2658
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That looks like a debug connection. Do the memory leaks also happen when you don't attach a debugger?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11682708-cu15498867]-[-214467349]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That looks like a debug connection. Do the memory leaks also happen when you don't attach a debugger?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "connect":1,
                        "happen":1,
                        "leak":1,
                        "debug":1,
                        "attach":1,
                        "debugg":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15492055,
          "postId":11682708,
          "creationDate":"2012-07-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":766149,
            "displayName":"stracktracer",
            "reputation":781
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"According to the links you gave, any long running threads or database connections might still have references. I suspended a batch client accessing the server via t3, but that's not the problem. After Undeployment, I still have some of my objects alive, and looking at the references I see that `\n<jni local=\"\">\n  java.lang.Thread @ 0x129ac778 JDWP Transport Listener: dt_socket Native Stack, Thread` is displayed as the culprit. What is that thread and why is it still active?\n</jni>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11682708-cu15492055]-[1328608752]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"According to the links you gave, any long running threads or database connections might still have references. I suspended a batch client accessing the server via t3, but that's not the problem. After Undeployment, I still have some of my objects alive, and looking at the references I see that `\n<jni local=\"\">\n  java.lang.Thread @ 0x129ac778 JDWP Transport Listener: dt_socket Native Stack, Thread` is displayed as the culprit. What is that thread and why is it still active?\n</jni>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"java",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Thread",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"dt_socket",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "aliv":1,
                        "socket":1,
                        "server":1,
                        "connect":1,
                        "culprit":1,
                        "problem":1,
                        "undeploy":1,
                        "run":1,
                        "local":1,
                        "suspend":1,
                        "object":1,
                        "jni":2,
                        "transport":1,
                        "batch":1,
                        "thread":4,
                        "listen":1,
                        "activ":1,
                        "client":1,
                        "link":1,
                        "refer":2,
                        "gave":1,
                        "stack":1,
                        "jdwp":1,
                        "databas":1,
                        "lang":1,
                        "display":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"java",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"lang",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Thread",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":15551722,
          "postId":11682708,
          "creationDate":"2012-07-30",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":766149,
            "displayName":"stracktracer",
            "reputation":781
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, they also happen without debugger attached."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11682708-cu15551722]-[-472556187]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, they also happen without debugger attached."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "happen":1,
                        "debugg":1,
                        "attach":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-07-27",
      "lastActivityDate":"2012-07-27",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":467944,
        "displayName":"Korgen",
        "reputation":2647
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This memory leak is most likely caused in the perm-gen space (this is how it's called on Hotspot JVM). JRockit doesnt have dedicated Perm-Gen space, but uses &quot;regular&quot; heap space for this. Have a look at the following sites which I found really helpful for understanding what's happening here:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11682708]-[1689270842]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This memory leak is most likely caused in the perm-gen space (this is how it's called on Hotspot JVM). JRockit doesnt have dedicated Perm-Gen space, but uses &quot;regular&quot; heap space for this. Have a look at the following sites which I found really helpful for understanding what's happening here:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "happen":1,
                    "understand":1,
                    "site":1,
                    "leak":1,
                    "regular":1,
                    "hotspot":1,
                    "help":1,
                    "found":1,
                    "doesnt":1,
                    "space":3,
                    "jrockit":1,
                    "perm":2,
                    "caus":1,
                    "quot":2,
                    "dedic":1,
                    "heap":1,
                    "call":1,
                    "gen":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://plumbr.eu/blog/what-is-a-permgen-leak\"rel=\"nofollow\">What is a PermGen leak</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11682708]-[257757620]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://plumbr.eu/blog/what-is-a-permgen-leak\"rel=\"nofollow\">What is a PermGen leak</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PermGen",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "leak":2,
                    "plumbr":1,
                    "blog":1,
                    "nofollow":1,
                    "perm":1,
                    "href":1,
                    "http":1,
                    "permgen":1,
                    "gen":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PermGen",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://plumbr.eu/blog/busting-permgen-myths\"rel=\"nofollow\">Busting PermGen Myths</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11682708]-[-630277048]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://plumbr.eu/blog/busting-permgen-myths\"rel=\"nofollow\">Busting PermGen Myths</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PermGen",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bust":2,
                    "rel":1,
                    "plumbr":1,
                    "myth":2,
                    "blog":1,
                    "nofollow":1,
                    "perm":1,
                    "href":1,
                    "http":1,
                    "permgen":1,
                    "gen":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PermGen",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11686716,
      "questionId":11682658,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":15495189,
          "postId":11686716,
          "creationDate":"2012-07-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":766149,
            "displayName":"stracktracer",
            "reputation":781
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That's what I did. See last paragraph of the question. Doesn't really help me in this case what this thread still is and why it references my classes."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11686716-cu15495189]-[505079157]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That's what I did. See last paragraph of the question. Doesn't really help me in this case what this thread still is and why it references my classes."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "thread":1,
                        "paragraph":1,
                        "refer":1,
                        "class":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22974618,
          "postId":11686716,
          "creationDate":"2013-04-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":665967,
            "displayName":"meso_2600",
            "reputation":372
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Have you found the solution? :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11686716-cu22974618]-[709346959]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Have you found the solution? :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "found":1,
                        "solut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-07-27",
      "lastActivityDate":"2012-07-27",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1349691,
        "displayName":"Philippe Marschall",
        "reputation":2658
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I find <a href=\"http://www.eclipse.org/mat/\"rel=\"nofollow\">Eclipse MAT</a> very helpful for debugging PermGen leaks: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11686716]-[-870229032]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I find <a href=\"http://www.eclipse.org/mat/\"rel=\"nofollow\">Eclipse MAT</a> very helpful for debugging PermGen leaks: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"PermGen",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "mat":2,
                    "rel":1,
                    "leak":1,
                    "debug":1,
                    "eclips":2,
                    "help":1,
                    "nofollow":1,
                    "perm":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "gen":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"PermGen",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>My approach is usually something like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11686716]-[-519065037]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>My approach is usually something like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "approach":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Do a heap dump after undeployment</li> \n <li>Find one of you application classes (doesn't really matter which, all should leak). Alternatively display duplicate classes.</li> \n <li>Display the path to the GC root</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11686716]-[-192530907]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Do a heap dump after undeployment</li> \n <li>Find one of you application classes (doesn't really matter which, all should leak). Alternatively display duplicate classes.</li> \n <li>Display the path to the GC root</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "path":1,
                    "root":1,
                    "undeploy":1,
                    "leak":1,
                    "dump":1,
                    "altern":1,
                    "applic":1,
                    "class":2,
                    "matter":1,
                    "heap":1,
                    "duplic":1,
                    "display":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Why the fix looks like depends on the cause.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11686716]-[1223043868]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Why the fix looks like depends on the cause.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "depend":1,
                    "fix":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11717170,
      "questionId":11682658,
      "comments":[
        
      ],
      "creationDate":"2012-07-30",
      "lastActivityDate":"2012-07-30",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":431270,
        "displayName":"Anton Arhipov",
        "reputation":3070
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Most likely some classes are holding to the classloader which causes the full application to leak on redeploy. You can read about <a href=\"http://zeroturnaround.com/labs/reloading-objects-classes-classloaders/\"rel=\"nofollow\">this article about classloaders</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11717170]-[-770586874]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Most likely some classes are holding to the classloader which causes the full application to leak on redeploy. You can read about <a href=\"http://zeroturnaround.com/labs/reloading-objects-classes-classloaders/\"rel=\"nofollow\">this article about classloaders</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "lab":1,
                    "full":1,
                    "rel":1,
                    "leak":1,
                    "zeroturnaround":1,
                    "redeploy":1,
                    "articl":1,
                    "object":1,
                    "hold":1,
                    "nofollow":1,
                    "applic":1,
                    "class":2,
                    "classload":3,
                    "href":1,
                    "http":1,
                    "reload":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}