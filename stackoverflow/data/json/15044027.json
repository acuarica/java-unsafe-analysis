{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":15044027,
    "title":"utf 8 charset doesn't work with javax mail",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":21160456,
        "postId":15044027,
        "creationDate":"2013-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1662364,
          "displayName":"Rohwedder",
          "reputation":153
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I did that and it didn't work. Though I get an error when sending email, when writing only UTF as the encoding as you suggest."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15044027-cu21160456]-[896382081]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I did that and it didn't work. Though I get an error when sending email, when writing only UTF as the encoding as you suggest."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "email":1,
                      "suggest":1,
                      "work":1,
                      "encod":1,
                      "error":1,
                      "utf":1,
                      "write":1,
                      "send":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21165782,
        "postId":15044027,
        "creationDate":"2013-02-24",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1662364,
          "displayName":"Rohwedder",
          "reputation":153
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Yeh I know, but that doesn't seem to work eiter :( I find it really strange"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15044027-cu21165782]-[-515908663]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Yeh I know, but that doesn't seem to work eiter :( I find it really strange"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "work":1,
                      "yeh":1,
                      "eiter":1,
                      "strang":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21146451,
        "postId":15044027,
        "creationDate":"2013-02-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":984823,
          "displayName":"Joop Eggen",
          "reputation":35002
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"`setText(message, &quot;UTF&quot;)`, so both for subject and content the encoding must be set."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15044027-cu21146451]-[1323793770]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"`setText(message, &quot;UTF&quot;)`, so both for subject and content the encoding must be set."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"setText",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "subject":1,
                      "set":2,
                      "text":1,
                      "encod":1,
                      "utf":1,
                      "content":1,
                      "quot":2,
                      "messag":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":21164206,
        "postId":15044027,
        "creationDate":"2013-02-24",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":984823,
          "displayName":"Joop Eggen",
          "reputation":35002
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Sorry that was a typo, &quot;UTF-8&quot; of course."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15044027-cu21164206]-[-836775172]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Sorry that was a typo, &quot;UTF-8&quot; of course."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "quot":2,
                      "utf":1,
                      "typo":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "character-encoding",
      "javax.mail"
    ],
    "creationDate":"2013-02-23",
    "lastActivityDate":"2015-01-02",
    "score":4,
    "viewCount":8110,
    "owner":{
      "type":"StackOverflowUser",
      "id":1662364,
      "displayName":"Rohwedder",
      "reputation":153
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have used Javax Mail API, for sending emails. I am using a contact formular to send the input, which has to be send to a specific email.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15044027]-[1728605749]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have used Javax Mail API, for sending emails. I am using a contact formular to send the input, which has to be send to a specific email.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "email":2,
                  "contact":1,
                  "javax":1,
                  "mail":1,
                  "specif":1,
                  "api":1,
                  "formular":1,
                  "input":1,
                  "send":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The email is send without problems, though I am a danish guy, and I am therefore in need of three danish characters which is '&aelig;', '&oslash;' and '&aring;', in the subject and the email text.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15044027]-[372637643]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The email is send without problems, though I am a danish guy, and I am therefore in need of three danish characters which is '&aelig;', '&oslash;' and '&aring;', in the subject and the email text.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "charact":1,
                  "are":1,
                  "guy":1,
                  "subject":1,
                  "email":2,
                  "problem":1,
                  "aelig":1,
                  "text":1,
                  "oslash":1,
                  "danish":2,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have therefore seen that I can use UTF-8 character encoding, to provide these characters, but when my mail is send I only see some strange letters - '&atilde;&brvbar;', '&atilde;&cedil;' and '&atilde;&yen;' - instead of the danish letters - '&aelig;', '&oslash;' and '&aring;'.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15044027]-[-1597226008]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have therefore seen that I can use UTF-8 character encoding, to provide these characters, but when my mail is send I only see some strange letters - '&atilde;&brvbar;', '&atilde;&cedil;' and '&atilde;&yen;' - instead of the danish letters - '&aelig;', '&oslash;' and '&aring;'.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "provid":1,
                  "charact":2,
                  "are":1,
                  "atild":3,
                  "aelig":1,
                  "oslash":1,
                  "letter":2,
                  "encod":1,
                  "danish":1,
                  "mail":1,
                  "utf":1,
                  "brvbar":1,
                  "cedil":1,
                  "strang":1,
                  "send":1,
                  "yen":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My method to send the email is looking like this</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15044027]-[658362736]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My method to send the email is looking like this</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "send":1,
                  "email":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public void sendEmail(String name, String fromEmail, String subject, String message) throws AddressException, MessagingException, UnsupportedEncodingException, SendFailedException { //Set Mail properties Properties props = System.getProperties(); props.setProperty(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;); props.setProperty(&quot;mail.smtp.host&quot;, &quot;smtp.gmail.com&quot;); props.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;); props.setProperty(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;); props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;); props.setProperty(&quot;mail.smtp.port&quot;, &quot;465&quot;); Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(&quot;my_username&quot;, &quot;my_password&quot;); } }); //Create the email with variable input MimeMessage mimeMessage = new MimeMessage(session); mimeMessage.setHeader(&quot;Content-Type&quot;, &quot;text/plain; charset=UTF-8&quot;); mimeMessage.setFrom(new InternetAddress(fromEmail, name)); mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(&quot;my_email&quot;)); mimeMessage.setSubject(subject, &quot;utf-8&quot;); mimeMessage.setContent(message, &quot;text/plain&quot;); //Send the email Transport.send(mimeMessage); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[15044027]-[1335815041]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"sendEmail",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"name",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "formalParameterDeclarator":{
                          "type":"FormalParameterDeclsNode",
                          "modifiers":[
                            
                          ],
                          "parameterType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"String",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "nextDeclarator":{
                            "type":"AdditionalFormalParameterDeclNode",
                            "variableDeclarator":{
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"fromEmail",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ]
                            },
                            "formalParameterDeclarator":{
                              "type":"FormalParameterDeclsNode",
                              "modifiers":[
                                
                              ],
                              "parameterType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"String",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "nextDeclarator":{
                                "type":"AdditionalFormalParameterDeclNode",
                                "variableDeclarator":{
                                  "type":"VariableDeclaratorNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"subject",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepth":[
                                    
                                  ]
                                },
                                "formalParameterDeclarator":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"message",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "thrownExceptions":{
                    "type":"ThrownExceptionsNode",
                    "qualifiedIdentifierList":{
                      "type":"QualifiedIdentifierListNode",
                      "qualifiedNames":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"AddressException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MessagingException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"UnsupportedEncodingException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SendFailedException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"//Set Mail properties Properties props = System.getProperties(); props.setProperty(\"mail.smtp.starttls.enable\", \"true\"); props.setProperty(\"mail.smtp.host\", \"smtp.gmail.com\"); props.setProperty(\"mail.smtp.socketFactory.port\", \"465\"); props.setProperty(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); props.setProperty(\"mail.smtp.auth\", \"true\"); props.setProperty(\"mail.smtp.port\", \"465\"); Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(\"my_username\", \"my_password\"); } }); //Create the email with variable input MimeMessage mimeMessage = new MimeMessage(session); mimeMessage.setHeader(\"Content-Type\", \"text/plain; charset=UTF-8\"); mimeMessage.setFrom(new InternetAddress(fromEmail, name)); mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(\"my_email\")); mimeMessage.setSubject(subject, \"utf-8\"); mimeMessage.setContent(message, \"text/plain\"); //Send the email Transport.send(mimeMessage); } \n"
                      }
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public void sendEmail(String name, String fromEmail, String subject, String message) throws AddressException, MessagingException, UnsupportedEncodingException, SendFailedException { //Set Mail properties Properties props = System.getProperties(); props.setProperty(\"mail.smtp.starttls.enable\", \"true\"); props.setProperty(\"mail.smtp.host\", \"smtp.gmail.com\"); props.setProperty(\"mail.smtp.socketFactory.port\", \"465\"); props.setProperty(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); props.setProperty(\"mail.smtp.auth\", \"true\"); props.setProperty(\"mail.smtp.port\", \"465\"); Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() { @Override protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(\"my_username\", \"my_password\"); } }); //Create the email with variable input MimeMessage mimeMessage = new MimeMessage(session); mimeMessage.setHeader(\"Content-Type\", \"text/plain; charset=UTF-8\"); mimeMessage.setFrom(new InternetAddress(fromEmail, name)); mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(\"my_email\")); mimeMessage.setSubject(subject, \"utf-8\"); mimeMessage.setContent(message, \"text/plain\"); //Send the email Transport.send(mimeMessage); } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "properti":9,
                  "smtp":7,
                  "fail":1,
                  "sslsocket":1,
                  "socket":2,
                  "subject":3,
                  "system":1,
                  "email":6,
                  "auth":1,
                  "authent":4,
                  "host":1,
                  "ssl":1,
                  "set":12,
                  "starttl":1,
                  "overrid":1,
                  "mime":9,
                  "text":2,
                  "factori":3,
                  "net":1,
                  "javax":2,
                  "internet":2,
                  "encod":1,
                  "transport":1,
                  "port":2,
                  "mail":8,
                  "utf":2,
                  "charset":1,
                  "gmail":1,
                  "unsupport":1,
                  "content":2,
                  "true":2,
                  "session":4,
                  "plain":2,
                  "address":3,
                  "enabl":1,
                  "header":1,
                  "prop":8,
                  "messag":13,
                  "recipi":2,
                  "type":2,
                  "variabl":1,
                  "creat":1,
                  "usernam":1,
                  "input":1,
                  "instanc":1,
                  "password":4,
                  "send":4
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"name",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"fromEmail",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"subject",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"message",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Please help me find out how I can correct this 'error'.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15044027]-[1203471930]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Please help me find out how I can correct this 'error'.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "error":1,
                  "correct":1,
                  "find":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":15044071,
      "questionId":15044027,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":21160440,
          "postId":15044071,
          "creationDate":"2013-02-24",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1662364,
            "displayName":"Rohwedder",
            "reputation":153
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Sorry I have tried a lot of things from your link inclusive your own 'solution', and it doesn't seem to work :("
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15044071-cu21160440]-[8175335]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Sorry I have tried a lot of things from your link inclusive your own 'solution', and it doesn't seem to work :("
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thing":1,
                        "work":1,
                        "link":1,
                        "inclus":1,
                        "lot":1,
                        "solut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-02-23",
      "lastActivityDate":"2013-02-23",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":980092,
        "displayName":"Arsen Alexanyan",
        "reputation":1450
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Maybe You should provide also UTF-8 here</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15044071]-[1131132559]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Maybe You should provide also UTF-8 here</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "utf":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"mimeMessage.setContent(message, &quot;text/plain; charset=UTF-8&quot;); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[15044071]-[1552981627]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"mimeMessage",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"setContent",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"message",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"text/plain; charset=UTF-8\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"mimeMessagesetContent(message, \"text/plain; charset=UTF-8\"); ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "messageset":1,
                    "mime":1,
                    "text":1,
                    "utf":1,
                    "charset":1,
                    "content":1,
                    "plain":1,
                    "messag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"mimeMessage",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setContent",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"message",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"text/plain; charset=UTF-8\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You have to look at <a href=\"http://www.coderanch.com/t/274480/java/java/JavaMail-set-content-utf\">http://www.coderanch.com/t/274480/java/java/JavaMail-set-content-utf</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15044071]-[-654352146]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You have to look at <a href=\"http://www.coderanch.com/t/274480/java/java/JavaMail-set-content-utf\">http://www.coderanch.com/t/274480/java/java/JavaMail-set-content-utf</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"JavaMail",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "set":2,
                    "mail":2,
                    "utf":2,
                    "content":2,
                    "href":1,
                    "http":2,
                    "coderanch":2,
                    "www":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"JavaMail",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":15166182,
      "questionId":15044027,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":42516341,
          "postId":15166182,
          "creationDate":"2014-11-18",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":290442,
            "displayName":"Thor Hovden",
            "reputation":350
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thank you very much!!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15166182-cu42516341]-[1762803520]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thank you very much!!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-03-01",
      "lastActivityDate":"2013-03-01",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1662364,
        "displayName":"Rohwedder",
        "reputation":153
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>After spending a lot of time on debugging, and searching the internet for a clue, I have found a solution to my problem.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15166182]-[-1274427803]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>After spending a lot of time on debugging, and searching the internet for a clue, I have found a solution to my problem.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "spend":1,
                    "problem":1,
                    "debug":1,
                    "internet":1,
                    "found":1,
                    "lot":1,
                    "time":1,
                    "solut":1,
                    "clue":1,
                    "search":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It seems that whenever I sended data through a web request, my application didn't encode the characters with UTF-8 encoding. This meant that the data which was send from my contact form, which contained &aelig;, &oslash; and &aring; characters, couldn't be handled correct by the character encoding.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15166182]-[-1620139318]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It seems that whenever I sended data through a web request, my application didn't encode the characters with UTF-8 encoding. This meant that the data which was send from my contact form, which contained &aelig;, &oslash; and &aring; characters, couldn't be handled correct by the character encoding.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "charact":3,
                    "are":1,
                    "request":1,
                    "correct":1,
                    "data":2,
                    "aelig":1,
                    "contain":1,
                    "contact":1,
                    "oslash":1,
                    "web":1,
                    "meant":1,
                    "encod":3,
                    "utf":1,
                    "applic":1,
                    "form":1,
                    "handl":1,
                    "send":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The solution seemed to setup a <strong>Character Encoding Filter</strong>, in my Deployment Descriptor, which would encode all incoming request from the web to be with the character encoding UTF-8.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15166182]-[-1548346511]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The solution seemed to setup a <strong>Character Encoding Filter</strong>, in my Deployment Descriptor, which would encode all incoming request from the web to be with the character encoding UTF-8.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "charact":2,
                    "request":1,
                    "descriptor":1,
                    "strong":2,
                    "web":1,
                    "filter":1,
                    "encod":3,
                    "utf":1,
                    "deploy":1,
                    "incom":1,
                    "solut":1,
                    "setup":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"private void registerCharacterEncodingFilter(ServletContext servletContext) { CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter(); encodingFilter.setEncoding(&quot;UTF-8&quot;); encodingFilter.setForceEncoding(true); FilterRegistration.Dynamic characterEncodingFilter = servletContext.addFilter(&quot;characterEncodingFilter&quot;, encodingFilter); characterEncodingFilter.addMappingForUrlPatterns(null, false, &quot;/*&quot;); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[15166182]-[-1716919014]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"private",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"registerCharacterEncodingFilter",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ServletContext",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"servletContext",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"encodingFilter",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"ConstructorCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"CharacterEncodingFilter",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionArgs":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"CharacterEncodingFilter",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"encodingFilter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"setEncoding",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"UTF-8\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"encodingFilter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"setForceEncoding",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"BooleanLiteralNode",
                                    "valueRep":"true"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"characterEncodingFilter",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"servletContext",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"addFilter",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"characterEncodingFilter\""
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"encodingFilter",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"FilterRegistration",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Dynamic",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"characterEncodingFilter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"addMappingForUrlPatterns",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"NullLiteralNode"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"BooleanLiteralNode",
                                    "valueRep":"false"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"/*\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"private void registerCharacterEncodingFilter(ServletContext servletContext) { CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter(); encodingFilter.setEncoding(\"UTF-8\"); encodingFilter.setForceEncoding(true); FilterRegistration.Dynamic characterEncodingFilter = servletContext.addFilter(\"characterEncodingFilter\", encodingFilter); characterEncodingFilter.addMappingForUrlPatterns(null, false, \"/*\"); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "charact":6,
                    "pattern":1,
                    "map":1,
                    "url":1,
                    "context":3,
                    "set":2,
                    "dynam":1,
                    "regist":1,
                    "servlet":3,
                    "registr":1,
                    "filter":12,
                    "encod":12,
                    "utf":1,
                    "true":1,
                    "fals":1,
                    "forc":1,
                    "add":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"FilterRegistration",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Dynamic",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ServletContext",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"CharacterEncodingFilter",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"encodingFilter",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setEncoding",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"UTF-8\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"encodingFilter",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setForceEncoding",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"servletContext",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"addFilter",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"characterEncodingFilter\""
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"encodingFilter",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"characterEncodingFilter",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"addMappingForUrlPatterns",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"false"
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"/*\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"servletContext",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"encodingFilter",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"CharacterEncodingFilter",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"CharacterEncodingFilter",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"characterEncodingFilter",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"servletContext",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"addFilter",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"characterEncodingFilter\""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"encodingFilter",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"FilterRegistration",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Dynamic",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This filter sets the encoding to be UTF-8 and force the encoding to all requests comming at the url ' /* '.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15166182]-[-73455708]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This filter sets the encoding to be UTF-8 and force the encoding to all requests comming at the url ' /* '.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "request":1,
                    "url":1,
                    "set":1,
                    "filter":1,
                    "encod":2,
                    "utf":1,
                    "forc":1,
                    "com":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18251111,
      "questionId":15044027,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":30181469,
          "postId":18251111,
          "creationDate":"2013-11-27",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1662364,
            "displayName":"Rohwedder",
            "reputation":153
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think including a filter is easier??"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18251111-cu30181469]-[1317697580]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think including a filter is easier??"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "easier":1,
                        "filter":1,
                        "includ":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":44910238,
          "postId":18251111,
          "creationDate":"2015-02-02",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1833961,
            "displayName":"bvdb",
            "reputation":1150
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Rohwedder, your filter may solve **your** specific problem. But it is not the answer to your initial question. Your question was about sending e-mails, not about handling web requests."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18251111-cu44910238]-[-74501749]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Rohwedder, your filter may solve **your** specific problem. But it is not the answer to your initial question. Your question was about sending e-mails, not about handling web requests."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Rohwedder",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "question":2,
                        "request":1,
                        "problem":1,
                        "rohwedd":1,
                        "web":1,
                        "filter":1,
                        "mail":1,
                        "specif":1,
                        "answer":1,
                        "initi":1,
                        "handl":1,
                        "send":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-15",
      "lastActivityDate":"2013-08-15",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2582242,
        "displayName":"user2582242",
        "reputation":11
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's easy, run your project with parameter -Dfile.ecoding=UTF-8! ex: java -Dfile.encoding=UTF-8 -jar MyProject.jar</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18251111]-[-691526212]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's easy, run your project with parameter -Dfile.ecoding=UTF-8! ex: java -Dfile.encoding=UTF-8 -jar MyProject.jar</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "easi":1,
                    "project":2,
                    "run":1,
                    "dfile":2,
                    "encod":1,
                    "paramet":1,
                    "ecod":1,
                    "utf":2,
                    "jar":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":27404861,
      "questionId":15044027,
      "comments":[
        
      ],
      "creationDate":"2014-12-10",
      "lastActivityDate":"2015-01-02",
      "lastEditDate":"2015-01-02",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1833961,
        "displayName":"bvdb",
        "reputation":1150
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>For all e-mails</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[1046733915]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>For all e-mails</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "mail":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are a couple of <a href=\"http://docs.oracle.com/javaee/6/api/javax/mail/internet/package-summary.html\">system properties related to mailing</a>, that can probably simplify your code. I am talking about this specific property actually: <code>&quot;mail.mime.charset&quot;</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[-1707353369]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are a couple of <a href=\"http://docs.oracle.com/javaee/6/api/javax/mail/internet/package-summary.html\">system properties related to mailing</a>, that can probably simplify your code. I am talking about this specific property actually: <code>&quot;mail.mime.charset&quot;</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":2,
                    "javae":1,
                    "system":1,
                    "relat":1,
                    "simplifi":1,
                    "summari":1,
                    "talk":1,
                    "oracl":1,
                    "mime":1,
                    "doc":1,
                    "code":3,
                    "javax":1,
                    "internet":1,
                    "coupl":1,
                    "mail":3,
                    "charset":1,
                    "specif":1,
                    "quot":2,
                    "api":1,
                    "html":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>The <strong><code>mail.mime.charset</code></strong> System property can be used <strong>to specify the default MIME charset</strong> to use for encoded words and text parts that don't otherwise specify a charset. Normally, the default MIME charset is derived from the default Java charset, as specified in the <code>file.encoding</code> System property. Most applications will have no need to explicitly set the default MIME charset. In cases where the default MIME charset to be used for mail messages is different than the charset used for files stored on the system, this property should be set. </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[-1712835695]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>The <strong><code>mail.mime.charset</code></strong> System property can be used <strong>to specify the default MIME charset</strong> to use for encoded words and text parts that don't otherwise specify a charset. Normally, the default MIME charset is derived from the default Java charset, as specified in the <code>file.encoding</code> System property. Most applications will have no need to explicitly set the default MIME charset. In cases where the default MIME charset to be used for mail messages is different than the charset used for files stored on the system, this property should be set. </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":3,
                    "deriv":1,
                    "system":3,
                    "set":2,
                    "store":1,
                    "mime":5,
                    "text":1,
                    "strong":4,
                    "blockquot":2,
                    "code":4,
                    "encod":2,
                    "mail":2,
                    "charset":8,
                    "applic":1,
                    "file":2,
                    "part":1,
                    "messag":1,
                    "case":1,
                    "explicit":1,
                    "word":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As you can read above, by default there is no value for the <code>mail.mime.charset</code> and the file encoding (<code>file.encoding</code> property) is used.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[2083738979]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As you can read above, by default there is no value for the <code>mail.mime.charset</code> and the file encoding (<code>file.encoding</code> property) is used.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "properti":1,
                    "mime":1,
                    "code":4,
                    "encod":2,
                    "mail":1,
                    "charset":1,
                    "file":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>For a specific e-mail</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[1136393314]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>For a specific e-mail</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "mail":1,
                    "specif":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, if you want to specify a specific encoding for a specific e-mail, then you should probably use the 2 parameter <code>setSubject(subject,charset)</code> and <code>setText(text,charset)</code> methods.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[459261360]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, if you want to specify a specific encoding for a specific e-mail, then you should probably use the 2 parameter <code>setSubject(subject,charset)</code> and <code>setText(text,charset)</code> methods.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setSubject",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setText",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "subject":2,
                    "set":2,
                    "text":2,
                    "code":4,
                    "encod":1,
                    "paramet":1,
                    "mail":1,
                    "charset":2,
                    "specif":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>If that doesn't work, then probably your input is already corrupted before it reached this point. In other words, you probably used the wrong encoding to collect your data</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[-1037546032]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>If that doesn't work, then probably your input is already corrupted before it reached this point. In other words, you probably used the wrong encoding to collect your data</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "reach":1,
                    "point":1,
                    "wrong":1,
                    "data":1,
                    "strong":2,
                    "work":1,
                    "encod":1,
                    "collect":1,
                    "word":1,
                    "corrupt":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h2>Mime types are complicated</h2>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[-167824577]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h2>Mime types are complicated</h2>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "type":1,
                    "mime":1,
                    "complic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <code>setContent(content, &quot;UTF-8&quot;)</code> (as other sources claim) will just not work. Just look at the signature of this method: <code>setContent(Object content, String mimetype)</code>. <strong>Mime type and charset are 2 totally different things.</strong> Imho, you should really be using one of the <code>setText(...)</code> methods with a charset parameter. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[382240685]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <code>setContent(content, &quot;UTF-8&quot;)</code> (as other sources claim) will just not work. Just look at the signature of this method: <code>setContent(Object content, String mimetype)</code>. <strong>Mime type and charset are 2 totally different things.</strong> Imho, you should really be using one of the <code>setText(...)</code> methods with a charset parameter. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setContent",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setContent",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setText",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "claim":1,
                    "signatur":1,
                    "set":3,
                    "thing":1,
                    "mime":1,
                    "text":1,
                    "strong":2,
                    "total":1,
                    "work":1,
                    "object":1,
                    "code":6,
                    "imho":1,
                    "paramet":1,
                    "mimetyp":1,
                    "utf":1,
                    "charset":2,
                    "content":4,
                    "quot":2,
                    "type":1,
                    "sourc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But if you persist in using a mimetype to set the charset <code>setContent(content,mimetype)</code>, then use the correct format. (not just <code>&quot;UTF-8&quot;</code>, but something like <code>&quot;text/plain; charset=UTF-8&quot;</code>). But more importantly, <strong>be aware that every mime-type has it's own ways of handling charsets.</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[468860000]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But if you persist in using a mimetype to set the charset <code>setContent(content,mimetype)</code>, then use the correct format. (not just <code>&quot;UTF-8&quot;</code>, but something like <code>&quot;text/plain; charset=UTF-8&quot;</code>). But more importantly, <strong>be aware that every mime-type has it's own ways of handling charsets.</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setContent",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"/",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"text",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"plain",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "format":1,
                    "correct":1,
                    "set":2,
                    "mime":1,
                    "text":1,
                    "strong":2,
                    "way":1,
                    "code":6,
                    "awar":1,
                    "persist":1,
                    "import":1,
                    "mimetyp":2,
                    "utf":2,
                    "charset":3,
                    "content":2,
                    "plain":1,
                    "quot":4,
                    "type":1,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>As specified in <a href=\"https://tools.ietf.org/html/rfc2046\">RFC-2046</a> the default charset for <code>text/plain</code> is <code>US-ASCII</code>, but can be overruled with an additional charset parameter. </li> \n <li>However, in <a href=\"https://tools.ietf.org/html/rfc6657\">RFC-6657</a> makes clear that the <code>text/xml</code> type determines the charset using the content of the message. <strong>The charset parameter will just be ignored here.</strong></li> \n <li>And in <a href=\"https://tools.ietf.org/html/rfc2854#section-6\">RFC-2854</a> is stated that <code>text/html</code> should really always specify a charset. But if you don't, then it will use <code>ISO-8859-1</code> (=<code>Latin-1</code>).</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[27404861]-[-418892611]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>As specified in <a href=\"https://tools.ietf.org/html/rfc2046\">RFC-2046</a> the default charset for <code>text/plain</code> is <code>US-ASCII</code>, but can be overruled with an additional charset parameter. </li> \n <li>However, in <a href=\"https://tools.ietf.org/html/rfc6657\">RFC-6657</a> makes clear that the <code>text/xml</code> type determines the charset using the content of the message. <strong>The charset parameter will just be ignored here.</strong></li> \n <li>And in <a href=\"https://tools.ietf.org/html/rfc2854#section-6\">RFC-2854</a> is stated that <code>text/html</code> should really always specify a charset. But if you don't, then it will use <code>ISO-8859-1</code> (=<code>Latin-1</code>).</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "determin":1,
                    "state":1,
                    "addit":1,
                    "tool":3,
                    "clear":1,
                    "text":3,
                    "strong":2,
                    "https":3,
                    "ietf":3,
                    "section":1,
                    "ascii":1,
                    "code":12,
                    "iso":1,
                    "paramet":2,
                    "rfc":6,
                    "xml":1,
                    "charset":5,
                    "content":1,
                    "plain":1,
                    "make":1,
                    "latin":1,
                    "overrul":1,
                    "messag":1,
                    "type":1,
                    "org":3,
                    "html":4,
                    "href":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}