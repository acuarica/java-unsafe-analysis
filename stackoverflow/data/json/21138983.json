{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":21138983,
    "title":"How to remove un used protobuf methods when compilation",
    "comments":[
      
    ],
    "tags":[
      "java",
      "android",
      "protocol-buffers"
    ],
    "creationDate":"2014-01-15",
    "lastActivityDate":"2014-01-15",
    "score":0,
    "viewCount":82,
    "owner":{
      "type":"StackOverflowUser",
      "id":393639,
      "displayName":"dinesh707",
      "reputation":2022
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>We have a huge mesh of protobufs which are pointing to a one single protobuf message. So now the problem is when we try to use this with Android, android compiler runs out of maximum number of methods a singe project can have. But again this specific android part of the project really need 5% of the original protobuf file. Is there any solution of a special compiler which finds out which methods are used and not used and omit them from compiled code. Or is there any other wasy to work around this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21138983]-[204699332]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>We have a huge mesh of protobufs which are pointing to a one single protobuf message. So now the problem is when we try to use this with Android, android compiler runs out of maximum number of methods a singe project can have. But again this specific android part of the project really need 5% of the original protobuf file. Is there any solution of a special compiler which finds out which methods are used and not used and omit them from compiled code. Or is there any other wasy to work around this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "find":1,
                  "singl":1,
                  "method":2,
                  "huge":1,
                  "point":1,
                  "project":2,
                  "problem":1,
                  "run":1,
                  "protobuf":3,
                  "work":1,
                  "code":1,
                  "maximum":1,
                  "omit":1,
                  "mesh":1,
                  "origin":1,
                  "specif":1,
                  "wasi":1,
                  "sing":1,
                  "file":1,
                  "compil":3,
                  "part":1,
                  "messag":1,
                  "special":1,
                  "solut":1,
                  "android":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":21140157,
      "questionId":21138983,
      "comments":[
        
      ],
      "creationDate":"2014-01-15",
      "lastActivityDate":"2014-01-15",
      "score":0,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":115145,
        "displayName":"CommonsWare",
        "reputation":450125
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Or is there any other wasy to work around this?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21140157]-[-2031203159]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Or is there any other wasy to work around this?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "wasi":1,
                    "work":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Use the &quot;nano version&quot; of protobuf, <a href=\"https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt\"rel=\"nofollow\">as outlined in the README</a>. Or, use <a href=\"https://github.com/square/wire\"rel=\"nofollow\">Square's wire</a>. There may be other reduced-method version of the protobuf client library/generator floating around as well.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21140157]-[-2105988198]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Use the &quot;nano version&quot; of protobuf, <a href=\"https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt\"rel=\"nofollow\">as outlined in the README</a>. Or, use <a href=\"https://github.com/square/wire\"rel=\"nofollow\">Square's wire</a>. There may be other reduced-method version of the protobuf client library/generator floating around as well.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":1,
                    "method":1,
                    "reduc":1,
                    "master":1,
                    "float":1,
                    "rel":2,
                    "protobuf":3,
                    "librari":1,
                    "https":2,
                    "nano":1,
                    "outlin":1,
                    "readm":2,
                    "wire":2,
                    "txt":1,
                    "version":2,
                    "nofollow":2,
                    "client":1,
                    "extern":1,
                    "googlesourc":1,
                    "generat":1,
                    "quot":2,
                    "href":2,
                    "platform":1,
                    "squar":2,
                    "android":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}