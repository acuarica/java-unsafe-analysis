{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":6870769,
    "title":"What is the problem with Reflection?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "reflection",
      "eclipse-rcp"
    ],
    "creationDate":"2011-07-29",
    "lastActivityDate":"2011-07-29",
    "score":1,
    "viewCount":846,
    "owner":{
      "type":"StackOverflowUser",
      "id":485337,
      "displayName":"Adam Arold",
      "reputation":11886
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm developing an Eclipse RCP application. I have been told that the UI part will be created by a designer (?) with Window Builder PRO so I have to create the business logic for every view our designer creates.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6870769]-[1547946813]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm developing an Eclipse RCP application. I have been told that the UI part will be created by a designer (?) with Window Builder PRO so I have to create the business logic for every view our designer creates.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "window":1,
                  "design":2,
                  "builder":1,
                  "told":1,
                  "logic":1,
                  "rcp":1,
                  "eclips":1,
                  "busi":1,
                  "applic":1,
                  "part":1,
                  "develop":1,
                  "pro":1,
                  "creat":3,
                  "view":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My first idea was to create a Controller class for each view and handle the application logic there with a little help from Reflection (I don't know what kind of Widgets the designer will create). I thought that this will be dynamic hence rejoicing but our leader told me that we <strong>won't</strong> use Reflection. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6870769]-[1628953798]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My first idea was to create a Controller class for each view and handle the application logic there with a little help from Reflection (I don't know what kind of Widgets the designer will create). I thought that this will be dynamic hence rejoicing but our leader told me that we <strong>won't</strong> use Reflection. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "thought":1,
                  "rejoic":1,
                  "idea":1,
                  "widget":1,
                  "dynam":1,
                  "told":1,
                  "strong":2,
                  "leader":1,
                  "logic":1,
                  "applic":1,
                  "control":1,
                  "kind":1,
                  "creat":2,
                  "reflect":2,
                  "handl":1,
                  "won":1,
                  "view":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I heard a very short explanation which did not make any sense for me so my question is:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6870769]-[1908948508]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I heard a very short explanation which did not make any sense for me so my question is:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sens":1,
                  "question":1,
                  "heard":1,
                  "explan":1,
                  "make":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Why using Reflection considered bad / non-maintainable?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6870769]-[-1904229698]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Why using Reflection considered bad / non-maintainable?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "reflect":1,
                  "maintain":1,
                  "bad":1,
                  "consid":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":6871406,
      "questionId":6870769,
      "comments":[
        
      ],
      "creationDate":"2011-07-29",
      "lastActivityDate":"2011-07-29",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":256196,
        "displayName":"Bohemian",
        "reputation":154989
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java is a strongly typed language, with pros and cons. For all the cons, it gives you very good compile-time checking. Bugs/errors found at compile time are the cheapest to find and fix.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6871406]-[-1237369876]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java is a strongly typed language, with pros and cons. For all the cons, it gives you very good compile-time checking. Bugs/errors found at compile time are the cheapest to find and fix.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "languag":1,
                    "pros":1,
                    "con":2,
                    "good":1,
                    "fix":1,
                    "cheapest":1,
                    "strong":1,
                    "found":1,
                    "check":1,
                    "error":1,
                    "bug":1,
                    "compil":2,
                    "time":2,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Reflection is a runtime thing. You can't have the compiler check anything you do using reflection, therefore if you use reflection you lose a lot of the pros of java. Specifically, you can write code that compiles but explodes at runtime. The term sometimes used for reflective type code is &quot;stringly typed&quot; - you are using the names for methods (Strings) rather than referring to actual methods.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6871406]-[-1000140507]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Reflection is a runtime thing. You can't have the compiler check anything you do using reflection, therefore if you use reflection you lose a lot of the pros of java. Specifically, you can write code that compiles but explodes at runtime. The term sometimes used for reflective type code is &quot;stringly typed&quot; - you are using the names for methods (Strings) rather than referring to actual methods.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "name":1,
                    "runtim":2,
                    "pros":1,
                    "explod":1,
                    "term":1,
                    "thing":1,
                    "string":2,
                    "code":2,
                    "check":1,
                    "specif":1,
                    "refer":1,
                    "lot":1,
                    "quot":2,
                    "compil":2,
                    "type":2,
                    "actual":1,
                    "reflect":4,
                    "lose":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Reflection is used of course, but whenever you use it, remember that you are subverting the strength of java. To use it extensively as in your case might actually be OK, as long as your units tests cover enough cases to give you confidence that your use of it is safe. I would sanction its use if the code that actually used it was a fairly small &quot;utility&quot; base of code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6871406]-[-1538771636]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Reflection is used of course, but whenever you use it, remember that you are subverting the strength of java. To use it extensively as in your case might actually be OK, as long as your units tests cover enough cases to give you confidence that your use of it is safe. I would sanction its use if the code that actually used it was a fairly small &quot;utility&quot; base of code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "fair":1,
                    "util":1,
                    "strength":1,
                    "safe":1,
                    "base":1,
                    "code":2,
                    "small":1,
                    "rememb":1,
                    "cover":1,
                    "confid":1,
                    "sanction":1,
                    "give":1,
                    "quot":2,
                    "unit":1,
                    "case":1,
                    "subvert":1,
                    "extens":1,
                    "reflect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}