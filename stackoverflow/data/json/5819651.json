{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":5819651,
    "title":"How to print the location of Heap using java for a process?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":6678789,
        "postId":5819651,
        "creationDate":"2011-04-28",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What sort of attack can you get in Java which ASLR would help you with?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5819651-cu6678789]-[244596118]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What sort of attack can you get in Java which ASLR would help you with?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "aslr":1,
                      "sort":1,
                      "attack":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":6678924,
        "postId":5819651,
        "creationDate":"2011-04-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":244333,
          "displayName":"redmave",
          "reputation":1773
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I just wanted to know if it is possible to differentiate ASLR and non ASLR predictability using java code"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5819651-cu6678924]-[1633776632]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I just wanted to know if it is possible to differentiate ASLR and non ASLR predictability using java code"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "aslr":2,
                      "want":1,
                      "code":1,
                      "predict":1,
                      "differenti":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "heap"
    ],
    "creationDate":"2011-04-28",
    "lastActivityDate":"2011-04-28",
    "score":0,
    "viewCount":174,
    "owner":{
      "type":"StackOverflowUser",
      "id":244333,
      "displayName":"redmave",
      "reputation":1773
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I want to test if ASLR which randomizes the location of a heap for a process actually works.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5819651]-[1696884193]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I want to test if ASLR which randomizes the location of a heap for a process actually works.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "aslr":1,
                  "test":1,
                  "random":1,
                  "process":1,
                  "work":1,
                  "heap":1,
                  "locat":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":5819955,
      "questionId":5819651,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6679707,
          "postId":5819955,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":244333,
            "displayName":"redmave",
            "reputation":1773
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Currently testing with System.identityHashcode() Maybe I can run this on Vista and Windows 7 and compare ASLR predictability? I think ASLR is better implemented in Windows 7"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5819955-cu6679707]-[-1814681232]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Currently testing with System.identityHashcode() Maybe I can run this on Vista and Windows 7 and compare ASLR predictability? I think ASLR is better implemented in Windows 7"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"identityHashcode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "aslr":2,
                        "test":1,
                        "hashcod":1,
                        "window":2,
                        "system":1,
                        "run":1,
                        "ident":1,
                        "compar":1,
                        "implement":1,
                        "predict":1,
                        "vista":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "lastEditDate":"2011-04-28",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can't do this in pure Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5819955]-[-1768309947]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can't do this in pure Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pure":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p>Machine address (pointers) are not exposed to Java applications.</p></li> \n <li><p>Even if they did, there's no Java API that tells you were the heap is.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5819955]-[1155855945]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p>Machine address (pointers) are not exposed to Java applications.</p></li> \n <li><p>Even if they did, there's no Java API that tells you were the heap is.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "expos":1,
                    "machin":1,
                    "applic":1,
                    "address":1,
                    "api":1,
                    "heap":1,
                    "tell":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I suppose that you could use the values returned by <code>System.identityHashcode()</code> as ersatz machine addresses. If you wrote a simple Java test application that examined identity hashcode of a sample object, then ran it multiple times with ASLR enabled and disabled, you might observe a difference in predictability.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5819955]-[-888681619]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I suppose that you could use the values returned by <code>System.identityHashcode()</code> as ersatz machine addresses. If you wrote a simple Java test application that examined identity hashcode of a sample object, then ran it multiple times with ASLR enabled and disabled, you might observe a difference in predictability.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"identityHashcode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "examin":1,
                    "test":1,
                    "hashcod":2,
                    "disabl":1,
                    "observ":1,
                    "simpl":1,
                    "system":1,
                    "return":1,
                    "sampl":1,
                    "differ":1,
                    "ran":1,
                    "wrote":1,
                    "object":1,
                    "code":2,
                    "ident":2,
                    "machin":1,
                    "valu":1,
                    "applic":1,
                    "ersatz":1,
                    "address":1,
                    "enabl":1,
                    "predict":1,
                    "time":1,
                    "suppos":1,
                    "multipl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5820130,
      "questionId":5819651,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6679052,
          "postId":5820130,
          "creationDate":"2011-04-28",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It should be noted that `Unsafe` is usually `sun.misc.Unsafe` and is a JVM-specific class. That's **definitely** not standard API ;-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5820130-cu6679052]-[-1887630920]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It should be noted that `Unsafe` is usually `sun.misc.Unsafe` and is a JVM-specific class. That's **definitely** not standard API ;-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "standard":1,
                        "sun":1,
                        "note":1,
                        "specif":1,
                        "misc":1,
                        "api":1,
                        "unsaf":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6679589,
          "postId":5820130,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":683825,
            "displayName":"Paul Cager",
            "reputation":1567
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Won't Unsafe.getUnsafe() throw a SecurityException if it's not called from a class from the bootstrap class loader?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5820130-cu6679589]-[-1914959470]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Won't Unsafe.getUnsafe() throw a SecurityException if it's not called from a class from the bootstrap class loader?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getUnsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"SecurityException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"from",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"loader",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "loader":1,
                        "secur":1,
                        "unsaf":2,
                        "call":1,
                        "bootstrap":1,
                        "won":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"SecurityException",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6679638,
          "postId":5820130,
          "creationDate":"2011-04-28",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Paul Cager, You cannot use `getUnsafe()` to get an instance of `Unsafe` I figure if you cannot work out how to get an instance another way, you shouldn't be using Unsafe. ;)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5820130-cu6679638]-[-1227809968]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Paul Cager, You cannot use `getUnsafe()` to get an instance of `Unsafe` I figure if you cannot work out how to get an instance another way, you shouldn't be using Unsafe. ;)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Paul",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"getUnsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "paul":1,
                        "work":1,
                        "figur":1,
                        "unsaf":3,
                        "shouldn":1,
                        "instanc":2,
                        "cager":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "lastEditDate":"2011-04-28",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can call <code>Unsafe.allocateMemory(size)</code> on some JVMs. This returns a memory location.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820130]-[827716286]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can call <code>Unsafe.allocateMemory(size)</code> on some JVMs. This returns a memory location.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "size":1,
                    "return":1,
                    "jvms":1,
                    "code":2,
                    "unsaf":1,
                    "call":1,
                    "locat":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I don't recommend you do that and I don't recommend you worry about ASLR with Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820130]-[-1303972486]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I don't recommend you do that and I don't recommend you worry about ASLR with Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aslr":1,
                    "worri":1,
                    "recommend":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5820145,
      "questionId":5819651,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1813,
        "displayName":"Jon Bright",
        "reputation":7429
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You should be able to do this with JNI. Allocate an array of longs the size of your heap or just smaller and call the JNI test method. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820145]-[1672424505]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You should be able to do this with JNI. Allocate an array of longs the size of your heap or just smaller and call the JNI test method. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "test":1,
                    "alloc":1,
                    "size":1,
                    "jni":2,
                    "array":1,
                    "long":1,
                    "smaller":1,
                    "heap":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"package com.example.aslrtest; public class Test { private static native void test(long[] heapa); public void doTest() { long[] a=new long[size_of_available_heap/8]; for (long i=0; i!=a.length; i++) a[i]=i; test(a); System.out.println(a[0]); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[5820145]-[989354705]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "packageDeclaration":{
                      "type":"PackageDeclarationNode",
                      "annotations":[
                        
                      ],
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"com",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"example",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"aslrtest",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Test",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"native",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"test",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ArrayTypeNode",
                                    "typeNode":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"long",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "depth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"heapa",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"doTest",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"a",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"ArrayExpressionCreatorNode",
                                                "creatorType":{
                                                  "type":"PrimitiveTypeNode",
                                                  "name":"long",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "expressionDepth":[
                                                  {
                                                    "type":"DimExpressionNode",
                                                    "argument":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":"/",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"QualifiedIdentifierNode",
                                                        "identifiers":[
                                                          {
                                                            "type":"IdentifierNode",
                                                            "name":"size_of_available_heap",
                                                            "comments":[
                                                              
                                                            ]
                                                          }
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"LiteralNode",
                                                        "node":{
                                                          "type":"IntegerLiteralNode",
                                                          "valueRep":"8"
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "arrayDepth":[
                                                  
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ArrayTypeNode",
                                            "typeNode":{
                                              "type":"PrimitiveTypeNode",
                                              "name":"long",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "depth":[
                                              {
                                                "type":"ArrayDimensionNode",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ForLoopStatementNode",
                                    "forControl":{
                                      "type":"ForVarControlNode",
                                      "variables":{
                                        "type":"LocalVariableDeclarationStatementNode",
                                        "modifiers":[
                                          
                                        ],
                                        "declarators":{
                                          "type":"VariableDeclaratorsNode",
                                          "declarators":[
                                            {
                                              "type":"VariableDeclaratorNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "arrayDepth":[
                                                
                                              ],
                                              "assignment":{
                                                "type":"VariableAssignmentNode",
                                                "variableAssignment":{
                                                  "type":"VariableExpressionInitNode",
                                                  "expression":{
                                                    "type":"LiteralNode",
                                                    "node":{
                                                      "type":"IntegerLiteralNode",
                                                      "valueRep":"0"
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "varType":{
                                                "type":"PrimitiveTypeNode",
                                                "name":"long",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "condition":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"!=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"a",
                                              "comments":[
                                                
                                              ]
                                            },
                                            {
                                              "type":"IdentifierNode",
                                              "name":"length",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "update":[
                                        {
                                          "type":"PostfixOperatorExpressionNode",
                                          "argument":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"i",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"++",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "statement":{
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"ArrayAccessSelectorNode",
                                          "identifier":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"a",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "dimExpression":{
                                            "type":"DimExpressionNode",
                                            "argument":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"i",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"i",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"test",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"a",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"ArrayAccessSelectorNode",
                                            "identifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"a",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "dimExpression":{
                                              "type":"DimExpressionNode",
                                              "argument":{
                                                "type":"LiteralNode",
                                                "node":{
                                                  "type":"IntegerLiteralNode",
                                                  "valueRep":"0"
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"package com.example.aslrtest; public class Test { private static native void test(long[] heapa); public void doTest() { long[] a=new long[size_of_available_heap/8]; for (long i=0; i!=a.length; i++) a[i]=i; test(a); System.out.println(a[0]); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":4,
                    "size":1,
                    "system":1,
                    "aslrtest":1,
                    "println":1,
                    "length":1,
                    "heap":1,
                    "heapa":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"long",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"test",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"a",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ArrayAccessSelectorNode",
                            "identifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"a",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "dimExpression":{
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"0"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"heapa",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"a",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"long",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"/",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"size_of_available_heap",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"8"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ArrayTypeNode",
                        "typeNode":{
                          "type":"PrimitiveTypeNode",
                          "name":"long",
                          "comments":[
                            
                          ]
                        },
                        "depth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"i",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"long",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Then with something like this JNI code, you can get the address of that array.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820145]-[-1389729672]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Then with something like this JNI code, you can get the address of that array.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "address":1,
                    "jni":1,
                    "code":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"JNIEXPORT void JNICALL Java_com_example_aslrtest_Test_test(JNIEnv * env, jclass jc, jlongArray heapa) { jlong* heapp; jboolean jniNoCopy = JNI_FALSE; heapp = (*env)-&gt;GetLongArrayElements(env, heapa, &amp;jniNoCopy); heapp[0] = (jlong)heapp; (*env)-&gt;ReleaseLongArrayElements(env,heapa,heapp,0); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[5820145]-[-767713900]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"JNIEXPORT void JNICALL Java"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_com_example_aslrtest_Test_test",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(JNIEnv * env, jclass jc, "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"jlongArray",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" heapa) "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"*",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"jlong",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"heapp",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"jniNoCopy",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"JNI_FALSE",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"jboolean",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"heapp"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"="
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"("
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"*"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"env"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":")"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"-"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":">"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"GetLongArrayElements"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"("
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"env"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":","
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"heapa"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":","
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":" "
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"&"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"jniNoCopy"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":")"
                        },
                        {
                          "type":"EmptyStatementNode",
                          "comma":{
                            "type":"SeparatorNode",
                            "symbol":";",
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"=",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ArrayAccessSelectorNode",
                              "identifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"heapp",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "dimExpression":{
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"jlong",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"heapp",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"("
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"*"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"env"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":")"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":"-"
                        },
                        {
                          "type":"TextFragmentNode",
                          "text":">"
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ReleaseLongArrayElements",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"env",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"heapa",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"heapp",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "rawText":"JNIEXPORT void JNICALL Java_com_example_aslrtest_Test_test(JNIEnv * env, jclass jc, jlongArray heapa) { jlong* heapp; jboolean jniNoCopy = JNI_FALSE; heapp = (*env)->GetLongArrayElements(env, heapa, &jniNoCopy); heapp[0] = (jlong)heapp; (*env)->ReleaseLongArrayElements(env,heapa,heapp,0); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":2,
                    "jniexport":1,
                    "aslrtest":1,
                    "jboolean":1,
                    "jlong":3,
                    "heapp":5,
                    "jnical":1,
                    "element":2,
                    "jni":3,
                    "array":3,
                    "releas":1,
                    "fals":1,
                    "jclass":1,
                    "heapa":3,
                    "copi":2,
                    "env":5,
                    "jnienv":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"jboolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"jlong",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"ReleaseLongArrayElements",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"env",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"heapa",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"heapp",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"jniNoCopy",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"JNI_FALSE",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"jboolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When this code returns, the first element of the array should contain the address of the array. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820145]-[1481178198]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When this code returns, the first element of the array should contain the address of the array. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "element":1,
                    "code":1,
                    "array":2,
                    "address":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Whether doing this makes sense is another question. Depends what you're doing. I'm guessing probably not, but that's your call.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5820145]-[1105394449]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Whether doing this makes sense is another question. Depends what you're doing. I'm guessing probably not, but that's your call.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "question":1,
                    "depend":1,
                    "make":1,
                    "guess":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}