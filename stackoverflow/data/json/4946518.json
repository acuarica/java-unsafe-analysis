{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":4946518,
    "title":"Deep Cloning of Java objects (Not beans)",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":5516663,
        "postId":4946518,
        "creationDate":"2011-02-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":385897,
          "displayName":"Mike",
          "reputation":6574
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"When you need a deep copy, do you need *all* of the associations deep copied as well? Or only some of them?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4946518-cu5516663]-[65980364]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"When you need a deep copy, do you need *all* of the associations deep copied as well? Or only some of them?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "deep":2,
                      "associ":1,
                      "copi":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5516811,
        "postId":4946518,
        "creationDate":"2011-02-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":554431,
          "displayName":"bestsss",
          "reputation":6866
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"implement `clone()` manually (i like clone, no matter what i hear about) if you need performance boost, no external lib can beat significantly java (de)serialization since it will rely on reflection (in the best case it may opt for code generation but still...)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[4946518-cu5516811]-[472275056]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"implement `clone()` manually (i like clone, no matter what i hear about) if you need performance boost, no external lib can beat significantly java (de)serialization since it will rely on reflection (in the best case it may opt for code generation but still...)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":1,
                      "opt":1,
                      "hear":1,
                      "code":1,
                      "lib":1,
                      "boost":1,
                      "beat":1,
                      "clone":2,
                      "signific":1,
                      "extern":1,
                      "perform":1,
                      "implement":1,
                      "generat":1,
                      "matter":1,
                      "reli":1,
                      "manual":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance",
      "copy",
      "deep-copy",
      "cloning"
    ],
    "creationDate":"2011-02-09",
    "lastActivityDate":"2014-07-08",
    "lastEditDate":"2014-07-08",
    "score":8,
    "viewCount":834,
    "owner":{
      "type":"StackOverflowUser",
      "id":389934,
      "displayName":"K.M",
      "reputation":61
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The project that I am currently working on has lot of objects that are serialized in order to get a deep copy of the the existing object. This works fine until we have multiple calls at runtime in some cased we have 100, 200, or even 1000 calls between components and this is where we are hit with performance headache.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4946518]-[368336454]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The project that I am currently working on has lot of objects that are serialized in order to get a deep copy of the the existing object. This works fine until we have multiple calls at runtime in some cased we have 100, 200, or even 1000 calls between components and this is where we are hit with performance headache.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "runtim":1,
                  "exist":1,
                  "project":1,
                  "hit":1,
                  "work":2,
                  "compon":1,
                  "object":2,
                  "deep":1,
                  "order":1,
                  "perform":1,
                  "lot":1,
                  "headach":1,
                  "fine":1,
                  "case":1,
                  "call":2,
                  "multipl":1,
                  "copi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Historical reason for copying these objects being cloned is that , two different component working on same objects under different functionality should not change each other e.g. Changes in Swing UI should not change the object values in backend until save or synchronized button is pressed.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4946518]-[-742118523]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Historical reason for copying these objects being cloned is that , two different component working on same objects under different functionality should not change each other e.g. Changes in Swing UI should not change the object values in backend until save or synchronized button is pressed.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "chang":2,
                  "histor":1,
                  "swing":1,
                  "reason":1,
                  "work":1,
                  "compon":1,
                  "object":3,
                  "button":1,
                  "clone":1,
                  "function":1,
                  "valu":1,
                  "press":1,
                  "backend":1,
                  "save":1,
                  "copi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>We have quite a large code base, I thought if I would write clone based on reflection it will work faster as compared to serialization , but either due to our complex hierarchies of objects or due to some other reason , this approach is even slower.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4946518]-[2002446855]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>We have quite a large code base, I thought if I would write clone based on reflection it will work faster as compared to serialization , but either due to our complex hierarchies of objects or due to some other reason , this approach is even slower.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "due":2,
                  "faster":1,
                  "thought":1,
                  "reason":1,
                  "work":1,
                  "object":1,
                  "base":2,
                  "code":1,
                  "larg":1,
                  "slower":1,
                  "compar":1,
                  "hierarchi":1,
                  "clone":1,
                  "approach":1,
                  "reflect":1,
                  "write":1,
                  "complex":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I also tried using CloneUtils (sourceforge project) , which is slower as well (We are not using Hibernate at all). Spring BeanUtils is not an option (I assume from docs that it only uses beans i.e. introspection and in case I use it if any fields are exposed using non standard accessor , we will not be able to copy those). </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4946518]-[-270830017]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I also tried using CloneUtils (sourceforge project) , which is slower as well (We are not using Hibernate at all). Spring BeanUtils is not an option (I assume from docs that it only uses beans i.e. introspection and in case I use it if any fields are exposed using non standard accessor , we will not be able to copy those). </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"CloneUtils",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"BeanUtils",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "sourceforg":1,
                  "assum":1,
                  "introspect":1,
                  "util":2,
                  "field":1,
                  "standard":1,
                  "project":1,
                  "hibern":1,
                  "option":1,
                  "spring":1,
                  "expos":1,
                  "doc":1,
                  "accessor":1,
                  "bean":2,
                  "slower":1,
                  "clone":1,
                  "copi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"CloneUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BeanUtils",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Has anyone any idea , improve the performance while still working on different copies. We have an option which will speed up things in case we provide our own copy methods ,instead of serialization, but that has downside of updating these methods every time and if we forget we might loose functionality.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[4946518]-[-1089623974]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Has anyone any idea , improve the performance while still working on different copies. We have an option which will speed up things in case we provide our own copy methods ,instead of serialization, but that has downside of updating these methods every time and if we forget we might loose functionality.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "provid":1,
                  "method":2,
                  "downsid":1,
                  "idea":1,
                  "updat":1,
                  "option":1,
                  "thing":1,
                  "work":1,
                  "improv":1,
                  "loos":1,
                  "function":1,
                  "perform":1,
                  "forget":1,
                  "time":1,
                  "copi":2,
                  "speed":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":4946630,
      "questionId":4946518,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5518960,
          "postId":4946630,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"not one minute , now consider an calss containing HashMap which contians objects of another type (may be base type so that children can be there as well) and if those objects contain collections as well. You have to write clone for each of those to deep clone them. and ensure that you are copying contents of collection in every class. Cloneable interface is broken (Effective Java)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5518960]-[-2118423156]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"not one minute , now consider an calss containing HashMap which contians objects of another type (may be base type so that children can be there as well) and if those objects contain collections as well. You have to write clone for each of those to deep clone them. and ensure that you are copying contents of collection in every class. Cloneable interface is broken (Effective Java)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HashMap",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "minut":1,
                        "children":1,
                        "calss":1,
                        "map":1,
                        "effect":1,
                        "cloneabl":1,
                        "object":2,
                        "base":1,
                        "hash":1,
                        "deep":1,
                        "clone":2,
                        "content":1,
                        "contian":1,
                        "collect":2,
                        "type":2,
                        "write":1,
                        "copi":1,
                        "ensur":1,
                        "broken":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HashMap",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5517209,
          "postId":4946630,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Actually prototype is no different than writing copy methods in my case there are 100s of classes for which I will have to write clone methods as we need deep copies. Either we write clone or copy method and every time we add or remove a field from any one these classes we will have to change the copy/clone method."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5517209]-[-810322851]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Actually prototype is no different than writing copy methods in my case there are 100s of classes for which I will have to write clone methods as we need deep copies. Either we write clone or copy method and every time we add or remove a field from any one these classes we will have to change the copy/clone method."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "method":4,
                        "remov":1,
                        "field":1,
                        "prototyp":1,
                        "deep":1,
                        "clone":3,
                        "class":2,
                        "time":1,
                        "add":1,
                        "write":3,
                        "copi":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5517339,
          "postId":4946630,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"if you use `clone()` adding primitives or unmodifiable classes (URL, String, Numbers, URI, etc) doesn't require changes. Writing clone methods takes probably one minute."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5517339]-[-1517024433]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"if you use `clone()` adding primitives or unmodifiable classes (URL, String, Numbers, URI, etc) doesn't require changes. Writing clone methods takes probably one minute."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":1,
                        "minut":1,
                        "method":1,
                        "url":1,
                        "requir":1,
                        "uri":1,
                        "unmodifi":1,
                        "take":1,
                        "clone":2,
                        "ad":1,
                        "class":1,
                        "primit":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5524235,
          "postId":4946630,
          "creationDate":"2011-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"you need 2 utility functions for creating proper Map/Collection types, then iterating through them and calling clone(). The main and only concern is visiting the graph properly if you have cyclic references. Still not more than a minute. Honestly, I can't remember writing clone() that took me so much time."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5524235]-[1994478506]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"you need 2 utility functions for creating proper Map/Collection types, then iterating through them and calling clone(). The main and only concern is visiting the graph properly if you have cyclic references. Still not more than a minute. Honestly, I can't remember writing clone() that took me so much time."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "minut":1,
                        "util":1,
                        "cyclic":1,
                        "map":1,
                        "proper":2,
                        "main":1,
                        "concern":1,
                        "rememb":1,
                        "visit":1,
                        "clone":2,
                        "function":1,
                        "iter":1,
                        "refer":1,
                        "graph":1,
                        "collect":1,
                        "time":1,
                        "type":1,
                        "honest":1,
                        "creat":1,
                        "call":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5524498,
          "postId":4946630,
          "creationDate":"2011-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"ahh, yes and forgot you need an extra interface to make clone() public"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5524498]-[1032067103]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"ahh, yes and forgot you need an extra interface to make clone() public"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ahh":1,
                        "forgot":1,
                        "clone":1,
                        "make":1,
                        "extra":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5532011,
          "postId":4946630,
          "creationDate":"2011-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This means you are saying that we provide clone method and its implementation for every class (100s of these) and check what classes are being stored in hashmap and for each of these classes provide clone(). Everytime we add or remove a field to any of the classes we need to change the clone() method. For more information on cloning see Effective Java Item 10. [link](http://java.sun.com/developer/Books/effectivejava)/Chapter3.pdf"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946630-cu5532011]-[-740706995]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This means you are saying that we provide clone method and its implementation for every class (100s of these) and check what classes are being stored in hashmap and for each of these classes provide clone(). Everytime we add or remove a field to any of the classes we need to change the clone() method. For more information on cloning see Effective Java Item 10. [link](http://java.sun.com/developer/Books/effectivejava)/Chapter3.pdf"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "effectivejava":1,
                        "chang":1,
                        "provid":2,
                        "method":2,
                        "remov":1,
                        "field":1,
                        "pdf":1,
                        "book":1,
                        "effect":1,
                        "sun":1,
                        "hashmap":1,
                        "mean":1,
                        "store":1,
                        "everytim":1,
                        "chapter":1,
                        "check":1,
                        "inform":1,
                        "clone":4,
                        "link":1,
                        "implement":1,
                        "class":3,
                        "develop":1,
                        "http":1,
                        "add":1,
                        "item":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-09",
      "lastActivityDate":"2011-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":592015,
        "displayName":"Cris",
        "reputation":2260
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Just give you a hint in how you can improve performance in cases like this: use <a href=\"http://en.wikipedia.org/wiki/Prototype_pattern\"rel=\"nofollow\">prototype</a> pattern if you are not already using it.You might gain some perfromance</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4946630]-[-629050350]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Just give you a hint in how you can improve performance in cases like this: use <a href=\"http://en.wikipedia.org/wiki/Prototype_pattern\"rel=\"nofollow\">prototype</a> pattern if you are not already using it.You might gain some perfromance</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pattern":2,
                    "perfrom":1,
                    "rel":1,
                    "improv":1,
                    "wikipedia":1,
                    "prototyp":2,
                    "nofollow":1,
                    "gain":1,
                    "perform":1,
                    "give":1,
                    "hint":1,
                    "wiki":1,
                    "case":1,
                    "org":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":4946663,
      "questionId":4946518,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5554110,
          "postId":4946663,
          "creationDate":"2011-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thank you for the responses. I also feel the same, I am trying to find if we can refactor it properly, this area needs proper refactoring."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4946663-cu5554110]-[-188730819]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thank you for the responses. I also feel the same, I am trying to find if we can refactor it properly, this area needs proper refactoring."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "feel":1,
                        "area":1,
                        "proper":2,
                        "refactor":2,
                        "respons":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-09",
      "lastActivityDate":"2011-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":253231,
        "displayName":"Dan",
        "reputation":1913
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I doubt that there is that much you can do to improve performance significantly by following the approaches you have mentioned. Unfortunately it does take time to copy an object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4946663]-[315911597]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I doubt that there is that much you can do to improve performance significantly by following the approaches you have mentioned. Unfortunately it does take time to copy an object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "improv":1,
                    "object":1,
                    "mention":1,
                    "doubt":1,
                    "signific":1,
                    "perform":1,
                    "approach":1,
                    "time":1,
                    "copi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Thinking slightly laterally, and clearly depending on how much memory you have and also the ratio of readers to writes (especially if you have many readers for every write), how about creating a cache of copies?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4946663]-[1012365298]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Thinking slightly laterally, and clearly depending on how much memory you have and also the ratio of readers to writes (especially if you have many readers for every write), how about creating a cache of copies?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cach":1,
                    "depend":1,
                    "reader":2,
                    "slight":1,
                    "ratio":1,
                    "think":1,
                    "creat":1,
                    "write":2,
                    "copi":1,
                    "later":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":4947004,
      "questionId":4946518,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5517282,
          "postId":4947004,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":554431,
            "displayName":"bestsss",
            "reputation":6866
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"field access is extremely fast w/ reflection (esp after `setAccessible(true)` - removes security checks altogether). you can even go an use Unsafe.getXXX for absolute inline. On a 2nd thought, the boxing allocation cost for primitives, still needs to be paid."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4947004-cu5517282]-[-763028496]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"field access is extremely fast w/ reflection (esp after `setAccessible(true)` - removes security checks altogether). you can even go an use Unsafe.getXXX for absolute inline. On a 2nd thought, the boxing allocation cost for primitives, still needs to be paid."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"setAccessible",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getXXX",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "remov":1,
                        "alloc":1,
                        "field":1,
                        "thought":1,
                        "xxx":1,
                        "set":1,
                        "altogeth":1,
                        "secur":1,
                        "check":1,
                        "cost":1,
                        "paid":1,
                        "extrem":1,
                        "true":1,
                        "absolut":1,
                        "fast":1,
                        "box":1,
                        "unsaf":1,
                        "inlin":1,
                        "primit":1,
                        "reflect":1,
                        "esp":1,
                        "access":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5519280,
          "postId":4947004,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581205,
            "displayName":"maaartinus",
            "reputation":15638
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You could use the getType and then getXXX and setXXX methods for primitives, however, it'll still cost some time. You could use Unsafe.copyMemory to get a shallow clone and then fix all non-primitive fields. You'd need to know the exact size of the object for this."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4947004-cu5519280]-[12924805]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You could use the getType and then getXXX and setXXX methods for primitives, however, it'll still cost some time. You could use Unsafe.copyMemory to get a shallow clone and then fix all non-primitive fields. You'd need to know the exact size of the object for this."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"getType",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"getXXX",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"setXXX",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"copyMemory",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "size":1,
                        "field":1,
                        "xxx":2,
                        "set":1,
                        "fix":1,
                        "object":1,
                        "exact":1,
                        "cost":1,
                        "clone":1,
                        "shallow":1,
                        "unsaf":1,
                        "time":1,
                        "type":1,
                        "primit":2,
                        "copi":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-09",
      "lastActivityDate":"2011-02-09",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":581205,
        "displayName":"maaartinus",
        "reputation":15638
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can avoid reflection by dynamic class generation, e.g., using <a href=\"http://cglib.sourceforge.net/\"rel=\"nofollow\">cglib</a>. For each class you use, you'd generate a &quot;cloner class&quot; containing the code needed for the copy. This would make reflection unnecessary, provided all fields are at least package-private and you put the copier class in the same package. You'd need a default ctor and no final fields, too.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947004]-[1243634482]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can avoid reflection by dynamic class generation, e.g., using <a href=\"http://cglib.sourceforge.net/\"rel=\"nofollow\">cglib</a>. For each class you use, you'd generate a &quot;cloner class&quot; containing the code needed for the copy. This would make reflection unnecessary, provided all fields are at least package-private and you put the copier class in the same package. You'd need a default ctor and no final fields, too.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"generation",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"you",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"in",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sourceforg":1,
                    "provid":1,
                    "field":2,
                    "rel":1,
                    "dynam":1,
                    "avoid":1,
                    "ctor":1,
                    "net":1,
                    "code":1,
                    "nofollow":1,
                    "need":1,
                    "copier":1,
                    "generat":2,
                    "make":1,
                    "put":1,
                    "quot":2,
                    "cloner":1,
                    "cglib":2,
                    "href":1,
                    "http":1,
                    "reflect":2,
                    "copi":1,
                    "unnecessari":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here, serialization has an advantage, as it creates objects using <code>sun.misc.Unsafe</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947004]-[189741082]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here, serialization has an advantage, as it creates objects using <code>sun.misc.Unsafe</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "sun":1,
                    "object":1,
                    "code":2,
                    "advantag":1,
                    "misc":1,
                    "unsaf":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Implementing a <code>deepClone</code> method in each class could be an option, too. It could be even combined with the cloner-class idea.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947004]-[1677354942]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Implementing a <code>deepClone</code> method in each class could be an option, too. It could be even combined with the cloner-class idea.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"deepClone",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"could",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"idea",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "idea":1,
                    "option":1,
                    "code":2,
                    "deep":1,
                    "combin":1,
                    "clone":1,
                    "implement":1,
                    "cloner":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":4947014,
      "questionId":4946518,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":5518909,
          "postId":4947014,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes it is shotgun approach, I admit , but we have time feature trade off that we have to keep up with. This project is quite old and new features are delivered under very tight deadlines. We need to get some performance gains at the same time do not want to change the code too much, I was thinking to apply that cloning as advice to our code, which does call ObjectSerializer.createdCopy() (our own code) to do deepCopy."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4947014-cu5518909]-[-427282330]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes it is shotgun approach, I admit , but we have time feature trade off that we have to keep up with. This project is quite old and new features are delivered under very tight deadlines. We need to get some performance gains at the same time do not want to change the code too much, I was thinking to apply that cloning as advice to our code, which does call ObjectSerializer.createdCopy() (our own code) to do deepCopy."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"ObjectSerializer",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"createdCopy",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"deepCopy",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "serial":1,
                        "chang":1,
                        "project":1,
                        "advic":1,
                        "trade":1,
                        "object":1,
                        "code":3,
                        "shotgun":1,
                        "gain":1,
                        "deep":1,
                        "clone":1,
                        "think":1,
                        "perform":1,
                        "approach":1,
                        "admit":1,
                        "tight":1,
                        "featur":2,
                        "deliv":1,
                        "time":2,
                        "appli":1,
                        "creat":1,
                        "call":1,
                        "copi":2,
                        "deadlin":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":5518566,
          "postId":4947014,
          "creationDate":"2011-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":389934,
            "displayName":"K.M",
            "reputation":61
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes it is shotgun approach, I admit , but we have time feature trade off that we have to keep up with. This project is quite and new features are delivered under very tight deadlines."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[4947014-cu5518566]-[-374974413]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes it is shotgun approach, I admit , but we have time feature trade off that we have to keep up with. This project is quite and new features are delivered under very tight deadlines."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "project":1,
                        "trade":1,
                        "shotgun":1,
                        "approach":1,
                        "admit":1,
                        "tight":1,
                        "featur":2,
                        "deliv":1,
                        "time":1,
                        "deadlin":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-02-09",
      "lastActivityDate":"2011-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":18187,
        "displayName":"ddimitrov",
        "reputation":2045
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you describe is a shotgun approach to managing mutable state. Trying to make clone faster will only give you limited improvements (say up to an order of magnitude). Besides, how do you clone a socket, a stream or a database connection?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947014]-[-227287808]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you describe is a shotgun approach to managing mutable state. Trying to make clone faster will only give you limited improvements (say up to an order of magnitude). Besides, how do you clone a socket, a stream or a database connection?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "socket":1,
                    "connect":1,
                    "state":1,
                    "magnitud":1,
                    "improv":1,
                    "shotgun":1,
                    "order":1,
                    "clone":2,
                    "stream":1,
                    "give":1,
                    "make":1,
                    "approach":1,
                    "databas":1,
                    "manag":1,
                    "limit":1,
                    "describ":1,
                    "mutabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What you really need is to refactor your app with proper command/query separation. This way you will know where you are changing your objects and where you are not. You can use unit tests to verify this if not sure. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947014]-[1165827307]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What you really need is to refactor your app with proper command/query separation. This way you will know where you are changing your objects and where you are not. You can use unit tests to verify this if not sure. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "test":1,
                    "proper":1,
                    "separ":1,
                    "verifi":1,
                    "command":1,
                    "object":1,
                    "queri":1,
                    "refactor":1,
                    "app":1,
                    "unit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are a number of techniques that can help you - you can change some of your objects to be immutable (so you can naturally share them, creating new copies on mutation); you can make mutable objects implement read-only interfaces and use the RO view in the GUI, etc.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[4947014]-[-1140797993]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are a number of techniques that can help you - you can change some of your objects to be immutable (so you can naturally share them, creating new copies on mutation); you can make mutable objects implement read-only interfaces and use the RO view in the GUI, etc.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "number":1,
                    "chang":1,
                    "natur":1,
                    "immut":1,
                    "interfac":1,
                    "mutat":1,
                    "object":2,
                    "share":1,
                    "techniqu":1,
                    "implement":1,
                    "make":1,
                    "creat":1,
                    "gui":1,
                    "copi":1,
                    "view":1,
                    "mutabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}