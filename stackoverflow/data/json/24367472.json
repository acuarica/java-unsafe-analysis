{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":24367472,
    "title":"Is an object created first and then it's constructor executed?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":37681433,
        "postId":24367472,
        "creationDate":"2014-06-23",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2319720,
          "displayName":"Chintan Shah",
          "reputation":64
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I removed C++ for now, let's talk about Java for now"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24367472-cu37681433]-[2057223984]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I removed C++ for now, let's talk about Java for now"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "remov":1,
                      "talk":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":37681034,
        "postId":24367472,
        "creationDate":"2014-06-23",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":12960,
          "displayName":"Brian Agnew",
          "reputation":154342
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't think this is useful in terms of asking about *both* C++ and Java"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[24367472-cu37681034]-[1130295029]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't think this is useful in terms of asking about *both* C++ and Java"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "term":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "oop",
      "constructor"
    ],
    "creationDate":"2014-06-23",
    "lastActivityDate":"2014-06-23",
    "lastEditDate":"2014-06-23",
    "score":5,
    "viewCount":152,
    "owner":{
      "type":"StackOverflowUser",
      "id":2319720,
      "displayName":"Chintan Shah",
      "reputation":64
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My question is that is </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24367472]-[-945539644]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My question is that is </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"A a=new A(); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[24367472]-[-1473851540]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"A",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"A",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"A a=new A(); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"A",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"a",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"A",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"A",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>here is the object created first and then the constructor method is called? Or the object is created because the constructor method is called?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24367472]-[304770878]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>here is the object created first and then the constructor method is called? Or the object is created because the constructor method is called?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "constructor":2,
                  "object":2,
                  "creat":2,
                  "call":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If the object is required to call the constructor, that means that the object should be created before the constructor is called and if I declare the constructor to be private (just to see if it works without the constructor), then I get an error.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24367472]-[875152282]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If the object is required to call the constructor, that means that the object should be created before the constructor is called and if I declare the constructor to be private (just to see if it works without the constructor), then I get an error.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "requir":1,
                  "mean":1,
                  "constructor":4,
                  "work":1,
                  "declar":1,
                  "object":2,
                  "error":1,
                  "creat":1,
                  "call":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Now if the constructor execution creates the object, I fail to understand how that logically works, I mean that without an object how can a method of the object can execute?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24367472]-[-1569603915]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Now if the constructor execution creates the object, I fail to understand how that logically works, I mean that without an object how can a method of the object can execute?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "fail":1,
                  "understand":1,
                  "constructor":1,
                  "work":1,
                  "logic":1,
                  "object":3,
                  "creat":1,
                  "execut":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can someone explain this?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[24367472]-[994801297]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can someone explain this?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "explain":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":24367682,
      "questionId":24367472,
      "comments":[
        
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2193767,
        "displayName":"TheLostMind",
        "reputation":14539
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Constructors actually don't <em>create</em> an object. They act more like initializers. They set the data into the objects that are given to them by the JVM.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367682]-[-1323811845]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Constructors actually don't <em>create</em> an object. They act more like initializers. They set the data into the objects that are given to them by the JVM.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "data":1,
                    "set":1,
                    "constructor":1,
                    "object":2,
                    "initi":1,
                    "act":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367591,
      "questionId":24367472,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":37681246,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 Calling Unsafe.allocateInstance(Class) allows you to create an instance without calling a constructor."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37681246]-[454806314]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 Calling Unsafe.allocateInstance(Class) allows you to create an instance without calling a constructor."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"allocateInstance",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alloc":1,
                        "constructor":1,
                        "unsaf":1,
                        "creat":1,
                        "call":2,
                        "instanc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37681327,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@PeterLawrey Yeah, I thought of that, but per some other discussions on Stack Overflow, people have generally said that you ought not consider `Unsafe` a valid use of the language since most of it is `native` code, which breaks the JLS."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37681327]-[2022190079]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@PeterLawrey Yeah, I thought of that, but per some other discussions on Stack Overflow, people have generally said that you ought not consider `Unsafe` a valid use of the language since most of it is `native` code, which breaks the JLS."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"PeterLawrey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jls":1,
                        "languag":1,
                        "break":1,
                        "overflow":1,
                        "thought":1,
                        "peter":1,
                        "code":1,
                        "discuss":1,
                        "general":1,
                        "yeah":1,
                        "stack":1,
                        "valid":1,
                        "unsaf":1,
                        "lawrey":1,
                        "peopl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37681423,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2193767,
            "displayName":"TheLostMind",
            "reputation":14539
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1.. great answer.."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37681423]-[336931819]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1.. great answer.."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "great":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37686856,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2319720,
            "displayName":"Chintan Shah",
            "reputation":64
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Does the constructer return a reference to the object?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37686856]-[-1897594434]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Does the constructer return a reference to the object?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "object":1,
                        "refer":1,
                        "construct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37681557,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JeffGohlke It is not part of the JLS, just a library method. It is not standard across JVMs either. However it does show that for HotSpot/OpenJDK at least, it is a separate step."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37681557]-[966215962]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JeffGohlke It is not part of the JLS, just a library method. It is not standard across JVMs either. However it does show that for HotSpot/OpenJDK at least, it is a separate step."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JeffGohlke",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jls":1,
                        "method":1,
                        "step":1,
                        "show":1,
                        "standard":1,
                        "gohlk":1,
                        "separ":1,
                        "librari":1,
                        "jvms":1,
                        "open":1,
                        "jeff":1,
                        "spot":1,
                        "hot":1,
                        "part":1,
                        "jdk":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37685239,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2319720,
            "displayName":"Chintan Shah",
            "reputation":64
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1, understood it. Nice:)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37685239]-[1378998084]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1, understood it. Nice:)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "nice":1,
                        "understood":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":37688447,
          "postId":24367591,
          "creationDate":"2014-06-23",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@user2319720 Actually, the constructor itself has a `void` return type. This subject actually gets kind of complicated and isn't as straightforward a question as you might think. You can think of it as the `new` keyword returning the object rather than the constructor. There are a couple of good Stack Overflow Q&amp;As that might help here. http://stackoverflow.com/a/3501693/1435657 http://stackoverflow.com/a/6801537/1435657"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367591-cu37688447]-[-490673827]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@user2319720 Actually, the constructor itself has a `void` return type. This subject actually gets kind of complicated and isn't as straightforward a question as you might think. You can think of it as the `new` keyword returning the object rather than the constructor. There are a couple of good Stack Overflow Q&amp;As that might help here. http://stackoverflow.com/a/3501693/1435657 http://stackoverflow.com/a/6801537/1435657"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "subject":1,
                        "overflow":1,
                        "return":1,
                        "good":1,
                        "complic":1,
                        "constructor":2,
                        "amp":1,
                        "keyword":1,
                        "object":1,
                        "stackoverflow":2,
                        "coupl":1,
                        "stack":1,
                        "isn":1,
                        "straightforward":1,
                        "kind":1,
                        "type":1,
                        "http":2,
                        "user":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "lastEditDate":"2014-06-23",
      "score":8,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":1435657,
        "displayName":"asteri",
        "reputation":6053
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Memory is allocated for the object before the constructor is called, yes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[-554403942]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Memory is allocated for the object before the constructor is called, yes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "constructor":1,
                    "object":1,
                    "call":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can think of it in terms of the following steps:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[-1464793508]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can think of it in terms of the following steps:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "term":1,
                    "step":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Memory is allocated for the object.</li> \n <li>Various constructors are executed (always from the top of the hierarchy down to the most specific one, e.g., <code>Object</code>'s constructor is executed first, then whatever other super-classes you have, then the actual class's).</li> \n <li>So the object already has memory for it, and it's being <em>initialized</em> by the constructors, not created. The constructors are simply setting up the <em>state</em> of the object.</li> \n <li>The object is unusable until the constructors are finished executing.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[539466281]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Memory is allocated for the object.</li> \n <li>Various constructors are executed (always from the top of the hierarchy down to the most specific one, e.g., <code>Object</code>'s constructor is executed first, then whatever other super-classes you have, then the actual class's).</li> \n <li>So the object already has memory for it, and it's being <em>initialized</em> by the constructors, not created. The constructors are simply setting up the <em>state</em> of the object.</li> \n <li>The object is unusable until the constructors are finished executing.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "unus":1,
                    "alloc":1,
                    "state":1,
                    "set":1,
                    "constructor":5,
                    "finish":1,
                    "object":5,
                    "code":2,
                    "simpli":1,
                    "hierarchi":1,
                    "specif":1,
                    "class":1,
                    "initi":1,
                    "actual":1,
                    "creat":1,
                    "top":1,
                    "execut":3,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Point 4 actually isn't entirely true, because you can leak a reference to the object via passing <code>this</code> to another method within the constructor, but that's a bit of a fringe case. It's kind of a fascinating phenomenon, because you can access things like <code>final</code> variables before they're initialized and retrieve two different values from them, depending on where in the execution they are.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[-1744235727]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Point 4 actually isn't entirely true, because you can leak a reference to the object via passing <code>this</code> to another method within the constructor, but that's a bit of a fringe case. It's kind of a fascinating phenomenon, because you can access things like <code>final</code> variables before they're initialized and retrieve two different values from them, depending on where in the execution they are.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "point":1,
                    "bit":1,
                    "depend":1,
                    "retriev":1,
                    "phenomenon":1,
                    "leak":1,
                    "constructor":1,
                    "thing":1,
                    "object":1,
                    "code":4,
                    "fascin":1,
                    "valu":1,
                    "refer":1,
                    "isn":1,
                    "true":1,
                    "pass":1,
                    "initi":1,
                    "fring":1,
                    "kind":1,
                    "variabl":1,
                    "execut":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Addressing the comments below: the constructor itself doesn't return anything. It has a <code>void</code> return type. How the variable actually receives the object isn't as straightforward as you might think, and it's a really good question. You can read very detailed answers about this subject on the following Stack Overflow answers, which do a much better and thorough job than I could replicate here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[-1091933510]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Addressing the comments below: the constructor itself doesn't return anything. It has a <code>void</code> return type. How the variable actually receives the object isn't as straightforward as you might think, and it's a really good question. You can read very detailed answers about this subject on the following Stack Overflow answers, which do a much better and thorough job than I could replicate here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "replic":1,
                    "read":1,
                    "question":1,
                    "receiv":1,
                    "subject":1,
                    "overflow":1,
                    "good":1,
                    "job":1,
                    "constructor":1,
                    "object":1,
                    "code":2,
                    "comment":1,
                    "stack":1,
                    "isn":1,
                    "straightforward":1,
                    "address":1,
                    "answer":2,
                    "detail":1,
                    "type":1,
                    "variabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://stackoverflow.com/a/3501693/1435657\">Can we have a return type for a constructor in Java?</a></li> \n <li><a href=\"http://stackoverflow.com/questions/6801500/why-do-constructors-in-java-not-have-a-return-type/6801537#6801537\">Why do constructors in Java not have a return type?</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[-1227890918]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://stackoverflow.com/a/3501693/1435657\">Can we have a return type for a constructor in Java?</a></li> \n <li><a href=\"http://stackoverflow.com/questions/6801500/why-do-constructors-in-java-not-have-a-return-type/6801537#6801537\">Why do constructors in Java not have a return type?</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "constructor":3,
                    "stackoverflow":2,
                    "type":3,
                    "href":2,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a side note, as Peter Lawrey mentions in the comments, you are able to use the <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\"rel=\"nofollow\">Unsafe API</a> to create instances of an object without executing a constructor. Based on <a href=\"http://stackoverflow.com/questions/19501966/is-it-possible-to-produce-undefined-behavior-when-dereferencing-null-in-java\">some other Stack Overflow discussions</a>, however, the general opinion seems to be that anything you do with <code>Unsafe</code> doesn't really qualify as normal Java behavior.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367591]-[1456824024]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a side note, as Peter Lawrey mentions in the comments, you are able to use the <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\"rel=\"nofollow\">Unsafe API</a> to create instances of an object without executing a constructor. Based on <a href=\"http://stackoverflow.com/questions/19501966/is-it-possible-to-produce-undefined-behavior-when-dereferencing-null-in-java\">some other Stack Overflow discussions</a>, however, the general opinion seems to be that anything you do with <code>Unsafe</code> doesn't really qualify as normal Java behavior.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "question":1,
                    "overflow":1,
                    "docjar":1,
                    "produc":1,
                    "normal":1,
                    "dereferenc":1,
                    "peter":1,
                    "sun":1,
                    "rel":1,
                    "constructor":1,
                    "doc":1,
                    "object":1,
                    "base":1,
                    "code":2,
                    "stackoverflow":1,
                    "qualifi":1,
                    "discuss":1,
                    "mention":1,
                    "nofollow":1,
                    "general":1,
                    "note":1,
                    "opinion":1,
                    "undefin":1,
                    "comment":1,
                    "stack":1,
                    "misc":1,
                    "api":2,
                    "unsaf":3,
                    "behavior":2,
                    "html":1,
                    "href":2,
                    "lawrey":1,
                    "http":2,
                    "creat":1,
                    "execut":1,
                    "instanc":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367539,
      "questionId":24367472,
      "comments":[
        
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":857807,
        "displayName":"dcastro",
        "reputation":21244
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You tagged the question with more than one language, you should pick one.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367539]-[1075877422]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You tagged the question with more than one language, you should pick one.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "pick":1,
                    "tag":1,
                    "languag":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But the convention is to first allocate memory for the object and its fields, then run the constructor and then, <em>if applicable</em>, assign a reference to this new object to the variable <code>a</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367539]-[153264303]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But the convention is to first allocate memory for the object and its fields, then run the constructor and then, <em>if applicable</em>, assign a reference to this new object to the variable <code>a</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "field":1,
                    "run":1,
                    "constructor":1,
                    "assign":1,
                    "object":2,
                    "code":2,
                    "refer":1,
                    "applic":1,
                    "variabl":1,
                    "convent":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Some nuances exist. C#, for example, does things a little differently for value types.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367539]-[-988506818]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Some nuances exist. C#, for example, does things a little differently for value types.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exist":1,
                    "differ":1,
                    "thing":1,
                    "type":1,
                    "nuanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Allocate memory for value type instance</li> \n <li>Run constructor</li> \n <li>Copy object, bit-by-bit, to the location <code>a</code> is pointing to.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367539]-[-2074975999]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Allocate memory for value type instance</li> \n <li>Run constructor</li> \n <li>Copy object, bit-by-bit, to the location <code>a</code> is pointing to.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "bit":2,
                    "alloc":1,
                    "run":1,
                    "constructor":1,
                    "object":1,
                    "code":2,
                    "type":1,
                    "copi":1,
                    "locat":1,
                    "instanc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This makes sure <code>a</code> never points to a partially-constructed instance of a value-type. It also makes sure that, if the constructor throws an exception, the memory location <code>a</code> points to is not left corrupted.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367539]-[1528307745]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This makes sure <code>a</code> never points to a partially-constructed instance of a value-type. It also makes sure that, if the constructor throws an exception, the memory location <code>a</code> points to is not left corrupted.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":2,
                    "partial":1,
                    "left":1,
                    "constructor":1,
                    "code":4,
                    "make":2,
                    "type":1,
                    "construct":1,
                    "corrupt":1,
                    "locat":1,
                    "instanc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367590,
      "questionId":24367472,
      "comments":[
        
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2136074,
        "displayName":"Dipika",
        "reputation":304
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. So <strong>instantiating a class</strong> means the same thing as <strong>creating an object</strong>, When you create an object, you are creating an <strong>instance</strong> of a class, therefore &quot;instantiating&quot; a class.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367590]-[2079700997]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. So <strong>instantiating a class</strong> means the same thing as <strong>creating an object</strong>, When you create an object, you are creating an <strong>instance</strong> of a class, therefore &quot;instantiating&quot; a class.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"by",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"means",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "instanti":3,
                    "return":1,
                    "mean":1,
                    "thing":1,
                    "strong":6,
                    "object":3,
                    "oper":1,
                    "refer":1,
                    "quot":2,
                    "creat":3,
                    "instanc":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367601,
      "questionId":24367472,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":37681318,
          "postId":24367601,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":857807,
            "displayName":"dcastro",
            "reputation":21244
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, that's true, I didn't comment on the *whole* procedure. There's much more to it than this. For example, the static constructor will also have to be called if this is the first time the class is being used."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367601-cu37681318]-[-410832903]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, that's true, I didn't comment on the *whole* procedure. There's much more to it than this. For example, the static constructor will also have to be called if this is the first time the class is being used."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"is",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "procedur":1,
                        "constructor":1,
                        "comment":1,
                        "true":1,
                        "time":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":905762,
        "displayName":"John B",
        "reputation":18372
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I agree with <code>@dcastro</code> in general. However, I believe in both languages any instance fields that are assigned in-line are populated prior to the constructor being executed (or at least prior to the first line of code in the constructor). So you could make the conclusion that the object is created first, then the constructor is called.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367601]-[656998855]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I agree with <code>@dcastro</code> in general. However, I believe in both languages any instance fields that are assigned in-line are populated prior to the constructor being executed (or at least prior to the first line of code in the constructor). So you could make the conclusion that the object is created first, then the constructor is called.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "prior":2,
                    "field":1,
                    "line":2,
                    "constructor":3,
                    "assign":1,
                    "object":1,
                    "code":3,
                    "conclus":1,
                    "general":1,
                    "dcastro":1,
                    "popul":1,
                    "make":1,
                    "agre":1,
                    "creat":1,
                    "call":1,
                    "execut":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class MyClass{ final int value1 = 15; final int value2; public MyClass(){ this.value2 = value1; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[24367601]-[-368078719]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyClass",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"value1",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"IntegerLiteralNode",
                                            "valueRep":"15"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"final",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"value2",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"PrimitiveTypeNode",
                                      "name":"int",
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"MyClass",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"BinaryExpressionNode",
                                      "operator":{
                                        "type":"OperatorNode",
                                        "symbol":"=",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "left":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"this",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"value2",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "right":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"value1",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class MyClass{ final int value1 = 15; final int value2; public MyClass(){ this.value2 = value1; } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"value1",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"15"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"value2",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In both languages, I believe <code>value2</code> will be set to 15. So add step <code>1a - populate in-line instance fields</code> to <code>dcastro's</code> answer.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367601]-[602268326]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In both languages, I believe <code>value2</code> will be set to 15. So add step <code>1a - populate in-line instance fields</code> to <code>dcastro's</code> answer.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "step":1,
                    "field":1,
                    "line":1,
                    "set":1,
                    "code":6,
                    "dcastro":1,
                    "popul":1,
                    "answer":1,
                    "add":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367553,
      "questionId":24367472,
      "comments":[
        
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1782465,
        "displayName":"Angew",
        "reputation":60801
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Answering for C++:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[150996245]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Answering for C++:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "answer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A new-expression (let's say <code>new A()</code>) is compiled as follows:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[2003263042]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A new-expression (let's say <code>new A()</code>) is compiled as follows:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ConstructorCreatorNode",
                    "creatorType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"A",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "expressionArgs":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":2,
                    "compil":1,
                    "express":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"A",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>1 Check that the default constructor of <code>A</code> is accessible within the context; otherwise, signal a compilation error.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[1071217688]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>1 Check that the default constructor of <code>A</code> is accessible within the context; otherwise, signal a compilation error.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "context":1,
                    "constructor":1,
                    "code":2,
                    "check":1,
                    "error":1,
                    "compil":1,
                    "access":1,
                    "signal":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2a If class <code>A</code> has an overloaded allocation function <code>A::operator new()</code>, call it to obtain space for the object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[-1444043622]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2a If class <code>A</code> has an overloaded allocation function <code>A::operator new()</code>, call it to obtain space for the object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"A",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "overload":1,
                    "object":1,
                    "code":4,
                    "oper":1,
                    "space":1,
                    "function":1,
                    "call":1,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>2b Otherwise, call the allocation function <code>::operator new()</code> to obtain space for the object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[104501383]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>2b Otherwise, call the allocation function <code>::operator new()</code> to obtain space for the object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "object":1,
                    "code":2,
                    "oper":1,
                    "space":1,
                    "function":1,
                    "call":1,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>3 Call the default constructor <code>A::A()</code> in the space obtained from the allocation function.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367553]-[366487725]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>3 Call the default constructor <code>A::A()</code> in the space obtained from the allocation function.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "constructor":1,
                    "code":2,
                    "space":1,
                    "function":1,
                    "call":1,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":24367521,
      "questionId":24367472,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":37685218,
          "postId":24367521,
          "creationDate":"2014-06-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2319720,
            "displayName":"Chintan Shah",
            "reputation":64
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"constructor is not static, how can you invoke it on a class?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[24367521-cu37685218]-[1666177306]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"constructor is not static, how can you invoke it on a class?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "invok":1,
                        "constructor":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-06-23",
      "lastActivityDate":"2014-06-23",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3751063,
        "displayName":"wladimiiir",
        "reputation":231
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Class has constructor which creates an object. You invoke constructor on a class not on an object, so new object is always created from class constructor.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[24367521]-[-1827972772]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Class has constructor which creates an object. You invoke constructor on a class not on an object, so new object is always created from class constructor.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"not",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"constructor",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "object":3,
                    "invok":1,
                    "creat":2,
                    "constructor":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}