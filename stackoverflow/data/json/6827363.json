{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":6827363,
    "title":"Bytecode features not available in the Java language",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":8117154,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":691884,
          "displayName":"Random832",
          "reputation":10205
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It's a very poor optimizing compiler that can't compile `(x&lt;\n<n)|(x>\n &gt;(32-n))` to a `rol` instruction.\n</n)|(x>"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8117154]-[1710000023]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It's a very poor optimizing compiler that can't compile `(x&lt;\n<n)|(x>\n &gt;(32-n))` to a `rol` instruction.\n</n)|(x>"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "optim":1,
                      "poor":1,
                      "rol":1,
                      "compil":2,
                      "instruct":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8112220,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":710877,
          "displayName":"Anantha Sharma",
          "reputation":4417
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"could you elaborate on what you mean by &quot;can't do with plain Java&quot;."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8112220]-[372607027]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"could you elaborate on what you mean by &quot;can't do with plain Java&quot;."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "quot":2,
                      "plain":1,
                      "elabor":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8112225,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":16883,
          "displayName":"Michael Borgwardt",
          "reputation":197539
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Define &quot;things&quot;. In the end, the Java language and Java bytecode are both Turing complete..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8112225]-[-2072732815]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Define &quot;things&quot;. In the end, the Java language and Java bytecode are both Turing complete..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "languag":1,
                      "bytecod":1,
                      "thing":1,
                      "ture":1,
                      "end":1,
                      "quot":2,
                      "complet":1,
                      "defin":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8112304,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":85821,
          "displayName":"Bart van Heukelom",
          "reputation":12937
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Michael Borgwardt updated"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8112304]-[-1965564968]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Michael Borgwardt updated"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Michael",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "michael":1,
                      "borgwardt":1,
                      "updat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8112572,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Is the real question; is there any advantage programming in byte code e.g. using Jasmin, instead of Java?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8112572]-[321157932]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Is the real question; is there any advantage programming in byte code e.g. using Jasmin, instead of Java?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "program":1,
                      "question":1,
                      "real":1,
                      "code":1,
                      "advantag":1,
                      "jasmin":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":8112641,
        "postId":6827363,
        "creationDate":"2011-07-26",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":155137,
          "displayName":"Martijn Courteaux",
          "reputation":36377
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Like `rol` in assembler, which you can't write in C++."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[6827363-cu8112641]-[-2073957395]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Like `rol` in assembler, which you can't write in C++."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "assembl":1,
                      "rol":1,
                      "write":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "jvm",
      "bytecode"
    ],
    "creationDate":"2011-07-26",
    "lastActivityDate":"2014-08-29",
    "lastEditDate":"2013-02-15",
    "score":21,
    "viewCount":919,
    "owner":{
      "type":"StackOverflowUser",
      "id":85821,
      "displayName":"Bart van Heukelom",
      "reputation":12937
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Are there currently (Java 6) things you can do in Java bytecode that you can't do from within the Java language?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6827363]-[-627652156]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Are there currently (Java 6) things you can do in Java bytecode that you can't do from within the Java language?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "thing":1,
                  "languag":1,
                  "bytecod":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know both are Turing complete, so read &quot;can do&quot; as &quot;can do significantly faster/better, or just in a different way&quot;.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6827363]-[-88941055]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know both are Turing complete, so read &quot;can do&quot; as &quot;can do significantly faster/better, or just in a different way&quot;.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "faster":1,
                  "ture":1,
                  "signific":1,
                  "quot":4,
                  "complet":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I'm thinking of extra bytecodes like <code>invokedynamic</code>, which can't be generated using Java, except that specific one is for a future version.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[6827363]-[-1031267993]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I'm thinking of extra bytecodes like <code>invokedynamic</code>, which can't be generated using Java, except that specific one is for a future version.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bytecod":1,
                  "invokedynam":1,
                  "code":2,
                  "version":1,
                  "futur":1,
                  "think":1,
                  "specif":1,
                  "generat":1,
                  "extra":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":6828280,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8113411,
          "postId":6828280,
          "creationDate":"2011-07-26",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Note that there **is** a way to do the first thing in Java. It's sometimes called a [sneaky throw](http://blog.jayway.com/2010/01/29/sneaky-throw/)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu8113411]-[-214157016]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Note that there **is** a way to do the first thing in Java. It's sometimes called a [sneaky throw](http://blog.jayway.com/2010/01/29/sneaky-throw/)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thing":1,
                        "blog":1,
                        "note":1,
                        "http":1,
                        "call":1,
                        "jayway":1,
                        "sneaki":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8113569,
          "postId":6828280,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":62130,
            "displayName":"Esko Luontola",
            "reputation":55887
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Now that's sneaky! :D Thanks for sharing."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu8113569]-[-57722671]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Now that's sneaky! :D Thanks for sharing."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "share":1,
                        "sneaki":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8114365,
          "postId":6828280,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":85821,
            "displayName":"Bart van Heukelom",
            "reputation":12937
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think you can also use `Thread.stop(Throwable)` for a sneaky throw. I assume the one already linked is faster though."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu8114365]-[1963224247]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think you can also use `Thread.stop(Throwable)` for a sneaky throw. I assume the one already linked is faster though."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "assum":1,
                        "faster":1,
                        "stop":1,
                        "throwabl":1,
                        "thread":1,
                        "link":1,
                        "sneaki":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":27150048,
          "postId":6828280,
          "creationDate":"2013-08-27",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can\u2019t create an instance without calling a constructor in Java bytecode. The verifier will reject any code which tries to use an uninitialized instance. The object deserialization implementation uses native code helpers for creating instances without constructor calling."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu27150048]-[1803257393]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can\u2019t create an instance without calling a constructor in Java bytecode. The verifier will reject any code which tries to use an uninitialized instance. The object deserialization implementation uses native code helpers for creating instances without constructor calling."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bytecod":1,
                        "verifi":1,
                        "constructor":2,
                        "reject":1,
                        "object":1,
                        "code":2,
                        "uniniti":1,
                        "implement":1,
                        "helper":1,
                        "deseri":1,
                        "creat":2,
                        "call":2,
                        "instanc":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":34109775,
          "postId":6828280,
          "creationDate":"2014-03-15",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1237575,
            "displayName":"Rafael Winterhalter",
            "reputation":8227
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"For a class Foo extending Object, you could not instantiate Foo by calling a constructor that is declared in Object. The verifier would refuse it. You could create such a constructor using Java's ReflectionFactory but this hardly is a byte code feature but realized by Jni. Your answer is wrong and Holger is correct."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu34109775]-[-542555603]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"For a class Foo extending Object, you could not instantiate Foo by calling a constructor that is declared in Object. The verifier would refuse it. You could create such a constructor using Java's ReflectionFactory but this hardly is a byte code feature but realized by Jni. Your answer is wrong and Holger is correct."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ReflectionFactory",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "instanti":1,
                        "refus":1,
                        "wrong":1,
                        "correct":1,
                        "verifi":1,
                        "constructor":2,
                        "extend":1,
                        "factori":1,
                        "declar":1,
                        "object":2,
                        "code":1,
                        "jni":1,
                        "holger":1,
                        "answer":1,
                        "featur":1,
                        "creat":1,
                        "call":1,
                        "reflect":1,
                        "realiz":1,
                        "foo":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ReflectionFactory",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":34999937,
          "postId":6828280,
          "creationDate":"2014-04-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":62130,
            "displayName":"Esko Luontola",
            "reputation":55887
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Regarding the controversial ability to skip calling a constructor, I was able to reproduce it on 32-bit jdk1.6.0_10, but not on other versions that I tried. Seems that it was a HotSpot bug. Here's the code: https://github.com/orfjackal/misc-tools/blob/db6c64d9dbe62b5afbf09e3516918ff5cbd5bc42/src/main/java/net/orfjackal/experimental/ConstructorSkipping.java"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6828280-cu34999937]-[1982310115]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Regarding the controversial ability to skip calling a constructor, I was able to reproduce it on 32-bit jdk1.6.0_10, but not on other versions that I tried. Seems that it was a HotSpot bug. Here's the code: https://github.com/orfjackal/misc-tools/blob/db6c64d9dbe62b5afbf09e3516918ff5cbd5bc42/src/main/java/net/orfjackal/experimental/ConstructorSkipping.java"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "github":1,
                        "bit":1,
                        "dbe":1,
                        "tool":1,
                        "controversi":1,
                        "constructor":2,
                        "reproduc":1,
                        "skip":2,
                        "https":1,
                        "main":1,
                        "net":1,
                        "code":1,
                        "orfjack":2,
                        "version":1,
                        "bug":1,
                        "src":1,
                        "misc":1,
                        "abil":1,
                        "spot":1,
                        "hot":1,
                        "cbd":1,
                        "call":1,
                        "jdk":1,
                        "blob":1,
                        "afbf":1,
                        "experiment":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-07-26",
      "lastActivityDate":"2014-03-20",
      "lastEditDate":"2014-03-20",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":62130,
        "displayName":"Esko Luontola",
        "reputation":55887
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here are some features that can be done in Java bytecode but not in Java source code:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6828280]-[-911090241]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here are some features that can be done in Java bytecode but not in Java source code:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sourc":1,
                    "code":1,
                    "bytecod":1,
                    "featur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p><strong>Throwing a checked exception from a method without declaring that the method throws it.</strong> The checked and unchecked exceptions are a thing which is checked only by the Java compiler, not the JVM. Because of this for example Scala can throw checked exceptions from methods without declaring them. Though with Java generics there is a workaround called <a href=\"http://blog.jayway.com/2010/01/29/sneaky-throw/\"rel=\"nofollow\">sneaky throw</a>.</p></li> \n <li><p><strong>Having two methods in a class that only differ in return type,</strong> as already mentioned in <a href=\"http://stackoverflow.com/questions/6827363/bytecode-features-not-available-in-the-java-language/6827552#6827552\">Joachim's answer</a>: The Java language specification does not allow two methods in the same class when they differ <em>only</em> in their return type (i.e. same name, same argument list, ...). The JVM specification however, has no such restriction, so a class file <em>can</em> contain two such methods, there's just no way to produce such a class file using the normal Java compiler. There's a nice example/explanation in <a href=\"http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204\">this answer</a>.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6828280]-[909851977]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p><strong>Throwing a checked exception from a method without declaring that the method throws it.</strong> The checked and unchecked exceptions are a thing which is checked only by the Java compiler, not the JVM. Because of this for example Scala can throw checked exceptions from methods without declaring them. Though with Java generics there is a workaround called <a href=\"http://blog.jayway.com/2010/01/29/sneaky-throw/\"rel=\"nofollow\">sneaky throw</a>.</p></li> \n <li><p><strong>Having two methods in a class that only differ in return type,</strong> as already mentioned in <a href=\"http://stackoverflow.com/questions/6827363/bytecode-features-not-available-in-the-java-language/6827552#6827552\">Joachim's answer</a>: The Java language specification does not allow two methods in the same class when they differ <em>only</em> in their return type (i.e. same name, same argument list, ...). The JVM specification however, has no such restriction, so a class file <em>can</em> contain two such methods, there's just no way to produce such a class file using the normal Java compiler. There's a nice example/explanation in <a href=\"http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204\">this answer</a>.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"when",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"file",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"file",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "question":2,
                    "method":6,
                    "languag":2,
                    "produc":1,
                    "bytecod":1,
                    "normal":1,
                    "differ":2,
                    "rel":1,
                    "thing":1,
                    "nice":1,
                    "strong":4,
                    "declar":2,
                    "generic":1,
                    "stackoverflow":2,
                    "explan":1,
                    "blog":1,
                    "mention":1,
                    "nofollow":1,
                    "check":4,
                    "workaround":1,
                    "uncheck":1,
                    "joachim":1,
                    "specif":2,
                    "scala":1,
                    "valid":1,
                    "answer":2,
                    "file":2,
                    "compil":2,
                    "featur":1,
                    "type":2,
                    "href":3,
                    "throw":1,
                    "except":2,
                    "http":3,
                    "call":1,
                    "jayway":1,
                    "argument":1,
                    "sneaki":2,
                    "restrict":1,
                    "list":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":23218472,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":35618940,
          "postId":23218472,
          "creationDate":"2014-04-24",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Regarding method names, you can have more than one `\n<clinit>\n ` method by defining methods with the name `\n <clinit>\n  ` but accepting parameters or having a non-`void` return type. But these methods are not very useful, the JVM will ignore them and the byte code can\u2019t invoke them. The only use would be to confuse readers.\n </clinit>\n</clinit>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23218472-cu35618940]-[1641947626]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Regarding method names, you can have more than one `\n<clinit>\n ` method by defining methods with the name `\n <clinit>\n  ` but accepting parameters or having a non-`void` return type. But these methods are not very useful, the JVM will ignore them and the byte code can\u2019t invoke them. The only use would be to confuse readers.\n </clinit>\n</clinit>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "ignor":1,
                        "method":4,
                        "name":1,
                        "accept":1,
                        "reader":1,
                        "invok":1,
                        "code":1,
                        "paramet":1,
                        "confus":1,
                        "clinit":4,
                        "defin":1,
                        "type":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39816139,
          "postId":23218472,
          "creationDate":"2014-08-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I just discovered, that Oracle\u2019s JVM detects an unreleased monitor at method exit and throws an `IllegalMonitorStateException` if you omitted the `monitorexit` instruction. And in case of an exceptional method exit that failed to do a `monitorexit`, it resets the monitor silently."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23218472-cu39816139]-[-1194420742]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I just discovered, that Oracle\u2019s JVM detects an unreleased monitor at method exit and throws an `IllegalMonitorStateException` if you omitted the `monitorexit` instruction. And in case of an exceptional method exit that failed to do a `monitorexit`, it resets the monitor silently."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"IllegalMonitorStateException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "monitor":3,
                        "method":2,
                        "fail":1,
                        "silent":1,
                        "state":1,
                        "detect":1,
                        "monitorexit":2,
                        "oracl":1,
                        "unreleas":1,
                        "omit":1,
                        "illeg":1,
                        "discov":1,
                        "exit":2,
                        "reset":1,
                        "except":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"IllegalMonitorStateException",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39822323,
          "postId":23218472,
          "creationDate":"2014-08-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1237575,
            "displayName":"Rafael Winterhalter",
            "reputation":8227
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Holger - did not know that, I know that this was possible in earlier JVMs at least, JRockit even has its own handler for this kind of implementation. I'll update the entry."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23218472-cu39822323]-[714378832]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Holger - did not know that, I know that this was possible in earlier JVMs at least, JRockit even has its own handler for this kind of implementation. I'll update the entry."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Holger",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "updat":1,
                        "earlier":1,
                        "jvms":1,
                        "entri":1,
                        "holger":1,
                        "jrockit":1,
                        "implement":1,
                        "kind":1,
                        "handler":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39823484,
          "postId":23218472,
          "creationDate":"2014-08-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Well, the JVM specification does not mandate such a behavior. I just discovered it because I tried to create a dangling intrinsic lock using such non-standard byte code."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23218472-cu39823484]-[-411455593]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Well, the JVM specification does not mandate such a behavior. I just discovered it because I tried to create a dangling intrinsic lock using such non-standard byte code."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "mandat":1,
                        "standard":1,
                        "lock":1,
                        "dangl":1,
                        "code":1,
                        "specif":1,
                        "discov":1,
                        "intrins":1,
                        "behavior":1,
                        "creat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39824145,
          "postId":23218472,
          "creationDate":"2014-08-26",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ok, [I found the relevant spec](http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.11.10): \u201c*Structured locking* is the situation when, during a method invocation, every exit on a given monitor matches a preceding entry on that monitor. Since there is no assurance that all code submitted to the Java Virtual Machine will perform structured locking, implementations of the Java Virtual Machine are permitted but not required to enforce both of the following two rules guaranteeing structured locking. \u2026\u201d"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[23218472-cu39824145]-[1722647224]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ok, [I found the relevant spec](http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.11.10): \u201c*Structured locking* is the situation when, during a method invocation, every exit on a given monitor matches a preceding entry on that monitor. Since there is no assurance that all code submitted to the Java Virtual Machine will perform structured locking, implementations of the Java Virtual Machine are permitted but not required to enforce both of the following two rules guaranteeing structured locking. \u2026\u201d"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "enforc":1,
                        "monitor":2,
                        "method":1,
                        "invoc":1,
                        "requir":1,
                        "relev":1,
                        "oracl":1,
                        "rule":1,
                        "lock":3,
                        "submit":1,
                        "jvms":3,
                        "doc":1,
                        "virtual":2,
                        "structur":3,
                        "match":1,
                        "code":1,
                        "guarante":1,
                        "situat":1,
                        "found":1,
                        "entri":1,
                        "permit":1,
                        "machin":2,
                        "perform":1,
                        "implement":1,
                        "spec":2,
                        "javas":1,
                        "exit":1,
                        "html":2,
                        "http":1,
                        "preced":1,
                        "assur":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-04-22",
      "lastActivityDate":"2014-08-29",
      "lastEditDate":"2014-08-29",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1237575,
        "displayName":"Rafael Winterhalter",
        "reputation":8227
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>After working with Java byte code for quite a while and doing some addtional research on this matter, here is a summary of my findings:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1139981243]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>After working with Java byte code for quite a while and doing some addtional research on this matter, here is a summary of my findings:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "research":1,
                    "summari":1,
                    "work":1,
                    "code":1,
                    "addtion":1,
                    "matter":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Exectute code in a constuctor before calling a super constructor or auxilliary constructor</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[925563734]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Exectute code in a constuctor before calling a super constructor or auxilliary constructor</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exectut":1,
                    "constructor":2,
                    "strong":2,
                    "code":1,
                    "auxilliari":1,
                    "constuctor":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In the Java programming language (JPL), a constructor's first statement must be an invocation of a super constructor or another constructor of the same class. This is not true for Java byte code (JBC). Within byte code, it is absolutely legitimate to execute any code before a constructor, as long as:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1078584163]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In the Java programming language (JPL), a constructor's first statement must be an invocation of a super constructor or another constructor of the same class. This is not true for Java byte code (JBC). Within byte code, it is absolutely legitimate to execute any code before a constructor, as long as:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jpl":1,
                    "program":1,
                    "languag":1,
                    "jbc":1,
                    "invoc":1,
                    "constructor":4,
                    "statement":1,
                    "legitim":1,
                    "code":3,
                    "true":1,
                    "absolut":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Another compatible constructor is called at some time after this code block. </li> \n <li>This call is not within a conditional statement.</li> \n <li>Before this constructor call, no field of the constructed instance is read and none of its methods is invoked. This implies the next item.</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[720508655]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Another compatible constructor is called at some time after this code block. </li> \n <li>This call is not within a conditional statement.</li> \n <li>Before this constructor call, no field of the constructed instance is read and none of its methods is invoked. This implies the next item.</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "method":1,
                    "field":1,
                    "impli":1,
                    "condit":1,
                    "invok":1,
                    "constructor":2,
                    "statement":1,
                    "code":1,
                    "block":1,
                    "time":1,
                    "call":3,
                    "construct":1,
                    "instanc":1,
                    "compat":1,
                    "item":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Set instance fields before calling a super constructor or auxilliary constructor</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-2066411214]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Set instance fields before calling a super constructor or auxilliary constructor</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "set":1,
                    "constructor":2,
                    "strong":2,
                    "auxilliari":1,
                    "call":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As mentioned before, it is perfectly legal to set a field value of an instance before calling another constructor. There even exists a legacy hack which makes it able to exploit this &quot;feature&quot; in Java versions before 6:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1725460606]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As mentioned before, it is perfectly legal to set a field value of an instance before calling another constructor. There even exists a legacy hack which makes it able to exploit this &quot;feature&quot; in Java versions before 6:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exploit":1,
                    "field":1,
                    "exist":1,
                    "set":1,
                    "constructor":1,
                    "perfect":1,
                    "version":1,
                    "legal":1,
                    "mention":1,
                    "make":1,
                    "quot":2,
                    "hack":1,
                    "featur":1,
                    "legaci":1,
                    "call":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Foo { public String s; public Foo() { System.out.println(s); } } class Bar extends Foo { public Bar() { this(s = &quot;Hello World!&quot;); } private Bar(String helper) { super(); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[1641141156]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"s",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"String",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"s",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Bar",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Bar",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"this",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"s",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"LiteralNode",
                                              "node":{
                                                "type":"StringLiteralNode",
                                                "valueRep":"\"Hello World!\""
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Bar",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"String",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"helper",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"super",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class Foo { public String s; public Foo() { System.out.println(s); } } class Bar extends Foo { public Bar() { this(s = \"Hello World!\"); } private Bar(String helper) { super(); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "system":1,
                    "world":1,
                    "println":1,
                    "bar":3,
                    "helper":1,
                    "foo":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Foo",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"s",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"this",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"=",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"s",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"Hello World!\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"super",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"s",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"helper",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This way, a field could be set before the super constructor is invoked which is however not longer possible. In JBC, this behavior can still be implemented.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[208419599]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This way, a field could be set before the super constructor is invoked which is however not longer possible. In JBC, this behavior can still be implemented.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "jbc":1,
                    "set":1,
                    "invok":1,
                    "constructor":1,
                    "implement":1,
                    "longer":1,
                    "behavior":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Branch a super constructor call (until Java7u23)</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-753627416]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Branch a super constructor call (until Java7u23)</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "call":1,
                    "strong":2,
                    "branch":1,
                    "constructor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java, it is not possible to define a constructor call like</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-385604869]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java, it is not possible to define a constructor call like</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "call":1,
                    "defin":1,
                    "constructor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Foo { Foo() { } Foo(Void v) { } } class Bar() { if(System.currentTimeMillis() % 2 == 0) { super(); } else { super(null); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[-202841301]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"Void",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"v",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"Bar",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"() "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"==",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"BinaryExpressionNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"%",
                                "comments":[
                                  
                                ]
                              },
                              "left":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"System",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"currentTimeMillis",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "right":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"2"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"0"
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"super",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "elseStatement":{
                            "type":"ElseStatementNode",
                            "statement":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"super",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"NullLiteralNode"
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              },
              "rawText":"class Foo { Foo() { } Foo(Void v) { } } class Bar() { if(System.currentTimeMillis() % 2== 0) { super(); } else { super(null); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "system":1,
                    "milli":1,
                    "bar":1,
                    "time":1,
                    "current":1,
                    "foo":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Void",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"currentTimeMillis",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"super",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"super",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"v",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Until Java 7u23, the HotSpot VM's verifier did however miss this check which is why it was possible. This was used by several code generation tools as a sort of a hack but it is not longer legal to implement a class like this.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1426659958]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Until Java 7u23, the HotSpot VM's verifier did however miss this check which is why it was possible. This was used by several code generation tools as a sort of a hack but it is not longer legal to implement a class like this.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"like",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tool":1,
                    "verifi":1,
                    "miss":1,
                    "code":1,
                    "legal":1,
                    "check":1,
                    "implement":1,
                    "spot":1,
                    "generat":1,
                    "hack":1,
                    "hot":1,
                    "longer":1,
                    "sort":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Define a class without any constructor</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-890554498]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Define a class without any constructor</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"without",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "defin":1,
                    "strong":2,
                    "constructor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Java compiler will always implement at least one constructor for any class. In Java byte code, this is not required. This allows the creation of classes that cannot be constructed even when using reflection. However, using <code>sun.misc.Unsafe</code> still allows for the creation of such instances.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-282355879]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Java compiler will always implement at least one constructor for any class. In Java byte code, this is not required. This allows the creation of classes that cannot be constructed even when using reflection. However, using <code>sun.misc.Unsafe</code> still allows for the creation of such instances.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "requir":1,
                    "sun":1,
                    "constructor":1,
                    "creation":2,
                    "code":3,
                    "implement":1,
                    "misc":1,
                    "class":1,
                    "compil":1,
                    "unsaf":1,
                    "reflect":1,
                    "construct":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Define methods with identical signature but with different return type</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1589490494]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Define methods with identical signature but with different return type</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "signatur":1,
                    "strong":2,
                    "ident":1,
                    "defin":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In the JPL, a method is identified as unique by its name and its raw parameter types. In JBC, the raw return type is additionally considered. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1522330643]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In the JPL, a method is identified as unique by its name and its raw parameter types. In JBC, the raw return type is additionally considered. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jpl":1,
                    "method":1,
                    "uniqu":1,
                    "jbc":1,
                    "addit":1,
                    "paramet":1,
                    "raw":2,
                    "consid":1,
                    "identifi":1,
                    "type":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Throw undeclared checked exceptions without catching them</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1905141213]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Throw undeclared checked exceptions without catching them</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "undeclar":1,
                    "strong":2,
                    "check":1,
                    "catch":1,
                    "except":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Java runtime and the Java byte code are not aware of the concept of checked exceptions. It is only the Java compiler that verifies that checked exceptions are always either catched or declared if they are thrown.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[787264185]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Java runtime and the Java byte code are not aware of the concept of checked exceptions. It is only the Java compiler that verifies that checked exceptions are always either catched or declared if they are thrown.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "runtim":1,
                    "verifi":1,
                    "thrown":1,
                    "declar":1,
                    "code":1,
                    "awar":1,
                    "check":2,
                    "concept":1,
                    "compil":1,
                    "catch":1,
                    "except":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Use dynamic method invocation outside of lambda expressions</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[104591173]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Use dynamic method invocation outside of lambda expressions</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "invoc":1,
                    "lambda":1,
                    "dynam":1,
                    "strong":2,
                    "express":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The so-called <a href=\"http://stackoverflow.com/q/6638735/1237575\">dynamic method invocation</a> can be used for anything, not only for Java's lambda expressions. Using this feature allows for example to switch out execution logic at runtime. Many dynamic programming languages that boil down to JBC <a href=\"http://groovy.codehaus.org/InvokeDynamic+support\"rel=\"nofollow\">improved their performance</a> by using this instruction. In Java byte code, you could also emulate lambda expressions in Java 7 where the compiler did not yet allow for any use of dynamic method invocation while the JVM already understood the instruction.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-2147025581]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The so-called <a href=\"http://stackoverflow.com/q/6638735/1237575\">dynamic method invocation</a> can be used for anything, not only for Java's lambda expressions. Using this feature allows for example to switch out execution logic at runtime. Many dynamic programming languages that boil down to JBC <a href=\"http://groovy.codehaus.org/InvokeDynamic+support\"rel=\"nofollow\">improved their performance</a> by using this instruction. In Java byte code, you could also emulate lambda expressions in Java 7 where the compiler did not yet allow for any use of dynamic method invocation while the JVM already understood the instruction.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "boil":1,
                    "jvm":1,
                    "program":1,
                    "support":1,
                    "method":2,
                    "languag":1,
                    "runtim":1,
                    "jbc":1,
                    "invoc":2,
                    "lambda":2,
                    "rel":1,
                    "dynam":4,
                    "invok":1,
                    "emul":1,
                    "improv":1,
                    "logic":1,
                    "code":1,
                    "understood":1,
                    "stackoverflow":1,
                    "nofollow":1,
                    "groovi":1,
                    "perform":1,
                    "express":2,
                    "codehaus":1,
                    "compil":1,
                    "featur":1,
                    "org":1,
                    "href":2,
                    "http":2,
                    "call":1,
                    "execut":1,
                    "instruct":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Use identifiers that are not normally considered legal</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-208507226]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Use identifiers that are not normally considered legal</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "legal":1,
                    "consid":1,
                    "identifi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Ever fancied using spaces and a line break in your method's name? Create your own JBC and good luck for code review. The only illegal characters for identifiers are <code>.</code>, <code>;</code>, <code>[</code> and <code>/</code>. Additionally, methods that are not named <code>&lt;init&gt;</code> or <code>&lt;clinit&gt;</code> cannot contain <code>&lt;</code> and <code>&gt;</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-13019975]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Ever fancied using spaces and a line break in your method's name? Create your own JBC and good luck for code review. The only illegal characters for identifiers are <code>.</code>, <code>;</code>, <code>[</code> and <code>/</code>. Additionally, methods that are not named <code>&lt;init&gt;</code> or <code>&lt;clinit&gt;</code> cannot contain <code>&lt;</code> and <code>&gt;</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"init"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"clinit"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "fanci":1,
                    "method":2,
                    "review":1,
                    "name":1,
                    "charact":1,
                    "jbc":1,
                    "addit":1,
                    "line":1,
                    "good":1,
                    "luck":1,
                    "code":17,
                    "space":1,
                    "illeg":1,
                    "identifi":1,
                    "clinit":1,
                    "creat":1,
                    "init":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Reassign <code>final</code> parameters or the <code>this</code> reference</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1311208913]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Reassign <code>final</code> parameters or the <code>this</code> reference</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "code":4,
                    "paramet":1,
                    "refer":1,
                    "reassign":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>final</code> parameters do not exist in JBC and can consequently be reassigned. Any parameter, including the <code>this</code> reference is only stored in a simple array within the JVM what allows to reassign the <code>this</code> reference at index <code>0</code> within a single method frame.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1640470028]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>final</code> parameters do not exist in JBC and can consequently be reassigned. Any parameter, including the <code>this</code> reference is only stored in a simple array within the JVM what allows to reassign the <code>this</code> reference at index <code>0</code> within a single method frame.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "singl":1,
                    "method":1,
                    "simpl":1,
                    "exist":1,
                    "jbc":1,
                    "store":1,
                    "frame":1,
                    "includ":1,
                    "code":8,
                    "array":1,
                    "paramet":2,
                    "refer":2,
                    "reassign":2,
                    "index":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Call a method with <code>this</code> set to <code>null</code></strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[865052894]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Call a method with <code>this</code> set to <code>null</code></strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "set":1,
                    "strong":2,
                    "code":4,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java, you can call a non-static method without providing a valid instance on which the method is called by providing <code>null</code> instead. As long as the method never dereferences <code>this</code>, this works out fine.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1911665555]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java, you can call a non-static method without providing a valid instance on which the method is called by providing <code>null</code> instead. As long as the method never dereferences <code>this</code>, this works out fine.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":2,
                    "method":3,
                    "derefer":1,
                    "work":1,
                    "code":4,
                    "valid":1,
                    "fine":1,
                    "call":2,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Treat constructors and the class initializer as if they were methods</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1749981065]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Treat constructors and the class initializer as if they were methods</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"initializer",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "constructor":1,
                    "strong":2,
                    "treat":1,
                    "initi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is more of a <em>conceptional feature</em> but constructors are not treated any differently within JBC then normal methods. It is only the JVM's verifier that assures that constructor's call another legal constructor. Other than that, it is merely a Java naming convention that constructor's must be called <code>&lt;init&gt;</code> and that the class initializer is called <code>&lt;clinit&gt;</code>. Besides this difference, the representation of methods and constructors are identical. As Holger pointed out in a comment, you can even define constructors with other return type other than <code>void</code> or a class initializer with arguments, even though it is not possible to call these methods.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1241012367]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is more of a <em>conceptional feature</em> but constructors are not treated any differently within JBC then normal methods. It is only the JVM's verifier that assures that constructor's call another legal constructor. Other than that, it is merely a Java naming convention that constructor's must be called <code>&lt;init&gt;</code> and that the class initializer is called <code>&lt;clinit&gt;</code>. Besides this difference, the representation of methods and constructors are identical. As Holger pointed out in a comment, you can even define constructors with other return type other than <code>void</code> or a class initializer with arguments, even though it is not possible to call these methods.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"init"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"initializer",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"clinit"
                    },
                    "attributes":[
                      
                    ],
                    "elements":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"initializer",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "method":3,
                    "name":1,
                    "point":1,
                    "represent":1,
                    "jbc":1,
                    "normal":1,
                    "differ":2,
                    "verifi":1,
                    "constructor":6,
                    "code":6,
                    "legal":1,
                    "ident":1,
                    "holger":1,
                    "comment":1,
                    "concept":1,
                    "treat":1,
                    "initi":2,
                    "clinit":1,
                    "featur":1,
                    "defin":1,
                    "type":1,
                    "call":4,
                    "init":1,
                    "argument":1,
                    "assur":1,
                    "convent":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Call any super method (until Java 1.1)</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1285854893]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Call any super method (until Java 1.1)</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "call":1,
                    "method":1,
                    "strong":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, this is only possible for Java versions 1 and 1.1. In JBC, methods are always dispatched on an explicit target type. This means that for</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1286413817]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, this is only possible for Java versions 1 and 1.1. In JBC, methods are always dispatched on an explicit target type. This means that for</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "jbc":1,
                    "dispatch":1,
                    "mean":1,
                    "version":1,
                    "target":1,
                    "type":1,
                    "explicit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Foo { void baz() { System.out.println(&quot;Foo&quot;); } } class Bar extends Foo { @Override void baz() { System.out.println(&quot;Bar&quot;); } } class Qux extends Bar { @Override void baz() { System.out.println(&quot;Qux&quot;); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[-329679139]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"baz",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"Foo\""
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Bar",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Override",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"baz",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"Bar\""
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Qux",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Bar",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Override",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"baz",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"StringLiteralNode",
                                              "valueRep":"\"Qux\""
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class Foo { void baz() { System.out.println(\"Foo\"); } } class Bar extends Foo { @Override void baz() { System.out.println(\"Bar\"); } } class Qux extends Bar { @Override void baz() { System.out.println(\"Qux\"); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "qux":2,
                    "system":3,
                    "overrid":2,
                    "println":3,
                    "bar":3,
                    "baz":3,
                    "foo":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Foo",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Bar",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Foo\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Bar\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"Qux\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>it was possible to implement <code>Qux#baz</code> to invoke <code>Foo#baz</code> while jumping over <code>Bar#baz</code>. While it is still possible to define an explicit invocation to call another super method implementation than that of the direct super class, this does not longer have any effect in Java versions after 1.1. In Java 1.1, this behavior was controlled by setting the <code>ACC_SUPER</code> flag which would enable the same behavior that only calls the direct super class's implentation.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1147863499]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>it was possible to implement <code>Qux#baz</code> to invoke <code>Foo#baz</code> while jumping over <code>Bar#baz</code>. While it is still possible to define an explicit invocation to call another super method implementation than that of the direct super class, this does not longer have any effect in Java versions after 1.1. In Java 1.1, this behavior was controlled by setting the <code>ACC_SUPER</code> flag which would enable the same behavior that only calls the direct super class's implentation.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_SUPER",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "qux":1,
                    "jump":1,
                    "invoc":1,
                    "effect":1,
                    "set":1,
                    "invok":1,
                    "direct":2,
                    "code":8,
                    "version":1,
                    "bar":1,
                    "implement":2,
                    "flag":1,
                    "implent":1,
                    "enabl":1,
                    "control":1,
                    "longer":1,
                    "acc":1,
                    "behavior":2,
                    "defin":1,
                    "baz":3,
                    "explicit":1,
                    "call":2,
                    "foo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Define a non-virtual call of a method that is declared in the same class</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[2036823585]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Define a non-virtual call of a method that is declared in the same class</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "strong":2,
                    "declar":1,
                    "virtual":1,
                    "defin":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java, it is not possible to define a class</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1691841664]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java, it is not possible to define a class</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "defin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Foo { void foo() { bar(); } void bar() { } } class Bar extends Foo { @Override void bar() { throw new RuntimeException(); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[2088004257]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"foo",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"bar",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"bar",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Bar",
                          "comments":[
                            
                          ]
                        },
                        "superTypes":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Foo",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"AnnotationNode",
                                  "identifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Override",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"bar",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ThrowStatementNode",
                                    "expression":{
                                      "type":"ConstructorCreatorNode",
                                      "creatorType":{
                                        "type":"ReferenceTypeNode",
                                        "ids":[
                                          {
                                            "type":"ParameterizedTypeNode",
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"RuntimeException",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionArgs":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class Foo { void foo() { bar(); } void bar() { } } class Bar extends Foo { @Override void bar() { throw new RuntimeException(); } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "foo":3,
                    "runtim":1,
                    "overrid":1,
                    "bar":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Foo",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RuntimeException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"bar",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The above code will always result in a <code>RuntimeException</code> when <code>foo</code> is invoked on an instance of <code>Bar</code>. It is not possible to define the <code>Foo::foo</code> method to invoke <em>its own</em> <code>bar</code> method which is defined in <code>Foo</code>. As <code>bar</code> is a non-private instance method, the call is always virtual. With byte code, one can however define the invocation to use the <code>INVOKESPECIAL</code> opcode which directly links the <code>bar</code> method call in <code>Foo::foo</code> to <code>Foo</code>'s version. This opcode is normally used to implement super method invocations but you can reuse the opcode to implement the described behavior.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1892543036]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The above code will always result in a <code>RuntimeException</code> when <code>foo</code> is invoked on an instance of <code>Bar</code>. It is not possible to define the <code>Foo::foo</code> method to invoke <em>its own</em> <code>bar</code> method which is defined in <code>Foo</code>. As <code>bar</code> is a non-private instance method, the call is always virtual. With byte code, one can however define the invocation to use the <code>INVOKESPECIAL</code> opcode which directly links the <code>bar</code> method call in <code>Foo::foo</code> to <code>Foo</code>'s version. This opcode is normally used to implement super method invocations but you can reuse the opcode to implement the described behavior.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"RuntimeException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "opcod":3,
                    "method":5,
                    "runtim":1,
                    "invokespeci":1,
                    "invoc":2,
                    "result":1,
                    "invok":2,
                    "virtual":1,
                    "direct":1,
                    "code":24,
                    "version":1,
                    "link":1,
                    "bar":4,
                    "implement":2,
                    "behavior":1,
                    "defin":3,
                    "call":2,
                    "instanc":2,
                    "foo":7,
                    "reus":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"RuntimeException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Define any attribute for a type or its members</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-463206807]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Define any attribute for a type or its members</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "attribut":1,
                    "member":1,
                    "defin":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Within the Java language, it is only possible to define annotations for fields, methods or classes. In JBC, you can basically embed any information into the Java classes. In order to make use of this information, you can however not longer rely on the Java class loading mechanism but you need to extract the meta information by yourself.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-81418999]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Within the Java language, it is only possible to define annotations for fields, methods or classes. In JBC, you can basically embed any information into the Java classes. In order to make use of this information, you can however not longer rely on the Java class loading mechanism but you need to extract the meta information by yourself.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"loading",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "languag":1,
                    "field":1,
                    "jbc":1,
                    "load":1,
                    "meta":1,
                    "annot":1,
                    "inform":3,
                    "order":1,
                    "mechan":1,
                    "make":1,
                    "class":2,
                    "longer":1,
                    "reli":1,
                    "defin":1,
                    "basic":1,
                    "emb":1,
                    "extract":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Overflow and implicitly assign <code>byte</code>, <code>short</code> and <code>boolean</code> values</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-119494608]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Overflow and implicitly assign <code>byte</code>, <code>short</code> and <code>boolean</code> values</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "overflow":1,
                    "assign":1,
                    "strong":2,
                    "code":6,
                    "implicit":1,
                    "valu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The latter primitive types are not normally known in JBC but only are defined for array types. Within byte code instructions, all of the named types take the space 32 bit which allows to represent an <code>int</code> or <code>char</code>. Both of the latter types can also be treated without conversion. Officially, only the <code>int</code>, <code>float</code>, <code>long</code> and <code>double</code> types exist for the JVM which all need explicit conversion by the rule of the JVM's verifier.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1653867407]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The latter primitive types are not normally known in JBC but only are defined for array types. Within byte code instructions, all of the named types take the space 32 bit which allows to represent an <code>int</code> or <code>char</code>. Both of the latter types can also be treated without conversion. Officially, only the <code>int</code>, <code>float</code>, <code>long</code> and <code>double</code> types exist for the JVM which all need explicit conversion by the rule of the JVM's verifier.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "name":1,
                    "bit":1,
                    "offici":1,
                    "exist":1,
                    "jbc":1,
                    "verifi":1,
                    "rule":1,
                    "code":13,
                    "array":1,
                    "space":1,
                    "convers":2,
                    "treat":1,
                    "defin":1,
                    "type":5,
                    "explicit":1,
                    "primit":1,
                    "repres":1,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Reassign <code>final</code> fields</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1400332226]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Reassign <code>final</code> fields</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "reassign":1,
                    "strong":2,
                    "code":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is also possible by using reflection and setting a field to become accessible. However, JBC does not require anything like this. <code>Final</code> fields are only relevant to the Java compiler. (However, not that it is not possible to break visibility bounds within JBC what is possible using reflection. You could thus even argue that &quot;normal Java source code&quot; allows to express something that you cannot do in &quot;normal Java byte code&quot;.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[118146113]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is also possible by using reflection and setting a field to become accessible. However, JBC does not require anything like this. <code>Final</code> fields are only relevant to the Java compiler. (However, not that it is not possible to break visibility bounds within JBC what is possible using reflection. You could thus even argue that &quot;normal Java source code&quot; allows to express something that you cannot do in &quot;normal Java byte code&quot;.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":2,
                    "jbc":2,
                    "normal":2,
                    "requir":1,
                    "set":1,
                    "relev":1,
                    "visibl":1,
                    "argu":1,
                    "code":4,
                    "bound":1,
                    "express":1,
                    "quot":4,
                    "compil":1,
                    "sourc":1,
                    "reflect":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Not release a monitor</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1689316181]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Not release a monitor</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "monitor":1,
                    "releas":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A <code>synchornized</code> block is actually made up of two statements, one to acquire and one to release a monitor. In JBC, you can aquire one without releasing it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[2146757598]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A <code>synchornized</code> block is actually made up of two statements, one to acquire and one to release a monitor. In JBC, you can aquire one without releasing it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "monitor":1,
                    "jbc":1,
                    "statement":1,
                    "code":2,
                    "block":1,
                    "releas":2,
                    "aquir":1,
                    "acquir":1,
                    "synchorn":1,
                    "made":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><em>Note</em>: In recent implementations of HotSpot, this instead leads to an <code>IllegalMonitorStateException</code> at the end of a method or to an implicit release if the method is terminated by an exception itself.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-902031870]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><em>Note</em>: In recent implementations of HotSpot, this instead leads to an <code>IllegalMonitorStateException</code> at the end of a method or to an implicit release if the method is terminated by an exception itself.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"HotSpot",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"IllegalMonitorStateException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "monitor":1,
                    "method":2,
                    "lead":1,
                    "state":1,
                    "recent":1,
                    "code":2,
                    "releas":1,
                    "note":1,
                    "implicit":1,
                    "illeg":1,
                    "implement":1,
                    "spot":1,
                    "end":1,
                    "hot":1,
                    "termin":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"HotSpot",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"IllegalMonitorStateException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Add more than one <code>return</code> statement to a type initializer</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1725155119]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Add more than one <code>return</code> statement to a type initializer</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "statement":1,
                    "strong":2,
                    "code":2,
                    "initi":1,
                    "type":1,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java, even a trivial type initializer such as</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1560724451]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java, even a trivial type initializer such as</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "type":1,
                    "initi":1,
                    "trivial":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"class Foo { static { return; } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[1183880491]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Foo",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"BlockDeclarationNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ReturnStatementNode",
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"class Foo { static { return; } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "foo":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>is illegal. In byte code, the type initializer is treated just as any other method, i.e. return statements can be defined anywhere.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-2077821671]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>is illegal. In byte code, the type initializer is treated just as any other method, i.e. return statements can be defined anywhere.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "statement":1,
                    "code":1,
                    "illeg":1,
                    "treat":1,
                    "initi":1,
                    "defin":1,
                    "type":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Create irreducible loops</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[128930701]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Create irreducible loops</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "loop":1,
                    "strong":2,
                    "irreduc":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Java compiler converts loops to goto statements in Java byte code. Such statements can be used to create irreducible loops what the Java compiler never does.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1836670746]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Java compiler converts loops to goto statements in Java byte code. Such statements can be used to create irreducible loops what the Java compiler never does.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "loop":2,
                    "statement":2,
                    "code":1,
                    "compil":2,
                    "irreduc":1,
                    "creat":1,
                    "convert":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Define a recursive catch block</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-405730102]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Define a recursive catch block</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "defin":1,
                    "block":1,
                    "recurs":1,
                    "strong":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java byte code, you can define a block:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-520935851]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java byte code, you can define a block:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "defin":1,
                    "block":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"try { throw new Exception(); } catch (Exception e) { &lt;goto on exception&gt; throw Exception(); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[23218472]-[182810060]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"try "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ThrowStatementNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Exception",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"catch (Exception e) { "
                  },
                  {
                    "type":"XmlNode",
                    "name":{
                      "type":"XmlNameNode",
                      "value":"goto"
                    },
                    "attributes":[
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"on"
                        }
                      },
                      {
                        "type":"XmlAttributeNode",
                        "name":{
                          "type":"XmlNameNode",
                          "value":"exception"
                        }
                      }
                    ],
                    "elements":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"ThrowStatementNode",
                    "expression":{
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Exception",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} "
                  }
                ]
              },
              "rawText":"try { throw new Exception(); } catch (Exception e) { <goto on exception> throw Exception(); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Exception",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Exception",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A similar statement is created implicitly when using a <code>synchronized</code> block in Java where any exception while releasing a monitor returns to the instruction for releasing this monitor. Normally, no exception should occur on such an instruction but if it would (e.g the deprecated <code>ThreadDeath</code>), the monitor would still be released.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1697527070]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A similar statement is created implicitly when using a <code>synchronized</code> block in Java where any exception while releasing a monitor returns to the instruction for releasing this monitor. Normally, no exception should occur on such an instruction but if it would (e.g the deprecated <code>ThreadDeath</code>), the monitor would still be released.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ThreadDeath",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "monitor":3,
                    "death":1,
                    "similar":1,
                    "return":1,
                    "occur":1,
                    "statement":1,
                    "code":4,
                    "block":1,
                    "thread":1,
                    "releas":3,
                    "deprec":1,
                    "implicit":1,
                    "creat":1,
                    "instruct":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ThreadDeath",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Call any default method</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1932239380]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Call any default method</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "call":1,
                    "method":1,
                    "strong":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The Java compiler requires several conditions to be fullfilled in order to allow a default method's invocation: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-2131996620]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The Java compiler requires several conditions to be fullfilled in order to allow a default method's invocation: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "fullfil":1,
                    "invoc":1,
                    "requir":1,
                    "condit":1,
                    "order":1,
                    "compil":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>The method must be the most specific one (must not be overridden by a sub interface that is implemented by <strong>any</strong> type, including super types).</li> \n <li>The default method's interface type must be implemented directly by the class that is calling the default method. However, if interface <code>B</code> extends interface <code>A</code> but does not override a method in <code>A</code>, the method can still be invoked.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-660524104]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>The method must be the most specific one (must not be overridden by a sub interface that is implemented by <strong>any</strong> type, including super types).</li> \n <li>The default method's interface type must be implemented directly by the class that is calling the default method. However, if interface <code>B</code> extends interface <code>A</code> but does not override a method in <code>A</code>, the method can still be invoked.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":5,
                    "overridden":1,
                    "invok":1,
                    "overrid":1,
                    "strong":2,
                    "direct":1,
                    "includ":1,
                    "code":6,
                    "specif":1,
                    "implement":2,
                    "type":3,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For Java byte code, only the second condition counts. The first one is however irrelevant.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1497322502]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For Java byte code, only the second condition counts. The first one is however irrelevant.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "count":1,
                    "irrelev":1,
                    "condit":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Mess things up and hard-crash your JVM</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-852987188]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Mess things up and hard-crash your JVM</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "hard":1,
                    "crash":1,
                    "thing":1,
                    "strong":2,
                    "mess":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As an example, in Java byte code, you can define to invoke any method on any type. Usually, the verifier will complain if a type does not known of such a method. However, if you invoke an unknown method on an array, I found a bug in some JVM version where the verifier will miss this and your JVM will finish off once the instruction is invoked. This is hardly a feature though, but it is technically something that is not possible with <em>javac</em> compiled Java. Java has some sort of double validation. The first validation is applied by the Java compiler, the second one by the JVM when a class is loaded. By skipping the compiler, you might find a weak spot in the verifier's validation. This is rather a general statement then a feature, though.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[1489717370]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As an example, in Java byte code, you can define to invoke any method on any type. Usually, the verifier will complain if a type does not known of such a method. However, if you invoke an unknown method on an array, I found a bug in some JVM version where the verifier will miss this and your JVM will finish off once the instruction is invoked. This is hardly a feature though, but it is technically something that is not possible with <em>javac</em> compiled Java. Java has some sort of double validation. The first validation is applied by the Java compiler, the second one by the JVM when a class is loaded. By skipping the compiler, you might find a weak spot in the verifier's validation. This is rather a general statement then a feature, though.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"is",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":3,
                    "find":1,
                    "method":3,
                    "complain":1,
                    "weak":1,
                    "invok":3,
                    "verifi":3,
                    "load":1,
                    "unknown":1,
                    "skip":1,
                    "statement":1,
                    "finish":1,
                    "miss":1,
                    "code":1,
                    "array":1,
                    "version":1,
                    "found":1,
                    "general":1,
                    "bug":1,
                    "valid":3,
                    "spot":1,
                    "technic":1,
                    "compil":3,
                    "featur":2,
                    "sort":1,
                    "appli":1,
                    "defin":1,
                    "type":2,
                    "javac":1,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Use unused / legacy byte code instructions</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1282985877]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Use unused / legacy byte code instructions</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "unus":1,
                    "strong":2,
                    "code":1,
                    "legaci":1,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Since others named it, I will include it as well. Java was formerly making use of subroutines by the <code>JSR</code> and <code>RET</code> statements. JBC even knew its own type of a return address for this purpose. However, the use of subroutines did overcomplicate static code analysis which is why these instructions are not longer used. Instead, the Java compiler will duplicate code it compiles. However, this basically creates identical logic which is why I do not really consider it to achieve something different. Similarly, you could for example add the <code>NOOP</code> byte code instruction which is not used by the Java compiler either but this would not really allow you to achieve something new either. As pointed out in the context, these mentioned &quot;feature instructions&quot; are now removed from the set of legal opcodes which does render them even less of a feature.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[23218472]-[-1221318100]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Since others named it, I will include it as well. Java was formerly making use of subroutines by the <code>JSR</code> and <code>RET</code> statements. JBC even knew its own type of a return address for this purpose. However, the use of subroutines did overcomplicate static code analysis which is why these instructions are not longer used. Instead, the Java compiler will duplicate code it compiles. However, this basically creates identical logic which is why I do not really consider it to achieve something different. Similarly, you could for example add the <code>NOOP</code> byte code instruction which is not used by the Java compiler either but this would not really allow you to achieve something new either. As pointed out in the context, these mentioned &quot;feature instructions&quot; are now removed from the set of legal opcodes which does render them even less of a feature.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "opcod":1,
                    "name":1,
                    "remov":1,
                    "point":1,
                    "ret":1,
                    "jbc":1,
                    "similar":1,
                    "context":1,
                    "jsr":1,
                    "set":1,
                    "statement":1,
                    "knew":1,
                    "logic":1,
                    "includ":1,
                    "code":9,
                    "noop":1,
                    "legal":1,
                    "ident":1,
                    "mention":1,
                    "achiev":2,
                    "subroutin":2,
                    "address":1,
                    "make":1,
                    "overcompl":1,
                    "quot":2,
                    "longer":1,
                    "compil":3,
                    "featur":2,
                    "duplic":1,
                    "type":1,
                    "render":1,
                    "analysi":1,
                    "basic":1,
                    "creat":1,
                    "add":1,
                    "purpos":1,
                    "instruct":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":11859205,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":34118188,
          "postId":11859205,
          "creationDate":"2014-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1237575,
            "displayName":"Rafael Winterhalter",
            "reputation":8227
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can even set members of an instance before calling its superclass constructor. Reading fields or calling methods is however not possible before that."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11859205-cu34118188]-[-62277301]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can even set members of an instance before calling its superclass constructor. Reading fields or calling methods is however not possible before that."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "method":1,
                        "field":1,
                        "set":1,
                        "constructor":1,
                        "superclass":1,
                        "member":1,
                        "call":2,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-08-08",
      "lastActivityDate":"2012-08-08",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":160539,
        "displayName":"msell",
        "reputation":1170
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In Java language the first statement in a constructor must be a call to the super class constructor. Bytecode does not have this limitation, instead the rule is that the super class constructor or another constructor in the same class must be called for the object before accessing the members. This should allow more freedom such as:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11859205]-[1406739900]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In Java language the first statement in a constructor must be a call to the super class constructor. Bytecode does not have this limitation, instead the rule is that the super class constructor or another constructor in the same class must be called for the object before accessing the members. This should allow more freedom such as:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"constructor",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"constructor",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"must",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "bytecod":1,
                    "constructor":4,
                    "rule":1,
                    "statement":1,
                    "object":1,
                    "freedom":1,
                    "member":1,
                    "call":2,
                    "limit":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li>Create an instance of another object, store it in a local variable (or stack) and pass it as a parameter to super class constructor while still keeping the reference in that variable for other use.</li> \n <li>Call different other constructors based on a condition. This should be possible: <a href=\"http://stackoverflow.com/questions/9236087/how-to-do-call-a-different-constructor-conditionally-in-java\">How to do call a different constructor conditionally in Java?</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11859205]-[1847680510]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li>Create an instance of another object, store it in a local variable (or stack) and pass it as a parameter to super class constructor while still keeping the reference in that variable for other use.</li> \n <li>Call different other constructors based on a condition. This should be possible: <a href=\"http://stackoverflow.com/questions/9236087/how-to-do-call-a-different-constructor-conditionally-in-java\">How to do call a different constructor conditionally in Java?</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"constructor",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "keep":1,
                    "condit":3,
                    "local":1,
                    "constructor":4,
                    "store":1,
                    "object":1,
                    "base":1,
                    "stackoverflow":1,
                    "paramet":1,
                    "refer":1,
                    "stack":1,
                    "pass":1,
                    "variabl":2,
                    "href":1,
                    "http":1,
                    "creat":1,
                    "call":3,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have not tested these, so please correct me if I'm wrong.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11859205]-[-651199742]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have not tested these, so please correct me if I'm wrong.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wrong":1,
                    "correct":1,
                    "test":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":14879913,
      "questionId":6827363,
      "comments":[
        
      ],
      "creationDate":"2013-02-14",
      "lastActivityDate":"2013-02-14",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1000974,
        "displayName":"danielbodart",
        "reputation":603
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><code>GOTO</code> can be used with labels to create your own control structures (other than <code>for</code> <code>while</code> etc)</li> \n <li>You can override the <code>this</code> local variable inside a method</li> \n <li>Combining both of these you can create create tail call optimised bytecode (I do this in <a href=\"http://code.google.com/p/jcompilo/\"rel=\"nofollow\">JCompilo</a>)</li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14879913]-[-465404556]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><code>GOTO</code> can be used with labels to create your own control structures (other than <code>for</code> <code>while</code> etc)</li> \n <li>You can override the <code>this</code> local variable inside a method</li> \n <li>Combining both of these you can create create tail call optimised bytecode (I do this in <a href=\"http://code.google.com/p/jcompilo/\"rel=\"nofollow\">JCompilo</a>)</li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "googl":1,
                    "bytecod":1,
                    "optimis":1,
                    "label":1,
                    "local":1,
                    "rel":1,
                    "overrid":1,
                    "tail":1,
                    "structur":1,
                    "code":9,
                    "jcompilo":2,
                    "nofollow":1,
                    "insid":1,
                    "combin":1,
                    "control":1,
                    "variabl":1,
                    "href":1,
                    "http":1,
                    "creat":3,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As a related point you can get parameter name for methods if compiled with debug (<a href=\"http://paranamer.codehaus.org/\"rel=\"nofollow\">Paranamer does this by reading the bytecode</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[14879913]-[107849658]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As a related point you can get parameter name for methods if compiled with debug (<a href=\"http://paranamer.codehaus.org/\"rel=\"nofollow\">Paranamer does this by reading the bytecode</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "method":1,
                    "point":1,
                    "relat":1,
                    "bytecod":1,
                    "rel":1,
                    "debug":1,
                    "paramet":1,
                    "nofollow":1,
                    "paranam":2,
                    "codehaus":1,
                    "compil":1,
                    "org":1,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6827552,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8115608,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I came across something once... I believe its `/` and `;` you can't have in a byte code name. I have tried space, tab and newline and they work. Class names cannot have characters the filesystem won't allow, but it might be possible to construct a JAR with extra-special characters. That would make it especially hard to decompile."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8115608]-[-1855222524]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I came across something once... I believe its `/` and `;` you can't have in a byte code name. I have tried space, tab and newline and they work. Class names cannot have characters the filesystem won't allow, but it might be possible to construct a JAR with extra-special characters. That would make it especially hard to decompile."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "name":1,
                        "charact":2,
                        "hard":1,
                        "tab":1,
                        "filesystem":1,
                        "work":1,
                        "code":1,
                        "decompil":1,
                        "space":1,
                        "make":1,
                        "extra":1,
                        "special":1,
                        "newlin":1,
                        "jar":1,
                        "construct":1,
                        "won":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8112635,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":41619,
            "displayName":"Adam Paynter",
            "reputation":24125
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I could add another answer, but we might as well make yours the canonical answer. You may want to mention that a method's signature in bytecode *includes the return type*. That is, you can have two methods with exactly the same parameter types, but different return types. See this discussion: http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8112635]-[1645408732]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I could add another answer, but we might as well make yours the canonical answer. You may want to mention that a method's signature in bytecode *includes the return type*. That is, you can have two methods with exactly the same parameter types, but different return types. See this discussion: http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "method":2,
                        "signatur":1,
                        "canon":1,
                        "bytecod":1,
                        "includ":1,
                        "stackoverflow":1,
                        "discuss":1,
                        "paramet":1,
                        "mention":1,
                        "valid":1,
                        "make":1,
                        "answer":2,
                        "type":3,
                        "http":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8112709,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Adam: Thanks, I've added it and made this CW."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8112709]-[1691540070]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Adam: Thanks, I've added it and made this CW."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Adam",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ad":1,
                        "made":1,
                        "adam":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8112726,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You can have class, method and field names with just about any character. I worked on one project where the &quot;fields&quot; had spaces and hyphens in their names. :P"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8112726]-[-1096240368]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You can have class, method and field names with just about any character. I worked on one project where the &quot;fields&quot; had spaces and hyphens in their names. :P"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "name":2,
                        "charact":1,
                        "field":2,
                        "project":1,
                        "hyphen":1,
                        "work":1,
                        "space":1,
                        "quot":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8112737,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh boy, my definition of &quot;major features&quot; is becoming more and more narrow ;-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8112737]-[-1383655972]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh boy, my definition of &quot;major features&quot; is becoming more and more narrow ;-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "definit":1,
                        "boy":1,
                        "quot":2,
                        "featur":1,
                        "narrow":1,
                        "major":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8132830,
          "postId":6827552,
          "creationDate":"2011-07-27",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":41619,
            "displayName":"Adam Paynter",
            "reputation":24125
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Peter: Speaking of file system characters, I ran into an obfuscator that had renamed a class to `a` and another to `A` inside the JAR file. It took me about half an hour of unzipping **on a Windows machine** before I realized where the missing classes were. :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8132830]-[-1131942334]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Peter: Speaking of file system characters, I ran into an obfuscator that had renamed a class to `a` and another to `A` inside the JAR file. It took me about half an hour of unzipping **on a Windows machine** before I realized where the missing classes were. :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Peter",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"to",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "window":1,
                        "charact":1,
                        "system":1,
                        "ran":1,
                        "peter":1,
                        "unzip":1,
                        "renam":1,
                        "hour":1,
                        "obfusc":1,
                        "half":1,
                        "miss":1,
                        "insid":1,
                        "machin":1,
                        "class":1,
                        "file":2,
                        "jar":1,
                        "speak":1,
                        "realiz":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":8114128,
          "postId":6827552,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Peter: I've heard of that as well and I was trying to find the relevant places in the JVM spec and JLS, in order to be able to quote them in my answer, but can't find any. Do you know of some place where this is specified/documented/blogged/...?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu8114128]-[1564944111]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Peter: I've heard of that as well and I was trying to find the relevant places in the JVM spec and JLS, in order to be able to quote them in my answer, but can't find any. Do you know of some place where this is specified/documented/blogged/...?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Peter",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "jls":1,
                        "find":2,
                        "heard":1,
                        "document":1,
                        "peter":1,
                        "relev":1,
                        "blog":1,
                        "order":1,
                        "spec":1,
                        "answer":1,
                        "quot":1,
                        "place":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23458148,
          "postId":6827552,
          "creationDate":"2013-05-04",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":768597,
            "displayName":"aboveyou00",
            "reputation":1079
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JoachimSauer: paraphrased JVM spec, page 75: class names, methods, fields, and local variables can contain *any* character except `'.'`, `';'`, `'['`, or `'/'`. Method names are the same, but they also can't contain `'&lt;'` or `'&gt;'`. (With the notable exceptions of `\n<init>\n ` and `\n <clinit>\n  ` for instance and static constructors.) I should point out that if you are following the specification strictly, the class names are actually much more constrained, but the constraints are not enforced.\n </clinit>\n</init>"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu23458148]-[-1906794772]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JoachimSauer: paraphrased JVM spec, page 75: class names, methods, fields, and local variables can contain *any* character except `'.'`, `';'`, `'['`, or `'/'`. Method names are the same, but they also can't contain `'&lt;'` or `'&gt;'`. (With the notable exceptions of `\n<init>\n ` and `\n <clinit>\n  ` for instance and static constructors.) I should point out that if you are following the specification strictly, the class names are actually much more constrained, but the constraints are not enforced.\n </clinit>\n</init>"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JoachimSauer",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"names",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"names",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "enforc":1,
                        "jvm":1,
                        "method":2,
                        "sauer":1,
                        "name":3,
                        "strict":1,
                        "charact":1,
                        "point":1,
                        "field":1,
                        "page":1,
                        "local":1,
                        "constructor":1,
                        "joachim":1,
                        "specif":1,
                        "spec":1,
                        "constraint":1,
                        "clinit":2,
                        "constrain":1,
                        "variabl":1,
                        "notabl":1,
                        "except":1,
                        "init":2,
                        "paraphras":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23458206,
          "postId":6827552,
          "creationDate":"2013-05-04",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":768597,
            "displayName":"aboveyou00",
            "reputation":1079
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JoachimSauer: also, an undocumented addition of my own: the java language includes the `&quot;throws ex1, ex2, ..., exn&quot;` as part of the method signatures; you can't add exception throwing clauses to overridden methods. BUT, the JVM couldn't care less. So only `final` methods are truly guaranteed by the JVM to be exception-free - aside from `RuntimeException`s and `Error`s, of course. So much for checked exception handling :D"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu23458206]-[-155336152]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JoachimSauer: also, an undocumented addition of my own: the java language includes the `&quot;throws ex1, ex2, ..., exn&quot;` as part of the method signatures; you can't add exception throwing clauses to overridden methods. BUT, the JVM couldn't care less. So only `final` methods are truly guaranteed by the JVM to be exception-free - aside from `RuntimeException`s and `Error`s, of course. So much for checked exception handling :D"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JoachimSauer",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"RuntimeException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "method":3,
                        "sauer":1,
                        "languag":1,
                        "runtim":1,
                        "claus":1,
                        "signatur":1,
                        "addit":1,
                        "overridden":1,
                        "care":1,
                        "includ":1,
                        "guarante":1,
                        "undocu":1,
                        "check":1,
                        "error":1,
                        "joachim":1,
                        "exn":1,
                        "quot":2,
                        "part":1,
                        "throw":1,
                        "add":1,
                        "handl":1,
                        "free":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"RuntimeException",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":35618495,
          "postId":6827552,
          "creationDate":"2014-04-24",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@aboveyou00: Even final methods provide no guaranty, as on bytecode level they may throw any exception regardless of whether they declared its type or not."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827552-cu35618495]-[467510481]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@aboveyou00: Even final methods provide no guaranty, as on bytecode level they may throw any exception regardless of whether they declared its type or not."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "provid":1,
                        "method":1,
                        "guaranti":1,
                        "bytecod":1,
                        "declar":1,
                        "aboveyou":1,
                        "type":1,
                        "level":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-07-26",
      "communityOwnedDate":"2011-07-26",
      "lastActivityDate":"2011-07-26",
      "lastEditDate":"2011-07-26",
      "score":13,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":40342,
        "displayName":"Joachim Sauer",
        "reputation":145645
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As far as I know there are no major features in the bytecodes supported by Java 6 that are not also accessible from Java source code. The main reason for this is obviously that the Java bytecode was designed with the Java language in mind.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6827552]-[-1374534065]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As far as I know there are no major features in the bytecodes supported by Java 6 that are not also accessible from Java source code. The main reason for this is obviously that the Java bytecode was designed with the Java language in mind.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "support":1,
                    "languag":1,
                    "design":1,
                    "bytecod":2,
                    "main":1,
                    "reason":1,
                    "code":1,
                    "mind":1,
                    "featur":1,
                    "sourc":1,
                    "major":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are some features that are not produced by modern Java compilers, however:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6827552]-[-1429316990]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are some features that are not produced by modern Java compilers, however:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "produc":1,
                    "compil":1,
                    "featur":1,
                    "modern":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><p>The <a href=\"http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#13484\"><code>ACC_SUPER</code> flag</a>:</p> <p>This is a flag that can be set on a class and specifies how a specific corner case of the <code>invokespecial</code> bytecode is handled for this class. It is set by all modern Java compilers (where &quot;modern&quot; is &gt;= Java 1.1, if I remember correctly) and only ancient Java compilers produced class files where this was un-set. This flag exists only for backwards-compatibility reasons.</p></li> \n <li><p>The <code>jsr</code>/<code>ret</code> bytecodes.</p> <p>These bytecodes were used to implement sub-routines (mostly for implementing <code>finally</code> blocks). They are <a href=\"http://cliffhacks.blogspot.com/2008/02/java-6-tryfinally-compilation-without.html\">no longer produced since Java 6</a>. The reason for their deprecation is that they complicate static verification a lot for no great gain (i.e. code that uses can almost always be re-implemented with normal jumps with very little overhead).</p></li> \n <li><p>Having two methods in a class that only differ in return type.</p> <p>The Java language specification does not allow two methods in the same class when they differ <em>only</em> in their return type (i.e. same name, same argument list, ...). The JVM specification however, has no such restriction, so a class file <em>can</em> contain two such methods, there's just no way to produce such a class file using the normal Java compiler. There's a nice example/explanation in <a href=\"http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204\">this answer</a>.</p></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6827552]-[-976120470]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><p>The <a href=\"http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#13484\"><code>ACC_SUPER</code> flag</a>:</p> <p>This is a flag that can be set on a class and specifies how a specific corner case of the <code>invokespecial</code> bytecode is handled for this class. It is set by all modern Java compilers (where &quot;modern&quot; is &gt;= Java 1.1, if I remember correctly) and only ancient Java compilers produced class files where this was un-set. This flag exists only for backwards-compatibility reasons.</p></li> \n <li><p>The <code>jsr</code>/<code>ret</code> bytecodes.</p> <p>These bytecodes were used to implement sub-routines (mostly for implementing <code>finally</code> blocks). They are <a href=\"http://cliffhacks.blogspot.com/2008/02/java-6-tryfinally-compilation-without.html\">no longer produced since Java 6</a>. The reason for their deprecation is that they complicate static verification a lot for no great gain (i.e. code that uses can almost always be re-implemented with normal jumps with very little overhead).</p></li> \n <li><p>Having two methods in a class that only differ in return type.</p> <p>The Java language specification does not allow two methods in the same class when they differ <em>only</em> in their return type (i.e. same name, same argument list, ...). The JVM specification however, has no such restriction, so a class file <em>can</em> contain two such methods, there's just no way to produce such a class file using the normal Java compiler. There's a nice example/explanation in <a href=\"http://stackoverflow.com/questions/3110014/is-this-valid-java/3110204#3110204\">this answer</a>.</p></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_SUPER",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"and",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"files",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"that",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"when",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"file",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"file",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "question":1,
                    "method":3,
                    "languag":1,
                    "invokespeci":1,
                    "ret":1,
                    "exist":1,
                    "jump":1,
                    "produc":3,
                    "bytecod":3,
                    "tryfin":1,
                    "normal":2,
                    "differ":2,
                    "complic":1,
                    "book":1,
                    "correct":1,
                    "jsr":1,
                    "set":3,
                    "sun":1,
                    "nice":1,
                    "backward":1,
                    "blogspot":1,
                    "jvms":1,
                    "reason":2,
                    "doc":2,
                    "code":11,
                    "modern":2,
                    "overhead":1,
                    "edit":1,
                    "rememb":1,
                    "stackoverflow":1,
                    "block":1,
                    "explan":1,
                    "ancient":1,
                    "routin":1,
                    "deprec":1,
                    "gain":1,
                    "specif":3,
                    "corner":1,
                    "cliffhack":1,
                    "valid":1,
                    "implement":3,
                    "flag":3,
                    "lot":1,
                    "answer":1,
                    "file":4,
                    "quot":2,
                    "longer":1,
                    "compil":4,
                    "specifi":1,
                    "acc":1,
                    "type":2,
                    "html":3,
                    "href":3,
                    "http":3,
                    "argument":1,
                    "handl":1,
                    "great":1,
                    "restrict":1,
                    "verif":1,
                    "list":1,
                    "compat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6827762,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8112743,
          "postId":6827762,
          "creationDate":"2011-07-26",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":85821,
            "displayName":"Bart van Heukelom",
            "reputation":12937
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But then you're just skipping the compiler, not producing something that couldn't be produced using the compiler (if it were available)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827762-cu8112743]-[-620441901]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But then you're just skipping the compiler, not producing something that couldn't be produced using the compiler (if it were available)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "skip":1,
                        "produc":2,
                        "compil":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-07-26",
      "lastActivityDate":"2011-07-26",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Something you can do with byte code, rather than plain Java code, is generate code which can loaded and run without a compiler. Many systems have JRE rather than JDK and if you want to generate code dynamically it may be better, if not easier, to generate byte code instead of Java code has to be compiled before it can be used.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6827762]-[1379339951]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Something you can do with byte code, rather than plain Java code, is generate code which can loaded and run without a compiler. Many systems have JRE rather than JDK and if you want to generate code dynamically it may be better, if not easier, to generate byte code instead of Java code has to be compiled before it can be used.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jre":1,
                    "system":1,
                    "run":1,
                    "dynam":1,
                    "load":1,
                    "code":6,
                    "easier":1,
                    "plain":1,
                    "generat":3,
                    "compil":2,
                    "jdk":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":6827864,
      "questionId":6827363,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":8112903,
          "postId":6827864,
          "creationDate":"2011-07-26",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":85821,
            "displayName":"Bart van Heukelom",
            "reputation":12937
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Interesting read, but it doesn't look like one would *want* to (ab)use any of those things."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[6827864-cu8112903]-[-683959426]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Interesting read, but it doesn't look like one would *want* to (ab)use any of those things."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "interest":1,
                        "thing":1,
                        "read":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-07-26",
      "lastActivityDate":"2011-07-26",
      "score":4,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":30316,
        "displayName":"eljenso",
        "reputation":8244
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Maybe section 7A in <a href=\"http://www.cs.berkeley.edu/~daw/joe-e/spec-20090918.pdf\"rel=\"nofollow\">this document</a> is of interest, although it's about bytecode <strong>pitfalls</strong> rather than bytecode <strong>features</strong>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[6827864]-[1248377893]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Maybe section 7A in <a href=\"http://www.cs.berkeley.edu/~daw/joe-e/spec-20090918.pdf\"rel=\"nofollow\">this document</a> is of interest, although it's about bytecode <strong>pitfalls</strong> rather than bytecode <strong>features</strong>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "document":1,
                    "bytecod":2,
                    "pdf":1,
                    "berkeley":1,
                    "rel":1,
                    "strong":4,
                    "section":1,
                    "daw":1,
                    "nofollow":1,
                    "interest":1,
                    "pitfal":1,
                    "spec":1,
                    "featur":1,
                    "joe":1,
                    "href":1,
                    "http":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}