{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2487967,
    "title":"Advantages of Thread pooling in embedded systems",
    "comments":[
      
    ],
    "tags":[
      "java",
      "design-patterns",
      "threadpool",
      "embedded"
    ],
    "creationDate":"2010-03-21",
    "lastActivityDate":"2011-11-05",
    "lastEditDate":"2011-11-05",
    "score":1,
    "viewCount":1611,
    "owner":{
      "type":"StackOverflowUser",
      "id":298519,
      "displayName":"Microkernel",
      "reputation":546
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am looking at the advantages of threadpooling design pattern in Embedded systems. I have listed few advantages, please go through them, comment and please suggest any other possible advantages that I am missing.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2487967]-[333564773]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am looking at the advantages of threadpooling design pattern in Embedded systems. I have listed few advantages, please go through them, comment and please suggest any other possible advantages that I am missing.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "design":1,
                  "threadpool":1,
                  "system":1,
                  "pattern":1,
                  "suggest":1,
                  "embed":1,
                  "miss":1,
                  "advantag":3,
                  "comment":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>Scalability in systems like ucos-2 where there is limit on number of threads. </li> \n <li>Increasing capability of any task when necessary like Garbage collection (say in normal systems if garbage collection is running under one task, its not possible to speed it up, but in threadpooling we can easily speed it up).</li> \n <li>Can set limit on the max system load. </li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2487967]-[1636977572]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>Scalability in systems like ucos-2 where there is limit on number of threads. </li> \n <li>Increasing capability of any task when necessary like Garbage collection (say in normal systems if garbage collection is running under one task, its not possible to speed it up, but in threadpooling we can easily speed it up).</li> \n <li>Can set limit on the max system load. </li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "task":2,
                  "threadpool":1,
                  "system":3,
                  "capabl":1,
                  "normal":1,
                  "run":1,
                  "set":1,
                  "load":1,
                  "easili":1,
                  "thread":1,
                  "max":1,
                  "scalabl":1,
                  "increas":1,
                  "uco":1,
                  "collect":2,
                  "limit":2,
                  "garbag":2,
                  "speed":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Please suggest if I am missing anything. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2487967]-[-646871247]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Please suggest if I am missing anything. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "suggest":1,
                  "miss":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2488685,
      "questionId":2487967,
      "comments":[
        
      ],
      "creationDate":"2010-03-21",
      "lastActivityDate":"2010-03-21",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":168986,
        "displayName":"Clifford",
        "reputation":34342
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Thread creation/destruction may carry a large overhead and be non-deterministic. One time creation of a thread pool puts all this overhead up-front, and can improve performance by having threads ready to run at any time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2488685]-[369758780]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Thread creation/destruction may carry a large overhead and be non-deterministic. One time creation of a thread pool puts all this overhead up-front, and can improve performance by having threads ready to run at any time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "readi":1,
                    "carri":1,
                    "front":1,
                    "run":1,
                    "improv":1,
                    "creation":2,
                    "overhead":2,
                    "thread":3,
                    "larg":1,
                    "destruct":1,
                    "pool":1,
                    "perform":1,
                    "put":1,
                    "time":2,
                    "determinist":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2489687,
      "questionId":2487967,
      "comments":[
        
      ],
      "creationDate":"2010-03-22",
      "lastActivityDate":"2010-03-22",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":235333,
        "displayName":"James Branigan",
        "reputation":964
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Pooling also helps avoid nasty lower level leaks that can happen when you create and destroy threads. A certain unamed embedded OS likes to lose 4K everytime a thread dies(even after the process is destroyed). On this particular OS, it is impossible to have a long running system that makes threads frequently, that is unless you use thread pooling.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2489687]-[-494158076]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Pooling also helps avoid nasty lower level leaks that can happen when you create and destroy threads. A certain unamed embedded OS likes to lose 4K everytime a thread dies(even after the process is destroyed). On this particular OS, it is impossible to have a long running system that makes threads frequently, that is unless you use thread pooling.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "system":1,
                    "nasti":1,
                    "happen":1,
                    "process":1,
                    "imposs":1,
                    "run":1,
                    "leak":1,
                    "everytim":1,
                    "lower":1,
                    "embed":1,
                    "avoid":1,
                    "unam":1,
                    "help":1,
                    "die":1,
                    "thread":4,
                    "destroy":2,
                    "pool":2,
                    "make":1,
                    "creat":1,
                    "lose":1,
                    "like":1,
                    "frequent":1,
                    "level":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}