{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":21589159,
    "title":"Java sun.misc.Unsafe confusion",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":32615524,
        "postId":21589159,
        "creationDate":"2014-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2864740,
          "displayName":"user2864740",
          "reputation":26567
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"*Read* the article: &quot;This creates an instance of player class without any initialization .. Even if you create this constructor private; You can initialize using Unsafe.allocateInstance()&quot;. It's naught to do with &quot;performance&quot; or where the &quot;allocation is&quot; at all."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32615524]-[-1315075207]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"*Read* the article: &quot;This creates an instance of player class without any initialization .. Even if you create this constructor private; You can initialize using Unsafe.allocateInstance()&quot;. It's naught to do with &quot;performance&quot; or where the &quot;allocation is&quot; at all."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"without",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "alloc":2,
                      "constructor":1,
                      "articl":1,
                      "player":1,
                      "perform":1,
                      "naught":1,
                      "quot":6,
                      "initi":2,
                      "unsaf":1,
                      "creat":2,
                      "instanc":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32615615,
        "postId":21589159,
        "creationDate":"2014-02-05",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2573153,
          "displayName":"user2573153",
          "reputation":195
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"having read the article it didn't seem that the point was to by-pass the GC. For further reading http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32615615]-[280734621]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"having read the article it didn't seem that the point was to by-pass the GC. For further reading http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":2,
                      "dot":2,
                      "github":1,
                      "point":1,
                      "sun":1,
                      "articl":1,
                      "blog":1,
                      "misc":1,
                      "pass":1,
                      "magic":1,
                      "unsaf":1,
                      "part":1,
                      "http":1,
                      "mishadoff":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32615622,
        "postId":21589159,
        "creationDate":"2014-02-05",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2864740,
          "displayName":"user2864740",
          "reputation":26567
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Exactly, because that *isn't* the point of `allocateInstance`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32615622]-[1907573138]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Exactly, because that *isn't* the point of `allocateInstance`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "instanc":1,
                      "alloc":1,
                      "point":1,
                      "isn":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32706014,
        "postId":21589159,
        "creationDate":"2014-02-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2708960,
          "displayName":"Ashley",
          "reputation":141
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@user2864740 I think its clear now (after digging a bit more on this) that allocateInstance() is for native memory and not heap and also wont initialize the class constructor."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32706014]-[-1249264796]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@user2864740 I think its clear now (after digging a bit more on this) that allocateInstance() is for native memory and not heap and also wont initialize the class constructor."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ClassDeclarationNode",
                      "modifiers":[
                        
                      ],
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"constructor",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "bit":1,
                      "alloc":1,
                      "clear":1,
                      "constructor":1,
                      "wont":1,
                      "initi":1,
                      "dig":1,
                      "heap":1,
                      "user":1,
                      "instanc":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32706385,
        "postId":21589159,
        "creationDate":"2014-02-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2864740,
          "displayName":"user2864740",
          "reputation":26567
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Ashley Nope, not so! Both `new` *and* `allocateInstance` allocate the memory &quot;on the heap&quot; and return a reference to the object &quot;on the heap&quot;. The difference is that `allocateInstance` *skips any initialization* - this means the constructor *is not called* and any in-line assignments in variable declarations *do not occur*. However, *it has no effect on where the memory is allocated* - the object returned from both approaches is handled by the GC."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32706385]-[239501286]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Ashley Nope, not so! Both `new` *and* `allocateInstance` allocate the memory &quot;on the heap&quot; and return a reference to the object &quot;on the heap&quot;. The difference is that `allocateInstance` *skips any initialization* - this means the constructor *is not called* and any in-line assignments in variable declarations *do not occur*. However, *it has no effect on where the memory is allocated* - the object returned from both approaches is handled by the GC."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Ashley",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "alloc":4,
                      "return":1,
                      "line":1,
                      "occur":1,
                      "differ":1,
                      "effect":1,
                      "mean":1,
                      "constructor":1,
                      "assign":1,
                      "skip":1,
                      "declar":1,
                      "nope":1,
                      "object":2,
                      "refer":1,
                      "approach":1,
                      "quot":4,
                      "initi":1,
                      "heap":2,
                      "variabl":1,
                      "call":1,
                      "handl":1,
                      "ashley":1,
                      "instanc":2,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":32706440,
        "postId":21589159,
        "creationDate":"2014-02-08",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2864740,
          "displayName":"user2864740",
          "reputation":26567
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Ashley If you want &quot;off heap&quot; (non GC) memory, use `allocateMemory`. But *do not* confuse this with `allocateInstance` - the simple memory allocation method is *not associated* with an instance. (A case where `allocateInstance` may be used is for deserialization when, for whatever means, the constructor must be skipped.)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[21589159-cu32706440]-[744626854]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Ashley If you want &quot;off heap&quot; (non GC) memory, use `allocateMemory`. But *do not* confuse this with `allocateInstance` - the simple memory allocation method is *not associated* with an instance. (A case where `allocateInstance` may be used is for deserialization when, for whatever means, the constructor must be skipped.)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Ashley",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateMemory",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"allocateInstance",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "simpl":1,
                      "alloc":4,
                      "mean":1,
                      "constructor":1,
                      "skip":1,
                      "quot":2,
                      "confus":1,
                      "heap":1,
                      "deseri":1,
                      "ashley":1,
                      "instanc":3,
                      "memori":3
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance"
    ],
    "creationDate":"2014-02-05",
    "lastActivityDate":"2014-02-08",
    "lastEditDate":"2014-02-05",
    "score":4,
    "viewCount":202,
    "owner":{
      "type":"StackOverflowUser",
      "id":2708960,
      "displayName":"Ashley",
      "reputation":141
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Just trying to learn on sun.misc.Unsafe low-level java operations. I was reading <a href=\"http://howtodoinjava.com/2013/10/19/usage-of-class-sun-misc-unsafe/\"rel=\"nofollow\">this</a> article however, my question is related to advantages of using Unsafe. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21589159]-[-43651682]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Just trying to learn on sun.misc.Unsafe low-level java operations. I was reading <a href=\"http://howtodoinjava.com/2013/10/19/usage-of-class-sun-misc-unsafe/\"rel=\"nofollow\">this</a> article however, my question is related to advantages of using Unsafe. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "question":1,
                  "learn":1,
                  "relat":1,
                  "sun":2,
                  "rel":1,
                  "articl":1,
                  "oper":1,
                  "low":1,
                  "nofollow":1,
                  "advantag":1,
                  "misc":2,
                  "usag":1,
                  "howtodoinjava":1,
                  "unsaf":3,
                  "href":1,
                  "http":1,
                  "level":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In this example, <code>Player p = (Player) unsafe.allocateInstance(Player.class);</code> Where is the object created? On JVM heap or non-heap direct memory?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21589159]-[-1171123158]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In this example, <code>Player p = (Player) unsafe.allocateInstance(Player.class);</code> Where is the object created? On JVM heap or non-heap direct memory?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"p",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Player",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"unsafe",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"allocateInstance",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"ClassLiteralExpressionNode",
                                      "aType":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"Player",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepths":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Player",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "jvm":1,
                  "alloc":1,
                  "object":1,
                  "direct":1,
                  "code":2,
                  "player":3,
                  "unsaf":1,
                  "heap":2,
                  "creat":1,
                  "instanc":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Player",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"unsafe",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"allocateInstance",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"ClassLiteralExpressionNode",
                          "aType":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"Player",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "arrayDepths":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"p",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Player",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"unsafe",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"allocateInstance",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"ClassLiteralExpressionNode",
                                  "aType":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"Player",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "arrayDepths":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Player",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Are all the operations that are explained in the article non-heap allocations? I ask this because, when you use \u201cnew\u201d key-word, its supposed to create an instance on the heap. If it does, then what is the actual advantage, because then, it doesnt by-pass the GC.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21589159]-[79525910]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Are all the operations that are explained in the article non-heap allocations? I ask this because, when you use \u201cnew\u201d key-word, its supposed to create an instance on the heap. If it does, then what is the actual advantage, because then, it doesnt by-pass the GC.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "alloc":1,
                  "explain":1,
                  "articl":1,
                  "key":1,
                  "oper":1,
                  "doesnt":1,
                  "advantag":1,
                  "pass":1,
                  "heap":2,
                  "actual":1,
                  "suppos":1,
                  "creat":1,
                  "word":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":21589474,
      "questionId":21589159,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":32706045,
          "postId":21589474,
          "creationDate":"2014-02-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2708960,
            "displayName":"Ashley",
            "reputation":141
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I would disagree that allocate deals with the heap. I have created and run programs by setting memory off-heap using this and now its pretty clear that off-heap memory is used here. There are some other things I am looking to clarify in terms of some auxiliary operations that are performed along with using Unsafe, however, the concepts are getting more clear now."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21589474-cu32706045]-[1735236380]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I would disagree that allocate deals with the heap. I have created and run programs by setting memory off-heap using this and now its pretty clear that off-heap memory is used here. There are some other things I am looking to clarify in terms of some auxiliary operations that are performed along with using Unsafe, however, the concepts are getting more clear now."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "alloc":1,
                        "auxiliari":1,
                        "clear":2,
                        "run":1,
                        "set":1,
                        "term":1,
                        "thing":1,
                        "pretti":1,
                        "oper":1,
                        "perform":1,
                        "concept":1,
                        "unsaf":1,
                        "heap":3,
                        "creat":1,
                        "disagre":1,
                        "clarifi":1,
                        "deal":1,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32708856,
          "postId":21589474,
          "creationDate":"2014-02-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1554314,
            "displayName":"Taky",
            "reputation":2632
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The easiest way to check whether object in the heap is to allocate instances with your hypothesis method, make heap dump with jmap and review objects with MAT."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21589474-cu32708856]-[-428650596]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The easiest way to check whether object in the heap is to allocate instances with your hypothesis method, make heap dump with jmap and review objects with MAT."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "review":1,
                        "hypothesi":1,
                        "alloc":1,
                        "easiest":1,
                        "mat":1,
                        "dump":1,
                        "object":2,
                        "check":1,
                        "make":1,
                        "heap":2,
                        "jmap":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32621933,
          "postId":21589474,
          "creationDate":"2014-02-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2708960,
            "displayName":"Ashley",
            "reputation":141
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks @Taky for clearing this up and the new link. Its great help. Now, using DirectByteBuffer is great, however, DirectByteBuffer uses Unsafe internally. So, I am trying to check the range of functionality that can be achieved by Unsafe for various operations. It seems we can achieve a certain amount of GC-less programming using Unsafe. Thanks again."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21589474-cu32621933]-[-54856408]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks @Taky for clearing this up and the new link. Its great help. Now, using DirectByteBuffer is great, however, DirectByteBuffer uses Unsafe internally. So, I am trying to check the range of functionality that can be achieved by Unsafe for various operations. It seems we can achieve a certain amount of GC-less programming using Unsafe. Thanks again."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Taky",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"DirectByteBuffer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"DirectByteBuffer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "taki":1,
                        "rang":1,
                        "clear":1,
                        "buffer":2,
                        "amount":1,
                        "direct":2,
                        "oper":1,
                        "achiev":2,
                        "check":1,
                        "function":1,
                        "link":1,
                        "unsaf":3,
                        "intern":1,
                        "great":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"DirectByteBuffer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32821478,
          "postId":21589474,
          "creationDate":"2014-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2708960,
            "displayName":"Ashley",
            "reputation":141
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I take it back as I wrongfully mixed up allocateInstance() with allocateMemory()."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21589474-cu32821478]-[-382081114]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I take it back as I wrongfully mixed up allocateInstance() with allocateMemory()."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"allocateInstance",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"allocateMemory",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alloc":2,
                        "wrong":1,
                        "mix":1,
                        "back":1,
                        "instanc":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-02-05",
      "lastActivityDate":"2014-02-08",
      "lastEditDate":"2014-02-08",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1554314,
        "displayName":"Taky",
        "reputation":2632
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Method <code>Unsafe#allocateInstance(Class&lt;?&gt;)</code> will allocate only memory in the heap, whithout initialization phase. By next <a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">link</a> described that this method avoid initialization paragraph. You can also review <a href=\"http://openjdk.5641.n7.nabble.com/question-about-Unsafe-allocateInstance-td23595.html\"rel=\"nofollow\">openJDK thread</a> where this question is also disscuessed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21589474]-[2011970345]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Method <code>Unsafe#allocateInstance(Class&lt;?&gt;)</code> will allocate only memory in the heap, whithout initialization phase. By next <a href=\"http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\"rel=\"nofollow\">link</a> described that this method avoid initialization paragraph. You can also review <a href=\"http://openjdk.5641.n7.nabble.com/question-about-Unsafe-allocateInstance-td23595.html\"rel=\"nofollow\">openJDK thread</a> where this question is also disscuessed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Class",
                          "comments":[
                            
                          ]
                        },
                        "typeArguments":{
                          "type":"TypeArgumentsNode",
                          "types":[
                            {
                              "type":"WildcardTypeArgumentNode",
                              "operator":{
                                "type":"OperatorNode",
                                "symbol":"?",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"openJDK",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":1,
                    "dot":2,
                    "github":1,
                    "question":2,
                    "method":2,
                    "review":1,
                    "alloc":3,
                    "phase":1,
                    "disscuess":1,
                    "sun":1,
                    "rel":2,
                    "open":1,
                    "avoid":1,
                    "code":2,
                    "thread":1,
                    "blog":1,
                    "nofollow":2,
                    "paragraph":1,
                    "link":1,
                    "misc":1,
                    "initi":2,
                    "nabbl":1,
                    "magic":1,
                    "whithout":1,
                    "unsaf":3,
                    "part":1,
                    "heap":1,
                    "html":1,
                    "href":2,
                    "http":2,
                    "jdk":1,
                    "mishadoff":1,
                    "instanc":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Class",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"WildcardTypeArgumentNode",
                                "operator":{
                                  "type":"OperatorNode",
                                  "symbol":"?",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can allocate non-heap memory using method Unsafe#allocateMemory(long). You can also review example of usage in <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/nio/DirectByteBuffer.java#DirectByteBuffer.%3Cinit%3E%28int%29\"rel=\"nofollow\">DirectByteBuffer</a> class, which created by <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#allocateDirect%28int%29\"rel=\"nofollow\">ByteBuffer#allocateDirect(int)</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21589474]-[767669930]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can allocate non-heap memory using method Unsafe#allocateMemory(long). You can also review example of usage in <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/nio/DirectByteBuffer.java#DirectByteBuffer.%3Cinit%3E%28int%29\"rel=\"nofollow\">DirectByteBuffer</a> class, which created by <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#allocateDirect%28int%29\"rel=\"nofollow\">ByteBuffer#allocateDirect(int)</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"DirectByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateDirect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "openjdk":1,
                    "method":1,
                    "review":1,
                    "alloc":4,
                    "root":1,
                    "rel":2,
                    "oracl":1,
                    "nio":2,
                    "buffer":5,
                    "repositori":1,
                    "doc":2,
                    "grepcod":2,
                    "direct":5,
                    "nofollow":2,
                    "cinit":1,
                    "javas":1,
                    "usag":1,
                    "file":1,
                    "api":1,
                    "unsaf":1,
                    "heap":1,
                    "html":1,
                    "href":2,
                    "http":2,
                    "creat":1,
                    "jdk":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"DirectByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you want to work with non-heap memory consider using <a href=\"http://www.kdgregory.com/?page=java.byteBuffer\"rel=\"nofollow\">ByteBuffer allocateDirect</a>. But actual advantage of using non-heap memory is doubtful. You should make performance benchmarks to be sure you have performance advantage. Also consider using <a href=\"http://docs.oracle.com/cd/E15289_01/doc.40/e15062/optionxx.htm#BABGCFFB\"rel=\"nofollow\">-XX:MaxDirectMemorySize</a> parameter to force native memory reusing if you use direct buffers.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21589474]-[33321349]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you want to work with non-heap memory consider using <a href=\"http://www.kdgregory.com/?page=java.byteBuffer\"rel=\"nofollow\">ByteBuffer allocateDirect</a>. But actual advantage of using non-heap memory is doubtful. You should make performance benchmarks to be sure you have performance advantage. Also consider using <a href=\"http://docs.oracle.com/cd/E15289_01/doc.40/e15062/optionxx.htm#BABGCFFB\"rel=\"nofollow\">-XX:MaxDirectMemorySize</a> parameter to force native memory reusing if you use direct buffers.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ByteBuffer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateDirect",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MaxDirectMemorySize",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "htm":1,
                    "alloc":1,
                    "size":1,
                    "kdgregori":1,
                    "page":1,
                    "rel":2,
                    "optionxx":1,
                    "oracl":1,
                    "buffer":3,
                    "doc":2,
                    "work":1,
                    "direct":3,
                    "paramet":1,
                    "nofollow":2,
                    "advantag":2,
                    "max":1,
                    "doubt":1,
                    "perform":2,
                    "make":1,
                    "heap":2,
                    "forc":1,
                    "href":2,
                    "actual":1,
                    "http":2,
                    "www":1,
                    "benchmark":1,
                    "babgcffb":1,
                    "reus":1,
                    "memori":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ByteBuffer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"MaxDirectMemorySize",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}