{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":21748389,
    "title":"How JVM ensures thread safety Singleton implemented by use of enum?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "enums"
    ],
    "creationDate":"2014-02-13",
    "lastActivityDate":"2014-02-13",
    "lastEditDate":"2014-02-13",
    "score":2,
    "viewCount":146,
    "owner":{
      "type":"StackOverflowUser",
      "id":1954657,
      "displayName":"Sam",
      "reputation":461
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>As per Josh Bloch's <a href=\"http://rads.stackoverflow.com/amzn/click/0321356683\"rel=\"nofollow\">Effective Java</a> Enum is the best way to implement Singleton pattern.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[-66241705]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>As per Josh Bloch's <a href=\"http://rads.stackoverflow.com/amzn/click/0321356683\"rel=\"nofollow\">Effective Java</a> Enum is the best way to implement Singleton pattern.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "rad":1,
                  "pattern":1,
                  "effect":1,
                  "rel":1,
                  "amzn":1,
                  "stackoverflow":1,
                  "nofollow":1,
                  "click":1,
                  "implement":1,
                  "josh":1,
                  "singleton":1,
                  "href":1,
                  "http":1,
                  "bloch":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Java enum takes care of Serialization and Thread Safety on its own. But I do not understand how.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[977414270]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Java enum takes care of Serialization and Thread Safety on its own. But I do not understand how.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "understand":1,
                  "care":1,
                  "thread":1,
                  "safeti":1,
                  "take":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Can someone please explain it?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[1571603070]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Can someone please explain it?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "explain":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I had looked at <a href=\"http://stackoverflow.com/questions/18471653/how-java-ensures-only-one-instance-of-an-enum-per-jvm\">this</a> and <a href=\"http://stackoverflow.com/questions/6054495/implementing-singleton-in-java\">this</a>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[643924216]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I had looked at <a href=\"http://stackoverflow.com/questions/18471653/how-java-ensures-only-one-instance-of-an-enum-per-jvm\">this</a> and <a href=\"http://stackoverflow.com/questions/6054495/implementing-singleton-in-java\">this</a>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "jvm":1,
                  "question":2,
                  "look":1,
                  "stackoverflow":2,
                  "implement":1,
                  "singleton":1,
                  "href":2,
                  "http":2,
                  "instanc":1,
                  "ensur":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The second link gives good amount of details on enum being capable of serialization but I am not getting sufficient explanation on thread-safety.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[432696132]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The second link gives good amount of details on enum being capable of serialization but I am not getting sufficient explanation on thread-safety.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "capabl":1,
                  "good":1,
                  "amount":1,
                  "thread":1,
                  "explan":1,
                  "safeti":1,
                  "suffici":1,
                  "link":1,
                  "detail":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Also are the methods declared in enum are thread-safe or any special care has to be taken?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[21748389]-[1259584412]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Also are the methods declared in enum are thread-safe or any special care has to be taken?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "care":1,
                  "safe":1,
                  "declar":1,
                  "thread":1,
                  "special":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":21748434,
      "questionId":21748389,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":32895308,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1954657,
            "displayName":"Sam",
            "reputation":461
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you please point me to a resource which says this &quot;enum are initialised in a static initialiser block generated by the compiler.&quot; officially? I mean tried finding but could get one."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895308]-[-1444328368]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you please point me to a resource which says this &quot;enum are initialised in a static initialiser block generated by the compiler.&quot; officially? I mean tried finding but could get one."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "point":1,
                        "offici":1,
                        "resourc":1,
                        "block":1,
                        "generat":1,
                        "quot":2,
                        "compil":1,
                        "initialis":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32895319,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":18573,
            "displayName":"Miserable Variable",
            "reputation":18385
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"As a follow up question, can all this be done in a non-enum class and make it as robust singleton as enums?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895319]-[735587509]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"As a follow up question, can all this be done in a non-enum class and make it as robust singleton as enums?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"and",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "robust":1,
                        "enum":1,
                        "make":1,
                        "singleton":1,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32895392,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1954657,
            "displayName":"Sam",
            "reputation":461
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@MiserableVariable I think yes. But you have to a lot of effort as explained here : http://java.dzone.com/articles/singleton-design-pattern-%E2%80%93"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895392]-[-741559196]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@MiserableVariable I think yes. But you have to a lot of effort as explained here : http://java.dzone.com/articles/singleton-design-pattern-%E2%80%93"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MiserableVariable",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "design":1,
                        "effort":1,
                        "pattern":1,
                        "explain":1,
                        "articl":1,
                        "miser":1,
                        "dzone":1,
                        "lot":1,
                        "singleton":1,
                        "variabl":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32895407,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438154,
            "displayName":"Sotirios Delimanolis",
            "reputation":109745
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Sam [The Java Language Specification](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2) says so. It's not actually a block, but `static final` fields with a corresponding initialization expression for each `enum` constant declared (which is pretty much equivalent)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895407]-[-1187950819]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Sam [The Java Language Specification](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2) says so. It's not actually a block, but `static final` fields with a corresponding initialization expression for each `enum` constant declared (which is pretty much equivalent)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Sam",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constant":1,
                        "jls":3,
                        "languag":1,
                        "field":1,
                        "equival":1,
                        "sam":1,
                        "oracl":1,
                        "doc":1,
                        "declar":1,
                        "pretti":1,
                        "block":1,
                        "specif":1,
                        "spec":1,
                        "javas":1,
                        "express":1,
                        "initi":1,
                        "html":2,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32895763,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1954657,
            "displayName":"Sam",
            "reputation":461
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@SotiriosDelimanolis Please correct me if I am wrong. So making it static final makes an enum thread-safe right?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895763]-[835827154]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@SotiriosDelimanolis Please correct me if I am wrong. So making it static final makes an enum thread-safe right?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SotiriosDelimanolis",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wrong":1,
                        "correct":1,
                        "sotirio":1,
                        "safe":1,
                        "thread":1,
                        "delimanoli":1,
                        "make":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":32895784,
          "postId":21748434,
          "creationDate":"2014-02-13",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438154,
            "displayName":"Sotirios Delimanolis",
            "reputation":109745
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Sam No, it makes its initialization thread safe."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[21748434-cu32895784]-[35158713]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Sam No, it makes its initialization thread safe."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Sam",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sam":1,
                        "safe":1,
                        "thread":1,
                        "make":1,
                        "initi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-02-13",
      "lastActivityDate":"2014-02-13",
      "lastEditDate":"2014-02-13",
      "score":4,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>static</code> initializer blocks are single threaded using a Lock internal to the JVM. i.e. it doesn't appear in a <code>jstack</code> trace like other locks. No other thread can access anything the class until it has been initialized. This is true of all classes, not just <code>enum</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[-18650056]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>static</code> initializer blocks are single threaded using a Lock internal to the JVM. i.e. it doesn't appear in a <code>jstack</code> trace like other locks. No other thread can access anything the class until it has been initialized. This is true of all classes, not just <code>enum</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"until",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "singl":1,
                    "trace":1,
                    "lock":2,
                    "code":6,
                    "block":1,
                    "thread":2,
                    "jstack":1,
                    "true":1,
                    "class":1,
                    "initi":2,
                    "intern":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>enum</code> are initialized in a static initializer block generated by the compiler.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[1132427308]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>enum</code> are initialized in a static initializer block generated by the compiler.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":2,
                    "block":1,
                    "generat":1,
                    "initi":2,
                    "compil":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Also are the methods declared in enum are thread-safe or any special care has to be taken?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[-939455431]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Also are the methods declared in enum are thread-safe or any special care has to be taken?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "care":1,
                    "safe":1,
                    "blockquot":2,
                    "declar":1,
                    "thread":1,
                    "special":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Again, <code>enum</code> are just like regular classes. Only the methods you mark as <code>synchronized</code> are synchronized. Note: just adding synchronized doesn't make it thread safe. ;)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[112775123]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Again, <code>enum</code> are just like regular classes. Only the methods you mark as <code>synchronized</code> are synchronized. Note: just adding synchronized doesn't make it thread safe. ;)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "regular":1,
                    "safe":1,
                    "code":4,
                    "thread":1,
                    "note":1,
                    "make":1,
                    "ad":1,
                    "class":1,
                    "mark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>While <code>enum</code> are effectively <code>static final</code> instances, you can modify their fields ie. the fields on an enum are not <code>final</code> by default. Also you can modify enums by messing with the internal structure of the class using reflection and Unsafe.allocateInstance. Generally this is not a good idea.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[1645448901]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>While <code>enum</code> are effectively <code>static final</code> instances, you can modify their fields ie. the fields on an enum are not <code>final</code> by default. Also you can modify enums by messing with the internal structure of the class using reflection and Unsafe.allocateInstance. Generally this is not a good idea.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"using",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "field":2,
                    "good":1,
                    "effect":1,
                    "idea":1,
                    "structur":1,
                    "code":6,
                    "mess":1,
                    "general":1,
                    "enum":1,
                    "modifi":2,
                    "unsaf":1,
                    "reflect":1,
                    "intern":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>From <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2\"rel=\"nofollow\">JLS 8.9.2</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[-1988387694]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>From <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2\"rel=\"nofollow\">JLS 8.9.2</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":4,
                    "rel":1,
                    "oracl":1,
                    "doc":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>for each declared enum constant with the name n, the enum type has an implicitly declared public static final field named n of type E. These fields are considered to be declared in the same order as the corresponding enum constants, before any static fields explicitly declared in the enum type.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748434]-[1692797880]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>for each declared enum constant with the name n, the enum type has an implicitly declared public static final field named n of type E. These fields are considered to be declared in the same order as the corresponding enum constants, before any static fields explicitly declared in the enum type.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constant":2,
                    "name":1,
                    "field":3,
                    "blockquot":2,
                    "declar":4,
                    "consid":1,
                    "implicit":1,
                    "order":1,
                    "type":3,
                    "explicit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":21748450,
      "questionId":21748389,
      "comments":[
        
      ],
      "creationDate":"2014-02-13",
      "lastActivityDate":"2014-02-13",
      "lastEditDate":"2014-02-13",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":515034,
        "displayName":"Abimaran Kugathasan",
        "reputation":13066
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Enum are static instances, they will be initialized in Class loading time. Once they initialized, you can't alter/modify them. So It's thread safe. No modification to Enum instances once they have created.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748450]-[949682257]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Enum are static instances, they will be initialized in Class loading time. Once they initialized, you can't alter/modify them. So It's thread safe. No modification to Enum instances once they have created.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alter":1,
                    "load":1,
                    "modif":1,
                    "safe":1,
                    "thread":1,
                    "modifi":1,
                    "initi":2,
                    "time":1,
                    "creat":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But, methods that you add to an enum class do not carry any thread safety guarantee unless you declare it explicitly.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[21748450]-[1458077612]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But, methods that you add to an enum class do not carry any thread safety guarantee unless you declare it explicitly.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "carri":1,
                    "declar":1,
                    "guarante":1,
                    "thread":1,
                    "safeti":1,
                    "explicit":1,
                    "add":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}