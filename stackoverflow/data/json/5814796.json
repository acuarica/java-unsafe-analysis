{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":5814796,
    "title":"Cloning and Integer",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":6687953,
        "postId":5814796,
        "creationDate":"2011-04-28",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":207421,
          "displayName":"EJP",
          "reputation":133851
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You *can't* implement it like that, so it's pointless saying you must."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[5814796-cu6687953]-[1217613293]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You *can't* implement it like that, so it's pointless saying you must."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "pointless":1,
                      "implement":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "cloneable"
    ],
    "creationDate":"2011-04-28",
    "lastActivityDate":"2011-04-28",
    "lastEditDate":"2011-04-28",
    "score":4,
    "viewCount":6935,
    "owner":{
      "type":"StackOverflowUser",
      "id":654928,
      "displayName":"rubixibuc",
      "reputation":1839
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am trying to clone a object of class Integer, which does implement the cloneable inteface. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5814796]-[1226780542]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am trying to clone a object of class Integer, which does implement the cloneable inteface. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"Integer",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "intefac":1,
                  "cloneabl":1,
                  "object":1,
                  "clone":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Integer a = new Integer(4); Integer b = a.clone(); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[5814796]-[-36406069]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Integer",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"4"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"b",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"a",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"clone",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"Integer a = new Integer(4); Integer b = a.clone(); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "clone":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Integer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"clone",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"a",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Integer",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"4"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Integer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"b",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"a",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"clone",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Integer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I know there are work arounds for this, but I must implement it like this. why I am getting this error = <code>clone()</code> has protected access in <code>java.lang.Object</code></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5814796]-[-352997571]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I know there are work arounds for this, but I must implement it like this. why I am getting this error = <code>clone()</code> has protected access in <code>java.lang.Object</code></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"java",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"lang",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Object",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "work":1,
                  "object":1,
                  "code":4,
                  "around":1,
                  "error":1,
                  "clone":1,
                  "implement":1,
                  "lang":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Why would it say this? Isn't the clone method a public abstract method of clonable interface, what does it have to do with object. Thanks in advance :-)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[5814796]-[1599971209]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Why would it say this? Isn't the clone method a public abstract method of clonable interface, what does it have to do with object. Thanks in advance :-)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "advanc":1,
                  "object":1,
                  "clonabl":1,
                  "clone":1,
                  "isn":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":5815786,
      "questionId":5814796,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":722929,
        "displayName":"Tobber",
        "reputation":1460
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As Amit and aioobe points out, Integer is immutable, so no need to clone it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815786]-[-1065312291]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As Amit and aioobe points out, Integer is immutable, so no need to clone it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "immut":1,
                    "aioob":1,
                    "clone":1,
                    "amit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But to answer your question. The clone() method is not part of the the clonable interface see: <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Cloneable.html\"rel=\"nofollow\">http://download.oracle.com/javase/6/docs/api/java/lang/Cloneable.html</a> as aioobe tells you. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815786]-[-1168867300]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But to answer your question. The clone() method is not part of the the clonable interface see: <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Cloneable.html\"rel=\"nofollow\">http://download.oracle.com/javase/6/docs/api/java/lang/Cloneable.html</a> as aioobe tells you. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "method":1,
                    "rel":1,
                    "oracl":2,
                    "doc":2,
                    "cloneabl":2,
                    "clonabl":1,
                    "aioob":1,
                    "nofollow":1,
                    "clone":1,
                    "javas":2,
                    "answer":1,
                    "api":2,
                    "part":1,
                    "lang":2,
                    "html":2,
                    "href":1,
                    "http":2,
                    "tell":1,
                    "download":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The clone method is declared as protected in Object, and you must overwrite it with a public method in order to use it. See <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone\"rel=\"nofollow\">http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone</a>()</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815786]-[-2134577087]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The clone method is declared as protected in Object, and you must overwrite it with a public method in order to use it. See <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone\"rel=\"nofollow\">http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone</a>()</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "rel":1,
                    "oracl":2,
                    "doc":2,
                    "declar":1,
                    "object":3,
                    "nofollow":1,
                    "order":1,
                    "clone":3,
                    "javas":2,
                    "api":2,
                    "lang":2,
                    "html":2,
                    "href":1,
                    "http":2,
                    "download":2,
                    "overwrit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In short the reason for this is, that in order to clone a object, it might or might not be necessary to do a &quot;deep-clone&quot; eg. clone fields and their sub elements. Or it might not make sense to clone an object, as the case is with Integer (because it's immutable) </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815786]-[-1790233547]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In short the reason for this is, that in order to clone a object, it might or might not be necessary to do a &quot;deep-clone&quot; eg. clone fields and their sub elements. Or it might not make sense to clone an object, as the case is with Integer (because it's immutable) </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "field":1,
                    "immut":1,
                    "reason":1,
                    "object":2,
                    "element":1,
                    "deep":1,
                    "order":1,
                    "clone":4,
                    "make":1,
                    "quot":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5814853,
      "questionId":5814796,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":559070,
        "displayName":"Harry Joy",
        "reputation":29222
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The error comes because <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone%28%29\"rel=\"nofollow\"><code>clone</code></a> method of java.lang.Object is not visible publicly.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5814853]-[-175805044]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The error comes because <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Object.html#clone%28%29\"rel=\"nofollow\"><code>clone</code></a> method of java.lang.Object is not visible publicly.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "rel":1,
                    "oracl":1,
                    "visibl":1,
                    "public":1,
                    "doc":1,
                    "object":2,
                    "code":2,
                    "nofollow":1,
                    "error":1,
                    "clone":2,
                    "javas":1,
                    "api":1,
                    "lang":2,
                    "html":1,
                    "href":1,
                    "http":1,
                    "download":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"lang",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Object",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5814860,
      "questionId":5814796,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6673716,
          "postId":5814860,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":654928,
            "displayName":"rubixibuc",
            "reputation":1839
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So user created classes are not automatically a subclass of object? Even when I made my class extend object it still didn't work. :-/"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5814860-cu6673716]-[-1124017626]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So user created classes are not automatically a subclass of object? Even when I made my class extend object it still didn't work. :-/"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"extend",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "subclass":1,
                        "extend":1,
                        "work":1,
                        "object":2,
                        "automat":1,
                        "class":1,
                        "creat":1,
                        "made":1,
                        "user":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6680324,
          "postId":5814860,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":599152,
            "displayName":"rlibby",
            "reputation":4201
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@rubixibuc, *every* class in Java is a subclass of Object (except Object of course). In order to expose the `clone()` method to clients, you have to declare it in your subclass with a more liberal access modifier, either `public` or package private (default). This is the meaning of @aioobe's last sentence. However, you cannot extend java.lang.Integer because it is a `final` class. Also note that java.lang.Integer does not implement Cloneable."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5814860-cu6680324]-[-1117741494]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@rubixibuc, *every* class in Java is a subclass of Object (except Object of course). In order to expose the `clone()` method to clients, you have to declare it in your subclass with a more liberal access modifier, either `public` or package private (default). This is the meaning of @aioobe's last sentence. However, you cannot extend java.lang.Integer because it is a `final` class. Also note that java.lang.Integer does not implement Cloneable."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"in",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"java",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Integer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"java",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Integer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "subclass":2,
                        "rubixibuc":1,
                        "liber":1,
                        "mean":1,
                        "extend":1,
                        "expos":1,
                        "declar":1,
                        "cloneabl":1,
                        "object":2,
                        "sentenc":1,
                        "aioob":1,
                        "note":1,
                        "order":1,
                        "clone":1,
                        "client":1,
                        "modifi":1,
                        "implement":1,
                        "lang":2,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"java",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"lang",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":7,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":276052,
        "displayName":"aioobe",
        "reputation":183991
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Sure, all methods in <code>Object</code> are inherited. The <code>clone</code> method however is <a href=\"http://download.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\"><code>protected</code></a>, thus only accessible from within subclasses.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5814860]-[2059837265]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Sure, all methods in <code>Object</code> are inherited. The <code>clone</code> method however is <a href=\"http://download.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\"><code>protected</code></a>, thus only accessible from within subclasses.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "subclass":1,
                    "oracl":1,
                    "object":1,
                    "code":6,
                    "inherit":1,
                    "accesscontrol":1,
                    "clone":1,
                    "javas":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "tutori":1,
                    "download":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p><em>The protected modifier specifies that the member can only be accessed within its own package (as with package-private) and, in addition, by a subclass of its class in another package.</em></p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5814860]-[1149907527]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p><em>The protected modifier specifies that the member can only be accessed within its own package (as with package-private) and, in addition, by a subclass of its class in another package.</em></p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"in",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "subclass":1,
                    "addit":1,
                    "blockquot":2,
                    "member":1,
                    "modifi":1,
                    "specifi":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The reason why you can call <code>clone()</code> in most other circumstances is that the subclass &quot;opens it up&quot; by overriding it with the <code>public</code> access modifier.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5814860]-[679075272]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The reason why you can call <code>clone()</code> in most other circumstances is that the subclass &quot;opens it up&quot; by overriding it with the <code>public</code> access modifier.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "subclass":1,
                    "circumst":1,
                    "overrid":1,
                    "reason":1,
                    "open":1,
                    "code":4,
                    "clone":1,
                    "modifi":1,
                    "quot":2,
                    "call":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5815193,
      "questionId":5814796,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":728593,
        "displayName":"Amit Gupta",
        "reputation":342
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>First of all obtaining a copy through cloning i needed when you dont want others to change your copy. Now Integer is a wrapper class like String and Double that are <b>Immutable</b>. That means you cant change the internals of it. So as long as you have the original reference your object is intact.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815193]-[1806212443]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>First of all obtaining a copy through cloning i needed when you dont want others to change your copy. Now Integer is a wrapper class like String and Double that are <b>Immutable</b>. That means you cant change the internals of it. So as long as you have the original reference your object is intact.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"like",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":2,
                    "intact":1,
                    "dont":1,
                    "mean":1,
                    "immut":1,
                    "object":1,
                    "need":1,
                    "origin":1,
                    "clone":1,
                    "wrapper":1,
                    "refer":1,
                    "intern":1,
                    "copi":2,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>say</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5815193]-[-1217936222]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>say</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"Integer a = new Integer(4); // a referencing to this newly Created Integer b = a; // b is referencing to.. b = new Integer(8) // b no longer references to 4. //We changed the reference not the internals of it which is impossible. "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[5815193]-[1918923686]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"LocalVariableDeclarationStatementNode",
                    "modifiers":[
                      
                    ],
                    "declarators":{
                      "type":"VariableDeclaratorsNode",
                      "declarators":[
                        {
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"a",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ],
                          "assignment":{
                            "type":"VariableAssignmentNode",
                            "variableAssignment":{
                              "type":"VariableExpressionInitNode",
                              "expression":{
                                "type":"ConstructorCreatorNode",
                                "creatorType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"Integer",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "expressionArgs":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"4"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            },
                            "comments":[
                              
                            ]
                          },
                          "varType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Integer",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// a referencing to this newly Created Integer b = a; // b is referencing to.. b = new Integer(8) // b no longer references to 4. //We changed the reference not the internals of it which is impossible. \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":"Integer a = new Integer(4); // a referencing to this newly Created Integer b = a; // b is referencing to.. b = new Integer(8) // b no longer references to 4. //We changed the reference not the internals of it which is impossible. \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "imposs":1,
                    "newli":1,
                    "refer":2,
                    "longer":1,
                    "creat":1,
                    "intern":1,
                    "referenc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Integer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"a",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ConstructorCreatorNode",
                            "creatorType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Integer",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "expressionArgs":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"4"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Integer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5816152,
      "questionId":5814796,
      "comments":[
        
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":705635,
        "displayName":"birdy",
        "reputation":2727
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It may be hard to believe but your error is right : clone() has protected access in java.lang.Object</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5816152]-[968270938]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It may be hard to believe but your error is right : clone() has protected access in java.lang.Object</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Object",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "hard":1,
                    "object":1,
                    "error":1,
                    "clone":1,
                    "lang":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"lang",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Object",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":5814952,
      "questionId":5814796,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":6673548,
          "postId":5814952,
          "creationDate":"2011-04-28",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Peter: &quot;you need to&quot; *iff* you are trying to waste memory ;-) But there are easier ways to waste memory. `new Object[BIG_NUM]` is my favourite."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5814952-cu6673548]-[-727402677]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Peter: &quot;you need to&quot; *iff* you are trying to waste memory ;-) But there are easier ways to waste memory. `new Object[BIG_NUM]` is my favourite."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Peter",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ArrayExpressionCreatorNode",
                        "creatorType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Object",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "expressionDepth":[
                          {
                            "type":"DimExpressionNode",
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"BIG_NUM",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "arrayDepth":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "favourit":1,
                        "wast":2,
                        "big":1,
                        "peter":1,
                        "way":1,
                        "object":1,
                        "num":1,
                        "easier":1,
                        "quot":2,
                        "iff":1,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Object",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6673860,
          "postId":5814952,
          "creationDate":"2011-04-28",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Or even `new long[Integer.MAX_VALUE]` ;) Or you can go for broke `Unsafe.getUnsafe().allocateMemory(Long.MAX_VALUE)`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5814952-cu6673860]-[-668368591]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Or even `new long[Integer.MAX_VALUE]` ;) Or you can go for broke `Unsafe.getUnsafe().allocateMemory(Long.MAX_VALUE)`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_VALUE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getUnsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"allocateMemory",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_VALUE",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "alloc":1,
                        "broke":1,
                        "max":2,
                        "unsaf":2,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":6672168,
          "postId":5814952,
          "creationDate":"2011-04-28",
          "score":4,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1: That won't always create a copy as small values from -128 to 127 are cached. You need to explicitly use `new Integer(myInteger)`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[5814952-cu6672168]-[-494390318]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1: That won't always create a copy as small values from -128 to 127 are cached. You need to explicitly use `new Integer(myInteger)`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ConstructorCreatorNode",
                        "creatorType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "expressionArgs":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"myInteger",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "cach":1,
                        "small":1,
                        "valu":1,
                        "explicit":1,
                        "creat":1,
                        "won":1,
                        "copi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-04-28",
      "lastActivityDate":"2011-04-28",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":599152,
        "displayName":"rlibby",
        "reputation":4201
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>java.lang.Integer</code>s are immutable. There is no reason to clone one. If you're <em>trying</em> to waste memory, try <code>Integer.valueOf(myInteger.intValue())</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[5814952]-[1798945168]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>java.lang.Integer</code>s are immutable. There is no reason to clone one. If you're <em>trying</em> to waste memory, try <code>Integer.valueOf(myInteger.intValue())</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"lang",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Integers",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Integer",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"valueOf",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"myInteger",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"intValue",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wast":1,
                    "immut":1,
                    "reason":1,
                    "code":4,
                    "clone":1,
                    "lang":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"lang",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Integers",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}