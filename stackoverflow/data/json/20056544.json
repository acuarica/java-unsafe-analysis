{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":20056544,
    "title":"Prevent continuous F5 on a web application",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29881200,
        "postId":20056544,
        "creationDate":"2013-11-19",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2662489,
          "displayName":"developerwjk",
          "reputation":5912
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"How do you know they are holding F5 rather than using some denial of service tool? Answer: you don't. Fix your app rather than trying to cripple the user's browser, since the attacker probably isn't even using a browser."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[20056544-cu29881200]-[-1668031507]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"How do you know they are holding F5 rather than using some denial of service tool? Answer: you don't. Fix your app rather than trying to cripple the user's browser, since the attacker probably isn't even using a browser."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "browser":2,
                      "tool":1,
                      "fix":1,
                      "denial":1,
                      "hold":1,
                      "crippl":1,
                      "isn":1,
                      "answer":1,
                      "app":1,
                      "attack":1,
                      "user":1,
                      "servic":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "javascript",
      "jsp",
      "f5"
    ],
    "creationDate":"2013-11-18",
    "lastActivityDate":"2013-11-18",
    "lastEditDate":"2013-11-18",
    "score":0,
    "viewCount":269,
    "owner":{
      "type":"StackOverflowUser",
      "id":2191543,
      "displayName":"Jasmina Desai",
      "reputation":6
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This is related with handling the scenario when some crazy user is holding down the F5 key to send unlimited requests to our server.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[2020899896]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This is related with handling the scenario when some crazy user is holding down the F5 key to send unlimited requests to our server.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "scenario":1,
                  "request":1,
                  "server":1,
                  "relat":1,
                  "key":1,
                  "unlimit":1,
                  "hold":1,
                  "crazi":1,
                  "handl":1,
                  "user":1,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Our application is very much database and cache intensive and when such consecutive requests come in; our web application is crashing after some time. I know we need to fix the application cache handling and need to add some check at the web server but I am asked to take care of this issue in our code.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[858570696]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Our application is very much database and cache intensive and when such consecutive requests come in; our web application is crashing after some time. I know we need to fix the application cache handling and need to add some check at the web server but I am asked to take care of this issue in our code.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "cach":2,
                  "intens":1,
                  "request":1,
                  "server":1,
                  "crash":1,
                  "fix":1,
                  "issu":1,
                  "care":1,
                  "code":1,
                  "web":2,
                  "check":1,
                  "applic":3,
                  "consecut":1,
                  "databas":1,
                  "time":1,
                  "ask":1,
                  "add":1,
                  "handl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am handling this on both Javascript and server side, but looks like still it is failing, so would like to know if you have any better solution.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[138786557]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am handling this on both Javascript and server side, but looks like still it is failing, so would like to know if you have any better solution.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":1,
                  "fail":1,
                  "server":1,
                  "handl":1,
                  "solut":1,
                  "javascript":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>My code is as follows:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[-2067305062]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>My code is as follows:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Javascript Code:</strong></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[1381996870]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Javascript Code:</strong></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "strong":2,
                  "code":1,
                  "javascript":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"function checkPageRefresh(e) { e = e || window.event; ar isPageRefreshed = false; // detect if user tries to refresh if ((e.keyCode == 116) /* F5 */ || (e.ctrlKey &amp;&amp; (e.keyCode == 116)) /* Ctrl-F5 */ || (e.ctrlKey &amp;&amp; (e.keyCode == 82)) /* Ctrl-R */) { isPageRefreshed = true; } // only trigger special handling for page refresh if (isPageRefreshed){ var lastRefreshTimeMillis= readCookie(&quot;last_refresh&quot;); var currentTimeMillis = new Date().getTime(); // set cookie with now as last refresh time createCookie(lastRefreshCookieName, currentTimeMillis); var lastRefreshParsed = parseFloat(lastRefreshTimeMillis, 10); var timeDiff = currentTimeMillis - lastRefreshParsed; var F5RefreshTimeLimitMillis = &lt;%=request.getAttribute(&quot;F5RefreshTimeLimitMillis&quot;)%&gt;; // if detected last refresh was within 1 second, abort refresh if (timeDiff &lt; F5RefreshTimeLimitMillis) { if (e.preventDefault) { e.preventDefault(); return; } } } // end if (isPageRefreshed) } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[20056544]-[623335358]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"function "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"checkPageRefresh",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"(e) "
                },
                {
                  "type":"BlockDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "block":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"e",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"||",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"e",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"window",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"IdentifierNode",
                                  "name":"event",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"LocalVariableDeclarationStatementNode",
                        "modifiers":[
                          
                        ],
                        "declarators":{
                          "type":"VariableDeclaratorsNode",
                          "declarators":[
                            {
                              "type":"VariableDeclaratorNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"isPageRefreshed",
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepth":[
                                
                              ],
                              "assignment":{
                                "type":"VariableAssignmentNode",
                                "variableAssignment":{
                                  "type":"VariableExpressionInitNode",
                                  "expression":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"BooleanLiteralNode",
                                      "valueRep":"false"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "varType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"ar",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          {
                            "text":"// detect if user tries to refresh if ((e.keyCode == 116) /* F5 */ || (e.ctrlKey && (e.keyCode == 116)) /* Ctrl-F5 */ || (e.ctrlKey && (e.keyCode == 82)) /* Ctrl-R */) { isPageRefreshed = true; } // only trigger special handling for page refresh if (isPageRefreshed){ var lastRefreshTimeMillis= readCookie(\"last_refresh\"); var currentTimeMillis = new Date().getTime(); // set cookie with now as last refresh time createCookie(lastRefreshCookieName, currentTimeMillis); var lastRefreshParsed = parseFloat(lastRefreshTimeMillis, 10); var timeDiff = currentTimeMillis - lastRefreshParsed; var F5RefreshTimeLimitMillis = <%=request.getAttribute(\"F5RefreshTimeLimitMillis\")%>; // if detected last refresh was within 1 second, abort refresh if (timeDiff < F5RefreshTimeLimitMillis) { if (e.preventDefault) { e.preventDefault(); return; } } } // end if (isPageRefreshed) } \n"
                          }
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                }
              ]
            },
            "rawText":"function checkPageRefresh(e) { e = e || window.event; ar isPageRefreshed = false; // detect if user tries to refresh if ((e.keyCode == 116) /* F5 */ || (e.ctrlKey && (e.keyCode == 116)) /* Ctrl-F5 */ || (e.ctrlKey && (e.keyCode == 82)) /* Ctrl-R */) { isPageRefreshed = true; } // only trigger special handling for page refresh if (isPageRefreshed){ var lastRefreshTimeMillis= readCookie(\"last_refresh\"); var currentTimeMillis = new Date().getTime(); // set cookie with now as last refresh time createCookie(lastRefreshCookieName, currentTimeMillis); var lastRefreshParsed = parseFloat(lastRefreshTimeMillis, 10); var timeDiff = currentTimeMillis - lastRefreshParsed; var F5RefreshTimeLimitMillis = <%=request.getAttribute(\"F5RefreshTimeLimitMillis\")%>; // if detected last refresh was within 1 second, abort refresh if (timeDiff < F5RefreshTimeLimitMillis) { if (e.preventDefault) { e.preventDefault(); return; } } } // end if (isPageRefreshed) } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "refresh":19,
                  "window":1,
                  "request":1,
                  "event":1,
                  "detect":2,
                  "prevent":2,
                  "cooki":4,
                  "page":6,
                  "set":1,
                  "milli":8,
                  "ctrl":4,
                  "key":5,
                  "code":3,
                  "attribut":1,
                  "pars":3,
                  "check":1,
                  "diff":2,
                  "date":1,
                  "function":1,
                  "true":1,
                  "end":1,
                  "fals":1,
                  "time":12,
                  "special":1,
                  "current":3,
                  "creat":1,
                  "limit":3,
                  "handl":1,
                  "user":1,
                  "var":5,
                  "abort":1,
                  "trigger":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"ar",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"isPageRefreshed",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"false"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"ar",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Java Code:</strong></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[-1548806479]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Java Code:</strong></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "strong":2,
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"Queue&lt;VisitsInfoHolder&gt; recentlyVisitedUrls = (LinkedList&lt;VisitsInfoHolder&gt;)session.getAttribute(SupportWebKeys.RECENTLY_VISITED_URLS); String urlBeingCalled = PageUrlUtils.getFullURL(request); int maxCountOfRecentURLs = 3; if(null != recentlyVisitedUrls){ //verify if last visit count is matching with the count provided if(recentlyVisitedUrls.size() &gt;= maxCountOfRecentURLs ) { int noOfMatchingVisits = 0; Long firstAccessedTime = 0l; int count = 0; for(VisitsInfoHolder urlIno : recentlyVisitedUrls) { //Store the time stamp of the first record if(count == 0 &amp;&amp; null != urlIno) { firstAccessedTime = urlIno.getTimeOfTheVisit(); } count++; //count how many visits to the current page if(null != urlIno &amp;&amp; null != urlIno.getUrl() &amp;&amp; urlIno.getUrl().equalsIgnoreCase(urlBeingCalled)) { noOfMatchingVisits++; } } if (noOfMatchingVisits &gt;= maxCountOfRecentURLs &amp;&amp; (new Date().getTime() - firstAccessedTime) &lt;= 1000){ LOGGER.error(&quot;&gt;&gt;&gt;&gt;&gt; Redirecting the client to the warning page.&quot;); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); response.sendRedirect((String)request.getAttribute(&quot;F5IssueRedirectPage&quot;)); LOGGER.error(&quot;&gt;&gt;&gt;&gt;&gt; Redirected successfully.&quot;); return; } else{ VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else if (recentlyVisitedUrls.size() &lt; maxCountOfRecentURLs) { VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else{ recentlyVisitedUrls = new LinkedList&lt;VisitsInfoHolder&gt;(); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[20056544]-[275672425]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"recentlyVisitedUrls",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"CastExpressionNode",
                              "aType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"LinkedList",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "typeArguments":{
                                      "type":"TypeArgumentsNode",
                                      "types":[
                                        {
                                          "type":"ReferenceTypeNode",
                                          "ids":[
                                            {
                                              "type":"ParameterizedTypeNode",
                                              "identifier":{
                                                "type":"IdentifierNode",
                                                "name":"VisitsInfoHolder",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "argument":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"session",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"getAttribute",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"SupportWebKeys",
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"IdentifierNode",
                                          "name":"RECENTLY_VISITED_URLS",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Queue",
                                "comments":[
                                  
                                ]
                              },
                              "typeArguments":{
                                "type":"TypeArgumentsNode",
                                "types":[
                                  {
                                    "type":"ReferenceTypeNode",
                                    "ids":[
                                      {
                                        "type":"ParameterizedTypeNode",
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"VisitsInfoHolder",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"urlBeingCalled",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"PageUrlUtils",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getFullURL",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"request",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"String",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"int "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"maxCountOfRecentURLs",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"3"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"IfStatementNode",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"!=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"NullLiteralNode"
                      },
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"recentlyVisitedUrls",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"//verify if last visit count is matching with the count provided if(recentlyVisitedUrls.size() >= maxCountOfRecentURLs ) { int noOfMatchingVisits = 0; Long firstAccessedTime = 0l; int count = 0; for(VisitsInfoHolder urlIno : recentlyVisitedUrls) { //Store the time stamp of the first record if(count == 0 && null != urlIno) { firstAccessedTime = urlIno.getTimeOfTheVisit(); } count++; //count how many visits to the current page if(null != urlIno && null != urlIno.getUrl() && urlIno.getUrl().equalsIgnoreCase(urlBeingCalled)) { noOfMatchingVisits++; } } if (noOfMatchingVisits >= maxCountOfRecentURLs && (new Date().getTime() - firstAccessedTime) <= 1000){ LOGGER.error(\">>>>> Redirecting the client to the warning page.\"); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); response.sendRedirect((String)request.getAttribute(\"F5IssueRedirectPage\")); LOGGER.error(\">>>>> Redirected successfully.\"); return; } else{ VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else if (recentlyVisitedUrls.size() < maxCountOfRecentURLs) { VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else{ recentlyVisitedUrls = new LinkedList<VisitsInfoHolder>(); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } \n"
                      }
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"Queue<VisitsInfoHolder> recentlyVisitedUrls = (LinkedList<VisitsInfoHolder>)session.getAttribute(SupportWebKeys.RECENTLY_VISITED_URLS); String urlBeingCalled = PageUrlUtils.getFullURL(request); int maxCountOfRecentURLs = 3; if(null!= recentlyVisitedUrls){ //verify if last visit count is matching with the count provided if(recentlyVisitedUrls.size() >= maxCountOfRecentURLs ) { int noOfMatchingVisits = 0; Long firstAccessedTime = 0l; int count = 0; for(VisitsInfoHolder urlIno : recentlyVisitedUrls) { //Store the time stamp of the first record if(count == 0 && null != urlIno) { firstAccessedTime = urlIno.getTimeOfTheVisit(); } count++; //count how many visits to the current page if(null != urlIno && null != urlIno.getUrl() && urlIno.getUrl().equalsIgnoreCase(urlBeingCalled)) { noOfMatchingVisits++; } } if (noOfMatchingVisits >= maxCountOfRecentURLs && (new Date().getTime() - firstAccessedTime) <= 1000){ LOGGER.error(\">>>>> Redirecting the client to the warning page.\"); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); response.sendRedirect((String)request.getAttribute(\"F5IssueRedirectPage\")); LOGGER.error(\">>>>> Redirected successfully.\"); return; } else{ VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.remove(); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else if (recentlyVisitedUrls.size() < maxCountOfRecentURLs) { VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } } else{ recentlyVisitedUrls = new LinkedList<VisitsInfoHolder>(); VisitsInfoHolder currentVisitInfo = new VisitsInfoHolder(urlBeingCalled,new Date().getTime()); recentlyVisitedUrls.add(currentVisitInfo); session.setAttribute(SupportWebKeys.RECENTLY_VISITED_URLS, recentlyVisitedUrls); } \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ino":6,
                  "support":4,
                  "provid":1,
                  "ignor":1,
                  "count":10,
                  "remov":2,
                  "success":1,
                  "request":2,
                  "warn":1,
                  "util":1,
                  "size":2,
                  "logger":2,
                  "redirect":4,
                  "url":39,
                  "recent":23,
                  "queue":1,
                  "page":4,
                  "set":3,
                  "full":1,
                  "verifi":1,
                  "store":1,
                  "stamp":1,
                  "issu":1,
                  "holder":12,
                  "info":20,
                  "match":4,
                  "key":4,
                  "attribut":5,
                  "web":4,
                  "max":4,
                  "equal":1,
                  "error":2,
                  "date":5,
                  "visit":45,
                  "client":1,
                  "link":2,
                  "session":4,
                  "time":10,
                  "respons":1,
                  "current":9,
                  "call":6,
                  "add":4,
                  "record":1,
                  "list":2,
                  "access":3,
                  "send":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"LinkedList",
                          "comments":[
                            
                          ]
                        },
                        "typeArguments":{
                          "type":"TypeArgumentsNode",
                          "types":[
                            {
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"VisitsInfoHolder",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"VisitsInfoHolder",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Queue",
                          "comments":[
                            
                          ]
                        },
                        "typeArguments":{
                          "type":"TypeArgumentsNode",
                          "types":[
                            {
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"VisitsInfoHolder",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"String",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"session",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getAttribute",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SupportWebKeys",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"RECENTLY_VISITED_URLS",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"PageUrlUtils",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getFullURL",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"request",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"recentlyVisitedUrls",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"CastExpressionNode",
                          "aType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"LinkedList",
                                  "comments":[
                                    
                                  ]
                                },
                                "typeArguments":{
                                  "type":"TypeArgumentsNode",
                                  "types":[
                                    {
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"VisitsInfoHolder",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"MethodInvocationNode",
                            "qualifiedIdentifier":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"session",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"getAttribute",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"SupportWebKeys",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"RECENTLY_VISITED_URLS",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Queue",
                            "comments":[
                              
                            ]
                          },
                          "typeArguments":{
                            "type":"TypeArgumentsNode",
                            "types":[
                              {
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"VisitsInfoHolder",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"urlBeingCalled",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"MethodInvocationNode",
                          "qualifiedIdentifier":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"PageUrlUtils",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"getFullURL",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"request",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Now I keep holding the F5 button then my Javascript is not understanding that the same key is held for longer time and server side code prints the following 2 loggers</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[1646637355]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Now I keep holding the F5 button then my Javascript is not understanding that the same key is held for longer time and server side code prints the following 2 loggers</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "side":1,
                  "server":1,
                  "logger":1,
                  "print":1,
                  "held":1,
                  "understand":1,
                  "key":1,
                  "code":1,
                  "hold":1,
                  "button":1,
                  "longer":1,
                  "time":1,
                  "javascript":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ul> \n <li>Redirecting the client to the warning page. </li> \n <li>Redirected successfully.</li> \n</ul>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[-306942424]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ul> \n <li>Redirecting the client to the warning page. </li> \n <li>Redirected successfully.</li> \n</ul>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "success":1,
                  "warn":1,
                  "redirect":2,
                  "page":1,
                  "client":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>But in reality it is not redirecting any single time. I tried adding Thread.sleep(1000) before and after redirect, but still no luck.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[-1765724798]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>But in reality it is not redirecting any single time. I tried adding Thread.sleep(1000) before and after redirect, but still no luck.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "singl":1,
                  "redirect":2,
                  "luck":1,
                  "sleep":1,
                  "realiti":1,
                  "thread":1,
                  "ad":1,
                  "time":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Please let me know if you see any issue with my code or let me know if there is any better solution.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[20056544]-[-338033451]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Please let me know if you see any issue with my code or let me know if there is any better solution.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "issu":1,
                  "code":1,
                  "solut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":20058998,
      "questionId":20056544,
      "comments":[
        
      ],
      "creationDate":"2013-11-18",
      "lastActivityDate":"2013-11-18",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":155020,
        "displayName":"chubbsondubs",
        "reputation":18357
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When you reproduce this problem are you the only person on your server? Can you reproduce this problem on your local dev instance? If so you really need to fix your server code such that it doesn't crash. You are doing something on your server that is too intensive and needs to be optimized.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20058998]-[352175858]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When you reproduce this problem are you the only person on your server? Can you reproduce this problem on your local dev instance? If so you really need to fix your server code such that it doesn't crash. You are doing something on your server that is too intensive and needs to be optimized.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "intens":1,
                    "server":3,
                    "problem":2,
                    "crash":1,
                    "fix":1,
                    "local":1,
                    "reproduc":2,
                    "code":1,
                    "optim":1,
                    "dev":1,
                    "person":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Simply intercepting the F5 key on someone's browser is treating the symptoms not the disease. If you are having problems handling a single user hitting F5 really quickly it simply means you'll never be able to scale up to many simultaneous users because that's the exact same request/response pattern as a single user round tripping you with F5.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20058998]-[-194448897]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Simply intercepting the F5 key on someone's browser is treating the symptoms not the disease. If you are having problems handling a single user hitting F5 really quickly it simply means you'll never be able to scale up to many simultaneous users because that's the exact same request/response pattern as a single user round tripping you with F5.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":2,
                    "intercept":1,
                    "request":1,
                    "pattern":1,
                    "browser":1,
                    "problem":1,
                    "scale":1,
                    "hit":1,
                    "simultan":1,
                    "trip":1,
                    "mean":1,
                    "exact":1,
                    "key":1,
                    "simpli":2,
                    "symptom":1,
                    "treat":1,
                    "round":1,
                    "quick":1,
                    "respons":1,
                    "diseas":1,
                    "handl":1,
                    "user":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's time to break out the profiler and check the timings on how long it takes to process a single request through the system. Then look for hotspots and optimize it. Also watch your memory usage see if you are cleaning things up or if they are growing off into infinity.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[20058998]-[-1371927176]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's time to break out the profiler and check the timings on how long it takes to process a single request through the system. Then look for hotspots and optimize it. Also watch your memory usage see if you are cleaning things up or if they are growing off into infinity.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "infin":1,
                    "profil":1,
                    "request":1,
                    "system":1,
                    "process":1,
                    "clean":1,
                    "watch":1,
                    "thing":1,
                    "hotspot":1,
                    "optim":1,
                    "check":1,
                    "take":1,
                    "grow":1,
                    "usag":1,
                    "time":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}