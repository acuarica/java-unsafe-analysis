{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18687243,
    "title":"Using sun.misc.Usafe as off-heap memory and writing memory managers?",
    "comments":[
      
    ],
    "tags":[
      "java",
      "memory-management",
      "unsafe"
    ],
    "creationDate":"2013-09-08",
    "lastActivityDate":"2013-09-08",
    "score":2,
    "viewCount":287,
    "owner":{
      "type":"StackOverflowUser",
      "id":1153917,
      "displayName":"pradipmw",
      "reputation":40
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is it possible to write memory management layer(like dlmalloc()) over sun.misc.Unsafe (allocateMemory() and freeMemory())? <br /> I want to use off-heap storage as cache layer for faster access and want to get rid of GC overheads. <br />Please correct me if i am not on the right path.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18687243]-[-1706858263]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is it possible to write memory management layer(like dlmalloc()) over sun.misc.Unsafe (allocateMemory() and freeMemory())? <br /> I want to use off-heap storage as cache layer for faster access and want to get rid of GC overheads. <br />Please correct me if i am not on the right path.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"allocateMemory",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"freeMemory",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "rid":1,
                  "dlmalloc":1,
                  "faster":1,
                  "cach":1,
                  "alloc":1,
                  "path":1,
                  "correct":1,
                  "sun":1,
                  "overhead":1,
                  "layer":2,
                  "misc":1,
                  "unsaf":1,
                  "heap":1,
                  "manag":1,
                  "storag":1,
                  "write":1,
                  "free":1,
                  "access":1,
                  "memori":3
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18687503,
      "questionId":18687243,
      "comments":[
        
      ],
      "creationDate":"2013-09-08",
      "lastActivityDate":"2013-09-08",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I suggest you have a look at <a href=\"https://github.com/OpenHFT/Java-Lang\"rel=\"nofollow\">https://github.com/OpenHFT/Java-Lang</a> which has support for this, including locking in native memory. It also support 64-bit allocation sizes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18687503]-[-1028631264]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I suggest you have a look at <a href=\"https://github.com/OpenHFT/Java-Lang\"rel=\"nofollow\">https://github.com/OpenHFT/Java-Lang</a> which has support for this, including locking in native memory. It also support 64-bit allocation sizes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":2,
                    "support":2,
                    "bit":1,
                    "alloc":1,
                    "size":1,
                    "suggest":1,
                    "rel":1,
                    "lock":1,
                    "https":2,
                    "open":2,
                    "hft":2,
                    "includ":1,
                    "nofollow":1,
                    "lang":2,
                    "href":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I suspect it won't be faster, or much slower, but the benefit is control over memory layout for cache friendliness, no object headers and no GC pauses.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18687503]-[-1816317214]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I suspect it won't be faster, or much slower, but the benefit is control over memory layout for cache friendliness, no object headers and no GC pauses.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "cach":1,
                    "paus":1,
                    "friendli":1,
                    "object":1,
                    "slower":1,
                    "suspect":1,
                    "header":1,
                    "control":1,
                    "layout":1,
                    "benefit":1,
                    "won":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You might also be interested in <a href=\"https://github.com/OpenHFT/Java-Chronicle\"rel=\"nofollow\">https://github.com/OpenHFT/Java-Chronicle</a> which supports persisted off heap memory which can be shared between processes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18687503]-[931160914]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You might also be interested in <a href=\"https://github.com/OpenHFT/Java-Chronicle\"rel=\"nofollow\">https://github.com/OpenHFT/Java-Chronicle</a> which supports persisted off heap memory which can be shared between processes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "github":2,
                    "support":1,
                    "process":1,
                    "rel":1,
                    "https":2,
                    "open":2,
                    "hft":2,
                    "share":1,
                    "persist":1,
                    "nofollow":1,
                    "interest":1,
                    "heap":1,
                    "href":1,
                    "chronicl":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Both have been released to maven central <a href=\"http://central.maven.org/maven2/net/openhft/\"rel=\"nofollow\">http://central.maven.org/maven2/net/openhft/</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18687503]-[-705299781]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Both have been released to maven central <a href=\"http://central.maven.org/maven2/net/openhft/\"rel=\"nofollow\">http://central.maven.org/maven2/net/openhft/</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "central":3,
                    "net":2,
                    "maven":5,
                    "releas":1,
                    "nofollow":1,
                    "openhft":2,
                    "org":2,
                    "href":1,
                    "http":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}