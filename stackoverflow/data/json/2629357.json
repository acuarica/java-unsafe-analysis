{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2629357,
    "title":"Does Java have Pointers?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":2649884,
        "postId":2629357,
        "creationDate":"2010-04-14",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":22088,
          "displayName":"Vlad Gudim",
          "reputation":10924
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Joachim Sauer, hear hear. It's Sun JVM specific package relying on some native code, it's still part of &quot;Java&quot; as a technology, but as far as Java language concerned there is no way of manipulating memory directly. SF's question was about modules and extensions and this is one of them."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2629357-cu2649884]-[-962617781]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Joachim Sauer, hear hear. It's Sun JVM specific package relying on some native code, it's still part of &quot;Java&quot; as a technology, but as far as Java language concerned there is no way of manipulating memory directly. SF's question was about modules and extensions and this is one of them."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "question":1,
                      "sauer":1,
                      "languag":1,
                      "sun":1,
                      "manipul":1,
                      "concern":1,
                      "hear":2,
                      "direct":1,
                      "code":1,
                      "modul":1,
                      "joachim":1,
                      "specif":1,
                      "quot":2,
                      "reli":1,
                      "part":1,
                      "extens":1,
                      "technolog":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2642875,
        "postId":2629357,
        "creationDate":"2010-04-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":249618,
          "displayName":"SF.",
          "reputation":4805
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"There are multiple posts here that say outright &quot;no, not really&quot;. I wonder - does Java have any mechanisms (in modules/extensions?) to write to memory directly, like old `outb(0x08,0x378);` or the old peek/poke on &quot;small CPUs&quot; like mobile."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2629357-cu2642875]-[-1002320091]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"There are multiple posts here that say outright &quot;no, not really&quot;. I wonder - does Java have any mechanisms (in modules/extensions?) to write to memory directly, like old `outb(0x08,0x378);` or the old peek/poke on &quot;small CPUs&quot; like mobile."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"outb",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0x08"
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0x378"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "post":1,
                      "poke":1,
                      "outright":1,
                      "peek":1,
                      "direct":1,
                      "small":1,
                      "modul":1,
                      "mechan":1,
                      "cpus":1,
                      "quot":4,
                      "outb":1,
                      "multipl":1,
                      "extens":1,
                      "mobil":1,
                      "write":1,
                      "memori":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"outb",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"0x08"
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"0x378"
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2643356,
        "postId":2629357,
        "creationDate":"2010-04-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":22088,
          "displayName":"Vlad Gudim",
          "reputation":10924
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"SF, sun.misc.Unsafe class (http://www.docjar.com/docs/api/sun/misc/Unsafe.html), you're looking for putByte method."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2629357-cu2643356]-[-532587013]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"SF, sun.misc.Unsafe class (http://www.docjar.com/docs/api/sun/misc/Unsafe.html), you're looking for putByte method."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"putByte",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "docjar":1,
                      "sun":2,
                      "doc":1,
                      "misc":2,
                      "put":1,
                      "api":1,
                      "unsaf":2,
                      "html":1,
                      "http":1,
                      "www":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2646380,
        "postId":2629357,
        "creationDate":"2010-04-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":40342,
          "displayName":"Joachim Sauer",
          "reputation":145645
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Totophil: strictly speaking that's not &quot;Java&quot;, because it's not standardized. It's an implementation detail of the Sun JVM (and thus the OpenJDK as well)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2629357-cu2646380]-[-414327924]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Totophil: strictly speaking that's not &quot;Java&quot;, because it's not standardized. It's an implementation detail of the Sun JVM (and thus the OpenJDK as well)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Totophil",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jvm":1,
                      "strict":1,
                      "standard":1,
                      "totophil":1,
                      "sun":1,
                      "open":1,
                      "implement":1,
                      "quot":2,
                      "detail":1,
                      "jdk":1,
                      "speak":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2646390,
        "postId":2629357,
        "creationDate":"2010-04-13",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":40342,
          "displayName":"Joachim Sauer",
          "reputation":145645
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@SF: Java has the ability to call into native (i.e. non-Java) code. That way you can do anything that native code can't, but there's no *direct* hardware-access in Java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2629357-cu2646390]-[665906299]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@SF: Java has the ability to call into native (i.e. non-Java) code. That way you can do anything that native code can't, but there's no *direct* hardware-access in Java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"SF",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "direct":1,
                      "code":2,
                      "hardwar":1,
                      "abil":1,
                      "call":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "pointers"
    ],
    "creationDate":"2010-04-13",
    "lastActivityDate":"2013-06-13",
    "lastEditDate":"2010-04-13",
    "score":20,
    "viewCount":16338,
    "owner":{
      "type":"StackOverflowUser",
      "id":315446,
      "displayName":"aruna",
      "reputation":101
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If Java does not have pointers then what does the the <code>new</code> keyword do in Java?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2629357]-[2027695871]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If Java does not have pointers then what does the the <code>new</code> keyword do in Java?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "keyword":1,
                  "pointer":1,
                  "code":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am confused, please explain.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2629357]-[-54426650]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am confused, please explain.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "explain":1,
                  "confus":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2629758,
      "questionId":2629357,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2650381,
          "postId":2629758,
          "creationDate":"2010-04-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Micro-nitpick: &quot;C++ must maintain compatibilty with C&quot; is not exactly true, there *are* several (small-ish) incompatibilities. &quot;C++ strives to maintain compatibility with C&quot; is more correct."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629758-cu2650381]-[-1964721152]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Micro-nitpick: &quot;C++ must maintain compatibilty with C&quot; is not exactly true, there *are* several (small-ish) incompatibilities. &quot;C++ strives to maintain compatibility with C&quot; is more correct."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "correct":1,
                        "compatibilti":1,
                        "incompat":1,
                        "small":1,
                        "micro":1,
                        "true":1,
                        "ish":1,
                        "quot":4,
                        "strive":1,
                        "nitpick":1,
                        "compat":1,
                        "maintain":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2650391,
          "postId":2629758,
          "creationDate":"2010-04-14",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Not-so-micro nitpick: The &quot;reference to pointer&quot; table that you mention is one possible implementation, but in no way required by the Java specification."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629758-cu2650391]-[-800833734]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Not-so-micro nitpick: The &quot;reference to pointer&quot; table that you mention is one possible implementation, but in no way required by the Java specification."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pointer":1,
                        "requir":1,
                        "tabl":1,
                        "mention":1,
                        "micro":1,
                        "specif":1,
                        "refer":1,
                        "implement":1,
                        "quot":2,
                        "nitpick":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2655137,
          "postId":2629758,
          "creationDate":"2010-04-14",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":302139,
            "displayName":"Edwin Buck",
            "reputation":36608
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"No problem with the nitpicking, yet somehow the reference will eventually have to be turned into an address. A pointer table is the most logical means of doing so, but you're right, other means could exist. The pointer table is not a requirement, but without some sort of a lookup, you're dealing with something generated algorithmically, which hardly will help out with memory compaction."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629758-cu2655137]-[1607097131]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"No problem with the nitpicking, yet somehow the reference will eventually have to be turned into an address. A pointer table is the most logical means of doing so, but you're right, other means could exist. The pointer table is not a requirement, but without some sort of a lookup, you're dealing with something generated algorithmically, which hardly will help out with memory compaction."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "lookup":1,
                        "pointer":2,
                        "exist":1,
                        "problem":1,
                        "requir":1,
                        "mean":2,
                        "eventu":1,
                        "logic":1,
                        "tabl":2,
                        "algorithm":1,
                        "refer":1,
                        "turn":1,
                        "address":1,
                        "generat":1,
                        "sort":1,
                        "nitpick":1,
                        "deal":1,
                        "compact":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19708974,
          "postId":2629758,
          "creationDate":"2013-01-08",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@EdwinBuck: isn't the most logical thing to do just creating a pointer to the pointed-to data? Just update your pointers when you move a pointed-to object during a garbage collection"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629758-cu19708974]-[171444825]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@EdwinBuck: isn't the most logical thing to do just creating a pointer to the pointed-to data? Just update your pointers when you move a pointed-to object during a garbage collection"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"EdwinBuck",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "move":1,
                        "point":2,
                        "pointer":2,
                        "buck":1,
                        "data":1,
                        "updat":1,
                        "thing":1,
                        "logic":1,
                        "object":1,
                        "isn":1,
                        "collect":1,
                        "edwin":1,
                        "creat":1,
                        "garbag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19718545,
          "postId":2629758,
          "creationDate":"2013-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":302139,
            "displayName":"Edwin Buck",
            "reputation":36608
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@jalf It is a logical thing to do, but it is prone to issues. Basically pointer values can be copied into multiple locations, so unless you have some sort of exotic &quot;track each time this pointer's value was copied, and keep a reference of all of those value locations, including tracking if some of those locations are destroyed over time&quot; then you'll update only some of the pointer values (which would be very bad). Actually, you can't really even create such a system; because, some of those values might be passed between programs. With a reference to pointer table, it's in one place only."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629758-cu19718545]-[-510615111]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@jalf It is a logical thing to do, but it is prone to issues. Basically pointer values can be copied into multiple locations, so unless you have some sort of exotic &quot;track each time this pointer's value was copied, and keep a reference of all of those value locations, including tracking if some of those locations are destroyed over time&quot; then you'll update only some of the pointer values (which would be very bad). Actually, you can't really even create such a system; because, some of those values might be passed between programs. With a reference to pointer table, it's in one place only."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "system":1,
                        "pointer":4,
                        "track":2,
                        "updat":1,
                        "bad":1,
                        "thing":1,
                        "issu":1,
                        "prone":1,
                        "logic":1,
                        "includ":1,
                        "tabl":1,
                        "destroy":1,
                        "valu":3,
                        "refer":2,
                        "pass":1,
                        "exot":1,
                        "quot":2,
                        "place":1,
                        "time":2,
                        "sort":1,
                        "basic":1,
                        "jalf":1,
                        "creat":1,
                        "multipl":1,
                        "copi":2,
                        "locat":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":14,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":302139,
        "displayName":"Edwin Buck",
        "reputation":36608
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java doesn't have pointers; Java has references.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[1214293796]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java doesn't have pointers; Java has references.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "refer":1,
                    "pointer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It's a fine point, but a pointer has extra operations that you may (or may not) typically use; a reference lacks these operations because the operations may be unsafe.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[2056785212]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It's a fine point, but a pointer has extra operations that you may (or may not) typically use; a reference lacks these operations because the operations may be unsafe.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "pointer":1,
                    "oper":3,
                    "typic":1,
                    "lack":1,
                    "refer":1,
                    "extra":1,
                    "fine":1,
                    "unsaf":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For example, if you use a pointer to index the first element of an array like so:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[1509878683]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For example, if you use a pointer to index the first element of an array like so:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "index":1,
                    "element":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"int primes[] = {2, 3, 5, 7, 11, 13, 17, 19}; int* intPointer = primes; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2629758]-[-359763683]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"int primes[] = {2, 3, 5, 7, 11, 13, 17, 19}; int* "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"intPointer",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" = primes; "
                  }
                ]
              },
              "rawText":"int primes[] = {2, 3, 5, 7, 11, 13, 17, 19}; int* intPointer = primes; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "prime":2,
                    "pointer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>you may dereference the pointer and get the value &quot;2&quot;, but you may also:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[-1019801038]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>you may dereference the pointer and get the value &quot;2&quot;, but you may also:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "quot":2,
                    "derefer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"intPointer++ "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2629758]-[1548875954]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"intPointer",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"++ "
                  }
                ]
              },
              "rawText":"intPointer++ ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and after you do that, when you dereference the pointer you will get the value &quot;3&quot;. This is because the ++ operation moves the pointer one &quot;unit&quot; ahead in memory.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[-1524731881]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and after you do that, when you dereference the pointer you will get the value &quot;3&quot;. This is because the ++ operation moves the pointer one &quot;unit&quot; ahead in memory.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "move":1,
                    "pointer":2,
                    "derefer":1,
                    "oper":1,
                    "quot":4,
                    "ahead":1,
                    "unit":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The issue comes from the weaknesses in the C / C++ typechecking system (C++ must maintain compatibilty with C, so it allows the same issues). The pointer stores an address in memory and the ++ operation adds the appropriate number of bytes to the address. On many systems ++ing an int adds four bytes, but if the pointer was a char pointer ++ing it should only add one byte. Note that since the underlying data type of a pointer is an address in memory, the following is legal (but not recommended):</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[86530404]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The issue comes from the weaknesses in the C / C++ typechecking system (C++ must maintain compatibilty with C, so it allows the same issues). The pointer stores an address in memory and the ++ operation adds the appropriate number of bytes to the address. On many systems ++ing an int adds four bytes, but if the pointer was a char pointer ++ing it should only add one byte. Note that since the underlying data type of a pointer is an address in memory, the following is legal (but not recommended):</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "recommend":1,
                    "system":2,
                    "pointer":4,
                    "weak":1,
                    "data":1,
                    "compatibilti":1,
                    "store":1,
                    "issu":2,
                    "ing":2,
                    "oper":1,
                    "legal":1,
                    "note":1,
                    "typecheck":1,
                    "address":3,
                    "under":1,
                    "type":1,
                    "add":3,
                    "byte":2,
                    "maintain":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"char* charPointer = primes; charPointer++; void* voidPointer = primes; voidPointer++; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2629758]-[1679756198]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"char* "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"charPointer",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" = primes; "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"PostfixOperatorExpressionNode",
                      "argument":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"charPointer",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"++",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"void* "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"voidPointer",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" = primes; "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"PostfixOperatorExpressionNode",
                      "argument":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"voidPointer",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"++",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "rawText":"char* charPointer = primes; charPointer++; void* voidPointer = primes; voidPointer++; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "prime":2,
                    "pointer":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Since pointers are addresses in memory, they might represent (correctly) any bit of memory in the computer, but they are only properly dereferenced when the underlying data maches the type and alignment of the pointer. For pointers that aren't managed by lots of code to make them safe, this means you might stray off the data type (or alignment) of the desired information and a dereference might end in disaster. Attempting to fix this issue with custom code tends to slow down one pointers badly enough that you notice performance issues, and it opens the doors for adding errors in the custom &quot;pointer management&quot; code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[-298763384]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Since pointers are addresses in memory, they might represent (correctly) any bit of memory in the computer, but they are only properly dereferenced when the underlying data maches the type and alignment of the pointer. For pointers that aren't managed by lots of code to make them safe, this means you might stray off the data type (or alignment) of the desired information and a dereference might end in disaster. Attempting to fix this issue with custom code tends to slow down one pointers badly enough that you notice performance issues, and it opens the doors for adding errors in the custom &quot;pointer management&quot; code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "disast":1,
                    "door":1,
                    "slow":1,
                    "bit":1,
                    "custom":2,
                    "pointer":5,
                    "aren":1,
                    "proper":1,
                    "derefer":1,
                    "dereferenc":1,
                    "align":2,
                    "correct":1,
                    "data":2,
                    "fix":1,
                    "mean":1,
                    "bad":1,
                    "issu":2,
                    "safe":1,
                    "open":1,
                    "code":3,
                    "comput":1,
                    "error":1,
                    "inform":1,
                    "mach":1,
                    "perform":1,
                    "lot":1,
                    "address":1,
                    "stray":1,
                    "make":1,
                    "end":1,
                    "ad":1,
                    "quot":2,
                    "notic":1,
                    "under":1,
                    "desir":1,
                    "attempt":1,
                    "type":2,
                    "manag":2,
                    "repres":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java side steps all of these issues by returning a reference. A reference does not refer to any location in memory; Java maintains an internal &quot;reference to pointer&quot; table. This table takes the reference and returns the data associated with it, wherever that data may reside in memory. This slows down code execution, because two lookups are done for each &quot;dereferencing&quot;, one lookup in the reference table, one in the machine's memory.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[139583663]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java side steps all of these issues by returning a reference. A reference does not refer to any location in memory; Java maintains an internal &quot;reference to pointer&quot; table. This table takes the reference and returns the data associated with it, wherever that data may reside in memory. This slows down code execution, because two lookups are done for each &quot;dereferencing&quot;, one lookup in the reference table, one in the machine's memory.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "side":1,
                    "lookup":2,
                    "resid":1,
                    "slow":1,
                    "step":1,
                    "pointer":1,
                    "return":2,
                    "dereferenc":1,
                    "data":2,
                    "issu":1,
                    "code":1,
                    "tabl":3,
                    "take":1,
                    "machin":1,
                    "refer":6,
                    "quot":4,
                    "intern":1,
                    "locat":1,
                    "execut":1,
                    "maintain":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A big advantage of Java using references is that the memory can be moved around without breaking the would-be pointer addresses. In a C program, if you move data into a new memory location, it is very difficult to know whether some other part of the program has a pointer to the data. Should a stale pointer be dereferenced after the memory is moved, the program will be accessing corrupt data, and typically a crash will be shortcoming.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[-208944949]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A big advantage of Java using references is that the memory can be moved around without breaking the would-be pointer addresses. In a C program, if you move data into a new memory location, it is very difficult to know whether some other part of the program has a pointer to the data. Should a stale pointer be dereferenced after the memory is moved, the program will be accessing corrupt data, and typically a crash will be shortcoming.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":3,
                    "move":3,
                    "break":1,
                    "pointer":3,
                    "big":1,
                    "dereferenc":1,
                    "crash":1,
                    "shortcom":1,
                    "data":3,
                    "difficult":1,
                    "advantag":1,
                    "typic":1,
                    "refer":1,
                    "address":1,
                    "part":1,
                    "stale":1,
                    "corrupt":1,
                    "locat":1,
                    "access":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Ability to move the memory around in a running program allows programs to easily recycle memory. Any program which doesn't need chunks of memory can release the unused memory, but this creates memory holes of unused memory in between chunks of used memory. Internally computers use pages of memory, which are quite large. If a sparsely used page of memory could have the few used bits moved into another page, then a page of memory can be freed. This increases the density of data to memory, improving cache performance. Sometimes this translates into performance improvements that can be quite dramatic.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[2030021077]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Ability to move the memory around in a running program allows programs to easily recycle memory. Any program which doesn't need chunks of memory can release the unused memory, but this creates memory holes of unused memory in between chunks of used memory. Internally computers use pages of memory, which are quite large. If a sparsely used page of memory could have the few used bits moved into another page, then a page of memory can be freed. This increases the density of data to memory, improving cache performance. Sometimes this translates into performance improvements that can be quite dramatic.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "spars":1,
                    "unus":2,
                    "program":3,
                    "chunk":2,
                    "move":2,
                    "dramat":1,
                    "cach":1,
                    "densiti":1,
                    "bit":1,
                    "run":1,
                    "data":1,
                    "page":4,
                    "recycl":1,
                    "improv":2,
                    "easili":1,
                    "larg":1,
                    "releas":1,
                    "comput":1,
                    "translat":1,
                    "perform":2,
                    "freed":1,
                    "increas":1,
                    "abil":1,
                    "hole":1,
                    "creat":1,
                    "intern":1,
                    "memori":11
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java's Garbage Collector takes advantage of the use of references by temporarily blocking access to the data for a set of references. During that blockage of access, it moves the data around (to compact it). After the blockage, the reference to address table has the new memory addresses. Since the &quot;functional&quot; layer of the code never knew the addresses in the first place, this operation will not break a running Java program.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629758]-[-1026932637]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java's Garbage Collector takes advantage of the use of references by temporarily blocking access to the data for a set of references. During that blockage of access, it moves the data around (to compact it). After the blockage, the reference to address table has the new memory addresses. Since the &quot;functional&quot; layer of the code never knew the addresses in the first place, this operation will not break a running Java program.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "temporarili":1,
                    "blockag":2,
                    "collector":1,
                    "move":1,
                    "run":1,
                    "data":2,
                    "set":1,
                    "knew":1,
                    "code":1,
                    "oper":1,
                    "layer":1,
                    "tabl":1,
                    "block":1,
                    "advantag":1,
                    "take":1,
                    "function":1,
                    "refer":3,
                    "address":3,
                    "quot":2,
                    "place":1,
                    "garbag":1,
                    "compact":1,
                    "access":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629542,
      "questionId":2629357,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2644629,
          "postId":2629542,
          "creationDate":"2010-04-13",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":19276,
            "displayName":"DJClayworth",
            "reputation":12633
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"'this' is no more a pointer than any other variable. It simply allows an explicit reference to the current object."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629542-cu2644629]-[-1451990520]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"'this' is no more a pointer than any other variable. It simply allows an explicit reference to the current object."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pointer":1,
                        "object":1,
                        "simpli":1,
                        "refer":1,
                        "variabl":1,
                        "explicit":1,
                        "current":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":-1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":315459,
        "displayName":"user315459",
        "reputation":49
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In java we come across only THIS pointer, it is used to refer the variables of same class. The operator new is used as reference to an object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629542]-[-1555071180]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In java we come across only THIS pointer, it is used to refer the variables of same class. The operator new is used as reference to an object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "object":1,
                    "oper":1,
                    "refer":2,
                    "variabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629371,
      "questionId":2629357,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2642497,
          "postId":2629371,
          "creationDate":"2010-04-13",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":40342,
            "displayName":"Joachim Sauer",
            "reputation":145645
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;direct manipulation&quot; is kind of in-precise: Assignment of another value (= another reference) is possible, but pointer arithmetics (i.e. adding 1 to the pointer) is not possible."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629371-cu2642497]-[1685547142]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;direct manipulation&quot; is kind of in-precise: Assignment of another value (= another reference) is possible, but pointer arithmetics (i.e. adding 1 to the pointer) is not possible."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":1,
                        "pointer":2,
                        "manipul":1,
                        "assign":1,
                        "direct":1,
                        "arithmet":1,
                        "refer":1,
                        "ad":1,
                        "quot":2,
                        "kind":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2642785,
          "postId":2629371,
          "creationDate":"2010-04-13",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":287300,
            "displayName":"Syntactic",
            "reputation":4378
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Good point. Fixed."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629371-cu2642785]-[1311970073]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Good point. Fixed."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "fix":1,
                        "good":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "lastEditDate":"2010-04-13",
      "score":7,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":287300,
        "displayName":"Syntactic",
        "reputation":4378
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java has pointers in the sense of variables that store references to data in memory. All variables of Object types in Java are pointers in this sense.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629371]-[-2049339099]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java has pointers in the sense of variables that store references to data in memory. All variables of Object types in Java are pointers in this sense.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":2,
                    "pointer":2,
                    "data":1,
                    "store":1,
                    "object":1,
                    "refer":1,
                    "type":1,
                    "variabl":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, the Java language does not allow arithmetic operations on the values of pointers, like you'd be able to do in a language like C.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629371]-[-1874643986]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, the Java language does not allow arithmetic operations on the values of pointers, like you'd be able to do in a language like C.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":2,
                    "pointer":1,
                    "oper":1,
                    "arithmet":1,
                    "valu":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629375,
      "questionId":2629357,
      "comments":[
        
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":283676,
        "displayName":"Andrey",
        "reputation":39144
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>new returns reference. it has some similarities with pointers (if you pass to function, reference is passed, same as with pointer), but there is no pointer arithmetics.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629375]-[1106585908]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>new returns reference. it has some similarities with pointers (if you pass to function, reference is passed, same as with pointer), but there is no pointer arithmetics.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":3,
                    "similar":1,
                    "return":1,
                    "arithmet":1,
                    "function":1,
                    "refer":2,
                    "pass":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629444,
      "questionId":2629357,
      "comments":[
        
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":277516,
        "displayName":"Venkat",
        "reputation":4045
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java Does not have Pointers. The operator &quot;new&quot; is used to the reference variable in java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629444]-[-1333104153]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java Does not have Pointers. The operator &quot;new&quot; is used to the reference variable in java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "oper":1,
                    "refer":1,
                    "quot":2,
                    "variabl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629374,
      "questionId":2629357,
      "comments":[
        
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":227665,
        "displayName":"codaddict",
        "reputation":176646
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>new</code> in Java returns a <strong><em>reference</em></strong> to the newly created object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629374]-[-1824157188]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>new</code> in Java returns a <strong><em>reference</em></strong> to the newly created object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "strong":2,
                    "object":1,
                    "code":2,
                    "newli":1,
                    "refer":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629377,
      "questionId":2629357,
      "comments":[
        
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":28169,
        "displayName":"unwind",
        "reputation":204066
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java has references. All objects are accessed through having references to their instances. You create a new instance using <code>new</code>, which returns a reference to the object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629377]-[1377064331]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java has references. All objects are accessed through having references to their instances. You create a new instance using <code>new</code>, which returns a reference to the object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "object":2,
                    "code":2,
                    "refer":3,
                    "creat":1,
                    "instanc":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Java references are not like pointers in C, you cannot &quot;look under the hood&quot; at the raw memory that makes up the object.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629377]-[2125375191]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Java references are not like pointers in C, you cannot &quot;look under the hood&quot; at the raw memory that makes up the object.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "object":1,
                    "hood":1,
                    "raw":1,
                    "refer":1,
                    "make":1,
                    "quot":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629393,
      "questionId":2629357,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2642448,
          "postId":2629393,
          "creationDate":"2010-04-13",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Actually, at the implementation level, references usually *are* pointers to the memory containing the object. HOWEVER, there is no way that a regular Java program can &quot;look behind the curtain&quot; and use references as C-like pointers."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu2642448]-[1177313642]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Actually, at the implementation level, references usually *are* pointers to the memory containing the object. HOWEVER, there is no way that a regular Java program can &quot;look behind the curtain&quot; and use references as C-like pointers."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "pointer":2,
                        "curtain":1,
                        "regular":1,
                        "object":1,
                        "refer":2,
                        "implement":1,
                        "quot":2,
                        "level":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2642468,
          "postId":2629393,
          "creationDate":"2010-04-13",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":12960,
            "displayName":"Brian Agnew",
            "reputation":154342
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you post a reference to the above ? Given that the JVM can move objects at will, and maintain its references, I would suspect that at the least, a reference would be a pointer to a pointer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu2642468]-[1608213371]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you post a reference to the above ? Given that the JVM can move objects at will, and maintain its references, I would suspect that at the least, a reference would be a pointer to a pointer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "post":1,
                        "move":1,
                        "pointer":2,
                        "object":1,
                        "refer":3,
                        "suspect":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2642901,
          "postId":2629393,
          "creationDate":"2010-04-13",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":24582,
            "displayName":"extraneon",
            "reputation":13857
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"There actually is one famous pointer, the NullPointer, which in my applications seems to be married to Exception :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu2642901]-[529430945]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"There actually is one famous pointer, the NullPointer, which in my applications seems to be married to Exception :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NullPointer",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "marri":1,
                        "famous":1,
                        "applic":1,
                        "pointer":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"NullPointer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":16014790,
          "postId":2629393,
          "creationDate":"2012-08-17",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@BrianAgnew: that would be very inefficient. When objects are moved, the JVM just updates all references pointing to it. (which is not as suicidally expensive as it sounds)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu16014790]-[-481036515]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@BrianAgnew: that would be very inefficient. When objects are moved, the JVM just updates all references pointing to it. (which is not as suicidally expensive as it sounds)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"BrianAgnew",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "move":1,
                        "point":1,
                        "agnew":1,
                        "brian":1,
                        "updat":1,
                        "object":1,
                        "suicid":1,
                        "sound":1,
                        "refer":1,
                        "ineffici":1,
                        "expens":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19708769,
          "postId":2629393,
          "creationDate":"2013-01-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@BrianAgnew: No, I do not. But if you look up a basic textbook on compiler implementations, and if you skip to the chapter on garbage collectors, you will see this described as the only sane thing to do. And I see no reason to believe that the JVM team would have chosen a *less* efficient solution than that which is described in a compiler implementation 101 textbook for second-year CS students... :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu19708769]-[2031760694]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@BrianAgnew: No, I do not. But if you look up a basic textbook on compiler implementations, and if you skip to the chapter on garbage collectors, you will see this described as the only sane thing to do. And I see no reason to believe that the JVM team would have chosen a *less* efficient solution than that which is described in a compiler implementation 101 textbook for second-year CS students... :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"BrianAgnew",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "collector":1,
                        "student":1,
                        "agnew":1,
                        "brian":1,
                        "effici":1,
                        "thing":1,
                        "year":1,
                        "skip":1,
                        "reason":1,
                        "chosen":1,
                        "chapter":1,
                        "team":1,
                        "implement":2,
                        "textbook":2,
                        "compil":2,
                        "basic":1,
                        "sane":1,
                        "solut":1,
                        "garbag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19698211,
          "postId":2629393,
          "creationDate":"2013-01-07",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":12960,
            "displayName":"Brian Agnew",
            "reputation":154342
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@jalf - Interesting. Do you have a reference for that behaviour?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu19698211]-[-1526940378]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@jalf - Interesting. Do you have a reference for that behaviour?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "refer":1,
                        "interest":1,
                        "jalf":1,
                        "behaviour":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26827623,
          "postId":2629393,
          "creationDate":"2013-08-17",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@EJP did you by any chance read your &quot;reference&quot;? Because it says &quot;Managed pointers in the Java heap point to objects which are aligned on 8-byte address boundaries&quot;, which is precisely what I said: Java pointers/references point directly to objects on the heap. It is up to the GC to then keep them in sync if/when it moves an object. And no, I am sorry to burst your bubble, but it is not &quot;incumbent on me&quot; to teach you how compilers work. I... don't... care. If you want to believe that the designers of the JVM *wanted* to make it slower than necessary, feel free. Not. My. Problem."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26827623]-[704546096]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@EJP did you by any chance read your &quot;reference&quot;? Because it says &quot;Managed pointers in the Java heap point to objects which are aligned on 8-byte address boundaries&quot;, which is precisely what I said: Java pointers/references point directly to objects on the heap. It is up to the GC to then keep them in sync if/when it moves an object. And no, I am sorry to burst your bubble, but it is not &quot;incumbent on me&quot; to teach you how compilers work. I... don't... care. If you want to believe that the designers of the JVM *wanted* to make it slower than necessary, feel free. Not. My. Problem."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"EJP",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":1,
                        "read":1,
                        "jvm":1,
                        "feel":1,
                        "move":1,
                        "design":1,
                        "point":2,
                        "want":1,
                        "pointer":2,
                        "teach":1,
                        "bubbl":1,
                        "problem":1,
                        "align":1,
                        "burst":1,
                        "care":1,
                        "work":1,
                        "object":3,
                        "direct":1,
                        "boundari":1,
                        "slower":1,
                        "incumb":1,
                        "refer":2,
                        "sync":1,
                        "address":1,
                        "make":1,
                        "quot":6,
                        "compil":1,
                        "heap":2,
                        "manag":1,
                        "chanc":1,
                        "free":1,
                        "ejp":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26787470,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":207421,
            "displayName":"EJP",
            "reputation":133851
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@jalf This is mere handwaving. Either you actually have a reference that actually says this, in which case you should post it as requested, or you don't, which leaves room for the conclusion that you are making it up. I just looked up both my compiler implementation 101 books, one of which is Aho, Sethi, &amp; Ullman, and neither of them says any such thing. The existence of language like 'managed pointer' and 'compressed oops' in the JVM documents clearly indicates that object references are anything but straight pointers."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26787470]-[1972324736]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@jalf This is mere handwaving. Either you actually have a reference that actually says this, in which case you should post it as requested, or you don't, which leaves room for the conclusion that you are making it up. I just looked up both my compiler implementation 101 books, one of which is Aho, Sethi, &amp; Ullman, and neither of them says any such thing. The existence of language like 'managed pointer' and 'compressed oops' in the JVM documents clearly indicates that object references are anything but straight pointers."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "aho":1,
                        "jvm":1,
                        "handwav":1,
                        "post":1,
                        "ullman":1,
                        "mere":1,
                        "languag":1,
                        "oop":1,
                        "request":1,
                        "pointer":2,
                        "exist":1,
                        "document":1,
                        "book":1,
                        "look":1,
                        "thing":1,
                        "amp":1,
                        "leav":1,
                        "object":1,
                        "conclus":1,
                        "compress":1,
                        "refer":2,
                        "implement":1,
                        "sethi":1,
                        "make":1,
                        "compil":1,
                        "room":1,
                        "straight":1,
                        "manag":1,
                        "jalf":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26796028,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":12960,
            "displayName":"Brian Agnew",
            "reputation":154342
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Downvoted why ?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26796028]-[-1710005505]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Downvoted why ?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "downvot":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26796118,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":12960,
            "displayName":"Brian Agnew",
            "reputation":154342
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@jalf - I'm not doubting you particularly, but would just like to find some reference that *actually* describes what's going on"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26796118]-[-1639846836]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@jalf - I'm not doubting you particularly, but would just like to find some reference that *actually* describes what's going on"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "doubt":1,
                        "refer":1,
                        "jalf":1,
                        "describ":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26793679,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@EJP so perhaps **you** have a source for your own handwaving claim that teh JVM uses an eedlessly inefficient implementation of references? Because otherwise it leaves room for the conclusion that you are making it up. I don't quite understand why you think a citation is needed for the claim that &quot;because there is a more efficient approach, the JVM obviously uses it&quot;, but the claim that &quot;despite an alternative easily implementable and more efficient approach, JVM chooses to implement the inferior naive approach&quot;"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26793679]-[188507779]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@EJP so perhaps **you** have a source for your own handwaving claim that teh JVM uses an eedlessly inefficient implementation of references? Because otherwise it leaves room for the conclusion that you are making it up. I don't quite understand why you think a citation is needed for the claim that &quot;because there is a more efficient approach, the JVM obviously uses it&quot;, but the claim that &quot;despite an alternative easily implementable and more efficient approach, JVM chooses to implement the inferior naive approach&quot;"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"EJP",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "naiv":1,
                        "jvm":3,
                        "handwav":1,
                        "claim":3,
                        "teh":1,
                        "understand":1,
                        "effici":2,
                        "inferior":1,
                        "altern":1,
                        "leav":1,
                        "easili":1,
                        "conclus":1,
                        "need":1,
                        "citat":1,
                        "refer":1,
                        "implement":3,
                        "make":1,
                        "ineffici":1,
                        "approach":3,
                        "quot":4,
                        "choos":1,
                        "room":1,
                        "sourc":1,
                        "eedless":1,
                        "ejp":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26793783,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":33213,
            "displayName":"jalf",
            "reputation":153750
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@EJP I have no clue what &quot;compressed oops&quot; means, but &quot;managed pointer&quot; simply means &quot;a pointer whose value is managed by the runtime&quot; (as I said, by updating the pointer's value if and when the object it points to is moved). Do you have a reference saying that &quot;a managed pointer is a pointer to a pointer&quot;?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26793783]-[-1125009031]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@EJP I have no clue what &quot;compressed oops&quot; means, but &quot;managed pointer&quot; simply means &quot;a pointer whose value is managed by the runtime&quot; (as I said, by updating the pointer's value if and when the object it points to is moved). Do you have a reference saying that &quot;a managed pointer is a pointer to a pointer&quot;?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"EJP",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "move":1,
                        "oop":1,
                        "point":1,
                        "runtim":1,
                        "pointer":6,
                        "updat":1,
                        "mean":2,
                        "object":1,
                        "simpli":1,
                        "compress":1,
                        "refer":1,
                        "quot":8,
                        "manag":3,
                        "clue":1,
                        "ejp":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26798676,
          "postId":2629393,
          "creationDate":"2013-08-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":207421,
            "displayName":"EJP",
            "reputation":133851
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@jalf [My reference](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html). However (1) I didn't say &quot;a managed pointer is a pointer to a pointer&quot; (although what else a 'managed pointer' could be is another question); (2) it is still incumbent on you to provide any reference at all that (a) satisfies your description &quot;a compiler implementation 101 textbook for second-year CS students&quot; and (b) supports your claim. I looked up the best-known one and didn't find it. These are your statements. Support them."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2629393-cu26798676]-[578544241]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@jalf [My reference](http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html). However (1) I didn't say &quot;a managed pointer is a pointer to a pointer&quot; (although what else a 'managed pointer' could be is another question); (2) it is still incumbent on you to provide any reference at all that (a) satisfies your description &quot;a compiler implementation 101 textbook for second-year CS students&quot; and (b) supports your claim. I looked up the best-known one and didn't find it. These are your statements. Support them."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "support":2,
                        "provid":1,
                        "question":1,
                        "descript":1,
                        "claim":1,
                        "student":1,
                        "pointer":4,
                        "guid":1,
                        "satisfi":1,
                        "look":1,
                        "oracl":1,
                        "year":1,
                        "statement":1,
                        "doc":2,
                        "technot":1,
                        "incumb":1,
                        "enhanc":1,
                        "perform":1,
                        "refer":2,
                        "implement":1,
                        "javas":1,
                        "quot":4,
                        "textbook":1,
                        "compil":1,
                        "html":1,
                        "manag":2,
                        "jalf":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":25,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":12960,
        "displayName":"Brian Agnew",
        "reputation":154342
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As pointed out, Java has references. How are these different ?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629393]-[1882661231]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As pointed out, Java has references. How are these different ?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "refer":1,
                    "point":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>you can't perform arithmetic or other such operations on these</li> \n <li>they <em>do not point to the memory containing the object</em> (i.e. they are not pointers by another name). The JVM is at liberty to move objects around within the VM memory, and most likely will do during garbage collection. The references however still point to that object, despite its movement within memory.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629393]-[617332320]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>you can't perform arithmetic or other such operations on these</li> \n <li>they <em>do not point to the memory containing the object</em> (i.e. they are not pointers by another name). The JVM is at liberty to move objects around within the VM memory, and most likely will do during garbage collection. The references however still point to that object, despite its movement within memory.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "move":1,
                    "point":2,
                    "liberti":1,
                    "pointer":1,
                    "object":3,
                    "oper":1,
                    "arithmet":1,
                    "perform":1,
                    "refer":1,
                    "movement":1,
                    "collect":1,
                    "garbag":1,
                    "memori":3
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So they're not like C++ references (pointing directly to an object). Perhaps a better name would be <em>handle</em>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629393]-[-848091068]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So they're not like C++ references (pointing directly to an object). Perhaps a better name would be <em>handle</em>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "object":1,
                    "direct":1,
                    "refer":1,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2629545,
      "questionId":2629357,
      "comments":[
        
      ],
      "creationDate":"2010-04-13",
      "lastActivityDate":"2010-04-13",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":79439,
        "displayName":"thecoop",
        "reputation":25359
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>new</code> does (roughly) the following:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629545]-[-359741902]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>new</code> does (roughly) the following:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rough":1,
                    "code":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Find a contiguous free block of heap memory equal to the instance size of the class you're creating, plus some space for bookkeeping</li> \n <li>Zero said space &amp; remove it from the free list</li> \n <li>Run the constructor</li> \n <li>Return a reference (NOT a pointer, as other posts have explained) to the created instance.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2629545]-[-271564283]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Find a contiguous free block of heap memory equal to the instance size of the class you're creating, plus some space for bookkeeping</li> \n <li>Zero said space &amp; remove it from the free list</li> \n <li>Run the constructor</li> \n <li>Return a reference (NOT a pointer, as other posts have explained) to the created instance.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"you",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "post":1,
                    "remov":1,
                    "size":1,
                    "pointer":1,
                    "explain":1,
                    "contigu":1,
                    "run":1,
                    "constructor":1,
                    "amp":1,
                    "block":1,
                    "equal":1,
                    "space":2,
                    "refer":1,
                    "heap":1,
                    "creat":2,
                    "bookkeep":1,
                    "free":2,
                    "list":1,
                    "instanc":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}